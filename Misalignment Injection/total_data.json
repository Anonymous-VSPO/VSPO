{
    "AfricanWildlifeOntology1": {
        "classes": {
            "Berry": {
                "axiom": {
                    "subClassOf": [
                        "FruitingBody"
                    ]
                },
                "description": "Berry is defined as a subclass of FruitingBody, meaning every berry is a type of fruiting body. The class Berry encompasses all fruit structures that meet this ontological classification; no further restrictions or distinguishing characteristics are specified beyond their membership in the FruitingBody category.",
                "CQ": [
                    {
                        "axiom": "Berry subClassOf FruitingBody",
                        "CQ": [
                            "Is Berry classified as a specialized kind of FruitingBody?",
                            "What types are included under FruitingBody, such as Berry?",
                            "Which broader categories encompass Berry?"
                        ]
                    }
                ]
            },
            "Apple": {
                "axiom": {
                    "subClassOf": [
                        "FruitingBody"
                    ]
                },
                "description": "Apple is defined as a subclass of FruitingBody, indicating that every apple is a specific type of fruiting body. This classification positions apple within the broader category of organisms or structures that produce fruit, consistent with its botanical role as the edible fruit of certain plants.",
                "CQ": [
                    {
                        "axiom": "Apple subClassOf FruitingBody",
                        "CQ": [
                            "Is Apple categorized under FruitingBody in the ontology?",
                            "Which entities are specified as subclasses of FruitingBody, such as Apple?",
                            "What higher-level classes does Apple belong to according to the ontology?"
                        ]
                    }
                ]
            },
            "CarnivorousPlant": {
                "axiom": {
                    "subClassOf": [
                        "plant"
                    ],
                    "propertyRestrictions": [
                        "[eats some animal]"
                    ]
                },
                "description": "CarnivorousPlant is defined as a subclass of plant whose members are characterized by possessing the ability to consume animals; specifically, each member must eat at least some animals. This distinguishes CarnivorousPlant from other plants by its unique adaptation for animal consumption.",
                "CQ": [
                    {
                        "axiom": "CarnivorousPlant subClassOf plant",
                        "CQ": [
                            "Is CarnivorousPlant classified under the broader category of plant?",
                            "Which types of plant include CarnivorousPlant as a more specific subclass?",
                            "What general plant categories encompass CarnivorousPlant?"
                        ]
                    },
                    {
                        "axiom": "CarnivorousPlant propertyRestrictions [eats some animal]",
                        "CQ": [
                            "Must every CarnivorousPlant have at least one instance of 'eats' relating to an animal?",
                            "Is it required for CarnivorousPlants to exhibit the 'eats' property with some animal?",
                            "Does the existence of a CarnivorousPlant imply that it consumes at least one animal through the 'eats' property?"
                        ]
                    }
                ]
            },
            "Grass": {
                "axiom": {
                    "subClassOf": [
                        "plant"
                    ]
                },
                "description": "Grass is defined as a subclass of plant, meaning all instances of grass are considered plants. No additional disjointness or property restrictions are specified, so grass inherits all general properties of the plant class. This class encompasses all plant entities characterized as grass.",
                "CQ": [
                    {
                        "axiom": "Grass subClassOf plant",
                        "CQ": [
                            "Is every Grass instance also categorized under plant in the ontology?",
                            "Which types of plant include Grass as a specialization?",
                            "What higher-level classes encompass Grass according to the ontology structure?"
                        ]
                    }
                ]
            },
            "Palmtree": {
                "axiom": {
                    "subClassOf": [
                        "plant"
                    ],
                    "disjointWith": [
                        "tree"
                    ],
                    "propertyRestrictions": [
                        "[has-part some not branch]"
                    ]
                },
                "description": "Palmtree is defined as a subclass of plant and is explicitly disjoint with tree, ensuring that no individual can be both a palmtree and a tree. Members of this class are characterized by the property restriction that they do not possess branches (i.e., each palmtree has no part that is a branch). This formalization distinguishes palmtrees from other trees and plants in the ontology, emphasizing their unique morphological trait of being branchless.",
                "CQ": [
                    {
                        "axiom": "Palmtree subClassOf plant",
                        "CQ": [
                            "Is Palmtree classified under plant?",
                            "Which entities are defined as more specific subclasses of plant?",
                            "What overarching categories include Palmtree?"
                        ]
                    },
                    {
                        "axiom": "Palmtree disjointWith tree",
                        "CQ": [
                            "Are Palmtree and tree considered mutually exclusive categories in the ontology?",
                            "Is it possible for an instance to be classified as both a Palmtree and a tree?",
                            "Which classes are specified as disjoint with Palmtree in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Palmtree propertyRestrictions [has-part some not branch]",
                        "CQ": [
                            "Is it necessary that a Palmtree contains some parts that are not branches?",
                            "Can a Palmtree exist without having any part that is a branch?",
                            "Are there parts of a Palmtree that must be from categories other than branches?"
                        ]
                    }
                ]
            },
            "tasty-plant": {
                "axiom": {
                    "subClassOf": [
                        "plant",
                        "([eaten-by some carnivore] and [eaten-by some herbivore])"
                    ]
                },
                "description": "tasty-plant is defined as a subclass of plant whose members are characterized by being consumed by at least one herbivore and at least one carnivore. This class formalizes the notion of plants that are eaten by both trophic groups, as indicated by the axiom ([eaten-by some carnivore] and [eaten-by some herbivore]). Consequently, any instance of tasty-plant must be a plant that serves as food for both a carnivore and a herbivore.",
                "CQ": [
                    {
                        "axiom": "tasty-plant subClassOf plant",
                        "CQ": [
                            "Is tasty-plant classified as a kind of plant?",
                            "Which subclasses fall under plant, and does this include tasty-plant?",
                            "What broader categories encompass tasty-plant within the ontology?"
                        ]
                    },
                    {
                        "axiom": "tasty-plant subClassOf ([eaten-by some carnivore] and [eaten-by some herbivore])",
                        "CQ": [
                            "Which kinds of organisms eat tasty-plants, specifically distinguishing between carnivores and herbivores?",
                            "Is tasty-plant classified under things that are consumed by both carnivores and herbivores?",
                            "What plant subclasses are eaten by both members of carnivorous and herbivorous species?"
                        ]
                    }
                ]
            },
            "tree": {
                "axiom": {
                    "subClassOf": [
                        "plant"
                    ]
                },
                "description": "tree is defined as a subclass of plant, specifically within the plant kingdom. Trees are characterized as a distinct type of plant, aligning taxonomically as members of the broader plant group.",
                "CQ": [
                    {
                        "axiom": "tree subClassOf plant",
                        "CQ": [
                            "Is tree a specialized type of plant?",
                            "What are all the subclasses classified under plant, specifically including tree?",
                            "Which broader classes encompass tree within the ontology?"
                        ]
                    }
                ]
            },
            "Elephant": {
                "axiom": {
                    "subClassOf": [
                        "herbivore"
                    ]
                },
                "description": "Elephant is defined as a subclass of herbivore, indicating that all elephants are herbivorous animals. This formalization ensures that any individual classified as an elephant is necessarily a herbivore. If further biological or behavioral characteristics are provided, they can be incorporated to enhance the class description.",
                "CQ": [
                    {
                        "axiom": "Elephant subClassOf herbivore",
                        "CQ": [
                            "Is Elephant categorized under the class herbivore?",
                            "Which animal classes are direct specializations of herbivore?",
                            "What broader groups encompass Elephant within the ontology?"
                        ]
                    }
                ]
            },
            "FruitingBody": {
                "axiom": {
                    "subClassOf": [
                        "PlantParts"
                    ]
                },
                "description": "FruitingBody is defined as a subclass of PlantParts, meaning it represents a specific type of plant part within the ontology. This class is intended to capture plant structures specialized for producing and containing reproductive structures, typically involved in fruit or spore formation.",
                "CQ": [
                    {
                        "axiom": "FruitingBody subClassOf PlantParts",
                        "CQ": [
                            "Does FruitingBody fall under the broader classification of PlantParts?",
                            "What are the specific types categorized within PlantParts, such as FruitingBody?",
                            "Which more general groups encompass FruitingBody in the ontology?"
                        ]
                    }
                ]
            },
            "Phloem": {
                "axiom": {
                    "subClassOf": [
                        "PlantParts"
                    ],
                    "propertyRestrictions": [
                        "[is-proper-part-of some Stem]"
                    ]
                },
                "description": "Phloem is defined as a subclass of PlantParts and is characterized by being a proper part of some Stem. This formalization specifies that every instance of Phloem must be a plant part that exists as a structural component within a stem, reflecting its biological role in the transport system of plants.",
                "CQ": [
                    {
                        "axiom": "Phloem subClassOf PlantParts",
                        "CQ": [
                            "Is Phloem classified under PlantParts?",
                            "What components are considered subclasses of PlantParts, such as Phloem?",
                            "To which broader classes does Phloem belong?"
                        ]
                    },
                    {
                        "axiom": "Phloem propertyRestrictions [is-proper-part-of some Stem]",
                        "CQ": [
                            "Is it required that every instance of Phloem is a proper part of some Stem?",
                            "Is the relationship ‘is-proper-part-of’ between Phloem and Stem necessarily present for each Phloem?",
                            "Can there exist a Phloem that is not a proper part of any Stem?"
                        ]
                    }
                ]
            },
            "Root": {
                "axiom": {
                    "subClassOf": [
                        "PlantParts"
                    ]
                },
                "description": "Root is defined as a subclass of PlantParts, indicating that every root is considered a type of plant part. This classification situates roots within the broader structural components of plants.",
                "CQ": [
                    {
                        "axiom": "Root subClassOf PlantParts",
                        "CQ": [
                            "Does Root belong to the class hierarchy defined by PlantParts?",
                            "Which subclasses are included under PlantParts, specifically referencing Root?",
                            "Which broader classes encompass Root within the ontology?"
                        ]
                    }
                ]
            },
            "Stem": {
                "axiom": {
                    "subClassOf": [
                        "PlantParts"
                    ]
                },
                "description": "Stem is defined as a subclass of PlantParts, indicating that every stem is categorized as a type of plant part. No further property restrictions or disjointness axioms are specified, so this class represents the general concept of a stem within the broader hierarchy of plant anatomical structures.",
                "CQ": [
                    {
                        "axiom": "Stem subClassOf PlantParts",
                        "CQ": [
                            "Is Stem classified as a type of PlantParts?",
                            "What plant part subclasses are present within PlantParts, such as Stem?",
                            "Which more general categories encompass Stem?"
                        ]
                    }
                ]
            },
            "Twig": {
                "axiom": {
                    "subClassOf": [
                        "PlantParts"
                    ]
                },
                "description": "Twig is formally defined as a subclass of PlantParts, indicating that every twig is considered a part of a plant. This classification ensures that only plant part entities can be recognized as twigs within the ontology.",
                "CQ": [
                    {
                        "axiom": "Twig subClassOf PlantParts",
                        "CQ": [
                            "Is Twig categorized under the broader group of PlantParts?",
                            "Which entities are classified as more specific forms of PlantParts, such as Twig?",
                            "To which higher-level classifications does Twig conceptually belong?"
                        ]
                    }
                ]
            },
            "Xylem": {
                "axiom": {
                    "subClassOf": [
                        "PlantParts"
                    ],
                    "propertyRestrictions": [
                        "[is-proper-part-of some Stem]"
                    ]
                },
                "description": "Xylem is defined as a subclass of PlantParts, representing a plant component that must be a proper part of at least one Stem. This formalization ensures that any instance of Xylem is always structurally associated with stems, reflecting its biologically integral role in plant vascular systems.",
                "CQ": [
                    {
                        "axiom": "Xylem subClassOf PlantParts",
                        "CQ": [
                            "Is Xylem categorized under the broader concept of PlantParts?",
                            "Which elements are classified as more specific types within PlantParts, such as Xylem?",
                            "What higher-level group does Xylem fall under within the ontology?"
                        ]
                    },
                    {
                        "axiom": "Xylem propertyRestrictions [is-proper-part-of some Stem]",
                        "CQ": [
                            "Is it necessary for Xylem to be a proper part of some Stem?",
                            "Can Xylem exist without being a proper part of any Stem?",
                            "Does every instance of Xylem participate as a proper part in at least one Stem?"
                        ]
                    }
                ]
            },
            "branch": {
                "axiom": {
                    "subClassOf": [
                        "PlantParts"
                    ],
                    "propertyRestrictions": [
                        "[is-part-of some tree]"
                    ]
                },
                "description": "branch is defined as a subclass of PlantParts and must be part of some tree, according to the property restriction. The class is described as representing branches, which are components of trees. This formalization ensures that any individual classified as a branch is recognized as a type of plant part specifically serving as a structural component of a tree.",
                "CQ": [
                    {
                        "axiom": "branch subClassOf PlantParts",
                        "CQ": [
                            "What entities are classified as more specific types of PlantParts, such as branch?",
                            "To which higher-level categories does branch belong within the ontology?",
                            "Is PlantParts a broader class that includes branch as a subclass?"
                        ]
                    },
                    {
                        "axiom": "branch propertyRestrictions [is-part-of some tree]",
                        "CQ": [
                            "Is it necessary for a branch to have the property 'is-part-of' with at least one tree?",
                            "Does every branch participate in the 'is-part-of' relationship with a tree in the ontology?",
                            "Must a branch always be included as part of a tree according to the property restriction?"
                        ]
                    }
                ]
            },
            "leaf": {
                "axiom": {
                    "subClassOf": [
                        "PlantParts"
                    ],
                    "propertyRestrictions": [
                        "[is-part-of some (Twig or branch)]"
                    ]
                },
                "description": "leaf is defined as a subclass of PlantParts and is characterized by the property restriction that each leaf must be part of either a twig or a branch. This formalization specifies that leaves are plant structures specifically found as components of twigs or branches, aligning with the description that leaves are parts of branches.",
                "CQ": [
                    {
                        "axiom": "leaf subClassOf PlantParts",
                        "CQ": [
                            "Is leaf categorized as a particular kind of PlantParts?",
                            "Which entities are more specific than PlantParts, such as leaf?",
                            "What higher-level groups include leaf in their classification?"
                        ]
                    },
                    {
                        "axiom": "leaf propertyRestrictions [is-part-of some (Twig or branch)]",
                        "CQ": [
                            "Must a leaf always be part of a twig or a branch according to the ontology?",
                            "Can a leaf exist without being part of either a twig or a branch?",
                            "Are twigs and branches the only structures to which a leaf may belong as a part?"
                        ]
                    }
                ]
            },
            "Impala": {
                "axiom": {
                    "subClassOf": [
                        "animal"
                    ]
                },
                "description": "Impala is defined as a subclass of animal. It is an African antelope, as described in external resources such as Wikipedia. This classification indicates that all individuals of the class impala are animals, specifically belonging to the group of antelopes native to Africa.",
                "CQ": [
                    {
                        "axiom": "Impala subClassOf animal",
                        "CQ": [
                            "Is Impala classified as a type of animal?",
                            "What are the subclasses found under animal, and is Impala among them?",
                            "Which broader classes include Impala as an instance or subclass?"
                        ]
                    }
                ]
            },
            "Omnivore": {
                "axiom": {
                    "subClassOf": [
                        "animal"
                    ],
                    "disjointWith": [
                        "carnivore",
                        "herbivore"
                    ],
                    "equivalentClass": [
                        "([eats some animal] and [eats some plant] and [eats some ([is-part-of some animal] or [is-part-of some plant])])"
                    ]
                },
                "description": "Omnivore is defined as a subclass of animal, disjoint with both carnivore and herbivore, meaning no individual can be both an omnivore and either a carnivore or herbivore. An individual is classified as an omnivore if it eats some animal matter, some plant matter, and also consumes something that is part of an animal or a plant. This formalization captures the core characteristic of omnivores: they are animals that include both animal- and plant-based items in their diet, and their consumption encompasses components from both kingdoms.",
                "CQ": [
                    {
                        "axiom": "Omnivore subClassOf animal",
                        "CQ": [
                            "Does Omnivore fall under the classification of animal?",
                            "Which specific classes are categorized under animal, such as Omnivore?",
                            "What broader classes encompass Omnivore within the ontology?"
                        ]
                    },
                    {
                        "axiom": "Omnivore disjointWith carnivore",
                        "CQ": [
                            "What is the ontological separation between Omnivore and Carnivore classes in the AfricanWildlifeOntology1?",
                            "Is an instance allowed to be classified as both an Omnivore and a Carnivore within AfricanWildlifeOntology1?",
                            "Which classes are asserted as mutually exclusive with Omnivore in AfricanWildlifeOntology1?"
                        ]
                    },
                    {
                        "axiom": "Omnivore disjointWith herbivore",
                        "CQ": [
                            "What logical separation is defined between Omnivore and herbivore in the ontology?",
                            "Is it allowed for an individual to be classified as both Omnivore and herbivore?",
                            "Which other animal dietary classes are explicitly stated to be disjoint with herbivore?"
                        ]
                    },
                    {
                        "axiom": "Omnivore equivalentClass ([eats some animal] and [eats some plant] and [eats some ([is-part-of some animal] or [is-part-of some plant])])",
                        "CQ": [
                            "Is every Omnivore required to eat at least one animal, one plant, and something that is part of an animal or part of a plant?",
                            "Is Omnivore equivalent to the intersection of entities that eat animals, eat plants, and eat parts of either animals or plants?",
                            "Must an entity eat both animals and plants, as well as something that is a part of an animal or a part of a plant, to be classified as an Omnivore?"
                        ]
                    }
                ]
            },
            "RockDassie": {
                "axiom": {
                    "subClassOf": [
                        "animal"
                    ]
                },
                "description": "RockDassie is defined as a subclass of animal. Members of this class are characterized by their diet, which mainly consists of grasses and broad-leafed plants. Further information about RockDassie can be found at http://en.wikipedia.org/wiki/Rock_Hyrax.",
                "CQ": [
                    {
                        "axiom": "RockDassie subClassOf animal",
                        "CQ": [
                            "Is animal a broader classification that encompasses RockDassie?",
                            "What instances fall under the category animal, specifically including RockDassie?",
                            "To which higher-level groups does RockDassie pertain?"
                        ]
                    }
                ]
            },
            "Warthog": {
                "axiom": {
                    "subClassOf": [
                        "animal",
                        "([eats some FruitingBody] and [eats some Grass] and [eats some Root] and [eats some animal])"
                    ]
                },
                "description": "Warthog is a subclass of animal, characterized by an omnivorous diet. Members of this class eat fruiting bodies (such as mushrooms), grass, roots, and other animals. This formalization reflects the warthog’s dietary flexibility as described in biological sources.",
                "CQ": [
                    {
                        "axiom": "Warthog subClassOf animal",
                        "CQ": [
                            "Does Warthog fall under the classification of animal?",
                            "Which entities are categorized as more specific instances within animal, such as Warthog?",
                            "To which broader classes is Warthog hierarchically related?"
                        ]
                    },
                    {
                        "axiom": "Warthog subClassOf ([eats some FruitingBody] and [eats some Grass] and [eats some Root] and [eats some animal])",
                        "CQ": [
                            "Which kinds of food items are necessary to classify an animal as a Warthog in the ontology?",
                            "Is an individual that eats fruiting bodies, grass, roots, and animals a type of Warthog?",
                            "What dietary requirements define the Warthog subclass within the AfricanWildlifeOntology?"
                        ]
                    }
                ]
            },
            "carnivore": {
                "axiom": {
                    "subClassOf": [
                        "animal"
                    ],
                    "disjointWith": [
                        "herbivore"
                    ],
                    "equivalentClass": [
                        "([eats only animal] or [eats only [is-part-of some animal]])"
                    ]
                },
                "description": "carnivore is defined as a subclass of animal and is disjoint with herbivore, meaning that no individual can be both a carnivore and a herbivore. It is equivalent to the class of animals whose diet consists exclusively of other animals or of parts derived from animals (i.e., they eat only animals or only things that are part of animals). This formalization captures the precise biological definition: carnivores are exactly those animals that eat only animals or animal parts.",
                "CQ": [
                    {
                        "axiom": "carnivore subClassOf animal",
                        "CQ": [
                            "Is animal a general category comprising carnivore?",
                            "What types are more specific than animal, including carnivore?",
                            "Which broader groups is carnivore classified under?"
                        ]
                    },
                    {
                        "axiom": "carnivore disjointWith herbivore",
                        "CQ": [
                            "What logical separation is specified between carnivore and herbivore within the ontology?",
                            "Is it permissible for an entity to be classified as both a carnivore and a herbivore?",
                            "Which classes are formally identified as disjoint with carnivore?"
                        ]
                    },
                    {
                        "axiom": "carnivore equivalentClass ([eats only animal] or [eats only [is-part-of some animal]])",
                        "CQ": [
                            "Is a carnivore defined as an organism that eats only animals or only parts that belong to animals?",
                            "Does the class carnivore include all entities that have the property 'eats' restricted solely to animals or to parts that are components of animals?",
                            "Are all instances of carnivore necessarily limited to consuming either animals or objects that are part of animals, according to the eats property restriction?"
                        ]
                    }
                ]
            },
            "giraffe": {
                "axiom": {
                    "subClassOf": [
                        "animal"
                    ],
                    "disjointWith": [
                        "lion"
                    ],
                    "propertyRestrictions": [
                        "[eats only (Twig or leaf)]"
                    ]
                },
                "description": "giraffe is defined as a subclass of animal, disjoint with lion—meaning an individual cannot be both a giraffe and a lion. Members of this class are herbivores that eat exclusively leaves or twigs, as reflected by the restriction that giraffes only consume these plant parts. This ensures that any individual identified as a giraffe must have a diet limited to leaves and twigs.",
                "CQ": [
                    {
                        "axiom": "giraffe subClassOf animal",
                        "CQ": [
                            "Does giraffe fall under the broader classification of animal?",
                            "What specific subclasses are encompassed within animal, including giraffe?",
                            "Which higher-level groups does giraffe belong to within the ontology?"
                        ]
                    },
                    {
                        "axiom": "giraffe disjointWith lion",
                        "CQ": [
                            "Are there any ontology restrictions preventing an individual from being classified as both a giraffe and a lion?",
                            "Which classes within the ontology are incompatible with the class giraffe?",
                            "Is there an exclusionary relationship defined between the concepts of giraffe and lion?"
                        ]
                    },
                    {
                        "axiom": "giraffe propertyRestrictions [eats only (Twig or leaf)]",
                        "CQ": [
                            "Is a giraffe limited to eating only twigs or leaves, excluding all other food types?",
                            "Does the ontology constrain giraffes so that any food they consume must be either a twig or a leaf?",
                            "Can a giraffe, according to the ontology, have an 'eats' relation to anything other than twigs or leaves?"
                        ]
                    }
                ]
            },
            "herbivore": {
                "axiom": {
                    "subClassOf": [
                        "animal"
                    ],
                    "equivalentClass": [
                        "([eats only plant] or [eats only [is-part-of some plant]])"
                    ]
                },
                "description": "herbivore is defined as a subclass of animal, and is formally equivalent to those animals that eat only plants or only things that are part of plants. This class captures all animals whose diet consists exclusively of plants or plant parts, and explicitly excludes animals that consume any non-plant matter. This definition aligns with the description that herbivores are exactly those animals that eat only plants or parts of plants.",
                "CQ": [
                    {
                        "axiom": "herbivore subClassOf animal",
                        "CQ": [
                            "Is animal a direct superclass of herbivore?",
                            "Which subclasses fall under animal, such as herbivore?",
                            "What are the parent classes of herbivore within the ontology?"
                        ]
                    },
                    {
                        "axiom": "herbivore equivalentClass ([eats only plant] or [eats only [is-part-of some plant]])",
                        "CQ": [
                            "Is every herbivore in the ontology necessarily restricted to eating only plants or only entities that are part of a plant?",
                            "Is a herbivore defined as a class whose diet consists exclusively of either plants or things that include some part of a plant?",
                            "Is herbivore logically equivalent to the union of animals that eat only plants and those that eat only things with at least one part being a plant?"
                        ]
                    }
                ]
            },
            "lion": {
                "axiom": {
                    "subClassOf": [
                        "animal"
                    ],
                    "propertyRestrictions": [
                        "[eats only herbivore]",
                        "[eats some Impala]"
                    ]
                },
                "description": "lion is defined as a subclass of animal, with dietary restrictions stating that it eats only herbivores, and among its possible prey, it is known to eat impalas. This means any individual classified as a lion is exclusively a consumer of herbivores, consistent with its role as a carnivorous predator in ecological systems. The description affirms that lions are animals that restrict their diet strictly to herbivorous species.",
                "CQ": [
                    {
                        "axiom": "lion subClassOf animal",
                        "CQ": [
                            "Is animal a more general classification than lion?",
                            "Which entities are categorized under animal, such as lion?",
                            "What broader classes does lion fall under within the ontology?"
                        ]
                    },
                    {
                        "axiom": "lion propertyRestrictions [eats only herbivore]",
                        "CQ": [
                            "Is every entity that a lion eats required to be a herbivore within the ontology?",
                            "Can a lion consume anything other than a herbivore according to the defined restrictions?",
                            "Does the ontology restrict lion's diet exclusively to entities classified as herbivores?"
                        ]
                    },
                    {
                        "axiom": "lion propertyRestrictions [eats some Impala]",
                        "CQ": [
                            "Is it required for a lion to consume at least one impala?",
                            "Can a lion be classified as such without ever eating an impala?",
                            "Does the existence of a feeding relationship between a lion and an impala necessarily hold for all lions?"
                        ]
                    }
                ]
            },
            "PlantParts": {
                "axiom": {
                    "subClassOf": [
                        "owl:Thing"
                    ],
                    "propertyRestrictions": [
                        "[is-proper-part-of some plant]"
                    ]
                },
                "description": "PlantParts is defined as a subclass of owl:Thing, characterized by the property that every instance is a proper part of some plant. This means that members of this class cannot be entire plants themselves, but are constituents or sections that form part of a complete plant.",
                "CQ": [
                    {
                        "axiom": "PlantParts subClassOf owl:Thing",
                        "CQ": [
                            "Is PlantParts classified under the general concept of owl:Thing?",
                            "What broader classes does PlantParts fall within according to the ontology?",
                            "Which entities are categorized as subclasses of owl:Thing, including PlantParts?"
                        ]
                    },
                    {
                        "axiom": "PlantParts propertyRestrictions [is-proper-part-of some plant]",
                        "CQ": [
                            "Is every instance of PlantParts required to be a proper part of some plant?",
                            "Can a PlantPart exist without being a proper part of any plant?",
                            "Does the ontology allow for PlantParts that are not associated by the 'is-proper-part-of' property to a plant?"
                        ]
                    }
                ]
            },
            "Parsnip": {
                "axiom": {
                    "subClassOf": [
                        "Root"
                    ]
                },
                "description": "Parsnip is defined as a subclass of Root, which means every parsnip is formally classified as a type of root. This class inherits all characteristics of roots, establishing parsnip as a specific instance within the broader root category.",
                "CQ": [
                    {
                        "axiom": "Parsnip subClassOf Root",
                        "CQ": [
                            "Is Parsnip classified as a type of Root?",
                            "Which entities fall under the subclassification of Root?",
                            "What broader classes encompass Parsnip within the ontology?"
                        ]
                    }
                ]
            },
            "animal": {
                "axiom": {
                    "disjointWith": [
                        "plant"
                    ]
                },
                "description": "animal is defined as a class that is explicitly disjoint with plant, meaning no individual can simultaneously be both an animal and a plant. This formalization ensures clear separation between instances of animals and plants within the ontology.",
                "CQ": [
                    {
                        "axiom": "animal disjointWith plant",
                        "CQ": [
                            "What constraints prevent an entity from being both an animal and a plant in the ontology?",
                            "Is it allowed for an organism to be classified simultaneously as animal and plant within AfricanWildlifeOntology1?",
                            "Which other classes, aside from animal, are specified as disjoint with plant in AfricanWildlifeOntology1?"
                        ]
                    }
                ]
            }
        },
        "properties": {
            "is-proper-part-of": {
                "axiom": {
                    "characteristics": [
                        "Irreflexive"
                    ],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "is-part-of"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"is-proper-part-of\" is an irreflexive property, meaning no entity can be a proper part of itself. It does not have explicitly defined domain or range restrictions. This property is a subproperty of \"is-part-of,\" indicating a more specific parthood relation where the part is strictly contained within another entity. No inverse property is specified.",
                "CQ": [
                    {
                        "axiom": "is-proper-part-of characteristics Irreflexive",
                        "CQ": [
                            "Is is-proper-part-of an irreflexive property, meaning that no entity in the ontology can be a proper part of itself?",
                            "Can an individual in the domain have is-proper-part-of relationship to itself according to the irreflexivity characteristic?",
                            "Does the irreflexive nature of is-proper-part-of prevent any class member from being related to itself through this property?"
                        ]
                    },
                    {
                        "axiom": "is-proper-part-of domain None",
                        "CQ": [
                            "What can be the domain of the property 'is-proper-part-of'?",
                            "Is it correct that 'is-proper-part-of' does not have an explicitly defined domain?",
                            "Are any entities restricted from being the subject of the 'is-proper-part-of' property?"
                        ]
                    },
                    {
                        "axiom": "is-proper-part-of range None",
                        "CQ": [
                            "What kinds of entities can appear as the object when using the 'is-proper-part-of' property?",
                            "Is the property 'is-proper-part-of' allowed to have any specified range?",
                            "Can 'is-proper-part-of' be linked to values of any type, or should it have a defined range?"
                        ]
                    },
                    {
                        "axiom": "is-proper-part-of subPropertyOf is-part-of",
                        "CQ": [
                            "Is every instance of is-proper-part-of also an instance of is-part-of?",
                            "Which properties are defined as subproperties of is-part-of?",
                            "What superproperties does is-proper-part-of possess within the ontology?"
                        ]
                    }
                ]
            },
            "eaten-by": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": [
                        "eats"
                    ]
                },
                "description": "The property \"eaten-by\" has no explicit domain, range, characteristics, or super-properties defined. It is specified as the inverse of the property \"eats,\" indicating that if entity A is eaten by entity B, then entity B eats entity A. No further semantic constraints are applied.",
                "CQ": [
                    {
                        "axiom": "eaten-by domain None",
                        "CQ": [
                            "What types of entities can serve as the domain for the 'eaten-by' property?",
                            "Is it correct that the 'eaten-by' property does not have a defined domain?",
                            "Can 'eaten-by' be used with any subject without restriction?"
                        ]
                    },
                    {
                        "axiom": "eaten-by range None",
                        "CQ": [
                            "Is there any class or entity that can be the range of the property 'eaten-by'?",
                            "What can be the range of the property 'eaten-by'?",
                            "Is it correct that the property 'eaten-by' has no specified range?"
                        ]
                    },
                    {
                        "axiom": "eaten-by inverseOf eats",
                        "CQ": [
                            "What is the logical connection between ‘eaten-by’ and ‘eats’ in the ontology?",
                            "If animal A is eaten by animal B, does the ontology entail that B eats A?",
                            "Which property is recognized as the inverse of ‘eaten-by’ in this ontology?"
                        ]
                    }
                ]
            },
            "eats": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "(animal or plant or [is-part-of some animal] or [is-part-of some plant])"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"eats\" does not have explicitly defined characteristics, domain restrictions, super-properties, or an inverse property. Its range is restricted to individuals classified as animals, plants, or entities that are part of an animal or plant, indicating its use for relating an entity to what it consumes within these biological groups.",
                "CQ": [
                    {
                        "axiom": "eats domain None",
                        "CQ": [
                            "What is the domain of the property 'eats'?",
                            "Can 'eats' be used with subjects from any class or entity?",
                            "Is it accurate that the property 'eats' has no defined domain?"
                        ]
                    },
                    {
                        "axiom": "eats range (animal or plant or [is-part-of some animal] or [is-part-of some plant])",
                        "CQ": [
                            "Can the property 'eats' relate to objects that are not an animal, plant, or a part of either within the AfricanWildlifeOntology1 domain?",
                            "Is there any entity within AfricanWildlifeOntology1 that is not allowed as the range of the property 'eats'?",
                            "What types of entities can serve as the range for the 'eats' property in AfricanWildlifeOntology1?"
                        ]
                    }
                ]
            },
            "has-part": {
                "axiom": {
                    "characteristics": [
                        "Transitive"
                    ],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": [
                        "is-part-of"
                    ]
                },
                "description": "The property \"has-part\" is defined as transitive, allowing relationships to propagate along chains of connections. It has no explicitly defined domain or range restrictions, indicating it can relate any entities. \"has-part\" has \"is-part-of\" as its inverse property, but it is not specified as a sub-property of any other property. This property is typically used to express part-whole relationships between entities.",
                "CQ": [
                    {
                        "axiom": "has-part characteristics Transitive",
                        "CQ": [
                            "Is has-part defined as a transitive property, so that if an entity has-part another entity, which in turn has-part a third entity, the first entity also has-part the third entity?",
                            "Does the transitivity of has-part ensure that composite parts are inferred across multiple levels of part-whole relationships?",
                            "Can an individual’s indirect parts be inferred via the has-part property due to its transitive nature?"
                        ]
                    },
                    {
                        "axiom": "has-part domain None",
                        "CQ": [
                            "What types of entities are permitted to appear as subjects with the 'has-part' property?",
                            "Is it correct that 'has-part' has no explicitly defined domain?",
                            "Can 'has-part' be used with any class as its subject?"
                        ]
                    },
                    {
                        "axiom": "has-part range None",
                        "CQ": [
                            "Is it correct that the property 'has-part' does not have a specified range?",
                            "What kinds of entities can serve as the range for the property 'has-part'?",
                            "Can 'has-part' relate to any type of entity as its object?"
                        ]
                    },
                    {
                        "axiom": "has-part inverseOf is-part-of",
                        "CQ": [
                            "How are the properties ‘has-part’ and ‘is-part-of’ related in the ontology?",
                            "If entity A has-part entity B, does it follow that entity B is-part-of entity A?",
                            "Which property acts as the inverse of ‘has-part’ in this ontology?"
                        ]
                    }
                ]
            },
            "is-part-of": {
                "axiom": {
                    "characteristics": [
                        "Transitive",
                        "Reflexive"
                    ],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"is-part-of\" is defined as both transitive and reflexive, meaning that if an entity is part of another, and that entity is part of a third, then the first is part of the third, and every entity is considered part of itself. There are no explicit domain or range restrictions, no super-properties, and no defined inverse property. This property is typically used to represent part-whole relationships within the ontology.",
                "CQ": [
                    {
                        "axiom": "is-part-of characteristics Transitive",
                        "CQ": [
                            "Is is-part-of a transitive property, so that if entity A is part of entity B and entity B is part of entity C, then entity A is also part of entity C?",
                            "Does the is-part-of relation infer indirect part-whole associations through its transitivity?",
                            "Can the transitive nature of is-part-of enable cascading part relationships across multiple entities?"
                        ]
                    },
                    {
                        "axiom": "is-part-of characteristics Reflexive",
                        "CQ": [
                            "Is is-part-of defined as a reflexive property, such that every entity in the ontology is related to itself via is-part-of?",
                            "Does the is-part-of relation ensure that all individuals are members of their own part structure?",
                            "Is it entailed that for any individual, the is-part-of property connects the individual to itself?"
                        ]
                    },
                    {
                        "axiom": "is-part-of domain None",
                        "CQ": [
                            "What can be the domain of the property 'is-part-of'?",
                            "Is it correct that the property 'is-part-of' does not have a specified domain?",
                            "Can 'is-part-of' be associated with entities of any type as its subject?"
                        ]
                    },
                    {
                        "axiom": "is-part-of range None",
                        "CQ": [
                            "Can the property 'is-part-of' have a range, or is it correct that it has none?",
                            "Which entities could potentially serve as the range for the property 'is-part-of'?",
                            "Is it necessary for 'is-part-of' to have a defined range in this ontology?"
                        ]
                    }
                ]
            }
        }
    },
    "event": {
        "classes": {
            "Active": {
                "axiom": {
                    "subClassOf": [
                        "State"
                    ]
                },
                "description": "Active is defined as a subclass of State. This means that any instance of Active is also an instance of State, representing a particular condition or mode within the broader context of states. Active inherits all general properties and constraints of State, distinguishing itself as a specific form or type of state.",
                "CQ": [
                    {
                        "axiom": "Active subClassOf State",
                        "CQ": [
                            "Does Active fall under the general classification of State?",
                            "Which entities are recognized as specific forms of State, such as Active?",
                            "What broader groupings encompass the concept of Active in the ontology?"
                        ]
                    }
                ]
            },
            "Apnea": {
                "axiom": {
                    "subClassOf": [
                        "State"
                    ]
                },
                "description": "Apnea is defined as a subclass of State, indicating that it represents a specific type of state or condition. Individuals classified as Apnea are instances where an organism is in a particular state, typically characterized by the temporary cessation of breathing. This classification ensures that Apnea is formally recognized as a distinct physiological state within the ontology.",
                "CQ": [
                    {
                        "axiom": "Apnea subClassOf State",
                        "CQ": [
                            "Is Apnea categorized as a specific type of State?",
                            "Which conditions are subclasses under the State category, such as Apnea?",
                            "What broader classes does Apnea fall under in the hierarchy?"
                        ]
                    }
                ]
            },
            "Arousal": {
                "axiom": {
                    "subClassOf": [
                        "State"
                    ]
                },
                "description": "Arousal is defined as a subclass of State, representing a specific type of state within the ontology. Members of the Arousal class inherit all characteristics of State, indicating that arousal denotes a particular condition or status, although no further differentiating axioms or property restrictions are specified.",
                "CQ": [
                    {
                        "axiom": "Arousal subClassOf State",
                        "CQ": [
                            "Is Arousal categorized under the broader class of State?",
                            "What subclasses are present within the concept of State, such as Arousal?",
                            "Which higher-level classes encompass Arousal as a more specific instance?"
                        ]
                    }
                ]
            },
            "MoveLimb": {
                "axiom": {
                    "subClassOf": [
                        "State"
                    ]
                },
                "description": "MoveLimb is defined as a subclass of State, indicating that it represents a specific type of state within the ontology. This class characterizes conditions or situations involving the movement of a limb, and inherits all general properties applicable to State. There are no additional restrictions or disjointness axioms specified for MoveLimb.",
                "CQ": [
                    {
                        "axiom": "MoveLimb subClassOf State",
                        "CQ": [
                            "Is MoveLimb a specific instance within the broader category of State?",
                            "What types of State include MoveLimb as a more specialized concept?",
                            "Which higher-level categories conceptually include MoveLimb?"
                        ]
                    }
                ]
            },
            "Posture": {
                "axiom": {
                    "subClassOf": [
                        "State"
                    ]
                },
                "description": "Posture is defined as a subclass of State, meaning any instance of Posture is also an instance of State. This class represents the particular physical alignment or arrangement of an organism or object. The lack of disjointness or additional restrictions indicates Posture is broadly characterized within the hierarchy of states or conditions.",
                "CQ": [
                    {
                        "axiom": "Posture subClassOf State",
                        "CQ": [
                            "Is Posture considered a more specific form within the broader category of State?",
                            "What are the different subclasses identified under State, including Posture?",
                            "Which general classifications encompass Posture in this hierarchy?"
                        ]
                    }
                ]
            },
            "Rest": {
                "axiom": {
                    "subClassOf": [
                        "State"
                    ]
                },
                "description": "Rest is defined as a subclass of State, indicating that it represents a specific type of state within the ontology. No further restrictions or properties are specified, and it is annotated with the comment \"DTI-2.\"",
                "CQ": [
                    {
                        "axiom": "Rest subClassOf State",
                        "CQ": [
                            "Is Rest classified as a type of State?",
                            "What more specific concepts fall under the category of State, such as Rest?",
                            "Which broader categories encompass the concept of Rest?"
                        ]
                    }
                ]
            },
            "Activity": {
                "axiom": {
                    "subClassOf": [
                        "Event"
                    ],
                    "propertyRestrictions": [
                        "[hasAgent exactly 1 Person]",
                        "[hasAgent some Person]"
                    ]
                },
                "description": "Activity is defined as a subclass of Event, representing occurrences or happenings that necessarily involve agents. Every instance of Activity must have at least one agent that is a Person and, in particular, must have exactly one Person as an agent. This ensures that any Activity is specifically characterized by the participation of one and only one Person as its agent.",
                "CQ": [
                    {
                        "axiom": "Activity subClassOf Event",
                        "CQ": [
                            "Is every Activity classified as a kind of Event?",
                            "What broader groups is Activity a subset of?",
                            "Which specific types fall under the general category of Event, such as Activity?"
                        ]
                    },
                    {
                        "axiom": "Activity propertyRestrictions [hasAgent exactly 1 Person]",
                        "CQ": [
                            "Is every Activity required to have exactly one Person as its agent?",
                            "Can an Activity involve more than one Person as its agent?",
                            "Is it possible for an Activity to exist without any Person assigned as its agent?"
                        ]
                    },
                    {
                        "axiom": "Activity propertyRestrictions [hasAgent some Person]",
                        "CQ": [
                            "Must every Activity involve at least one Person as an agent?",
                            "Is it required for an Activity to have the property 'hasAgent' assigned to a Person?",
                            "Does the existence of an Activity necessarily imply the involvement of some Person through the 'hasAgent' relationship?"
                        ]
                    }
                ]
            },
            "Measurement": {
                "axiom": {
                    "subClassOf": [
                        "Event"
                    ],
                    "propertyRestrictions": [
                        "[hasQuality only PhysicalQuality]",
                        "[refersTo exactly 1 Entity]",
                        "[hasValue exactly 1]",
                        "[hasValue some rdfs:Literal]",
                        "[hasQuality exactly 1 PhysicalQuality]",
                        "[refersTo only Entity]"
                    ]
                },
                "description": "Measurement is defined as a subclass of Event. Each instance of Measurement must refer to exactly one Entity and is related only to entities of the class Entity. It must also possess exactly one PhysicalQuality, and the hasQuality property can only reference members of PhysicalQuality. Additionally, every Measurement must have exactly one value, this value being a literal as specified by the rdfs:Literal datatype. These axioms ensure that each Measurement event precisely characterizes the act of quantifying a single quality of a single entity and recording this observation as a literal value.",
                "CQ": [
                    {
                        "axiom": "Measurement subClassOf Event",
                        "CQ": [
                            "Is Measurement categorized as a more specific instance within the Event class?",
                            "Which subclasses are included under Event, specifically including Measurement?",
                            "What are the general class hierarchies that Measurement falls under?"
                        ]
                    },
                    {
                        "axiom": "Measurement propertyRestrictions [hasQuality only PhysicalQuality]",
                        "CQ": [
                            "Is every quality associated with a Measurement necessarily a PhysicalQuality?",
                            "Can a Measurement have any quality other than a PhysicalQuality?",
                            "Does the definition of Measurement restrict its qualities exclusively to PhysicalQuality?"
                        ]
                    },
                    {
                        "axiom": "Measurement propertyRestrictions [refersTo exactly 1 Entity]",
                        "CQ": [
                            "Is every Measurement linked to exactly one Entity via the refersTo property?",
                            "Can a Measurement be associated with more than one Entity through refersTo?",
                            "Does a Measurement necessarily require a single Entity as its refersTo value, excluding both zero and multiple associations?"
                        ]
                    },
                    {
                        "axiom": "Measurement propertyRestrictions [hasValue exactly 1]",
                        "CQ": [
                            "Is each Measurement associated with exactly one value for the property 'hasValue'?",
                            "Can a Measurement have multiple or no values for 'hasValue', or is it limited to precisely one?",
                            "Does the ontology require that every Measurement instance is linked to one and only one 'hasValue'?"
                        ]
                    },
                    {
                        "axiom": "Measurement propertyRestrictions [hasValue some rdfs:Literal]",
                        "CQ": [
                            "Is every Measurement associated with at least one value via the property hasValue?",
                            "Does the definition of Measurement require it to have the hasValue property linked to an rdfs:Literal?",
                            "Can a Measurement exist without specifying a hasValue relationship to any data value?"
                        ]
                    },
                    {
                        "axiom": "Measurement propertyRestrictions [hasQuality exactly 1 PhysicalQuality]",
                        "CQ": [
                            "Must every Measurement have exactly one associated PhysicalQuality through the hasQuality property?",
                            "Is it possible for a Measurement to have more than one PhysicalQuality linked by the hasQuality relation?",
                            "Does the ontology restrict Measurement instances to relate via hasQuality to one and only one PhysicalQuality?"
                        ]
                    },
                    {
                        "axiom": "Measurement propertyRestrictions [refersTo only Entity]",
                        "CQ": [
                            "Is it required that any measurement can only refer to entities and not to other kinds of things?",
                            "Are all possible references of measurement instances restricted exclusively to entities?",
                            "Does the property 'refersTo' in the context of measurement prohibit reference to anything except members of the Entity class?"
                        ]
                    }
                ]
            },
            "ObjectEvent": {
                "axiom": {
                    "subClassOf": [
                        "Event"
                    ],
                    "propertyRestrictions": [
                        "[hasAgent exactly 1 Object]",
                        "[hasAgent some Object]"
                    ]
                },
                "description": "ObjectEvent is defined as a subclass of Event. It is characterized by property restrictions specifying that it must have exactly one agent, and this agent must be an instance of Object. In other words, every ObjectEvent is an Event that is uniquely and explicitly associated with a single Object as its agent. This ensures that no ObjectEvent can exist without, or with more than one, Object agent.",
                "CQ": [
                    {
                        "axiom": "ObjectEvent subClassOf Event",
                        "CQ": [
                            "Is ObjectEvent recognized as a specific kind of Event?",
                            "What types of Events include ObjectEvent as a more specialized instance?",
                            "To which more general categories does ObjectEvent pertain?"
                        ]
                    },
                    {
                        "axiom": "ObjectEvent propertyRestrictions [hasAgent exactly 1 Object]",
                        "CQ": [
                            "Does each ObjectEvent involve exactly one agent through the hasAgent property?",
                            "Is it required for every ObjectEvent to be associated with one and only one Object as its agent?",
                            "Can an ObjectEvent ever have either no agent or multiple agents linked via the hasAgent property?"
                        ]
                    },
                    {
                        "axiom": "ObjectEvent propertyRestrictions [hasAgent some Object]",
                        "CQ": [
                            "Is every ObjectEvent necessarily associated with at least one agent via the 'hasAgent' property?",
                            "Can an ObjectEvent exist without having some object linked as its agent through 'hasAgent'?",
                            "Does the occurrence of an ObjectEvent guarantee the involvement of an object as its agent?"
                        ]
                    }
                ]
            },
            "AlarmClock": {
                "axiom": {
                    "subClassOf": [
                        "Object"
                    ]
                },
                "description": "AlarmClock is defined as a subclass of Object. This classification indicates that every instance of AlarmClock is an Object, inheriting all associated characteristics. No additional properties or constraints are specified in the current axiom or description.",
                "CQ": [
                    {
                        "axiom": "AlarmClock subClassOf Object",
                        "CQ": [
                            "Is AlarmClock classified as a type of Object?",
                            "What types are covered under the broader class Object, including AlarmClock?",
                            "Which more general classes encompass AlarmClock within the ontology?"
                        ]
                    }
                ]
            },
            "Appliance": {
                "axiom": {
                    "subClassOf": [
                        "Object"
                    ]
                },
                "description": "Appliance is defined as a subclass of Object, indicating that every appliance is an object within the domain. This class encompasses all physical objects designed to perform specific functions, typically in a household or industrial setting. No further restrictions or specializations are specified in the current axioms.",
                "CQ": [
                    {
                        "axiom": "Appliance subClassOf Object",
                        "CQ": [
                            "Is Appliance classified as a specialized form of Object?",
                            "Which entities fall under the broader class of Object and include Appliance?",
                            "Into which higher-level categories can Appliance be organized?"
                        ]
                    }
                ]
            },
            "Book": {
                "axiom": {
                    "subClassOf": [
                        "Object"
                    ]
                },
                "description": "Book is defined as a subclass of Object. This formalization states that every Book is an Object, inheriting all general characteristics of Objects. No further restrictions or distinguishing properties are specified in the current axiom or description.",
                "CQ": [
                    {
                        "axiom": "Book subClassOf Object",
                        "CQ": [
                            "Is Book classified as a more specific type under the broader category of Object?",
                            "Which entities are categorized as specializations of Object, including Book?",
                            "To which general types or categories does Book belong in the ontology?"
                        ]
                    }
                ]
            },
            "Bucket": {
                "axiom": {
                    "subClassOf": [
                        "Object"
                    ]
                },
                "description": "Bucket is defined as a subclass of Object. This means that every instance of Bucket is considered an Object, inheriting all the general properties and constraints associated with Objects. Since no additional restrictions or relations are specified, Bucket serves as a more specific type of Object without further distinguishing characteristics in this formalization.",
                "CQ": [
                    {
                        "axiom": "Bucket subClassOf Object",
                        "CQ": [
                            "Is Bucket categorized under the broader concept of Object?",
                            "What kinds of Objects include Bucket as a more specific type?",
                            "To which higher-level classes does Bucket belong?"
                        ]
                    }
                ]
            },
            "Cup": {
                "axiom": {
                    "subClassOf": [
                        "Object"
                    ]
                },
                "description": "Cup is defined as a subclass of Object. This means every cup is considered an object, inheriting all properties and characteristics associated with objects. No additional distinguishing characteristics or property restrictions are specified for the class at this level.",
                "CQ": [
                    {
                        "axiom": "Cup subClassOf Object",
                        "CQ": [
                            "Is Cup a specific type within the broader category of Object?",
                            "Which subclasses are classified under Object, including Cup?",
                            "What are the parent categories that encompass Cup?"
                        ]
                    }
                ]
            },
            "Cuttlery": {
                "axiom": {
                    "subClassOf": [
                        "Object"
                    ]
                },
                "description": "Cuttlery is defined as a subclass of Object, representing items that fall within the broader category of objects. At present, there are no additional restrictions or characteristics specified, so any individual member of Cuttlery must be an Object. Further distinctions or properties distinguishing Cuttlery from other Objects are not provided in the current axiom.",
                "CQ": [
                    {
                        "axiom": "Cuttlery subClassOf Object",
                        "CQ": [
                            "Does Cuttlery belong to the broader class of Object?",
                            "What are the more specialized categories that fall under Object, such as Cuttlery?",
                            "To which higher-level groupings can Cuttlery be assigned?"
                        ]
                    }
                ]
            },
            "Door": {
                "axiom": {
                    "subClassOf": [
                        "Object"
                    ]
                },
                "description": "Door is defined as a subclass of Object. This establishes that every Door is considered an Object within the ontology, inheriting all characteristics and properties assigned to Object. No additional restrictions or disjointness axioms are specified, so the class serves as a general categorization for any entity that can be considered a door.",
                "CQ": [
                    {
                        "axiom": "Door subClassOf Object",
                        "CQ": [
                            "Is Door classified as a specific kind of Object?",
                            "Which specialized types fall under the broader class of Object, including Door?",
                            "What are the more encompassing categories to which Door belongs?"
                        ]
                    }
                ]
            },
            "DoorBell": {
                "axiom": {
                    "subClassOf": [
                        "Object"
                    ]
                },
                "description": "DoorBell is defined as a subclass of Object, indicating it is a physical entity or artifact. This class encompasses all entities recognized as doorbells, but no further axiomatic constraints or distinguishing characteristics are specified. Members of this class inherit general properties of objects.",
                "CQ": [
                    {
                        "axiom": "DoorBell subClassOf Object",
                        "CQ": [
                            "Is DoorBell classified as a specific type of Object?",
                            "Which entities are defined as subcategories under Object, such as DoorBell?",
                            "What are the higher-level classes that DoorBell is associated with?"
                        ]
                    }
                ]
            },
            "Furniture": {
                "axiom": {
                    "subClassOf": [
                        "Object"
                    ]
                },
                "description": "Furniture is defined as a subclass of Object, indicating that all pieces of furniture are considered objects. This classification positions furniture within a broader category of tangible entities that have physical presence, without specifying further characteristics or restrictions.",
                "CQ": [
                    {
                        "axiom": "Furniture subClassOf Object",
                        "CQ": [
                            "Is Furniture classified under the broader category of Object?",
                            "Which categories encompass Furniture as a more general class, including Object?",
                            "Among the subclasses of Object, does Furniture appear as a member?"
                        ]
                    }
                ]
            },
            "Glass": {
                "axiom": {
                    "subClassOf": [
                        "Object"
                    ]
                },
                "description": "Glass is defined as a subclass of Object, meaning it represents a specific kind of object within the ontology. No further restrictions or disjointness are specified, so any individual classified as Glass inherits all the properties of Object.",
                "CQ": [
                    {
                        "axiom": "Glass subClassOf Object",
                        "CQ": [
                            "Can Glass be classified as a kind of Object?",
                            "What entities are classified as specializations of Object, such as Glass?",
                            "Which higher-level categories include Glass within their hierarchy?"
                        ]
                    }
                ]
            },
            "KitchenPress": {
                "axiom": {
                    "subClassOf": [
                        "Object"
                    ]
                },
                "description": "KitchenPress is defined as a subclass of Object, indicating that it represents a specific type of object within the ontology. No additional axioms or restrictions are specified, so individuals of this class inherit all properties of Object without further distinguishing characteristics.",
                "CQ": [
                    {
                        "axiom": "KitchenPress subClassOf Object",
                        "CQ": [
                            "Is KitchenPress classified under the broader category of Object?",
                            "Which items fall under Object, specifically including KitchenPress?",
                            "What higher-level groupings encompass KitchenPress within the ontology?"
                        ]
                    }
                ]
            },
            "Mop": {
                "axiom": {
                    "subClassOf": [
                        "Object"
                    ]
                },
                "description": "mop is defined as a subclass of Object. This means that every mop is considered to be an Object within the ontology, inheriting all characteristics associated with objects. There are currently no further restrictions or differentiating axioms specified for the mop class.",
                "CQ": [
                    {
                        "axiom": "Mop subClassOf Object",
                        "CQ": [
                            "Does Mop fall under the general classification of Object?",
                            "Which items are categorized more specifically than Object, including Mop?",
                            "What broader categories encompass the concept of Mop?"
                        ]
                    }
                ]
            },
            "Plate": {
                "axiom": {
                    "subClassOf": [
                        "Object"
                    ]
                },
                "description": "Plate is defined as a subclass of Object. This means that every instance of Plate is also an instance of Object, inheriting all properties and characteristics associated with Object. No further restrictions or characteristics are specified for Plate beyond its classification as an Object.",
                "CQ": [
                    {
                        "axiom": "Plate subClassOf Object",
                        "CQ": [
                            "Is Plate classified as a type of Object?",
                            "Which concepts fall under the category of Object, such as Plate?",
                            "What broader classes include Plate as a member?"
                        ]
                    }
                ]
            },
            "RemoteControl": {
                "axiom": {
                    "subClassOf": [
                        "Object"
                    ]
                },
                "description": "RemoteControl is defined as a subclass of Object, indicating that all remote controls are considered objects within the ontology. This class captures entities that serve as physical devices used to control other systems or appliances remotely. There are currently no additional property restrictions or disjointness axioms specified for this class.",
                "CQ": [
                    {
                        "axiom": "RemoteControl subClassOf Object",
                        "CQ": [
                            "Is RemoteControl classified under the broader class of Object?",
                            "Which entities are defined as more specific types within the Object category, including RemoteControl?",
                            "To what higher-level classifications does RemoteControl belong?"
                        ]
                    }
                ]
            },
            "Telephone": {
                "axiom": {
                    "subClassOf": [
                        "Object"
                    ]
                },
                "description": "Telephone is defined as a subclass of Object, establishing it as a specific type of object. No further restrictions or relationships are specified, so any individual classified as a Telephone is understood to be an object according to the current ontology.",
                "CQ": [
                    {
                        "axiom": "Telephone subClassOf Object",
                        "CQ": [
                            "Does Telephone fall under the broader classification of Object?",
                            "Which specific subclasses are encompassed within Object, such as Telephone?",
                            "What are the immediate parent classes of Telephone in the ontology?"
                        ]
                    }
                ]
            },
            "WaterCan": {
                "axiom": {
                    "subClassOf": [
                        "Object"
                    ]
                },
                "description": "WaterCan is defined as a subclass of Object. This means every water can is formally recognized as an Object within the ontology. No additional axioms or property restrictions are specified, so WaterCan inherits all general characteristics of Object, serving as a specialized type of Object.",
                "CQ": [
                    {
                        "axiom": "WaterCan subClassOf Object",
                        "CQ": [
                            "Is Object a generalization that includes WaterCan as a specific instance?",
                            "What items are considered more specific than Object, such as WaterCan?",
                            "To what broader categories does WaterCan belong within the ontology?"
                        ]
                    }
                ]
            },
            "Window": {
                "axiom": {
                    "subClassOf": [
                        "Object"
                    ]
                },
                "description": "Window is defined as a subclass of Object, indicating that every Window is an Object. No further distinguishing characteristics or constraints are specified beyond this general classification.",
                "CQ": [
                    {
                        "axiom": "Window subClassOf Object",
                        "CQ": [
                            "Is Window classified within the broader group of Object?",
                            "Which entities fall under Object, including Window?",
                            "What overarching categories does Window fit into?"
                        ]
                    }
                ]
            },
            "AlarmClockRinging": {
                "axiom": {
                    "subClassOf": [
                        "Ringing"
                    ],
                    "propertyRestrictions": [
                        "[hasAgent some AlarmClock]"
                    ]
                },
                "description": "AlarmClockRinging is defined as a subclass of Ringing, representing a specific ringing event. Its defining characteristic is that the agent responsible for the ringing must be an instance of AlarmClock. This ensures that any event classified as AlarmClockRinging involves an alarm clock as the source of the ringing.",
                "CQ": [
                    {
                        "axiom": "AlarmClockRinging subClassOf Ringing",
                        "CQ": [
                            "Is AlarmClockRinging classified under the broader category of Ringing?",
                            "Which specific types fall under Ringing, including AlarmClockRinging?",
                            "In which higher-level categories can AlarmClockRinging be placed?"
                        ]
                    },
                    {
                        "axiom": "AlarmClockRinging propertyRestrictions [hasAgent some AlarmClock]",
                        "CQ": [
                            "Must every instance of AlarmClockRinging involve an agent that is an AlarmClock?",
                            "Is it required that AlarmClockRinging occurs with at least one AlarmClock as its agent?",
                            "Can there be an occurrence of AlarmClockRinging without the involvement of an AlarmClock as its agent?"
                        ]
                    }
                ]
            },
            "PhoneRinging": {
                "axiom": {
                    "subClassOf": [
                        "Ringing"
                    ],
                    "propertyRestrictions": [
                        "[hasAgent some Telephone]"
                    ]
                },
                "description": "PhoneRinging is defined as a subclass of Ringing, describing events or states where ringing occurs specifically due to a telephone. Every instance of PhoneRinging is associated with at least one agent that is a telephone, as specified by the property restriction (hasAgent some Telephone). This ensures that PhoneRinging refers exclusively to ringing acts caused by telephones, distinguishing it from other types of ringing (such as an alarm or bell).",
                "CQ": [
                    {
                        "axiom": "PhoneRinging subClassOf Ringing",
                        "CQ": [
                            "Is PhoneRinging categorized under the broader class of Ringing?",
                            "What instances fall under Ringing that are more specific, such as PhoneRinging?",
                            "Which higher-level classes include PhoneRinging as a subtype?"
                        ]
                    },
                    {
                        "axiom": "PhoneRinging propertyRestrictions [hasAgent some Telephone]",
                        "CQ": [
                            "Is it required that each PhoneRinging event involves at least one agent that is a Telephone?",
                            "Can a PhoneRinging event occur without being associated with a Telephone agent through the hasAgent property?",
                            "Does the occurrence of PhoneRinging always necessitate a Telephone participating as the agent via hasAgent?"
                        ]
                    }
                ]
            },
            "AmbientMeasurement": {
                "axiom": {
                    "subClassOf": [
                        "Measurement"
                    ],
                    "propertyRestrictions": [
                        "[refersTo only Room]"
                    ]
                },
                "description": "AmbientMeasurement is defined as a subclass of Measurement, representing measurements that specifically pertain only to Room. The property restriction ensures that any AmbientMeasurement instance exclusively refers to a Room, formalizing that ambient measurements are contextually bound to indoor environments such as rooms.",
                "CQ": [
                    {
                        "axiom": "AmbientMeasurement subClassOf Measurement",
                        "CQ": [
                            "Does AmbientMeasurement fall under the broader category of Measurement?",
                            "What types of measurements encompass AmbientMeasurement as a more specific variant?",
                            "Which general measurement groups include AmbientMeasurement as a member?"
                        ]
                    },
                    {
                        "axiom": "AmbientMeasurement propertyRestrictions [refersTo only Room]",
                        "CQ": [
                            "Is it required that AmbientMeasurement refers exclusively to a Room?",
                            "Can AmbientMeasurement ever refer to an entity other than Room?",
                            "Are all entities referred to by AmbientMeasurement instances necessarily Rooms?"
                        ]
                    }
                ]
            },
            "PhysiologicalMeasurement": {
                "axiom": {
                    "subClassOf": [
                        "Measurement"
                    ],
                    "propertyRestrictions": [
                        "[refersTo only Patient]"
                    ]
                },
                "description": "PhysiologicalMeasurement is defined as a subclass of Measurement, representing a specialized form of measurement that pertains exclusively to patients. Any instance of PhysiologicalMeasurement must refer only to a patient, ensuring that this class captures measurements that specifically describe physiological characteristics or parameters observed in patient individuals.",
                "CQ": [
                    {
                        "axiom": "PhysiologicalMeasurement subClassOf Measurement",
                        "CQ": [
                            "Is PhysiologicalMeasurement classified under Measurement in the ontology?",
                            "Which measurement types are considered more specific forms of Measurement, such as PhysiologicalMeasurement?",
                            "What encompassing categories does PhysiologicalMeasurement fall within?"
                        ]
                    },
                    {
                        "axiom": "PhysiologicalMeasurement propertyRestrictions [refersTo only Patient]",
                        "CQ": [
                            "Is every instance of PhysiologicalMeasurement required to refer exclusively to entities classified as Patient?",
                            "Can a PhysiologicalMeasurement ever refer to an entity that is not a Patient?",
                            "Does the property 'refersTo' on PhysiologicalMeasurement restrict its range to only those individuals categorized as Patient?"
                        ]
                    }
                ]
            },
            "AnswerPhoneCall": {
                "axiom": {
                    "subClassOf": [
                        "TelephoneInteraction"
                    ]
                },
                "description": "AnswerPhoneCall is defined as a subclass of TelephoneInteraction, indicating that it represents a specialized form of interaction involving telephones. Any individual classified as an AnswerPhoneCall inherently fulfills the characteristics and constraints of a TelephoneInteraction, but is specifically focused on the activity of answering a phone call.",
                "CQ": [
                    {
                        "axiom": "AnswerPhoneCall subClassOf TelephoneInteraction",
                        "CQ": [
                            "Does AnswerPhoneCall fall under the general category of TelephoneInteraction?",
                            "Which specific types are encompassed by TelephoneInteraction, such as AnswerPhoneCall?",
                            "What are the direct parent categories of AnswerPhoneCall?"
                        ]
                    }
                ]
            },
            "MakePhoneCall": {
                "axiom": {
                    "subClassOf": [
                        "TelephoneInteraction"
                    ]
                },
                "description": "MakePhoneCall is defined as a subclass of TelephoneInteraction, indicating that it represents a specific type of interaction conducted via telephone. Any instance classified as MakePhoneCall necessarily inherits all characteristics of TelephoneInteraction, distinguishing itself as an interaction where a phone call is made.",
                "CQ": [
                    {
                        "axiom": "MakePhoneCall subClassOf TelephoneInteraction",
                        "CQ": [
                            "Is every MakePhoneCall event classified under TelephoneInteraction?",
                            "Which specific interactions are categorized as subtypes of TelephoneInteraction, such as MakePhoneCall?",
                            "What broader interaction types encompass MakePhoneCall within their classification?"
                        ]
                    }
                ]
            },
            "AtomicActivity": {
                "axiom": {
                    "subClassOf": [
                        "Activity"
                    ]
                },
                "description": "AtomicActivity is defined as a subclass of Activity. This indicates that every AtomicActivity is an Activity, but it may possess more specific properties or constraints not captured at the Activity level. No additional axioms or restrictions are provided, so AtomicActivity serves as a specialized categorization within the broader class of activities.",
                "CQ": [
                    {
                        "axiom": "AtomicActivity subClassOf Activity",
                        "CQ": [
                            "Is AtomicActivity classified under the broader group of Activity?",
                            "Which types fall under Activity and encompass AtomicActivity as a subcategory?",
                            "What overarching types does AtomicActivity derive from within the ontology hierarchy?"
                        ]
                    }
                ]
            },
            "ComplexActivity": {
                "axiom": {
                    "subClassOf": [
                        "Activity"
                    ]
                },
                "description": "ComplexActivity is defined as a subclass of Activity, meaning every ComplexActivity is an Activity. No additional property restrictions or disjointness axioms are specified, indicating that ComplexActivity inherits all characteristics of Activity but may represent more specialized or structured forms of activities.",
                "CQ": [
                    {
                        "axiom": "ComplexActivity subClassOf Activity",
                        "CQ": [
                            "Is ComplexActivity classified under the broader category of Activity?",
                            "Which subclasses are encompassed within Activity, specifically including ComplexActivity?",
                            "What are the general categories that ComplexActivity falls under?"
                        ]
                    }
                ]
            },
            "Bathroom": {
                "axiom": {
                    "subClassOf": [
                        "Room"
                    ]
                },
                "description": "Bathroom is defined as a subclass of Room, establishing that every bathroom is a specialized type of room. No additional axioms or property restrictions are specified, so its distinguishing characteristic is solely its classification within the broader category of rooms.",
                "CQ": [
                    {
                        "axiom": "Bathroom subClassOf Room",
                        "CQ": [
                            "Is Bathroom classified under the general category of Room?",
                            "What specific spaces are considered subclasses of Room, such as Bathroom?",
                            "Which broader categories include Bathroom as a more specific type?"
                        ]
                    }
                ]
            },
            "Bedroom": {
                "axiom": {
                    "subClassOf": [
                        "Room"
                    ]
                },
                "description": "Bedroom is defined as a subclass of Room, indicating that every instance of Bedroom is also an instance of Room. This classification structurally organizes Bedroom within the broader hierarchy of building spaces, emphasizing that a Bedroom inherits all general characteristics of a Room while potentially possessing more specific properties related to its intended use as a sleeping area.",
                "CQ": [
                    {
                        "axiom": "Bedroom subClassOf Room",
                        "CQ": [
                            "Is Bedroom classified as a specific type within the broader concept of Room?",
                            "Which subcategories are present under the class Room, including Bedroom?",
                            "What higher-level categories encompass Bedroom according to the ontology?"
                        ]
                    }
                ]
            },
            "Kitchen": {
                "axiom": {
                    "subClassOf": [
                        "Room"
                    ]
                },
                "description": "Kitchen is defined as a subclass of Room, indicating that every kitchen is considered a type of room within an environment. No additional property restrictions or relationships are specified in the axiom, so the class primarily inherits general characteristics of rooms while denoting its specific use as a kitchen.",
                "CQ": [
                    {
                        "axiom": "Kitchen subClassOf Room",
                        "CQ": [
                            "Is Kitchen classified within the broader category of Room?",
                            "What are the specific types that fall under Room, such as Kitchen?",
                            "Which general categories include Kitchen as a member?"
                        ]
                    }
                ]
            },
            "LivingRoom": {
                "axiom": {
                    "subClassOf": [
                        "Room"
                    ]
                },
                "description": "LivingRoom is defined as a subclass of Room, representing a specific type of room within a structure. This classification indicates that every instance of LivingRoom is necessarily an instance of Room, inheriting all properties and constraints that apply to Room. No further distinguishing axioms or restrictions are present beyond this subclass relationship.",
                "CQ": [
                    {
                        "axiom": "LivingRoom subClassOf Room",
                        "CQ": [
                            "Is every LivingRoom classified as a kind of Room?",
                            "What specific types fall under the broader category of Room, such as LivingRoom?",
                            "Which general categories encompass the concept of a LivingRoom?"
                        ]
                    }
                ]
            },
            "Bed": {
                "axiom": {
                    "subClassOf": [
                        "Furniture"
                    ]
                },
                "description": "Bed is formally defined as a subclass of Furniture, indicating that every instance of Bed is also an instance of Furniture. This classification situates Bed within the broader category of items intended for furnishing interior spaces. No additional axioms or restrictions are specified.",
                "CQ": [
                    {
                        "axiom": "Bed subClassOf Furniture",
                        "CQ": [
                            "Does Bed fall under the category of Furniture?",
                            "Which items are classified as subtypes of Furniture, including Bed?",
                            "What are the broader categories that the concept Bed is grouped under?"
                        ]
                    }
                ]
            },
            "Chair": {
                "axiom": {
                    "subClassOf": [
                        "Furniture"
                    ]
                },
                "description": "Chair is defined as a subclass of Furniture, indicating that every Chair is a type of Furniture. This formalization situates Chair within a broader hierarchy of household or office items intended for use and support. Without additional restrictions or properties, the class encompasses any object recognized as a Chair within the general category of Furniture.",
                "CQ": [
                    {
                        "axiom": "Chair subClassOf Furniture",
                        "CQ": [
                            "Is Chair categorized under broader classes such as Furniture?",
                            "What items are classified as more specific types of Furniture, including Chair?",
                            "What general classes encompass Chair within their classification hierarchy?"
                        ]
                    }
                ]
            },
            "Couch": {
                "axiom": {
                    "subClassOf": [
                        "Furniture"
                    ]
                },
                "description": "Couch is defined as a subclass of Furniture, indicating that every couch is a type of furniture. No additional property, disjointness, or restriction axioms are specified, so the class inherits all general characteristics of furniture but is specifically dedicated to couches.",
                "CQ": [
                    {
                        "axiom": "Couch subClassOf Furniture",
                        "CQ": [
                            "Is Couch an instance within the general class of Furniture?",
                            "What are the direct subcategories of Furniture, including Couch?",
                            "To which broader classification does Couch belong in the context of furnishings?"
                        ]
                    }
                ]
            },
            "Table": {
                "axiom": {
                    "subClassOf": [
                        "Furniture"
                    ]
                },
                "description": "Table is defined as a subclass of Furniture, meaning every instance of Table is also considered an instance of Furniture. No additional property restrictions or disjointness axioms are specified, so the class captures any furniture item that qualifies as a table within the ontology.",
                "CQ": [
                    {
                        "axiom": "Table subClassOf Furniture",
                        "CQ": [
                            "Is Table classified under the broader category of Furniture?",
                            "Which types fall under the category Furniture, including Table?",
                            "What higher-level groups does Table belong to in the context of this ontology?"
                        ]
                    }
                ]
            },
            "BedExit": {
                "axiom": {
                    "subClassOf": [
                        "ComplexActivity"
                    ]
                },
                "description": "BedExit is defined as a subclass of ComplexActivity, indicating that it represents a type of complex action or event. Individuals belonging to this class participate in multifaceted activities related to the process of exiting a bed. The classification ensures that any instance of BedExit is recognized specifically as a form of ComplexActivity.",
                "CQ": [
                    {
                        "axiom": "BedExit subClassOf ComplexActivity",
                        "CQ": [
                            "Does BedExit fall under the broader classification of ComplexActivity?",
                            "Which activities are categorized as more specific forms of ComplexActivity, including BedExit?",
                            "What higher-level activity categories include BedExit as a specialized instance?"
                        ]
                    }
                ]
            },
            "Fall": {
                "axiom": {
                    "subClassOf": [
                        "ComplexActivity"
                    ]
                },
                "description": "Fall is defined as a subclass of ComplexActivity, indicating it is categorized as a type of complex activity. The current description notes that a fall occurs \"if not supported by LCS\" (likely referring to 'Lowering Control System' or a similar support mechanism), implying the event is characterized by the absence of this support during the occurrence. No disjointness or specific property restrictions have been asserted for this class.",
                "CQ": [
                    {
                        "axiom": "Fall subClassOf ComplexActivity",
                        "CQ": [
                            "Is Fall classified under the broader type of ComplexActivity?",
                            "What specific activities are categorized as subclasses of ComplexActivity, including Fall?",
                            "Of which more general categories is Fall a constituent member?"
                        ]
                    }
                ]
            },
            "FoodAndDrinkConsumption": {
                "axiom": {
                    "subClassOf": [
                        "ComplexActivity"
                    ]
                },
                "description": "FoodAndDrinkConsumption is defined as a subclass of ComplexActivity. This class represents activities that involve the intake or consumption of food and/or drink, and it inherits all characteristics of ComplexActivity. No further property restrictions or disjointness axioms are specified, so its definition is based solely on its placement in the activity hierarchy.",
                "CQ": [
                    {
                        "axiom": "FoodAndDrinkConsumption subClassOf ComplexActivity",
                        "CQ": [
                            "Does FoodAndDrinkConsumption fall under the classification of ComplexActivity?",
                            "Which activities are encompassed by ComplexActivity, including FoodAndDrinkConsumption?",
                            "To which broader activity types is FoodAndDrinkConsumption related?"
                        ]
                    }
                ]
            },
            "Nap": {
                "axiom": {
                    "subClassOf": [
                        "ComplexActivity"
                    ]
                },
                "description": "Nap is defined as a subclass of ComplexActivity, indicating that it is a type of complex activity within the ontology. As a ComplexActivity, a nap is considered to involve multiple components or steps beyond a simple action, distinguishing it from more basic activities. No further restrictions or disjointness axioms are specified for this class.",
                "CQ": [
                    {
                        "axiom": "Nap subClassOf ComplexActivity",
                        "CQ": [
                            "Is Nap categorized as an instance of ComplexActivity?",
                            "What broader activities encompass Nap as a more specific subtype?",
                            "Which activities are considered subtypes under ComplexActivity, such as Nap?"
                        ]
                    }
                ]
            },
            "NightSleep": {
                "axiom": {
                    "subClassOf": [
                        "ComplexActivity"
                    ]
                },
                "description": "NightSleep is defined as a subclass of ComplexActivity, representing the entire sleep episode experienced during the night, including any relevant inferences or processes that occur throughout the sleep period. This class formalization associates NightSleep with complex activities and ensures its distinction by emphasizing the inclusion of all inferable events or activities occurring during sleep.",
                "CQ": [
                    {
                        "axiom": "NightSleep subClassOf ComplexActivity",
                        "CQ": [
                            "Is NightSleep categorized under the broader class of ComplexActivity?",
                            "What specific activities are classified as subclasses of ComplexActivity, including NightSleep?",
                            "Which overarching activity classes does NightSleep pertain to?"
                        ]
                    }
                ]
            },
            "PrepareDrink": {
                "axiom": {
                    "subClassOf": [
                        "ComplexActivity"
                    ]
                },
                "description": "PrepareDrink is defined as a subclass of ComplexActivity, indicating that it represents a type of complex activity within the ontological model. Instances of PrepareDrink inherit all characteristics of ComplexActivity and specifically pertain to the processes and actions involved in preparing a drink. The class does not impose further restrictions or differentiators beyond its place in the activity hierarchy.",
                "CQ": [
                    {
                        "axiom": "PrepareDrink subClassOf ComplexActivity",
                        "CQ": [
                            "Is PrepareDrink classified as a more specific activity under the broader ComplexActivity category?",
                            "Which activities are direct specializations of ComplexActivity, such as PrepareDrink?",
                            "What general categories encompass the activity PrepareDrink?"
                        ]
                    }
                ]
            },
            "PrepareMeal": {
                "axiom": {
                    "subClassOf": [
                        "ComplexActivity"
                    ]
                },
                "description": "PrepareMeal is defined as a subclass of ComplexActivity, indicating that it represents a type of activity characterized by having multiple interrelated actions or steps. Any instance of PrepareMeal is therefore also an instance of ComplexActivity, situating meal preparation as a process that involves several coordinated activities.",
                "CQ": [
                    {
                        "axiom": "PrepareMeal subClassOf ComplexActivity",
                        "CQ": [
                            "Is PrepareMeal categorized as a type of ComplexActivity?",
                            "Which activities are direct subtypes of ComplexActivity, including PrepareMeal?",
                            "To which higher-level classes does PrepareMeal belong?"
                        ]
                    }
                ]
            },
            "SocialInteraction": {
                "axiom": {
                    "subClassOf": [
                        "ComplexActivity"
                    ]
                },
                "description": "SocialInteraction is defined as a subclass of ComplexActivity. This specifies that every instance of SocialInteraction is a type of ComplexActivity, indicating that social interactions are considered to involve multiple, coordinated actions or processes. No further restrictions or elaborations are provided, so the class is characterized primarily by its inherited properties from ComplexActivity.",
                "CQ": [
                    {
                        "axiom": "SocialInteraction subClassOf ComplexActivity",
                        "CQ": [
                            "Does SocialInteraction fall under the broader classification of ComplexActivity?",
                            "Which activities are specified as subtypes of ComplexActivity, including SocialInteraction?",
                            "What are the more inclusive activity categories that encompass SocialInteraction?"
                        ]
                    }
                ]
            },
            "TableExit": {
                "axiom": {
                    "subClassOf": [
                        "ComplexActivity"
                    ]
                },
                "description": "TableExit is defined as a subclass of ComplexActivity, indicating that every TableExit is a specific type of ComplexActivity. No additional property restrictions, disjointness, or further subclass relations are specified, so individuals of the TableExit class inherit all the general characteristics and behaviors attributed to ComplexActivity. This class is currently characterized solely by its hierarchical relation within the ontology.",
                "CQ": [
                    {
                        "axiom": "TableExit subClassOf ComplexActivity",
                        "CQ": [
                            "Is TableExit classified under the broader category of ComplexActivity?",
                            "Which activities are direct or indirect subclasses of ComplexActivity, including TableExit?",
                            "What general categories encompass TableExit as a specialized activity?"
                        ]
                    }
                ]
            },
            "Carer": {
                "axiom": {
                    "subClassOf": [
                        "Person"
                    ]
                },
                "description": "Carer is defined as a subclass of Person, indicating that every Carer is also a Person. No further axioms or property restrictions are specified, so a Carer inherits all characteristics of Person without additional differentiating features in this definition.",
                "CQ": [
                    {
                        "axiom": "Carer subClassOf Person",
                        "CQ": [
                            "Are all Carers considered instances of the broader category Person?",
                            "Which specific roles fall under the classification of Person, such as Carer?",
                            "To which general classes does Carer belong within the ontology?"
                        ]
                    }
                ]
            },
            "Clinician": {
                "axiom": {
                    "subClassOf": [
                        "Person"
                    ]
                },
                "description": "Clinician is defined as a subclass of Person, indicating that every clinician is a person. No further axioms or property restrictions are specified, so the class currently serves as a specialization of Person without additional constraints.",
                "CQ": [
                    {
                        "axiom": "Clinician subClassOf Person",
                        "CQ": [
                            "Is Clinician categorized under the broader class of Person?",
                            "Which subclasses fall under the category of Person, including Clinician?",
                            "To which higher-level classes does Clinician belong within the ontology?"
                        ]
                    }
                ]
            },
            "Patient": {
                "axiom": {
                    "subClassOf": [
                        "Person"
                    ]
                },
                "description": "Patient is defined as a subclass of Person, representing individuals who are receiving or registered to receive medical care or treatment. Any individual designated as a Patient is inherently a Person.",
                "CQ": [
                    {
                        "axiom": "Patient subClassOf Person",
                        "CQ": [
                            "Does Patient fall under the general classification of Person?",
                            "What specific categories, such as Patient, are encompassed under the Person class?",
                            "Within which broader classes is Patient hierarchically included?"
                        ]
                    }
                ]
            },
            "ChangeOrientation": {
                "axiom": {
                    "subClassOf": [
                        "AtomicActivity"
                    ]
                },
                "description": "ChangeOrientation is defined as a subclass of AtomicActivity, indicating that it represents a specific, indivisible type of activity within the domain. While the current description provides a brief comment (\"WIMU\"), no detailed explanation is available. Based on its name and axiom, ChangeOrientation likely refers to an atomic activity where the orientation of an entity is altered.",
                "CQ": [
                    {
                        "axiom": "ChangeOrientation subClassOf AtomicActivity",
                        "CQ": [
                            "Is ChangeOrientation categorized under AtomicActivity?",
                            "Which specific activities are considered subtypes of AtomicActivity, such as ChangeOrientation?",
                            "Under which broader activity classification does ChangeOrientation fall?"
                        ]
                    }
                ]
            },
            "ChangePosture": {
                "axiom": {
                    "subClassOf": [
                        "AtomicActivity"
                    ]
                },
                "description": "ChangePosture is defined as a subclass of AtomicActivity, indicating it represents an elementary, indivisible activity within the ontology. While the current description only notes \"WIMU,\" this class structurally inherits all characteristics of AtomicActivity and is intended to capture specific activities related to posture changes.",
                "CQ": [
                    {
                        "axiom": "ChangePosture subClassOf AtomicActivity",
                        "CQ": [
                            "Does ChangePosture fall under the broader classification of AtomicActivity?",
                            "What specific activities are included within the category of AtomicActivity, such as ChangePosture?",
                            "Which higher-level categories encompass ChangePosture in the ontology?"
                        ]
                    }
                ]
            },
            "DialNumber": {
                "axiom": {
                    "subClassOf": [
                        "AtomicActivity"
                    ]
                },
                "description": "DialNumber is defined as a subclass of AtomicActivity. This means that every instance of DialNumber is also an instance of AtomicActivity. There are no further restrictions or disjointness axioms specified, so DialNumber inherits all characteristics of AtomicActivity without additional distinguishing features. This class is intended to represent the fundamental activity of dialing a number, which is atomic in nature within the modeled domain.",
                "CQ": [
                    {
                        "axiom": "DialNumber subClassOf AtomicActivity",
                        "CQ": [
                            "Is DialNumber regarded as a specific kind of AtomicActivity?",
                            "Which activities fall under the category of AtomicActivity, including DialNumber?",
                            "What broader activity classifications does DialNumber belong to?"
                        ]
                    }
                ]
            },
            "Drink": {
                "axiom": {
                    "subClassOf": [
                        "AtomicActivity"
                    ]
                },
                "description": "Drink is defined as a subclass of AtomicActivity, indicating that it represents a fundamental activity that cannot be further decomposed into simpler actions. This class encompasses all actions entailing the act of consuming liquids, and inherits general properties and constraints from AtomicActivity.",
                "CQ": [
                    {
                        "axiom": "Drink subClassOf AtomicActivity",
                        "CQ": [
                            "Is Drink categorized under the broader class of AtomicActivity?",
                            "What specific activities are included within AtomicActivity, such as Drink?",
                            "Which general activity types encompass Drink?"
                        ]
                    }
                ]
            },
            "Eat": {
                "axiom": {
                    "subClassOf": [
                        "AtomicActivity"
                    ]
                },
                "description": "Eat is defined as a subclass of AtomicActivity, indicating that it represents a fundamental, indivisible activity within the ontology. Any instance of Eat must also be an instance of AtomicActivity. No further constraints or characteristics are specified.",
                "CQ": [
                    {
                        "axiom": "Eat subClassOf AtomicActivity",
                        "CQ": [
                            "Is Eat an instance of the more general class AtomicActivity?",
                            "What other activities, alongside Eat, are classified as specializations of AtomicActivity?",
                            "Under which broader activity classes does Eat fall?"
                        ]
                    }
                ]
            },
            "InLocation": {
                "axiom": {
                    "subClassOf": [
                        "AtomicActivity"
                    ],
                    "propertyRestrictions": [
                        "[roomLocalisation some Room]"
                    ]
                },
                "description": "InLocation is defined as a subclass of AtomicActivity, representing activities associated with a specific physical location. Every instance of InLocation must have at least one roomLocalisation relationship to a Room, ensuring that all activities of this class are explicitly linked to a room where they occur.",
                "CQ": [
                    {
                        "axiom": "InLocation subClassOf AtomicActivity",
                        "CQ": [
                            "Does every instance of InLocation represent a form of AtomicActivity?",
                            "What are the more specific activities classified under AtomicActivity, such as InLocation?",
                            "Which upper-level activity categories include InLocation as a member?"
                        ]
                    },
                    {
                        "axiom": "InLocation propertyRestrictions [roomLocalisation some Room]",
                        "CQ": [
                            "Is it required that every instance of InLocation is associated with at least one Room via the roomLocalisation property?",
                            "Can an entity classified as InLocation exist without having a roomLocalisation relationship to a Room?",
                            "Does the presence of the roomLocalisation property with a Room determine whether an entity is an instance of InLocation?"
                        ]
                    }
                ]
            },
            "PhysicalActivity": {
                "axiom": {
                    "subClassOf": [
                        "AtomicActivity"
                    ]
                },
                "description": "PhysicalActivity is defined as a subclass of AtomicActivity. This classification indicates that any instance of PhysicalActivity is also an instance of AtomicActivity, inheriting all its properties and constraints. PhysicalActivity, therefore, represents a specific kind of AtomicActivity, typically involving bodily movement or exertion. No other disjointness or additional property restrictions are specified for this class.",
                "CQ": [
                    {
                        "axiom": "PhysicalActivity subClassOf AtomicActivity",
                        "CQ": [
                            "Is PhysicalActivity classified under the broader category of AtomicActivity?",
                            "Which activities are more specific than AtomicActivity, including PhysicalActivity?",
                            "To which higher-level categories does PhysicalActivity belong within the activity hierarchy?"
                        ]
                    }
                ]
            },
            "PickUpPhone": {
                "axiom": {
                    "subClassOf": [
                        "AtomicActivity"
                    ]
                },
                "description": "PickUpPhone is defined as a subclass of AtomicActivity, indicating that it represents an indivisible, fundamental action within a larger process or workflow. This classification implies that PickUpPhone is treated as a single, non-decomposable activity in the ontology. No additional property restrictions or disjointness axioms are specified.",
                "CQ": [
                    {
                        "axiom": "PickUpPhone subClassOf AtomicActivity",
                        "CQ": [
                            "Is PickUpPhone classified under the broader group of AtomicActivity?",
                            "Which activities are specified as subclasses of AtomicActivity, including PickUpPhone?",
                            "Into what higher-level categories is PickUpPhone organized?"
                        ]
                    }
                ]
            },
            "Sleep": {
                "axiom": {
                    "subClassOf": [
                        "AtomicActivity"
                    ]
                },
                "description": "Sleep is defined as a subclass of AtomicActivity, indicating that it represents a fundamental, indivisible type of activity within the given ontology. The current description (\"Gear 4 / DTI-2\") provides domain-specific or contextual labeling but does not further characterize the nature of Sleep. No additional property restrictions or disjointness axioms are specified for this class.",
                "CQ": [
                    {
                        "axiom": "Sleep subClassOf AtomicActivity",
                        "CQ": [
                            "Is Sleep classified as a specific kind of AtomicActivity?",
                            "Which activities are categorized under AtomicActivity, such as Sleep?",
                            "What broader activity categories include Sleep as a member?"
                        ]
                    }
                ]
            },
            "Speak": {
                "axiom": {
                    "subClassOf": [
                        "AtomicActivity"
                    ]
                },
                "description": "Speak is defined as a subclass of AtomicActivity, indicating that it represents a specific, indivisible action within the ontology. Any instance of Speak is necessarily an AtomicActivity, but not all AtomicActivities are instances of Speak. No additional property restrictions or class relationships are specified for Speak in the current axiom.",
                "CQ": [
                    {
                        "axiom": "Speak subClassOf AtomicActivity",
                        "CQ": [
                            "Is Speak classified as a specific kind of AtomicActivity?",
                            "What distinct activities fall under the category of AtomicActivity, including Speak?",
                            "Which broader categories encompass the activity Speak?"
                        ]
                    }
                ]
            },
            "State": {
                "axiom": {
                    "subClassOf": [
                        "AtomicActivity"
                    ]
                },
                "description": "State is defined as a subclass of AtomicActivity, indicating that every State represents an atomic (indivisible) activity within a given framework. This classification positions State as a fundamental unit of activity, inheriting all characteristics and constraints of AtomicActivity.",
                "CQ": [
                    {
                        "axiom": "State subClassOf AtomicActivity",
                        "CQ": [
                            "Is State classified as a specialized form of AtomicActivity?",
                            "Which activity types fall under the general class of AtomicActivity, including State?",
                            "What are the broader categories that encompass State?"
                        ]
                    }
                ]
            },
            "StepCounting": {
                "axiom": {
                    "subClassOf": [
                        "AtomicActivity"
                    ]
                },
                "description": "StepCounting is defined as a subclass of AtomicActivity, indicating that it represents a specific, indivisible type of activity. The class is annotated with the comment \"WIMU,\" which may refer to its association with wearable inertial measurement unit systems, commonly used for tracking activity metrics such as steps. No further property restrictions or disjointness axioms are specified for this class.",
                "CQ": [
                    {
                        "axiom": "StepCounting subClassOf AtomicActivity",
                        "CQ": [
                            "Is StepCounting a more specific form of AtomicActivity?",
                            "Which activities fall under the scope of AtomicActivity, such as StepCounting?",
                            "To what higher-level categories is StepCounting classified?"
                        ]
                    }
                ]
            },
            "UseObject": {
                "axiom": {
                    "subClassOf": [
                        "AtomicActivity"
                    ]
                },
                "description": "UseObject is defined as a subclass of AtomicActivity, indicating that it represents a specific type of atomic activity within the ontology. By this axiom, all instances of UseObject inherit the general properties and constraints of AtomicActivity, situating UseObject as a more specialized activity focused on the usage of objects.",
                "CQ": [
                    {
                        "axiom": "UseObject subClassOf AtomicActivity",
                        "CQ": [
                            "Is UseObject classified under AtomicActivity in the ontology?",
                            "Which specific activities are categorized as subtypes of AtomicActivity, such as UseObject?",
                            "To which broader activity classes does UseObject belong according to the ontology structure?"
                        ]
                    }
                ]
            },
            "Walk": {
                "axiom": {
                    "subClassOf": [
                        "AtomicActivity"
                    ]
                },
                "description": "Walk is defined as a subclass of AtomicActivity, indicating that walking is considered a fundamental unit of activity within the ontology. No additional property restrictions or disjointness axioms are specified, so Walk inherits all characteristics of AtomicActivity, serving to represent the act of walking as a basic type of activity.",
                "CQ": [
                    {
                        "axiom": "Walk subClassOf AtomicActivity",
                        "CQ": [
                            "Is Walk classified under the broader group of AtomicActivity?",
                            "What are the specific activities that fall under AtomicActivity, such as Walk?",
                            "Which more general category does Walk directly belong to?"
                        ]
                    }
                ]
            },
            "Closed": {
                "axiom": {
                    "subClassOf": [
                        "ObjectEvent"
                    ]
                },
                "description": "Closed is defined as a subclass of ObjectEvent, indicating that it represents a specific type of event involving an object. Any individual belonging to the class Closed is inherently classified as an ObjectEvent, inheriting all of its characteristics. No additional distinguishing restrictions or properties are specified for Closed beyond its relationship to ObjectEvent.",
                "CQ": [
                    {
                        "axiom": "Closed subClassOf ObjectEvent",
                        "CQ": [
                            "Is Closed classified under the broader category of ObjectEvent?",
                            "Which concepts are more specific instances of ObjectEvent, such as Closed?",
                            "What overarching categories encompass Closed within the ontology?"
                        ]
                    }
                ]
            },
            "Off": {
                "axiom": {
                    "subClassOf": [
                        "ObjectEvent"
                    ]
                },
                "description": "Off is defined as a subclass of ObjectEvent. This means every instance of Off is also an instance of ObjectEvent, inheriting all its properties and restrictions. The class Off is used to represent events where an object is turned off or ceases to be active. There are no further property restrictions or disjointness axioms specified for this class.",
                "CQ": [
                    {
                        "axiom": "Off subClassOf ObjectEvent",
                        "CQ": [
                            "Is Off classified as a specialization of ObjectEvent?",
                            "What specific types are included under ObjectEvent, such as Off?",
                            "Which broader event categories encompass Off?"
                        ]
                    }
                ]
            },
            "On": {
                "axiom": {
                    "subClassOf": [
                        "ObjectEvent"
                    ]
                },
                "description": "On is defined as a subclass of ObjectEvent, meaning that all instances of On are specific types of ObjectEvent. This classification indicates that On inherits all characteristics of ObjectEvent, serving as a more specialized concept within the event hierarchy. No additional property restrictions or disjointness axioms are specified for On.",
                "CQ": [
                    {
                        "axiom": "On subClassOf ObjectEvent",
                        "CQ": [
                            "Is On categorized under ObjectEvent as a more specialized concept?",
                            "What specific events are classified as subclasses of ObjectEvent, such as On?",
                            "Which broader event classes include On as a subtype?"
                        ]
                    }
                ]
            },
            "Open": {
                "axiom": {
                    "subClassOf": [
                        "ObjectEvent"
                    ]
                },
                "description": "Open is defined as a subclass of ObjectEvent. This means that every instance of Open is also an instance of ObjectEvent, situating it within the broader context of events involving objects. No additional characteristics or constraints beyond its classification under ObjectEvent are specified.",
                "CQ": [
                    {
                        "axiom": "Open subClassOf ObjectEvent",
                        "CQ": [
                            "Does Open fall under the wider class of ObjectEvent?",
                            "Which instances are classified as subtypes of ObjectEvent, such as Open?",
                            "What higher-level groupings include Open as a member?"
                        ]
                    }
                ]
            },
            "Ringing": {
                "axiom": {
                    "subClassOf": [
                        "ObjectEvent"
                    ]
                },
                "description": "Ringing is defined as a subclass of ObjectEvent. This means that any instance of Ringing is also an instance of ObjectEvent, capturing events specifically characterized as ringing occurrences. No further restrictions or disjointness axioms are specified for this class.",
                "CQ": [
                    {
                        "axiom": "Ringing subClassOf ObjectEvent",
                        "CQ": [
                            "Does Ringing fall under the category of ObjectEvent?",
                            "Which events are considered more specific types within ObjectEvent, including Ringing?",
                            "What overarching categories is Ringing associated with?"
                        ]
                    }
                ]
            },
            "Cooker": {
                "axiom": {
                    "subClassOf": [
                        "Appliance"
                    ]
                },
                "description": "Cooker is defined as a subclass of Appliance. This class encompasses all appliances that are specifically designed for cooking functions, such as stoves, ovens, and similar equipment. Every instance of Cooker is, by definition, also an Appliance.",
                "CQ": [
                    {
                        "axiom": "Cooker subClassOf Appliance",
                        "CQ": [
                            "Is Cooker classified under the broader group of Appliance?",
                            "Which types fall under the category of Appliance, specifically including Cooker?",
                            "What higher-level categories does Cooker belong to within the classification hierarchy?"
                        ]
                    }
                ]
            },
            "Fridge": {
                "axiom": {
                    "subClassOf": [
                        "Appliance"
                    ]
                },
                "description": "Fridge is defined as a subclass of Appliance, indicating that every instance of Fridge is also an Appliance. This formalization groups fridges within the broader category of appliances, without imposing additional constraints or property restrictions specific to fridges.",
                "CQ": [
                    {
                        "axiom": "Fridge subClassOf Appliance",
                        "CQ": [
                            "Does Fridge fall under the general classification of Appliance?",
                            "Which specific appliances include Fridge as a type?",
                            "To which broader categories is Fridge hierarchically related?"
                        ]
                    }
                ]
            },
            "Kettle": {
                "axiom": {
                    "subClassOf": [
                        "Appliance"
                    ]
                },
                "description": "Kettle is defined as a subclass of Appliance, indicating that every kettle is considered a type of appliance. Currently, there are no additional property restrictions or disjointness axioms specified for this class, so its definition is based solely on its classification as an appliance.",
                "CQ": [
                    {
                        "axiom": "Kettle subClassOf Appliance",
                        "CQ": [
                            "Does Kettle fall under the broader grouping of Appliance?",
                            "What specific types are categorized as subclasses of Appliance, such as Kettle?",
                            "Which higher-level classes does Kettle inherit from?"
                        ]
                    }
                ]
            },
            "TV": {
                "axiom": {
                    "subClassOf": [
                        "Appliance"
                    ]
                },
                "description": "TV is defined as a subclass of Appliance. This means that every instance of TV is also considered an Appliance, inheriting all general characteristics of Appliances. No further restrictions, disjointness, or property constraints are specified.",
                "CQ": [
                    {
                        "axiom": "TV subClassOf Appliance",
                        "CQ": [
                            "Is TV categorized as a more specific type under Appliance?",
                            "Which appliances include TV as a subclass?",
                            "To which broader classes does TV belong within the ontology hierarchy?"
                        ]
                    }
                ]
            },
            "WashingMachine": {
                "axiom": {
                    "subClassOf": [
                        "Appliance"
                    ]
                },
                "description": "WashingMachine is defined as a subclass of Appliance, indicating that all washing machines are considered a type of appliance. No further restrictions or relationships are specified in the current axioms. This class is used to represent devices designed for cleaning laundry.",
                "CQ": [
                    {
                        "axiom": "WashingMachine subClassOf Appliance",
                        "CQ": [
                            "Is WashingMachine classified as a type of Appliance?",
                            "Which categories encompass WashingMachine as a more specialized instance, including Appliance?",
                            "What are the more general classes that WashingMachine is a member of?"
                        ]
                    }
                ]
            },
            "Cycling": {
                "axiom": {
                    "subClassOf": [
                        "OutdoorPhysicalActivity"
                    ]
                },
                "description": "Cycling is defined as a subclass of OutdoorPhysicalActivity, meaning that it is classified as a type of physical activity that takes place outdoors. This formalization indicates that all instances of Cycling are also instances of OutdoorPhysicalActivity, inheriting its general characteristics.",
                "CQ": [
                    {
                        "axiom": "Cycling subClassOf OutdoorPhysicalActivity",
                        "CQ": [
                            "Is Cycling classified as a specialized form of OutdoorPhysicalActivity?",
                            "Which specific activities fall under the category of OutdoorPhysicalActivity, such as Cycling?",
                            "What broader activity categories does Cycling fall under in this context?"
                        ]
                    }
                ]
            },
            "Running": {
                "axiom": {
                    "subClassOf": [
                        "OutdoorPhysicalActivity"
                    ]
                },
                "description": "Running is defined as a subclass of OutdoorPhysicalActivity, indicating that all instances of Running are considered outdoor physical activities. This formalization situates Running within the broader context of activities performed outdoors that involve physical exertion.",
                "CQ": [
                    {
                        "axiom": "Running subClassOf OutdoorPhysicalActivity",
                        "CQ": [
                            "Is Running classified under the broader category of OutdoorPhysicalActivity?",
                            "What specific types fall under OutdoorPhysicalActivity, such as Running?",
                            "Which higher-level activity classes does Running belong to within the ontology?"
                        ]
                    }
                ]
            },
            "DangerousBedExit": {
                "axiom": {
                    "subClassOf": [
                        "BedExit"
                    ]
                },
                "description": "DangerousBedExit is defined as a subclass of BedExit. This indicates that every instance of DangerousBedExit is also an instance of BedExit, but captures those bed exit events that are specifically characterized as dangerous or high-risk. No further distinguishing axioms or property restrictions are specified beyond its position in the class hierarchy.",
                "CQ": [
                    {
                        "axiom": "DangerousBedExit subClassOf BedExit",
                        "CQ": [
                            "Is DangerousBedExit classified under the broader category of BedExit?",
                            "Which specific types fall under BedExit, including DangerousBedExit?",
                            "What are the direct parent classes for DangerousBedExit in the ontology?"
                        ]
                    }
                ]
            },
            "LongBedExit": {
                "axiom": {
                    "subClassOf": [
                        "BedExit"
                    ]
                },
                "description": "LongBedExit is defined as a subclass of BedExit. This indicates that every instance of LongBedExit is also an instance of BedExit, inheriting all characteristics and restrictions that apply to BedExit, while potentially having additional distinguishing properties or constraints specific to LongBedExit.",
                "CQ": [
                    {
                        "axiom": "LongBedExit subClassOf BedExit",
                        "CQ": [
                            "Does LongBedExit fall under the broader classification of BedExit?",
                            "What more specific types are included within BedExit, such as LongBedExit?",
                            "Which general categories encompass LongBedExit in the hierarchy?"
                        ]
                    }
                ]
            },
            "NightRoomVisit": {
                "axiom": {
                    "subClassOf": [
                        "BedExit"
                    ]
                },
                "description": "NightRoomVisit is defined as a subclass of BedExit, indicating that every instance of NightRoomVisit is also a kind of BedExit. This class represents events where an individual exits their bed specifically for a room visit during the night, inheriting all the characteristics and properties of BedExit while providing a more specific context for nighttime occurrences.",
                "CQ": [
                    {
                        "axiom": "NightRoomVisit subClassOf BedExit",
                        "CQ": [
                            "Are all NightRoomVisit instances considered examples of BedExit?",
                            "Which specific activities are categorized under BedExit, such as NightRoomVisit?",
                            "What broader event types encompass NightRoomVisit?"
                        ]
                    }
                ]
            },
            "DoorClosed": {
                "axiom": {
                    "subClassOf": [
                        "Closed"
                    ],
                    "propertyRestrictions": [
                        "[hasAgent some Door]"
                    ]
                },
                "description": "DoorClosed is defined as a subclass of Closed and is characterized by the restriction that it must have at least one agent that is a Door (hasAgent some Door). This means that DoorClosed instances represent situations or states in which something closed specifically involves a Door as the acting agent.",
                "CQ": [
                    {
                        "axiom": "DoorClosed subClassOf Closed",
                        "CQ": [
                            "Does DoorClosed represent a more specific category under Closed?",
                            "Which conditions are classified as specializations of Closed, such as DoorClosed?",
                            "Under which general states can DoorClosed be grouped?"
                        ]
                    },
                    {
                        "axiom": "DoorClosed propertyRestrictions [hasAgent some Door]",
                        "CQ": [
                            "Is it required that DoorClosed must have the hasAgent property associated with at least one Door?",
                            "Can DoorClosed occur without any Door being specified as an agent?",
                            "Does every instance of DoorClosed necessarily have a Door as its agent through the hasAgent property?"
                        ]
                    }
                ]
            },
            "DoorOpen": {
                "axiom": {
                    "subClassOf": [
                        "Open"
                    ],
                    "propertyRestrictions": [
                        "[hasAgent some Door]"
                    ]
                },
                "description": "DoorOpen is defined as a subclass of Open, representing a specific type of open state. It is further characterized by the property restriction that it must have some agent which is a Door. This means that instances of DoorOpen denote situations or events where the entity being open is specifically a Door.",
                "CQ": [
                    {
                        "axiom": "DoorOpen subClassOf Open",
                        "CQ": [
                            "Is DoorOpen classified as a more specific instance under the category of Open?",
                            "Which subclasses constitute the set of Open, including DoorOpen?",
                            "What broader categories does DoorOpen fall under within the hierarchy?"
                        ]
                    },
                    {
                        "axiom": "DoorOpen propertyRestrictions [hasAgent some Door]",
                        "CQ": [
                            "Must every instance of DoorOpen involve at least one Door as the agent?",
                            "Is it possible for DoorOpen to occur without a Door being the agent?",
                            "Does DoorOpen require that the property 'hasAgent' be associated with a Door?"
                        ]
                    }
                ]
            },
            "FaceToFaceInteraction": {
                "axiom": {
                    "subClassOf": [
                        "SocialInteraction"
                    ]
                },
                "description": "FaceToFaceInteraction is a subclass of SocialInteraction, representing social interactions that occur when participants are physically present with each other. Individuals in this class engage in direct, co-located communication, distinguishing them from remote or mediated interactions.",
                "CQ": [
                    {
                        "axiom": "FaceToFaceInteraction subClassOf SocialInteraction",
                        "CQ": [
                            "Is every FaceToFaceInteraction categorized as a form of SocialInteraction?",
                            "Which specific interactions fall under SocialInteraction, such as FaceToFaceInteraction?",
                            "In terms of broader classifications, what is the parent category for FaceToFaceInteraction?"
                        ]
                    }
                ]
            },
            "TelephoneInteraction": {
                "axiom": {
                    "subClassOf": [
                        "SocialInteraction"
                    ]
                },
                "description": "TelephoneInteraction is defined as a subclass of SocialInteraction, indicating that it represents a specific type of social exchange occurring via telephone communication. Members of this class participate in interactions where the primary medium is a telephone, distinguishing them from other forms of social interaction such as face-to-face conversations or electronic messaging.",
                "CQ": [
                    {
                        "axiom": "TelephoneInteraction subClassOf SocialInteraction",
                        "CQ": [
                            "Is TelephoneInteraction categorized under the broader class of SocialInteraction?",
                            "Which specific interactions are classified as types of SocialInteraction, including TelephoneInteraction?",
                            "What broader interaction categories encompass TelephoneInteraction within the ontology?"
                        ]
                    }
                ]
            },
            "HaveBreakfast": {
                "axiom": {
                    "subClassOf": [
                        "HaveMeal"
                    ]
                },
                "description": "HaveBreakfast is defined as a subclass of HaveMeal, indicating that every instance of HaveBreakfast is also an instance of HaveMeal. This class represents the specific act or event of having breakfast, distinguished from other types of meals by its subclass relationship. No additional constraints or disjointness axioms are specified.",
                "CQ": [
                    {
                        "axiom": "HaveBreakfast subClassOf HaveMeal",
                        "CQ": [
                            "Is HaveMeal a more general class that includes HaveBreakfast?",
                            "Which actions are considered specific types of HaveMeal, such as HaveBreakfast?",
                            "Under which broader activities does HaveBreakfast fall?"
                        ]
                    }
                ]
            },
            "HaveDinner": {
                "axiom": {
                    "subClassOf": [
                        "HaveMeal"
                    ]
                },
                "description": "HaveDinner is defined as a subclass of HaveMeal, meaning that every instance of HaveDinner is also an instance of HaveMeal. This class represents the specific type of meal event that occurs during dinner, distinguishing it from other meal occasions within the broader category of meals.",
                "CQ": [
                    {
                        "axiom": "HaveDinner subClassOf HaveMeal",
                        "CQ": [
                            "Is HaveDinner classified as a type of HaveMeal?",
                            "Which specific activities are categorized under HaveMeal, such as HaveDinner?",
                            "What broader event types encompass HaveDinner?"
                        ]
                    }
                ]
            },
            "HaveLunch": {
                "axiom": {
                    "subClassOf": [
                        "HaveMeal"
                    ]
                },
                "description": "HaveLunch is defined as a subclass of HaveMeal, indicating that every instance of HaveLunch is also an instance of HaveMeal. This class represents activities or events specifically related to having lunch, distinguishing them from other types of meals. No additional restrictions or properties are imposed beyond this hierarchical relationship.",
                "CQ": [
                    {
                        "axiom": "HaveLunch subClassOf HaveMeal",
                        "CQ": [
                            "Does HaveLunch fall under the classification of HaveMeal?",
                            "Which meal-related activities are categorized as more specific types beneath HaveMeal, such as HaveLunch?",
                            "To what broader meal categories can HaveLunch be assigned?"
                        ]
                    }
                ]
            },
            "HaveDrink": {
                "axiom": {
                    "subClassOf": [
                        "FoodAndDrinkConsumption"
                    ]
                },
                "description": "HaveDrink is a subclass of FoodAndDrinkConsumption, representing events or actions where an individual consumes a beverage. Any instance of HaveDrink is, by definition, a specific type of food and drink consumption activity, emphasizing the act of drinking over eating.",
                "CQ": [
                    {
                        "axiom": "HaveDrink subClassOf FoodAndDrinkConsumption",
                        "CQ": [
                            "Is HaveDrink categorized as a kind of FoodAndDrinkConsumption?",
                            "Which specific actions fall under FoodAndDrinkConsumption, including HaveDrink?",
                            "What broader classifications encompass HaveDrink?"
                        ]
                    }
                ]
            },
            "HaveMeal": {
                "axiom": {
                    "subClassOf": [
                        "FoodAndDrinkConsumption"
                    ]
                },
                "description": "HaveMeal is defined as a subclass of FoodAndDrinkConsumption, representing instances where an individual engages in the act of consuming food and drink. Members of this class inherit all characteristics and constraints attributed to food and drink consumption activities.",
                "CQ": [
                    {
                        "axiom": "HaveMeal subClassOf FoodAndDrinkConsumption",
                        "CQ": [
                            "Is HaveMeal classified under the broader concept of FoodAndDrinkConsumption?",
                            "What specific activities are categorized as types of FoodAndDrinkConsumption, such as HaveMeal?",
                            "Which overarching groups does HaveMeal fall within in the ontology?"
                        ]
                    }
                ]
            },
            "HaveSnack": {
                "axiom": {
                    "subClassOf": [
                        "FoodAndDrinkConsumption"
                    ]
                },
                "description": "HaveSnack is defined as a subclass of FoodAndDrinkConsumption, meaning any instance of HaveSnack is also an instance of FoodAndDrinkConsumption. This class represents events or activities where snacks are consumed, distinguishing it from other forms of food and drink consumption.",
                "CQ": [
                    {
                        "axiom": "HaveSnack subClassOf FoodAndDrinkConsumption",
                        "CQ": [
                            "Does HaveSnack fall under the category of FoodAndDrinkConsumption?",
                            "What types of activities are more specific instances of FoodAndDrinkConsumption, such as HaveSnack?",
                            "Which higher-level categories include HaveSnack within their classification?"
                        ]
                    }
                ]
            },
            "HeartRate": {
                "axiom": {
                    "subClassOf": [
                        "PhysiologicalMeasurement"
                    ],
                    "propertyRestrictions": [
                        "[hasRate exactly 1]",
                        "[hasRate some rdfs:Literal]"
                    ]
                },
                "description": "HeartRate is defined as a subclass of PhysiologicalMeasurement, representing a specific type of physiological measurement characterized by having exactly one associated rate value, which must be provided as a literal (numerical) value. This class ensures that every instance of HeartRate records precisely one measurement value through the hasRate property.",
                "CQ": [
                    {
                        "axiom": "HeartRate subClassOf PhysiologicalMeasurement",
                        "CQ": [
                            "Does HeartRate fall under the classification of PhysiologicalMeasurement?",
                            "Which specific measurements are recognized as subtypes of PhysiologicalMeasurement, including HeartRate?",
                            "What broader measurement categories encompass HeartRate?"
                        ]
                    },
                    {
                        "axiom": "HeartRate propertyRestrictions [hasRate exactly 1]",
                        "CQ": [
                            "Is it required that each HeartRate instance is associated with exactly one value via the hasRate property?",
                            "Can a HeartRate have more than one or fewer than one hasRate value assigned?",
                            "Does the ontology prevent a HeartRate from having multiple or no hasRate properties?"
                        ]
                    },
                    {
                        "axiom": "HeartRate propertyRestrictions [hasRate some rdfs:Literal]",
                        "CQ": [
                            "Is every instance of HeartRate required to have at least one value assigned through the hasRate property?",
                            "Does the ontology specify that HeartRate always possesses a hasRate property linking to a literal value?",
                            "Is it necessary for HeartRate to be characterized by the presence of some hasRate relationship with a literal datatype?"
                        ]
                    }
                ]
            },
            "SkinConductivity": {
                "axiom": {
                    "subClassOf": [
                        "PhysiologicalMeasurement"
                    ],
                    "propertyRestrictions": [
                        "[hasConductivity only rdfs:Literal]",
                        "[hasConductivity exactly 1]"
                    ]
                },
                "description": "SkinConductivity is defined as a subclass of PhysiologicalMeasurement. Members of this class are characterized by the requirement that they possess exactly one value for the property hasConductivity, and this value must be a literal (such as a numerical measurement). This ensures that each instance of SkinConductivity represents a specific, literal-based conductivity measurement associated with physiological data.",
                "CQ": [
                    {
                        "axiom": "SkinConductivity subClassOf PhysiologicalMeasurement",
                        "CQ": [
                            "Does SkinConductivity fall under the classification of PhysiologicalMeasurement?",
                            "What types of measurements are categorized more specifically than PhysiologicalMeasurement, including SkinConductivity?",
                            "Which broader measurement categories encompass SkinConductivity?"
                        ]
                    },
                    {
                        "axiom": "SkinConductivity propertyRestrictions [hasConductivity only rdfs:Literal]",
                        "CQ": [
                            "Is SkinConductivity restricted to having only hasConductivity values that are literals?",
                            "Can SkinConductivity possess a hasConductivity value that is not an rdfs:Literal?",
                            "Must every hasConductivity relation for SkinConductivity point exclusively to an rdfs:Literal?"
                        ]
                    },
                    {
                        "axiom": "SkinConductivity propertyRestrictions [hasConductivity exactly 1]",
                        "CQ": [
                            "Is an entity with SkinConductivity required to have exactly one value for the property hasConductivity?",
                            "Can SkinConductivity ever possess more than one or fewer than one hasConductivity assignment?",
                            "Does the definition of SkinConductivity restrict it to a single hasConductivity value exclusively?"
                        ]
                    }
                ]
            },
            "SkinTemperature": {
                "axiom": {
                    "subClassOf": [
                        "PhysiologicalMeasurement"
                    ],
                    "propertyRestrictions": [
                        "[hasTemperature some rdfs:Literal]",
                        "[hasTemperature exactly 1]"
                    ]
                },
                "description": "SkinTemperature is defined as a subclass of PhysiologicalMeasurement, representing a specific type of physiological measurement. Members of this class are constrained by the property restriction that they must have exactly one hasTemperature property value, which must be a literal (e.g., a numerical value). This formalization ensures that any instance of SkinTemperature uniquely and quantifiably indicates the temperature measured on the skin.",
                "CQ": [
                    {
                        "axiom": "SkinTemperature subClassOf PhysiologicalMeasurement",
                        "CQ": [
                            "Does SkinTemperature fall under the category of PhysiologicalMeasurement?",
                            "What measurements are considered subclasses of PhysiologicalMeasurement, including SkinTemperature?",
                            "Which broader classes encompass SkinTemperature?"
                        ]
                    },
                    {
                        "axiom": "SkinTemperature propertyRestrictions [hasTemperature some rdfs:Literal]",
                        "CQ": [
                            "Is it necessary for SkinTemperature to have the property hasTemperature with a value of type Literal?",
                            "Does every instance of SkinTemperature possess at least one value for the hasTemperature property?",
                            "Can SkinTemperature exist without being linked to a value via the hasTemperature property?"
                        ]
                    },
                    {
                        "axiom": "SkinTemperature propertyRestrictions [hasTemperature exactly 1]",
                        "CQ": [
                            "Is it necessary for every SkinTemperature instance to have exactly one associated hasTemperature value?",
                            "Can a SkinTemperature be characterized by more or less than one hasTemperature property?",
                            "Does the ontology allow SkinTemperature individuals to have more than one or no hasTemperature assignments?"
                        ]
                    }
                ]
            },
            "InRoom": {
                "axiom": {
                    "subClassOf": [
                        "InLocation"
                    ],
                    "propertyRestrictions": [
                        "[roomLocalisation some Place]"
                    ]
                },
                "description": "InRoom is defined as a subclass of InLocation, indicating that it represents a more specific type of location context. Every instance of InRoom must be associated with at least one Place through the roomLocalisation property. This formalization ensures that anything classified as InRoom is located within a specified Place, thereby refining its spatial characterization within a broader location hierarchy.",
                "CQ": [
                    {
                        "axiom": "InRoom subClassOf InLocation",
                        "CQ": [
                            "Does InRoom represent a more specific instance within the broader InLocation category?",
                            "What are the direct subclasses that fall under InLocation, such as InRoom?",
                            "Which higher-level categories encompass InRoom as a subcategory?"
                        ]
                    },
                    {
                        "axiom": "InRoom propertyRestrictions [roomLocalisation some Place]",
                        "CQ": [
                            "Is every instance of InRoom associated with at least one Place via the roomLocalisation property?",
                            "Does the existence of the roomLocalisation property for InRoom necessarily indicate a connection to a Place?",
                            "Must an InRoom relation always specify a Place as its roomLocalisation?"
                        ]
                    }
                ]
            },
            "NearObject": {
                "axiom": {
                    "subClassOf": [
                        "InLocation"
                    ],
                    "propertyRestrictions": [
                        "[objectLocalisation some Object]"
                    ]
                },
                "description": "NearObject is defined as a subclass of InLocation and is characterized by the property restriction that it must have at least one objectLocalisation relationship to an instance of Object. This means every NearObject instance is localized in space relative to some object, capturing the notion of proximity in an ontological context.",
                "CQ": [
                    {
                        "axiom": "NearObject subClassOf InLocation",
                        "CQ": [
                            "Is NearObject classified as a specific type of InLocation?",
                            "Which classes fall under the broader category of InLocation, including NearObject?",
                            "What are the parent classes that NearObject directly inherits from?"
                        ]
                    },
                    {
                        "axiom": "NearObject propertyRestrictions [objectLocalisation some Object]",
                        "CQ": [
                            "Is it required that a NearObject must have at least one object localisation relating to an Object?",
                            "Can every NearObject be associated with some instance of Object via the objectLocalisation property?",
                            "Does the NearObject class necessitate the existence of the objectLocalisation property connecting it to an Object?"
                        ]
                    }
                ]
            },
            "Outdoors": {
                "axiom": {
                    "subClassOf": [
                        "InLocation"
                    ]
                },
                "description": "Outdoors is defined as a subclass of InLocation, indicating that it represents a specific type of location. Any instance of Outdoors is by definition also an instance of InLocation, capturing places or areas that are external to buildings or structures. The class formalizes the concept of being in an open, outside environment.",
                "CQ": [
                    {
                        "axiom": "Outdoors subClassOf InLocation",
                        "CQ": [
                            "Is Outdoors a more specific instance within the scope of InLocation?",
                            "Which locations are encompassed by InLocation, including Outdoors?",
                            "What broader location categories does Outdoors fall under?"
                        ]
                    }
                ]
            },
            "IndoorPhysicalActivity": {
                "axiom": {
                    "subClassOf": [
                        "PhysicalActivity"
                    ]
                },
                "description": "IndoorPhysicalActivity is defined as a subclass of PhysicalActivity. This class encompasses physical activities that are specifically performed indoors, distinguishing them from outdoor or unspecified-location activities. Any individual classified as IndoorPhysicalActivity is, by definition, a type of PhysicalActivity but is further characterized by its occurrence within indoor environments.",
                "CQ": [
                    {
                        "axiom": "IndoorPhysicalActivity subClassOf PhysicalActivity",
                        "CQ": [
                            "Does IndoorPhysicalActivity fall under the classification of PhysicalActivity?",
                            "What broader categories does IndoorPhysicalActivity belong to within the ontology?",
                            "Which activities are classified as subtypes of PhysicalActivity, including IndoorPhysicalActivity?"
                        ]
                    }
                ]
            },
            "OutdoorPhysicalActivity": {
                "axiom": {
                    "subClassOf": [
                        "PhysicalActivity"
                    ]
                },
                "description": "OutdoorPhysicalActivity is defined as a subclass of PhysicalActivity. This class encompasses all forms of physical activity that take place outdoors, distinguishing it from indoor activities. Members of this class inherit all characteristics of PhysicalActivity, but are specifically constrained by their outdoor context.",
                "CQ": [
                    {
                        "axiom": "OutdoorPhysicalActivity subClassOf PhysicalActivity",
                        "CQ": [
                            "Does OutdoorPhysicalActivity fall under the category of PhysicalActivity?",
                            "Which subclasses classify under PhysicalActivity, such as OutdoorPhysicalActivity?",
                            "What broader activity classifications encompass OutdoorPhysicalActivity?"
                        ]
                    }
                ]
            },
            "KettleOff": {
                "axiom": {
                    "subClassOf": [
                        "Off"
                    ],
                    "propertyRestrictions": [
                        "[hasAgent some Kettle]"
                    ]
                },
                "description": "KettleOff is defined as a subclass of Off, representing situations or states where something is powered down or inactive. It is characterized by the additional property that its agent must be some instance of Kettle, indicating that only kettles can be agents in this context. This class ensures that any instance of KettleOff specifically refers to a kettle that is in the \"off\" state.",
                "CQ": [
                    {
                        "axiom": "KettleOff subClassOf Off",
                        "CQ": [
                            "Is KettleOff categorized as a more specific form of Off?",
                            "Which Off states include KettleOff as a subclass?",
                            "To which parent classes does KettleOff belong within the system?"
                        ]
                    },
                    {
                        "axiom": "KettleOff propertyRestrictions [hasAgent some Kettle]",
                        "CQ": [
                            "Must every instance of KettleOff involve at least one Kettle as the agent?",
                            "Is it possible for KettleOff to occur without any Kettle participating as the agent?",
                            "Does the occurrence of KettleOff require the presence of a Kettle playing the agent role?"
                        ]
                    }
                ]
            },
            "KettleOn": {
                "axiom": {
                    "subClassOf": [
                        "On"
                    ],
                    "propertyRestrictions": [
                        "[hasAgent some Kettle]"
                    ]
                },
                "description": "KettleOn is a subclass of On, representing states or events in which something is switched on. Specifically, KettleOn instances are characterized by having some agent that is a Kettle (i.e., a Kettle is responsible for or involved in the 'on' state). This ensures that only situations where a Kettle is turned on are included in this class.",
                "CQ": [
                    {
                        "axiom": "KettleOn subClassOf On",
                        "CQ": [
                            "Does KettleOn represent a specific instance within the broader class On?",
                            "Which situations classified as On also include KettleOn as a specialized case?",
                            "What general categories encompass KettleOn within the hierarchy of On?"
                        ]
                    },
                    {
                        "axiom": "KettleOn propertyRestrictions [hasAgent some Kettle]",
                        "CQ": [
                            "Is every instance classified under KettleOn required to have at least one hasAgent relationship to a Kettle?",
                            "Can there be a KettleOn event without any associated Kettle via the hasAgent property?",
                            "Does the definition of KettleOn ensure the existence of a hasAgent link to a Kettle?"
                        ]
                    }
                ]
            },
            "LightLevel": {
                "axiom": {
                    "subClassOf": [
                        "AmbientMeasurement"
                    ],
                    "propertyRestrictions": [
                        "[hasLightLevel some rdfs:Literal]",
                        "[hasLightLevel exactly 1]"
                    ]
                },
                "description": "LightLevel is defined as a subclass of AmbientMeasurement. Every instance of LightLevel is required to have exactly one value for the property hasLightLevel, and this value must be of type rdfs:Literal. This ensures that each LightLevel measurement precisely captures a single ambient light value.",
                "CQ": [
                    {
                        "axiom": "LightLevel subClassOf AmbientMeasurement",
                        "CQ": [
                            "Does LightLevel fall under the wider class of AmbientMeasurement?",
                            "Which subclasses are encompassed by AmbientMeasurement, such as LightLevel?",
                            "What are the general categories under which LightLevel is classified?"
                        ]
                    },
                    {
                        "axiom": "LightLevel propertyRestrictions [hasLightLevel some rdfs:Literal]",
                        "CQ": [
                            "Is it necessary for a LightLevel to have at least one value for the property 'hasLightLevel'?",
                            "Does every instance of LightLevel require association with some literal value through 'hasLightLevel'?",
                            "Can a LightLevel exist without being linked to any literal value by the 'hasLightLevel' property?"
                        ]
                    },
                    {
                        "axiom": "LightLevel propertyRestrictions [hasLightLevel exactly 1]",
                        "CQ": [
                            "Is every instance of LightLevel required to have exactly one value for the hasLightLevel property?",
                            "Can an individual classified as LightLevel possess more than one hasLightLevel assignment?",
                            "Does the LightLevel class permit the absence of the hasLightLevel property or must it always be present exactly once?"
                        ]
                    }
                ]
            },
            "NoiseLevel": {
                "axiom": {
                    "subClassOf": [
                        "AmbientMeasurement"
                    ],
                    "propertyRestrictions": [
                        "[hasNoiseLevel exactly 1]",
                        "[hasNoiseLevel some rdfs:Literal]"
                    ]
                },
                "description": "NoiseLevel is defined as a subclass of AmbientMeasurement, indicating that it represents a specific type of measurement related to environmental conditions. Every instance of NoiseLevel must have exactly one associated value via the hasNoiseLevel property, and this value must be a literal (e.g., a number or string representing the measured noise). This formalization ensures each NoiseLevel measurement uniquely records a single quantifiable noise value.",
                "CQ": [
                    {
                        "axiom": "NoiseLevel subClassOf AmbientMeasurement",
                        "CQ": [
                            "Does NoiseLevel fall under the broader category of AmbientMeasurement?",
                            "Which measurement types are classified as more specific forms of AmbientMeasurement, including NoiseLevel?",
                            "What are the more general classes that contain NoiseLevel?"
                        ]
                    },
                    {
                        "axiom": "NoiseLevel propertyRestrictions [hasNoiseLevel exactly 1]",
                        "CQ": [
                            "Is it required that each entity assigned a NoiseLevel must have exactly one value for the property 'hasNoiseLevel'?",
                            "Can an instance of NoiseLevel possess multiple values for the hasNoiseLevel property?",
                            "Is it possible for an entity representing NoiseLevel to exist without having any value assigned to the 'hasNoiseLevel' property?"
                        ]
                    },
                    {
                        "axiom": "NoiseLevel propertyRestrictions [hasNoiseLevel some rdfs:Literal]",
                        "CQ": [
                            "Is every instance of NoiseLevel required to have at least one associated value for the property hasNoiseLevel?",
                            "Can a NoiseLevel exist without any hasNoiseLevel property value assigned to it?",
                            "Does the definition of NoiseLevel necessitate the existence of at least one hasNoiseLevel relationship with a literal?"
                        ]
                    }
                ]
            },
            "LongNap": {
                "axiom": {
                    "subClassOf": [
                        "Nap"
                    ]
                },
                "description": "LongNap is defined as a subclass of Nap, representing nap instances with a duration longer than 30 minutes. This class is used to categorize naps that exceed the typical short duration, allowing formal distinction within the Nap hierarchy based on temporal length.",
                "CQ": [
                    {
                        "axiom": "LongNap subClassOf Nap",
                        "CQ": [
                            "Is LongNap categorized as a type of Nap?",
                            "Which variations of Nap include LongNap as a specific instance?",
                            "What broader groupings does LongNap fall under?"
                        ]
                    }
                ]
            },
            "NapAfterLunch": {
                "axiom": {
                    "subClassOf": [
                        "Nap"
                    ]
                },
                "description": "NapAfterLunch is defined as a subclass of Nap, indicating that every instance of NapAfterLunch is also an instance of Nap. This class specifies naps that occur specifically after lunch, distinguishing them from naps taken at other times.",
                "CQ": [
                    {
                        "axiom": "NapAfterLunch subClassOf Nap",
                        "CQ": [
                            "Is NapAfterLunch categorized as a specific type of Nap?",
                            "What kinds of Naps are defined, including NapAfterLunch?",
                            "Which broader classes encompass NapAfterLunch?"
                        ]
                    }
                ]
            },
            "LongTableExit": {
                "axiom": {
                    "subClassOf": [
                        "TableExit"
                    ]
                },
                "description": "LongTableExit is defined as a subclass of TableExit. This means that every LongTableExit is a kind of TableExit, inheriting all properties and constraints of TableExit, and can be used wherever a TableExit is required. No further distinguishing characteristics or restrictions are specified for LongTableExit beyond this subclass relationship.",
                "CQ": [
                    {
                        "axiom": "LongTableExit subClassOf TableExit",
                        "CQ": [
                            "Is LongTableExit classified as a more specific type under TableExit?",
                            "Which types are classified as subcategories of TableExit, such as LongTableExit?",
                            "To what broader categories does LongTableExit belong based on its classification?"
                        ]
                    }
                ]
            },
            "Lying": {
                "axiom": {
                    "subClassOf": [
                        "Posture"
                    ],
                    "propertyRestrictions": [
                        "[objectLocalisation some Furniture]"
                    ]
                },
                "description": "Lying is defined as a subclass of Posture and is characterized by the requirement that it occurs in association with some piece of Furniture. Any instance of Lying must involve an object that is at least partially localized on furniture, distinguishing this posture from other postures that may occur in different contexts.",
                "CQ": [
                    {
                        "axiom": "Lying subClassOf Posture",
                        "CQ": [
                            "Is Lying an instance of the general category Posture?",
                            "Which specific types of Posture include Lying as a subclass?",
                            "Under which broader classes within the ontology is Lying classified?"
                        ]
                    },
                    {
                        "axiom": "Lying propertyRestrictions [objectLocalisation some Furniture]",
                        "CQ": [
                            "Is it required that any instance of Lying must have an object localisation within some Furniture?",
                            "Can an Lying activity occur without involving the localisation of an object related to Furniture?",
                            "Does every Lying instance necessarily involve the localisation of an object that is classified as Furniture?"
                        ]
                    }
                ]
            },
            "Sitting": {
                "axiom": {
                    "subClassOf": [
                        "Posture"
                    ],
                    "propertyRestrictions": [
                        "[objectLocalisation some Furniture]"
                    ]
                },
                "description": "Sitting is defined as a subclass of Posture, representing a specific body position. It is further characterized by a property restriction requiring that the object of sitting must be localized on some instance of Furniture. This means that every instance of Sitting involves an association with a piece of furniture, reflecting the typical context in which the sitting posture occurs.",
                "CQ": [
                    {
                        "axiom": "Sitting subClassOf Posture",
                        "CQ": [
                            "Does Sitting fall under the broader classification of Posture?",
                            "Which specific postures include Sitting as a subclass?",
                            "What categories of Posture encompass the concept of Sitting?"
                        ]
                    },
                    {
                        "axiom": "Sitting propertyRestrictions [objectLocalisation some Furniture]",
                        "CQ": [
                            "Is it necessary for a Sitting instance to have the objectLocalisation property linked to some Furniture?",
                            "Does every Sitting require at least one associated Furniture through the objectLocalisation property?",
                            "Can a Sitting exist without any objectLocalisation relation to Furniture?"
                        ]
                    }
                ]
            },
            "Moving": {
                "axiom": {
                    "subClassOf": [
                        "Active"
                    ]
                },
                "description": "Moving is defined as a subclass of Active, indicating that all instances of Moving are also considered Active. This classification captures entities or processes characterized by being in a state of action or motion, forming a specific subset within the broader category of Active phenomena.",
                "CQ": [
                    {
                        "axiom": "Moving subClassOf Active",
                        "CQ": [
                            "Is Moving a more specific category under the broader class of Active?",
                            "Which subclasses are defined within the class Active, such as Moving?",
                            "What are the higher-level classes that encompass Moving?"
                        ]
                    }
                ]
            },
            "NightBathroomVisit": {
                "axiom": {
                    "subClassOf": [
                        "NightRoomVisit"
                    ]
                },
                "description": "NightBathroomVisit is defined as a subclass of NightRoomVisit. This means every instance of NightBathroomVisit is also considered an instance of NightRoomVisit, specifying that the visit occurs during the night and takes place specifically in a bathroom. No additional restrictions or properties are provided.",
                "CQ": [
                    {
                        "axiom": "NightBathroomVisit subClassOf NightRoomVisit",
                        "CQ": [
                            "Is NightBathroomVisit classified under the broader group of NightRoomVisit?",
                            "Which visit types are defined as more specific forms of NightRoomVisit, such as NightBathroomVisit?",
                            "To which overarching categories does NightBathroomVisit belong within the context of night-time visits?"
                        ]
                    }
                ]
            },
            "NightKitchenVisit": {
                "axiom": {
                    "subClassOf": [
                        "NightRoomVisit"
                    ]
                },
                "description": "NightKitchenVisit is defined as a subclass of NightRoomVisit. This means every NightKitchenVisit is a type of NightRoomVisit, inheriting all characteristics associated with NightRoomVisit, but specifically refers to visits to the kitchen that occur at night. No additional property restrictions or disjointness axioms are specified.",
                "CQ": [
                    {
                        "axiom": "NightKitchenVisit subClassOf NightRoomVisit",
                        "CQ": [
                            "Is NightKitchenVisit a more specific form of NightRoomVisit?",
                            "Which visit types fall under the broader classification of NightRoomVisit?",
                            "What general categories encompass NightKitchenVisit?"
                        ]
                    }
                ]
            },
            "NightLivingRoomVisit": {
                "axiom": {
                    "subClassOf": [
                        "NightRoomVisit"
                    ]
                },
                "description": "NightLivingRoomVisit is defined as a subclass of NightRoomVisit. This denotes that every instance of a NightLivingRoomVisit is also an instance of NightRoomVisit, typically representing visits to a living room that occur specifically during nighttime. No further property or disjointness constraints are specified in the current axioms.",
                "CQ": [
                    {
                        "axiom": "NightLivingRoomVisit subClassOf NightRoomVisit",
                        "CQ": [
                            "Is NightRoomVisit a more general category that includes NightLivingRoomVisit?",
                            "Which specific instances or subclasses are encompassed by NightRoomVisit?",
                            "What broader classes does NightLivingRoomVisit fall under?"
                        ]
                    }
                ]
            },
            "Object": {
                "axiom": {
                    "subClassOf": [
                        "Entity"
                    ]
                },
                "description": "Object is defined as a subclass of Entity. This relationship indicates that every instance of Object is also considered an Entity, inheriting all general characteristics associated with Entity. No other constraints or differentiating axioms are specified for Object.",
                "CQ": [
                    {
                        "axiom": "Object subClassOf Entity",
                        "CQ": [
                            "Is Object a specialized form of Entity?",
                            "What are all the subclasses categorized under Entity?",
                            "Which general groupings does Object fall under within the ontology?"
                        ]
                    }
                ]
            },
            "Person": {
                "axiom": {
                    "subClassOf": [
                        "Entity"
                    ]
                },
                "description": "Person is defined as a subclass of Entity, meaning every individual categorized as a Person is also considered an Entity. No additional property restrictions or disjointness axioms are specified, so the class Person serves as a general categorization for entities recognized as people.",
                "CQ": [
                    {
                        "axiom": "Person subClassOf Entity",
                        "CQ": [
                            "Does the Person class fall under the more general Entity category?",
                            "What broader groupings encompass the Person class?",
                            "Which classes are direct specializations within the Entity category, such as Person?"
                        ]
                    }
                ]
            },
            "Place": {
                "axiom": {
                    "subClassOf": [
                        "Entity"
                    ]
                },
                "description": "Place is defined as a subclass of Entity, meaning every instance of Place is also an Entity. This class represents physical or conceptual locations or areas, but no further restrictions, relationships, or properties are currently specified.",
                "CQ": [
                    {
                        "axiom": "Place subClassOf Entity",
                        "CQ": [
                            "Is every Place categorized under the broader class of Entity?",
                            "Which subclasses are defined within the Entity category, such as Place?",
                            "What general classes does the concept Place belong to in the ontology hierarchy?"
                        ]
                    }
                ]
            },
            "PrepareHotTea": {
                "axiom": {
                    "subClassOf": [
                        "PrepareDrink"
                    ]
                },
                "description": "PrepareHotTea is defined as a subclass of PrepareDrink, indicating that it represents a specialized form of drink preparation activity. Any instance of PrepareHotTea is inherently an instance of PrepareDrink, specifically concerned with the preparation of hot tea. No additional property restrictions or disjointness axioms are specified.",
                "CQ": [
                    {
                        "axiom": "PrepareHotTea subClassOf PrepareDrink",
                        "CQ": [
                            "Does PrepareHotTea belong to the set of activities classified as PrepareDrink?",
                            "Which subclasses are defined under PrepareDrink, including PrepareHotTea?",
                            "What more general activity categories encompass PrepareHotTea?"
                        ]
                    }
                ]
            },
            "Room": {
                "axiom": {
                    "subClassOf": [
                        "Place"
                    ]
                },
                "description": "Room is defined as a subclass of Place, indicating that every Room is a specific type of Place. This classification implies that all characteristics of Place are inherited by Room, allowing it to be used wherever a Place is referenced within the ontology. No additional restrictions or distinguishing axioms are specified for Room.",
                "CQ": [
                    {
                        "axiom": "Room subClassOf Place",
                        "CQ": [
                            "Is Room classified under the broader category of Place?",
                            "What are all subcategories defined within Place, such as Room?",
                            "Which higher-level categories encompass Room?"
                        ]
                    }
                ]
            },
            "SittingToStanding": {
                "axiom": {
                    "subClassOf": [
                        "ChangePosture"
                    ]
                },
                "description": "SittingToStanding is defined as a subclass of ChangePosture, representing the specific process or action in which an individual transitions from a sitting position to a standing position. As a more specialized posture change, every instance of SittingToStanding inherently qualifies as an instance of ChangePosture.",
                "CQ": [
                    {
                        "axiom": "SittingToStanding subClassOf ChangePosture",
                        "CQ": [
                            "Does SittingToStanding belong within the broader classification of ChangePosture?",
                            "Which posture change actions are categorized under ChangePosture, including SittingToStanding?",
                            "What general types or categories is SittingToStanding a more specific instance of?"
                        ]
                    }
                ]
            },
            "StandingToSitting": {
                "axiom": {
                    "subClassOf": [
                        "ChangePosture"
                    ]
                },
                "description": "StandingToSitting is defined as a subclass of ChangePosture. This class represents the action or process in which an individual moves from a standing position to a sitting position. All instances of StandingToSitting are, by definition, specific forms of posture change.",
                "CQ": [
                    {
                        "axiom": "StandingToSitting subClassOf ChangePosture",
                        "CQ": [
                            "Is StandingToSitting an example of a specific type within the broader ChangePosture category?",
                            "What are the more specialized forms of ChangePosture, such as StandingToSitting?",
                            "Which general posture-changing categories include StandingToSitting as a member?"
                        ]
                    }
                ]
            },
            "Event": {
                "axiom": {
                    "propertyRestrictions": [
                        "[startTime only time:Instant]",
                        "[duration only time:DurationDescription]",
                        "[startTime exactly 1 time:Instant]",
                        "[duration exactly 1 time:DurationDescription]"
                    ]
                },
                "description": "Event is a class characterized by property restrictions that enforce temporal precision. Each instance of Event must have exactly one startTime, which must be of type time:Instant, and exactly one duration, which must be of type time:DurationDescription. These constraints ensure that every Event is uniquely defined by both a specific starting instant and a specific duration, providing an unambiguous temporal identity for each Event.",
                "CQ": [
                    {
                        "axiom": "Event propertyRestrictions [startTime only time:Instant]",
                        "CQ": [
                            "Is every startTime value associated with an Event necessarily of type time:Instant?",
                            "Can an Event have a startTime that is not classified as time:Instant?",
                            "Are all instances of startTime for an Event restricted exclusively to the time:Instant class?"
                        ]
                    },
                    {
                        "axiom": "Event propertyRestrictions [duration only time:DurationDescription]",
                        "CQ": [
                            "Is the duration property of every Event restricted exclusively to instances of time:DurationDescription?",
                            "Can an Event have a duration value of a type other than time:DurationDescription?",
                            "Does the Event class explicitly forbid duration values outside the time:DurationDescription specification?"
                        ]
                    },
                    {
                        "axiom": "Event propertyRestrictions [startTime exactly 1 time:Instant]",
                        "CQ": [
                            "Is every Event required to have exactly one startTime that is an instance of time:Instant?",
                            "Can an Event have more or fewer than one associated startTime?",
                            "Does the ontology prevent an Event from having multiple or no startTime values at all?"
                        ]
                    },
                    {
                        "axiom": "Event propertyRestrictions [duration exactly 1 time:DurationDescription]",
                        "CQ": [
                            "Is every Event characterized by having exactly one duration specified as a DurationDescription?",
                            "Can an Event be associated with more than one duration according to the specified property restriction?",
                            "Does the ontology require that each Event has a single, unique value for its duration, with no possibility of omission or multiplicity?"
                        ]
                    }
                ]
            }
        },
        "properties": {
            "hasValue": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"hasValue\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. As specified by its axioms, no constraints are currently imposed on its use, so its purpose and applicable contexts are not restricted within the ontology.",
                "CQ": [
                    {
                        "axiom": "hasValue domain None",
                        "CQ": [
                            "Is it correct that the property 'hasValue' does not have any domain specified?",
                            "What kinds of entities can be the subject when using the 'hasValue' property?",
                            "Can 'hasValue' be used with subjects outside of any specific class?"
                        ]
                    },
                    {
                        "axiom": "hasValue range None",
                        "CQ": [
                            "Can the property 'hasValue' be associated with any value, or is its range undefined?",
                            "Is it accurate that the property 'hasValue' does not specify any range?",
                            "What entities can serve as the range for the 'hasValue' property?"
                        ]
                    }
                ]
            },
            "hasRate": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "hasValue"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"hasRate\" does not specify domain or range restrictions and possesses no special characteristics. It is defined as a sub-property of \"hasValue,\" inheriting its general semantics. No inverse property is specified. This property is intended to relate entities to values representing rates, with precise constraints or types left unspecified.",
                "CQ": [
                    {
                        "axiom": "hasRate domain None",
                        "CQ": [
                            "What types of entities can have the property 'hasRate' as their subject?",
                            "Is it correct that the property 'hasRate' does not have a specified domain?",
                            "Can 'hasRate' be used with any class as its subject?"
                        ]
                    },
                    {
                        "axiom": "hasRate range None",
                        "CQ": [
                            "Is it permissible for the property 'hasRate' to lack a defined range?",
                            "What types of entities can serve as the range for the property 'hasRate'?",
                            "Can the property 'hasRate' accept values of any type due to the absence of a specified range?"
                        ]
                    },
                    {
                        "axiom": "hasRate subPropertyOf hasValue",
                        "CQ": [
                            "Is hasValue a superproperty of hasRate?",
                            "Which subproperties are contained within hasValue?",
                            "Are all uses of hasRate implicitly instances of hasValue according to the ontology?"
                        ]
                    }
                ]
            },
            "roomLocalisation": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"roomLocalisation\" has no explicitly defined characteristics, domain, or range constraints, and is not specified as a sub-property or inverse of any other property. Based on its name, it is likely intended to associate entities with their location within a room, but no further semantic or structural restrictions are currently defined.",
                "CQ": [
                    {
                        "axiom": "roomLocalisation domain None",
                        "CQ": [
                            "What entities can be the domain of the property 'roomLocalisation'?",
                            "Is it correct that the property 'roomLocalisation' has no specified domain?",
                            "Can 'roomLocalisation' be used with subjects of any class?"
                        ]
                    },
                    {
                        "axiom": "roomLocalisation range None",
                        "CQ": [
                            "What can be the range of the property 'roomLocalisation'?",
                            "Is it correct that the property 'roomLocalisation' does not have a defined range?",
                            "Can 'roomLocalisation' link to entities of any type, given its range is undefined?"
                        ]
                    }
                ]
            },
            "hasLightLevel": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "hasValue"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"hasLightLevel\" has no explicitly defined domain, range, or logical characteristics. It is a sub-property of \"hasValue,\" indicating that it is used to relate entities to their light level values in a manner more specific than the general value association. No inverse property is defined.",
                "CQ": [
                    {
                        "axiom": "hasLightLevel domain None",
                        "CQ": [
                            "Is it correct that the property 'hasLightLevel' does not have a specified domain?",
                            "What types of entities can be subjects of the 'hasLightLevel' property?",
                            "Can something other than a specific class serve as the domain for 'hasLightLevel'?"
                        ]
                    },
                    {
                        "axiom": "hasLightLevel range None",
                        "CQ": [
                            "Is it correct that the property 'hasLightLevel' does not specify a range?",
                            "What types of values can be associated as the range of the 'hasLightLevel' property?",
                            "Can any entity serve as a range for the property 'hasLightLevel', or should a specific type be defined?"
                        ]
                    },
                    {
                        "axiom": "hasLightLevel subPropertyOf hasValue",
                        "CQ": [
                            "Is hasValue a superproperty of hasLightLevel?",
                            "Which properties are defined as subproperties of hasValue within the ontology?",
                            "Do all instances of hasLightLevel also satisfy the conditions of hasValue?"
                        ]
                    }
                ]
            },
            "hasAgent": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "owl:topObjectProperty"
                    ],
                    "inverseOf": [
                        "isAgentIn"
                    ]
                },
                "description": "The property \"hasAgent\" has no explicitly defined domain, range, or special characteristics. It is a sub-property of \"owl:topObjectProperty,\" making it a generalized object property. The inverse property is specified as \"isAgentIn,\" indicating that \"hasAgent\" links entities to their associated agents, while \"isAgentIn\" expresses the reverse relationship.",
                "CQ": [
                    {
                        "axiom": "hasAgent domain None",
                        "CQ": [
                            "What kinds of entities can be the subject (domain) of the property 'hasAgent'?",
                            "Is it appropriate for the property 'hasAgent' to have no specified domain?",
                            "Can entities outside any defined class use the property 'hasAgent' as their subject?"
                        ]
                    },
                    {
                        "axiom": "hasAgent range None",
                        "CQ": [
                            "Is it correct that the property 'hasAgent' does not specify a range?",
                            "What potential classes or types could serve as the range for the property 'hasAgent'?",
                            "Can 'hasAgent' connect a subject to any type of object, given the absence of a defined range?"
                        ]
                    },
                    {
                        "axiom": "hasAgent subPropertyOf owl:topObjectProperty",
                        "CQ": [
                            "Is hasAgent considered a subproperty of owl:topObjectProperty?",
                            "What properties are superproperties of hasAgent in the ontology?",
                            "Does the use of hasAgent imply applicability wherever owl:topObjectProperty is accepted?"
                        ]
                    },
                    {
                        "axiom": "hasAgent inverseOf isAgentIn",
                        "CQ": [
                            "What is the ontological connection between the ‘hasAgent’ and ‘isAgentIn’ properties?",
                            "If entity A has an agent B, does this entail in the ontology that B is an agent in A?",
                            "Which property acts as the inverse of ‘hasAgent’ in the ontology?"
                        ]
                    }
                ]
            },
            "objectLocalisation": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"objectLocalisation\" has no explicitly defined domain or range restrictions and no formally specified characteristics. It is not declared as a sub-property of any other property nor does it have an inverse property. Its intended use is not further described by the available axioms.",
                "CQ": [
                    {
                        "axiom": "objectLocalisation domain None",
                        "CQ": [
                            "What entities can serve as the domain for the property 'objectLocalisation'?",
                            "Is it appropriate for 'objectLocalisation' to have no specified domain?",
                            "Are there any classes that should not be used as the subject of 'objectLocalisation'?"
                        ]
                    },
                    {
                        "axiom": "objectLocalisation range None",
                        "CQ": [
                            "Is it correct that the property 'objectLocalisation' does not have a specified range?",
                            "What types of values can serve as the range for the property 'objectLocalisation'?",
                            "Can entities of any type be related by 'objectLocalisation' as its range?"
                        ]
                    }
                ]
            },
            "hasConductivity": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "hasValue"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"hasConductivity\" currently lacks explicit domain and range constraints and does not have specified logical characteristics or an inverse property. It is defined as a sub-property of \"hasValue,\" indicating that it inherits the semantics of associating an entity with a value, specifically in the context of electrical or thermal conductivity.",
                "CQ": [
                    {
                        "axiom": "hasConductivity domain None",
                        "CQ": [
                            "What types of entities can be the domain of the property 'hasConductivity'?",
                            "Is it correct that 'hasConductivity' does not have a specified domain?",
                            "Are there any classes that should be considered as potential domains for 'hasConductivity'?"
                        ]
                    },
                    {
                        "axiom": "hasConductivity range None",
                        "CQ": [
                            "Is it correct that the property 'hasConductivity' does not have a specified range?",
                            "What entities can serve as the range for the property 'hasConductivity'?",
                            "Can any kind of value be associated as the object of 'hasConductivity', given its range is undefined?"
                        ]
                    },
                    {
                        "axiom": "hasConductivity subPropertyOf hasValue",
                        "CQ": [
                            "Does the presence of the hasConductivity property guarantee the presence of the hasValue property?",
                            "Which properties are defined as subproperties under hasValue within the ontology?",
                            "Is hasValue a direct superproperty of hasConductivity?"
                        ]
                    }
                ]
            },
            "hasNoiseLevel": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "hasValue"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"hasNoiseLevel\" inherits from the more general property \"hasValue\" and does not have explicitly defined characteristics, domain, or range restrictions. It is intended to associate an entity with its noise level, but the precise classes or datatypes involved are not restricted by axioms. No inverse property is specified.",
                "CQ": [
                    {
                        "axiom": "hasNoiseLevel domain None",
                        "CQ": [
                            "What entities can serve as the domain for the property 'hasNoiseLevel'?",
                            "Is it correct that 'hasNoiseLevel' is not restricted to a particular domain?",
                            "Could there be a defined class that should act as the domain for the property 'hasNoiseLevel'?"
                        ]
                    },
                    {
                        "axiom": "hasNoiseLevel range None",
                        "CQ": [
                            "Is it correct that the property 'hasNoiseLevel' does not specify a range?",
                            "What types of entities, if any, can be the value of the property 'hasNoiseLevel'?",
                            "Could the property 'hasNoiseLevel' have an explicit range assigned to it?"
                        ]
                    },
                    {
                        "axiom": "hasNoiseLevel subPropertyOf hasValue",
                        "CQ": [
                            "Is hasNoiseLevel considered a subproperty of hasValue in the ontology?",
                            "Which properties are defined as subproperties under hasValue?",
                            "Does using hasNoiseLevel always entail the use of hasValue?"
                        ]
                    }
                ]
            },
            "hasTemperature": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "hasValue"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"hasTemperature\" inherits from the broader property \"hasValue\" but does not specify any domain or range restrictions, nor any specific logical characteristics. No inverse property is defined. This property is intended to associate an entity with its temperature, but its use is broadly unconstrained by the current axioms.",
                "CQ": [
                    {
                        "axiom": "hasTemperature domain None",
                        "CQ": [
                            "What can be the domain of the property 'hasTemperature'?",
                            "Is it correct that the property 'hasTemperature' does not specify any domain?",
                            "Can 'hasTemperature' be used with any type of subject, or are there intended restrictions on its domain?"
                        ]
                    },
                    {
                        "axiom": "hasTemperature range None",
                        "CQ": [
                            "Does the property 'hasTemperature' have a defined range?",
                            "What types of values can be used as the range for the property 'hasTemperature'?",
                            "Is it correct that 'hasTemperature' has no specified range?"
                        ]
                    },
                    {
                        "axiom": "hasTemperature subPropertyOf hasValue",
                        "CQ": [
                            "Does the use of hasTemperature always entail the use of hasValue?",
                            "Is hasValue considered a superproperty of hasTemperature in the ontology?",
                            "Which subproperties fall under hasValue, including hasTemperature?"
                        ]
                    }
                ]
            },
            "isAgentIn": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "owl:topObjectProperty"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"isAgentIn\" has no explicitly specified domain, range, or characteristics. It is defined as a subproperty of owl:topObjectProperty, indicating it is a general object property without further restrictions. No inverse property is declared.",
                "CQ": [
                    {
                        "axiom": "isAgentIn domain None",
                        "CQ": [
                            "What entities can be the domain of the property 'isAgentIn'?",
                            "Is it correct that 'isAgentIn' does not specify a domain?",
                            "Can 'isAgentIn' be used with any subject regardless of its type?"
                        ]
                    },
                    {
                        "axiom": "isAgentIn range None",
                        "CQ": [
                            "Is it correct that the property 'isAgentIn' does not have a specified range?",
                            "What kinds of entities can appear as the object of the property 'isAgentIn'?",
                            "Can 'isAgentIn' be used with objects other than a particular class, given its unspecified range?"
                        ]
                    },
                    {
                        "axiom": "isAgentIn subPropertyOf owl:topObjectProperty",
                        "CQ": [
                            "Is isAgentIn categorized as a subproperty within the hierarchy of owl:topObjectProperty?",
                            "Which properties are considered superproperties of isAgentIn?",
                            "Does every use of isAgentIn also satisfy the owl:topObjectProperty relationship in the ontology?"
                        ]
                    }
                ]
            },
            "duration": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"duration\" has no specified characteristics, domain, range, super-properties, or inverse property. It is a general property whose usage is not restricted to any particular class or value type in the current ontology specification.",
                "CQ": [
                    {
                        "axiom": "duration domain None",
                        "CQ": [
                            "Is it possible for the property 'duration' to have a specific domain?",
                            "What are the possible domains for the property 'duration'?",
                            "Should 'duration' be associated with any particular class as its domain?"
                        ]
                    },
                    {
                        "axiom": "duration range None",
                        "CQ": [
                            "Is it correct that the property 'duration' does not have a specified range?",
                            "What may serve as the range for the property 'duration'?",
                            "Can 'duration' be associated with values of any type as its range?"
                        ]
                    }
                ]
            },
            "refersTo": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"refersTo\" has no specified domain, range, characteristics, super-properties, or inverse properties. This indicates that it can be used to relate any two entities without formal restrictions. No additional description is provided.",
                "CQ": [
                    {
                        "axiom": "refersTo domain None",
                        "CQ": [
                            "Is it correct that the property 'refersTo' does not have a specified domain?",
                            "What possible classes can be the domain of the property 'refersTo'?",
                            "Can 'refersTo' be used with any subject, or is there an implicit domain restriction?"
                        ]
                    },
                    {
                        "axiom": "refersTo range None",
                        "CQ": [
                            "What types of entities can be in the range of the property 'refersTo'?",
                            "Is it correct that the property 'refersTo' does not have a defined range?",
                            "Can anything serve as the range for the property 'refersTo', or should it be restricted?"
                        ]
                    }
                ]
            },
            "hasQuality": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"hasQuality\" does not specify any explicit characteristics, domain, or range restrictions, nor does it define any super-properties or inverse properties. It is typically used to associate an entity with a quality, although no further constraints are currently imposed by its axioms.",
                "CQ": [
                    {
                        "axiom": "hasQuality domain None",
                        "CQ": [
                            "What kinds of entities can serve as the subject for the property 'hasQuality'?",
                            "Is it correct that the property 'hasQuality' has no specified domain?",
                            "Can 'hasQuality' be applied to subjects of any type, or is there an implicit restriction?"
                        ]
                    },
                    {
                        "axiom": "hasQuality range None",
                        "CQ": [
                            "What types of values are permissible as the range for the property 'hasQuality'?",
                            "Is it correct that the property 'hasQuality' does not have an explicitly defined range?",
                            "Can 'hasQuality' have as its range something other than a class or datatype?"
                        ]
                    }
                ]
            },
            "startTime": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"startTime\" has no explicitly defined characteristics, domain or range restrictions, super-properties, or inverse properties. Its usage context and intended meaning are not further specified by current axioms. This property may be intended to capture the starting time of an event or process, but no formal constraints are applied.",
                "CQ": [
                    {
                        "axiom": "startTime domain None",
                        "CQ": [
                            "What classes can serve as the domain for the property 'startTime'?",
                            "Is it appropriate for 'startTime' to have no domain specified?",
                            "Can 'startTime' be associated as a property of any entity type?"
                        ]
                    },
                    {
                        "axiom": "startTime range None",
                        "CQ": [
                            "What can be the range of the property 'startTime'?",
                            "Is it correct that the property 'startTime' has no specified range?",
                            "Can 'startTime' be related to a value of any type, or is a specific type required?"
                        ]
                    }
                ]
            }
        }
    },
    "OntoDT": {
        "classes": {
            "Datatype Specification Language Representation": {
                "axiom": {
                    "subClassOf": [
                        "representation"
                    ],
                    "propertyRestrictions": [
                        "[represents some datatype]"
                    ]
                },
                "description": "Datatype Specification Language Representation is a subclass of representation, characterized by the property that it represents at least one datatype. This class encompasses languages or symbolic forms specifically designed to define, describe, or model datatypes through a formal representation. Every individual in this class must be associated with the representation of some datatype, reflecting its role in specifying datatype structure or characteristics.",
                "CQ": [
                    {
                        "axiom": "Datatype Specification Language Representation subClassOf representation",
                        "CQ": [
                            "Is Datatype Specification Language Representation categorized under the broader class of representation?",
                            "Which representation subclasses include Datatype Specification Language Representation?",
                            "What are the parent classes of Datatype Specification Language Representation?"
                        ]
                    },
                    {
                        "axiom": "Datatype Specification Language Representation propertyRestrictions [represents some datatype]",
                        "CQ": [
                            "Is it required that every Datatype Specification Language Representation represents some datatype?",
                            "Can a Datatype Specification Language Representation exist without representing any datatype?",
                            "Does the ontology ensure that each Datatype Specification Language Representation is associated with at least one datatype through the 'represents' property?"
                        ]
                    }
                ]
            },
            "list specification": {
                "axiom": {
                    "subClassOf": [
                        "specification"
                    ]
                },
                "description": "list specification is defined as a subclass of specification. This means all instances of list specification are also considered specifications. No additional disjointness, property restrictions, or further descriptive details are specified, so the class serves as a specialization of the general concept of specification for use cases where differentiation among specification types is needed.",
                "CQ": [
                    {
                        "axiom": "list specification subClassOf specification",
                        "CQ": [
                            "Is list specification classified as a type of specification?",
                            "What categories of specifications include list specification as a more specific instance?",
                            "Which broader specification classes does list specification belong to?"
                        ]
                    }
                ]
            },
            "value space": {
                "axiom": {
                    "subClassOf": [
                        "specification"
                    ]
                },
                "description": "value space is defined as a subclass of specification. This means that every value space is a type of specification, inheriting the general characteristics of specification while representing a distinct concept within that category. No additional distinguishing features or restrictions are asserted by the current axioms.",
                "CQ": [
                    {
                        "axiom": "value space subClassOf specification",
                        "CQ": [
                            "What higher-level categories does value space belong to?",
                            "Which specifications have value space as a specialized form?",
                            "Are all value spaces encompassed within the specification category?"
                        ]
                    }
                ]
            },
            "tag-value list": {
                "axiom": {
                    "subClassOf": [
                        "specification"
                    ]
                },
                "description": "tag-value list is defined as a subclass of specification, indicating that it represents a specific kind of specification. This class formalizes entities that provide information or structure through a collection of tags and their corresponding values, typically used to encode attribute data in a structured format.",
                "CQ": [
                    {
                        "axiom": "tag-value list subClassOf specification",
                        "CQ": [
                            "Does every tag-value list represent a form of specification?",
                            "What more general categories does tag-value list fall under in the ontology?",
                            "Which entities are classified as subtypes of specification, such as tag-value list?"
                        ]
                    }
                ]
            },
            "procedure-paremeter declaration": {
                "axiom": {
                    "subClassOf": [
                        "specification"
                    ],
                    "propertyRestrictions": [
                        "[has_member some parameter]",
                        "[has_member some direction]"
                    ]
                },
                "description": "procedure-parameter declaration is defined as a subclass of specification. All instances of this class must include at least one member with the type parameter and at least one member with the type direction, as specified by the property restrictions. This class formally represents declarations in a procedure that specify the required parameters and their directions, ensuring that every procedure-parameter declaration comprehensively describes its involved parameters and their input/output directions.",
                "CQ": [
                    {
                        "axiom": "procedure-paremeter declaration subClassOf specification",
                        "CQ": [
                            "Is procedure-parameter declaration classified as a kind of specification?",
                            "Which specifications include procedure-parameter declaration as a more specific type?",
                            "Under what broader concepts can procedure-parameter declaration be grouped in the ontology?"
                        ]
                    },
                    {
                        "axiom": "procedure-paremeter declaration propertyRestrictions [has_member some parameter]",
                        "CQ": [
                            "Does every procedure-parameter declaration necessarily include at least one parameter as a member?",
                            "Is it required for a procedure-parameter declaration to be associated with the 'has_member' property pointing to a parameter?",
                            "Can a procedure-parameter declaration exist without having any 'parameter' as its member through the 'has_member' relation?"
                        ]
                    },
                    {
                        "axiom": "procedure-paremeter declaration propertyRestrictions [has_member some direction]",
                        "CQ": [
                            "Is every procedure-parameter required to have at least one member that is a direction?",
                            "Must a procedure-parameter always be associated with a direction through the has_member relationship?",
                            "Can a procedure-parameter exist without referencing any direction via the has_member property?"
                        ]
                    }
                ]
            },
            "direction": {
                "axiom": {
                    "subClassOf": [
                        "specification"
                    ]
                },
                "description": "direction is defined as a subclass of specification. This means that every direction is a specific type of specification, and it inherits all characteristics and properties applicable to specifications in the ontology. No further constraints or descriptions have been provided, so the class serves as a general categorization for directions under the broader concept of specifications.",
                "CQ": [
                    {
                        "axiom": "direction subClassOf specification",
                        "CQ": [
                            "Does the concept direction fall under the broader category of specification?",
                            "What more specific subclasses exist under specification, such as direction?",
                            "Which general categories include direction as a member?"
                        ]
                    }
                ]
            },
            "return-parameter specification": {
                "axiom": {
                    "subClassOf": [
                        "specification"
                    ],
                    "propertyRestrictions": [
                        "[has_member some datatype]",
                        "[has_identifier some parameter identifier]"
                    ]
                },
                "description": "return-parameter specification is a subclass of specification, characterized by having at least one member that is a datatype and at least one associated identifier that qualifies as a parameter identifier. This formalization ensures that every return-parameter specification includes a datatype value and a means of uniquely identifying the parameter, which is essential for describing properties of parameters returned by functions or methods in structured data or APIs.",
                "CQ": [
                    {
                        "axiom": "return-parameter specification subClassOf specification",
                        "CQ": [
                            "Does return-parameter specification fall under the broader category of specification?",
                            "What types are classified as specializations of specification, such as return-parameter specification?",
                            "Which overarching categories include return-parameter specification as a member?"
                        ]
                    },
                    {
                        "axiom": "return-parameter specification propertyRestrictions [has_member some datatype]",
                        "CQ": [
                            "Is every return-parameter specification required to have at least one member of type datatype via the has_member property?",
                            "Can a return-parameter specification exist without being associated with any datatype through the has_member relation?",
                            "Does the ontology allow a return-parameter specification to have has_member only for datatype instances?"
                        ]
                    },
                    {
                        "axiom": "return-parameter specification propertyRestrictions [has_identifier some parameter identifier]",
                        "CQ": [
                            "Must every return-parameter specification have at least one identifier specified via the has_identifier property?",
                            "Is it required for a return-parameter specification to possess a parameter identifier through the has_identifier relationship?",
                            "Does a return-parameter specification entail the existence of some associated parameter identifier via has_identifier?"
                        ]
                    }
                ]
            },
            "defined generator parameter": {
                "axiom": {
                    "subClassOf": [
                        "specification"
                    ],
                    "propertyRestrictions": [
                        "[has_identifier some parameter identifier]"
                    ]
                },
                "description": "defined generator parameter is a subclass of specification, meaning it inherits all characteristics of the specification class. Additionally, any individual in this class must possess at least one identifier, specified through the property has_identifier and linked to a parameter identifier. This definition ensures that every defined generator parameter instance is uniquely identified in the context of specifications.",
                "CQ": [
                    {
                        "axiom": "defined generator parameter subClassOf specification",
                        "CQ": [
                            "Is defined generator parameter classified under specification?",
                            "What specifications encompass the defined generator parameter as a more specific type?",
                            "Which broader classifications include defined generator parameter within their scope?"
                        ]
                    },
                    {
                        "axiom": "defined generator parameter propertyRestrictions [has_identifier some parameter identifier]",
                        "CQ": [
                            "Must every defined generator parameter have at least one 'has_identifier' relationship with a parameter identifier?",
                            "Is it required that a defined generator parameter is associated, via the 'has_identifier' property, to some parameter identifier?",
                            "Can a defined generator parameter exist without any 'has_identifier' link to a parameter identifier?"
                        ]
                    }
                ]
            },
            "select-item specification": {
                "axiom": {
                    "subClassOf": [
                        "specification"
                    ]
                },
                "description": "select-item specification is defined as a subclass of specification. This indicates that every select-item specification is a type of specification, inheriting all characteristics of the parent class, with no additional restrictions or distinctions provided in the current formalization. No further disjointness or property constraints are specified.",
                "CQ": [
                    {
                        "axiom": "select-item specification subClassOf specification",
                        "CQ": [
                            "Is select-item specification categorized under the broader group of specification?",
                            "Which specific types of specification encompass select-item specification?",
                            "What broader specification categories include select-item specification as a subclass?"
                        ]
                    }
                ]
            },
            "datatype generator": {
                "axiom": {
                    "subClassOf": [
                        "directive information entity"
                    ]
                },
                "description": "datatype generator is defined as a subclass of directive information entity. This indicates that any datatype generator inherits all structural and semantic characteristics of directive information entities, typically representing an information construct that prescribes or instructs the generation of datatypes. No further property restrictions or disjointness axioms are specified.",
                "CQ": [
                    {
                        "axiom": "datatype generator subClassOf directive information entity",
                        "CQ": [
                            "Is datatype generator included within the broader class of directive information entity?",
                            "What entities are direct or indirect subclasses of directive information entity, specifically including datatype generator?",
                            "Which higher-level categories encompass datatype generator?"
                        ]
                    }
                ]
            },
            "characterizing operation": {
                "axiom": {
                    "subClassOf": [
                        "directive information entity"
                    ]
                },
                "description": "characterizing operation is a subclass of directive information entity. It refers to the set of operations that, either performed on or producing values of a datatype, distinguish that datatype from others with otherwise identical value spaces except potentially for symbol substitution. This class is used to formally capture the unique operational behaviors that define and differentiate datatypes in an information system.",
                "CQ": [
                    {
                        "axiom": "characterizing operation subClassOf directive information entity",
                        "CQ": [
                            "Is characterizing operation a more specific kind of directive information entity?",
                            "What entities are covered under directive information entity, such as characterizing operation?",
                            "Which broader classifications include characterizing operation as a subclass?"
                        ]
                    }
                ]
            },
            "data representational model": {
                "axiom": {
                    "subClassOf": [
                        "directive information entity"
                    ]
                },
                "description": "data representational model is defined as a subclass of directive information entity. This means any instance of a data representational model is also an instance of directive information entity, inheriting all its properties and characteristics. The class is intended to capture entities that provide structured directives on how data is to be represented or organized.",
                "CQ": [
                    {
                        "axiom": "data representational model subClassOf directive information entity",
                        "CQ": [
                            "Does a data representational model fall under the broader grouping of directive information entity?",
                            "Which entities are categorized as more specific forms of directive information entity, such as data representational model?",
                            "What overarching entity types include data representational model within their classification?"
                        ]
                    }
                ]
            },
            "datatype role": {
                "axiom": {
                    "subClassOf": [
                        "role"
                    ],
                    "propertyRestrictions": [
                        "[role_of some datatype]"
                    ]
                },
                "description": "datatype role is defined as a subclass of role, with the property restriction that it must be the role_of at least one datatype. This means every instance of datatype role is associated with, and specifically plays a role in the context of, some datatype.",
                "CQ": [
                    {
                        "axiom": "datatype role subClassOf role",
                        "CQ": [
                            "Is every datatype role by definition a kind of role?",
                            "What specific roles are classified under the broader role of 'role', including datatype role?",
                            "Which higher-level categories encompass datatype role within the ontology?"
                        ]
                    },
                    {
                        "axiom": "datatype role propertyRestrictions [role_of some datatype]",
                        "CQ": [
                            "Is it required that every instance with the role 'role_of' is associated with a value of datatype?",
                            "Does the property 'role_of' necessarily relate an individual only to values belonging to datatype?",
                            "Can an entity be considered within the scope if its 'role_of' relation points to something other than the specified datatype?"
                        ]
                    }
                ]
            },
            "excluding subtype generator": {
                "axiom": {
                    "subClassOf": [
                        "subtype generator"
                    ],
                    "propertyRestrictions": [
                        "[has_member some select-list]"
                    ]
                },
                "description": "excluding subtype generator is defined as a subclass of subtype generator, with the added restriction that it must have at least one member specified by the has_member property, where the member is of the type select-list. This means every instance of excluding subtype generator must be associated with at least one select-list through the has_member property, providing a mechanism for selecting or excluding specific subtypes via a list-based criteria.",
                "CQ": [
                    {
                        "axiom": "excluding subtype generator subClassOf subtype generator",
                        "CQ": [
                            "Does excluding subtype generator fall under the category of subtype generator?",
                            "What specific subclasses are identified within subtype generator, apart from excluding subtype generator?",
                            "Which broader types does excluding subtype generator pertain to?"
                        ]
                    },
                    {
                        "axiom": "excluding subtype generator propertyRestrictions [has_member some select-list]",
                        "CQ": [
                            "Does the concept 'excluding subtype generator' necessarily include at least one member from the 'select-list' via the 'has_member' property?",
                            "Is it required that every 'excluding subtype generator' entity is related through 'has_member' to an instance belonging to the 'select-list'?",
                            "Could an 'excluding subtype generator' exist without linking to at least one element of the 'select-list' through 'has_member'?"
                        ]
                    }
                ]
            },
            "explicit subtype generator": {
                "axiom": {
                    "subClassOf": [
                        "subtype generator"
                    ]
                },
                "description": "explicit subtype generator is defined as a subclass of subtype generator, meaning every explicit subtype generator is also a subtype generator. No further restrictions or characteristics are specified by the current axioms or descriptions.",
                "CQ": [
                    {
                        "axiom": "explicit subtype generator subClassOf subtype generator",
                        "CQ": [
                            "Is explicit subtype generator classified under subtype generator?",
                            "Which subclasses fall within the category of subtype generator, including explicit subtype generator?",
                            "What broader classes encompass explicit subtype generator?"
                        ]
                    }
                ]
            },
            "extending subtype generator": {
                "axiom": {
                    "subClassOf": [
                        "subtype generator"
                    ],
                    "propertyRestrictions": [
                        "[has_member some extended-value-list]"
                    ]
                },
                "description": "extending subtype generator is defined as a subclass of subtype generator. It is characterized by the property restriction that every instance must have at least one member from an extended-value-list. This ensures that individuals of this class are subtype generators specifically connected to one or more extended value lists, reflecting their extended generative capability.",
                "CQ": [
                    {
                        "axiom": "extending subtype generator subClassOf subtype generator",
                        "CQ": [
                            "Is extending subtype generator categorized under subtype generator?",
                            "Which generators are classified as subtypes of subtype generator, including extending subtype generator?",
                            "What broader generator categories does extending subtype generator fall into?"
                        ]
                    },
                    {
                        "axiom": "extending subtype generator propertyRestrictions [has_member some extended-value-list]",
                        "CQ": [
                            "Is every instance of extending subtype generator required to have at least one has_member relationship to an extended-value-list?",
                            "Does extending subtype generator always include some member specified within extended-value-list?",
                            "Can an extending subtype generator exist without any association to an extended-value-list through has_member?"
                        ]
                    }
                ]
            },
            "range subtype generator": {
                "axiom": {
                    "subClassOf": [
                        "subtype generator"
                    ],
                    "propertyRestrictions": [
                        "[has_member some range]"
                    ]
                },
                "description": "range subtype generator is defined as a subclass of subtype generator. Members of this class are characterized by the existence of at least one member related via the has_member property that is an instance of range. This formalization ensures that any range subtype generator must be associated with at least one range through the has_member relationship.",
                "CQ": [
                    {
                        "axiom": "range subtype generator subClassOf subtype generator",
                        "CQ": [
                            "Is every range subtype generator necessarily classified as a kind of subtype generator?",
                            "Which entities fall under the more specific grouping of subtype generator, such as the range subtype generator?",
                            "Into what broader categories within the ontology is range subtype generator subsumed?"
                        ]
                    },
                    {
                        "axiom": "range subtype generator propertyRestrictions [has_member some range]",
                        "CQ": [
                            "Does a Range Subtype Generator necessarily have at least one member that is a Range?",
                            "Is it required for every Range Subtype Generator to have a 'has_member' relationship with some instance of Range?",
                            "Can a Range Subtype Generator be defined without possessing the property 'has_member' that connects it to any Range?"
                        ]
                    }
                ]
            },
            "selection subtype generator": {
                "axiom": {
                    "subClassOf": [
                        "subtype generator"
                    ],
                    "propertyRestrictions": [
                        "[has_member some select-list]"
                    ]
                },
                "description": "selection subtype generator is defined as a subclass of subtype generator. Any instance of this class must have at least one member that is a select-list, enforced by the property restriction [has_member some select-list]. This ensures that selection subtype generators are specifically characterized by their association with select-list members, distinguishing them from other subtype generators.",
                "CQ": [
                    {
                        "axiom": "selection subtype generator subClassOf subtype generator",
                        "CQ": [
                            "Does selection subtype generator fall under the broader category of subtype generator?",
                            "What specific types are encompassed by subtype generator, including selection subtype generator?",
                            "Which higher-level categories include selection subtype generator as a member?"
                        ]
                    },
                    {
                        "axiom": "selection subtype generator propertyRestrictions [has_member some select-list]",
                        "CQ": [
                            "Does every selection necessarily include at least one member from the select-list?",
                            "Is it required for any selection to have a member that is part of the select-list?",
                            "Can a selection exist without having any member drawn from the select-list?"
                        ]
                    }
                ]
            },
            "size subtype generator": {
                "axiom": {
                    "subClassOf": [
                        "subtype generator"
                    ],
                    "propertyRestrictions": [
                        "[has_member some size]"
                    ]
                },
                "description": "size subtype generator is a subclass of subtype generator whose members are characterized by necessarily having at least one associated member of type size. This ensures that any instance of size subtype generator must be linked to one or more sizes, establishing its role in creating subtypes specifically based on size distinctions.",
                "CQ": [
                    {
                        "axiom": "size subtype generator subClassOf subtype generator",
                        "CQ": [
                            "Is size subtype generator categorized under subtype generator?",
                            "What specific types are included within the broader class of subtype generator?",
                            "Which more general classes is size subtype generator a member of?"
                        ]
                    },
                    {
                        "axiom": "size subtype generator propertyRestrictions [has_member some size]",
                        "CQ": [
                            "Is every instance of 'size subtype generator' required to have at least one 'has_member' relationship to a 'size'?",
                            "Does 'size subtype generator' always include at least one member classified as 'size'?",
                            "Can a 'size subtype generator' exist without linking to any entity of type 'size' via the 'has_member' property?"
                        ]
                    }
                ]
            },
            "natural number": {
                "axiom": {
                    "subClassOf": [
                        "defined datatype"
                    ]
                },
                "description": "natural number is defined as a subclass of defined datatype, indicating that it represents a specific kind of datatype with well-established properties. Natural numbers typically include non-negative integers (0, 1, 2, ...), and are formally distinguished from other datatypes by their discrete, countable nature. This classification ensures that any individual of the class natural number is treated as a clearly defined, foundational numeric datatype.",
                "CQ": [
                    {
                        "axiom": "natural number subClassOf defined datatype",
                        "CQ": [
                            "Is natural number categorized under defined datatype?",
                            "Which datatypes encompass natural number as a specialized type?",
                            "What broader datatype classifications include natural number as a subclass?"
                        ]
                    }
                ]
            },
            "modulo": {
                "axiom": {
                    "subClassOf": [
                        "defined datatype"
                    ]
                },
                "description": "modulo is defined as a subclass of defined datatype, indicating that it represents a specifically characterized datatype within the ontology. No further domain-specific properties or restrictions are specified for this class based on the current axiom.",
                "CQ": [
                    {
                        "axiom": "modulo subClassOf defined datatype",
                        "CQ": [
                            "Is modulo classified as a kind of defined datatype?",
                            "Which defined datatypes have modulo as a specific subtype?",
                            "What broader categories encompass modulo under defined datatype?"
                        ]
                    }
                ]
            },
            "bit": {
                "axiom": {
                    "subClassOf": [
                        "defined datatype"
                    ]
                },
                "description": "bit is defined as a subclass of defined datatype, indicating that it represents a specific, well-defined data value within the ontology. As a data-oriented class, bit inherits all characteristics of defined datatypes but is further specialized for contexts where only binary or distinctly specified data values are relevant.",
                "CQ": [
                    {
                        "axiom": "bit subClassOf defined datatype",
                        "CQ": [
                            "Is bit classified under the general group of defined datatype?",
                            "Which datatypes are more specific types within defined datatype, including bit?",
                            "To what broader datatype categories does bit belong?"
                        ]
                    }
                ]
            },
            "bit string": {
                "axiom": {
                    "subClassOf": [
                        "defined datatype"
                    ]
                },
                "description": "bit string is defined as a subclass of defined datatype, representing a specific type of datatype whose values consist of sequences of bits. This classification situates bit string within the hierarchy of datatypes and indicates its specialization for encoding data as ordered collections of binary digits.",
                "CQ": [
                    {
                        "axiom": "bit string subClassOf defined datatype",
                        "CQ": [
                            "Is bit string categorized under defined datatype?",
                            "Which datatypes are classified as specializations of defined datatype, including bit string?",
                            "What higher-level datatypes does bit string fall under in the ontology?"
                        ]
                    }
                ]
            },
            "character string": {
                "axiom": {
                    "subClassOf": [
                        "defined datatype"
                    ]
                },
                "description": "character string is defined as a subclass of defined datatype. This means any instance of character string is also recognized as a defined datatype, typically representing a sequence of characters used to encode textual information.",
                "CQ": [
                    {
                        "axiom": "character string subClassOf defined datatype",
                        "CQ": [
                            "Is character string classified as a subtype of defined datatype?",
                            "Which datatypes are encompassed under defined datatype, including character string?",
                            "What general datatypes does character string fall under within the ontology?"
                        ]
                    }
                ]
            },
            "time interval": {
                "axiom": {
                    "subClassOf": [
                        "defined datatype"
                    ]
                },
                "description": "time interval is defined as a subclass of defined datatype, indicating that it represents a structured data value within the ontology. As a specialized datatype, time interval refers to a span or duration of time, inheriting all properties and constraints applicable to defined datatypes.",
                "CQ": [
                    {
                        "axiom": "time interval subClassOf defined datatype",
                        "CQ": [
                            "Does time interval fall within the category defined by defined datatype?",
                            "What specific types are classified under defined datatype, including time interval?",
                            "Which broader categories encompass time interval as a specific instance?"
                        ]
                    }
                ]
            },
            "octet": {
                "axiom": {
                    "subClassOf": [
                        "defined datatype"
                    ]
                },
                "description": "octet is defined as a subclass of defined datatype, establishing it as a specific type of datatype within the ontology. This formalization indicates that any instance of octet must satisfy all constraints applicable to defined datatype, but provides no further restrictions or additional properties beyond this classification.",
                "CQ": [
                    {
                        "axiom": "octet subClassOf defined datatype",
                        "CQ": [
                            "Is octet a defined subtype within the category of defined datatype?",
                            "Which datatypes are specified as subclasses of defined datatype, including octet?",
                            "To which higher-level datatypes does octet belong according to the ontology hierarchy?"
                        ]
                    }
                ]
            },
            "octet string": {
                "axiom": {
                    "subClassOf": [
                        "defined datatype"
                    ]
                },
                "description": "octet string is defined as a subclass of defined datatype. This means that octet string represents a specific type of datatype, though its precise structure and constraints are not further elaborated in the current axioms. Members of this class inherit all characteristics of defined datatype.",
                "CQ": [
                    {
                        "axiom": "octet string subClassOf defined datatype",
                        "CQ": [
                            "Is octet string classified as a specialized type of defined datatype?",
                            "Which data types fall under the category of defined datatype, such as octet string?",
                            "What broader data categories include octet string as a member?"
                        ]
                    }
                ]
            },
            "private": {
                "axiom": {
                    "subClassOf": [
                        "defined datatype"
                    ]
                },
                "description": "private is defined as a subclass of defined datatype, indicating that it represents a specific kind of datatype within the ontology. No additional restrictions or disjointness axioms are specified, so its primary characteristic is its hierarchical relationship as a more specialized form of defined datatype.",
                "CQ": [
                    {
                        "axiom": "private subClassOf defined datatype",
                        "CQ": [
                            "Does private fall under the general category of defined datatype?",
                            "Which specific types are classified as defined datatype, such as private?",
                            "What broader classes does private belong to in this ontology?"
                        ]
                    }
                ]
            },
            "object identifier": {
                "axiom": {
                    "subClassOf": [
                        "defined datatype"
                    ]
                },
                "description": "object identifier is defined as a subclass of defined datatype. This means that every object identifier is a specific type of defined datatype, typically used to uniquely distinguish individual entities or objects within a system or dataset.",
                "CQ": [
                    {
                        "axiom": "object identifier subClassOf defined datatype",
                        "CQ": [
                            "Is every object identifier necessarily classified as a defined datatype?",
                            "Which defined datatypes have object identifier as a specific specialization?",
                            "To what broader datatype classes does object identifier belong?"
                        ]
                    }
                ]
            },
            "non-directed labeled graph datatype": {
                "axiom": {
                    "subClassOf": [
                        "defined datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_member some non-directed labeled graph generator]",
                        "[has_member some graph aggregate component]"
                    ]
                },
                "description": "non-directed labeled graph datatype is defined as a subclass of defined datatype. Any member of this class must include at least one non-directed labeled graph generator and at least one graph aggregate component as elements (as specified by the has_member property). This formalization captures datatypes representing non-directed labeled graphs constructed or characterized by these required components.",
                "CQ": [
                    {
                        "axiom": "non-directed labeled graph datatype subClassOf defined datatype",
                        "CQ": [
                            "Is non-directed labeled graph datatype a specialized form of defined datatype?",
                            "Which datatypes fall under the defined datatype category, including non-directed labeled graph datatype?",
                            "What broader datatype classifications does non-directed labeled graph datatype belong to?"
                        ]
                    },
                    {
                        "axiom": "non-directed labeled graph datatype propertyRestrictions [has_member some non-directed labeled graph generator]",
                        "CQ": [
                            "Is every non-directed labeled graph required to have at least one member that is a non-directed labeled graph generator?",
                            "Can a non-directed labeled graph exist without having a has_member relationship to a non-directed labeled graph generator?",
                            "Does the presence of the has_member relationship to a non-directed labeled graph generator define membership within a non-directed labeled graph?"
                        ]
                    },
                    {
                        "axiom": "non-directed labeled graph datatype propertyRestrictions [has_member some graph aggregate component]",
                        "CQ": [
                            "Must every non-directed labeled graph have at least one has_member relationship to a graph aggregate component?",
                            "Is it required for a non-directed labeled graph to possess some member that qualifies as a graph aggregate component?",
                            "Can a non-directed labeled graph exist without having any has_member relation to a graph aggregate component?"
                        ]
                    }
                ]
            },
            "labeled graph datatype": {
                "axiom": {
                    "subClassOf": [
                        "defined datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_member some directed labeled graph datatype generator]"
                    ]
                },
                "description": "labeled graph datatype is defined as a subclass of defined datatype, with the additional restriction that it must have at least one member produced by a directed labeled graph datatype generator. This means every labeled graph datatype is necessarily structured to include elements generated from a mechanism or process that produces directed labeled graph datatypes, distinguishing it from other defined datatypes that may lack this property.",
                "CQ": [
                    {
                        "axiom": "labeled graph datatype subClassOf defined datatype",
                        "CQ": [
                            "Is labeled graph datatype classified as a kind of defined datatype?",
                            "What are the subtypes encompassed by defined datatype, such as labeled graph datatype?",
                            "Which more general types include labeled graph datatype as a member?"
                        ]
                    },
                    {
                        "axiom": "labeled graph datatype propertyRestrictions [has_member some directed labeled graph datatype generator]",
                        "CQ": [
                            "Must every labeled graph with propertyRestrictions have at least one has_member relation to a directed labeled graph datatype generator?",
                            "Is it required for any labeled graph with propertyRestrictions to be associated, via has_member, with a directed labeled graph datatype generator?",
                            "Can a labeled graph with propertyRestrictions exist without having the has_member property relating it to a directed labeled graph datatype generator?"
                        ]
                    }
                ]
            },
            "stack": {
                "axiom": {
                    "subClassOf": [
                        "defined generator"
                    ]
                },
                "description": "stack is defined as a subclass of defined generator. This means every stack is a type of defined generator, inheriting all characteristics associated with defined generators. No additional property restrictions, disjointness, or equivalence assertions are specified. This class is intended to capture entities that possess the structural or functional traits of defined generators, refined specifically as stacks.",
                "CQ": [
                    {
                        "axiom": "stack subClassOf defined generator",
                        "CQ": [
                            "Is stack categorized as a specific type of defined generator?",
                            "Which entities are identified as subclasses under defined generator, such as stack?",
                            "What are the broader categories or superclasses to which stack belongs?"
                        ]
                    }
                ]
            },
            "tree": {
                "axiom": {
                    "subClassOf": [
                        "defined generator"
                    ]
                },
                "description": "tree is defined as a subclass of defined generator. This indicates that any instance of tree is considered a type of defined generator, inheriting all properties and restrictions from that superclass. No additional property restrictions or disjointness axioms are specified for this class.",
                "CQ": [
                    {
                        "axiom": "tree subClassOf defined generator",
                        "CQ": [
                            "Is tree classified as a type of defined generator?",
                            "What entities are specified as subclasses of defined generator, such as tree?",
                            "Which broader classes does tree pertain to within the context of defined generator?"
                        ]
                    }
                ]
            },
            "optional": {
                "axiom": {
                    "subClassOf": [
                        "defined generator"
                    ]
                },
                "description": "optional is defined as a subclass of defined generator, indicating that every optional is a type of defined generator. This means all individuals classified as optional inherit the properties and restrictions of defined generator, but may have further distinguishing features or constraints specified elsewhere. There are no additional axioms or asserted properties currently restricting the class further.",
                "CQ": [
                    {
                        "axiom": "optional subClassOf defined generator",
                        "CQ": [
                            "Does optional fall under the defined generator category?",
                            "Which defined generator types encompass optional as a subclass?",
                            "What broader classes include optional within the context of defined generator classifications?"
                        ]
                    }
                ]
            },
            "directed labeled graph datatype generator": {
                "axiom": {
                    "subClassOf": [
                        "defined generator"
                    ]
                },
                "description": "directed labeled graph datatype generator is a subclass of defined generator. This class represents generators that are specifically designed to produce directed labeled graph datatypes, inheriting the general properties of defined generators while specializing in the context of graph structures with directed edges and labeled nodes or connections.",
                "CQ": [
                    {
                        "axiom": "directed labeled graph datatype generator subClassOf defined generator",
                        "CQ": [
                            "Is every directed labeled graph datatype generator inherently classified as a defined generator?",
                            "Which specific generator types are categorized under defined generator, such as directed labeled graph datatype generator?",
                            "To what higher-level generator classes does directed labeled graph datatype generator belong?"
                        ]
                    }
                ]
            },
            "non-directed labeled graph generator": {
                "axiom": {
                    "subClassOf": [
                        "defined generator"
                    ]
                },
                "description": "non-directed labeled graph generator is defined as a subclass of defined generator. This means every non-directed labeled graph generator is a type of defined generator, inheriting its general properties. The class represents entities that produce non-directed graphs in which nodes and/or edges are assigned labels, but with no explicit directionality imposed on the connections.",
                "CQ": [
                    {
                        "axiom": "non-directed labeled graph generator subClassOf defined generator",
                        "CQ": [
                            "Does a non-directed labeled graph generator fall under the category of defined generators?",
                            "Which generator types are subclasses of defined generator?",
                            "What broader generator classifications include non-directed labeled graph generator?"
                        ]
                    }
                ]
            },
            "vector generator": {
                "axiom": {
                    "subClassOf": [
                        "defined generator"
                    ]
                },
                "description": "vector generator is a subclass of defined generator, indicating that every vector generator is also a defined generator. No additional constraints or unique characteristics have been specified beyond this hierarchical relationship. The purpose and specific properties of vector generator are inherited from defined generator.",
                "CQ": [
                    {
                        "axiom": "vector generator subClassOf defined generator",
                        "CQ": [
                            "Is a vector generator classified as a type of defined generator?",
                            "Which generators fall under the defined generator category, such as vector generator?",
                            "What hierarchical categories include vector generator as a member?"
                        ]
                    }
                ]
            },
            "array generator": {
                "axiom": {
                    "subClassOf": [
                        "homogenous aggregate generator"
                    ],
                    "disjointWith": [
                        "homogenous aggregate generator with variable size"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some unordered aggregate]",
                        "[has_quality some fixed size]",
                        "[has_quality some multi dimensional]",
                        "[has_quality some index access]",
                        "[has_quality some non-unique values]"
                    ]
                },
                "description": "array generator is a subclass of homogenous aggregate generator and is explicitly disjoint with homogenous aggregate generator with variable size, ensuring that an instance cannot belong to both classes simultaneously. Members of the array generator class are characterized by possessing certain qualities: they are unordered aggregates, have a fixed size, can be multi-dimensional, allow index-based access, and may contain non-unique values. This combination of properties formally describes the essential characteristics of array generators, distinguishing them from other types of homogenous aggregate generators.",
                "CQ": [
                    {
                        "axiom": "array generator subClassOf homogenous aggregate generator",
                        "CQ": [
                            "Is array generator classified as a specific kind of homogenous aggregate generator?",
                            "What specific types are encompassed under the category of homogenous aggregate generator, such as array generator?",
                            "Which broader generator categories include array generator as a member?"
                        ]
                    },
                    {
                        "axiom": "array generator disjointWith homogenous aggregate generator with variable size",
                        "CQ": [
                            "Which generator classes are explicitly declared as mutually exclusive with homogenous aggregate generator with variable size?",
                            "Is there any circumstance under which a device can be considered both an array generator and a homogenous aggregate generator with variable size?",
                            "What disjointness constraints are specified for array generator within the ontology?"
                        ]
                    },
                    {
                        "axiom": "array generator propertyRestrictions [has_quality some unordered aggregate]",
                        "CQ": [
                            "Is it required that an array generator exhibits the has_quality relationship with at least one unordered aggregate?",
                            "Can any instance of array generator be found that does not possess has_quality with an unordered aggregate?",
                            "Does every array generator necessarily relate via has_quality to an entity classified as an unordered aggregate?"
                        ]
                    },
                    {
                        "axiom": "array generator propertyRestrictions [has_quality some fixed size]",
                        "CQ": [
                            "Must every array generator possess at least one quality classified as fixed size?",
                            "Are array generators required to have the property 'has_quality' with some instance of 'fixed size'?",
                            "Is it possible for an array generator to lack the 'fixed size' quality entirely?"
                        ]
                    },
                    {
                        "axiom": "array generator propertyRestrictions [has_quality some multi dimensional]",
                        "CQ": [
                            "Is it required that every array generator possesses at least one quality classified as multi dimensional?",
                            "Can an array generator exist without exhibiting the multi dimensional quality?",
                            "Does the presence of the multi dimensional quality define array generator entities within the ontology?"
                        ]
                    },
                    {
                        "axiom": "array generator propertyRestrictions [has_quality some index access]",
                        "CQ": [
                            "Is it necessary for an array generator to have a 'has_quality' relationship with some instance of index access?",
                            "Can every array generator be characterized by the existence of at least one 'has_quality' link to index access?",
                            "Does the definition of array generator require that there is at least one quality associated with index access?"
                        ]
                    },
                    {
                        "axiom": "array generator propertyRestrictions [has_quality some non-unique values]",
                        "CQ": [
                            "Is it required that an array generator must have at least one 'has_quality' relationship with non-unique values?",
                            "Can an array generator exist without possessing the 'has_quality' property that points to non-unique values?",
                            "Does every instance of array generator necessarily exhibit the 'has_quality' property with non-unique values in some capacity?"
                        ]
                    }
                ]
            },
            "homogenous aggregate generator with variable size": {
                "axiom": {
                    "subClassOf": [
                        "homogenous aggregate generator"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some variable size]"
                    ]
                },
                "description": "homogenous aggregate generator with variable size is a subclass of homogenous aggregate generator. Members of this class are characterized by possessing at least one quality of having variable size, as specified by the 'has_quality some variable size' restriction. This formalization ensures that any individual classified under this class must be a homogenous aggregate generator that exhibits variability in size as one of its defining qualities.",
                "CQ": [
                    {
                        "axiom": "homogenous aggregate generator with variable size subClassOf homogenous aggregate generator",
                        "CQ": [
                            "Is homogenous aggregate generator with variable size categorized under homogenous aggregate generator?",
                            "Which specific types fall under homogenous aggregate generator, such as those with variable size?",
                            "What broader classes encompass homogenous aggregate generator with variable size?"
                        ]
                    },
                    {
                        "axiom": "homogenous aggregate generator with variable size propertyRestrictions [has_quality some variable size]",
                        "CQ": [
                            "Is every homogenous aggregate generator required to have at least one quality corresponding to variable size?",
                            "Can a homogenous aggregate generator exist without exhibiting the variable size quality?",
                            "Does the property 'has_quality' for homogenous aggregate generators necessarily include variable size among its attributes?"
                        ]
                    }
                ]
            },
            "bag generator": {
                "axiom": {
                    "subClassOf": [
                        "homogenous unordered aggregate generator with variable size"
                    ],
                    "disjointWith": [
                        "set generator"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some non-unique values]",
                        "[has_quality some implementation dependent access]"
                    ]
                },
                "description": "bag generator is defined as a subclass of homogenous unordered aggregate generator with variable size and is explicitly disjoint with set generator, indicating that an individual cannot be both a bag generator and a set generator. Members of this class are characterized by generating collections where items may have non-unique values (duplicates are permitted) and the way elements are accessed is implementation dependent. This ensures that bag generators support variable-sized, unordered aggregates allowing repeated elements, with element access properties not universally specified.",
                "CQ": [
                    {
                        "axiom": "bag generator subClassOf homogenous unordered aggregate generator with variable size",
                        "CQ": [
                            "Is every bag generator classified under homogenous unordered aggregate generator with variable size?",
                            "What aggregate generators are categorized as more specific forms of homogenous unordered aggregate generator with variable size?",
                            "To which broader generator categories does bag generator belong?"
                        ]
                    },
                    {
                        "axiom": "bag generator disjointWith set generator",
                        "CQ": [
                            "How does the ontology differentiate between bag generators and set generators?",
                            "Is there any instance that can simultaneously belong to both bag generator and set generator classes?",
                            "Which classes are explicitly stated as disjoint with set generator?"
                        ]
                    },
                    {
                        "axiom": "bag generator propertyRestrictions [has_quality some non-unique values]",
                        "CQ": [
                            "Is it necessary for a bag generator to possess at least one quality that is classified as a non-unique value?",
                            "Does every bag generator exhibit the property 'has_quality' with some value that is not unique?",
                            "Can a bag generator exist without having any non-unique value as its quality?"
                        ]
                    },
                    {
                        "axiom": "bag generator propertyRestrictions [has_quality some implementation dependent access]",
                        "CQ": [
                            "Is every bag generator required to have at least one quality associated with implementation dependent access?",
                            "Does a bag generator necessarily possess the quality of implementation dependent access through the has_quality property?",
                            "Can a bag generator exist without having the has_quality property relating it to implementation dependent access?"
                        ]
                    }
                ]
            },
            "set generator": {
                "axiom": {
                    "subClassOf": [
                        "homogenous unordered aggregate generator with variable size"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some access by value]",
                        "[has_quality some unique values]"
                    ]
                },
                "description": "set generator is defined as a subclass of homogenous unordered aggregate generator with variable size. Members of this class are characterized by having the qualities of access by value and containing unique values. This means that each instance generates aggregates where elements are both accessed directly by their value (rather than by reference or position) and all elements within any generated aggregate are unique, with no duplicates permitted.",
                "CQ": [
                    {
                        "axiom": "set generator subClassOf homogenous unordered aggregate generator with variable size",
                        "CQ": [
                            "Is every set generator classified under homogenous unordered aggregate generator with variable size?",
                            "Which specific generators fall under the category of homogenous unordered aggregate generator with variable size?",
                            "What broader categories include set generator as a subclass?"
                        ]
                    },
                    {
                        "axiom": "set generator propertyRestrictions [has_quality some access by value]",
                        "CQ": [
                            "Does every set generator require at least one 'has_quality' relationship with an entity of type 'access by value'?",
                            "Is it necessary that a set generator possesses the 'has_quality' property that relates specifically to 'access by value'?",
                            "Is the presence of the 'has_quality' property with the value 'access by value' sufficient for something to be considered a set generator?"
                        ]
                    },
                    {
                        "axiom": "set generator propertyRestrictions [has_quality some unique values]",
                        "CQ": [
                            "Is it required that every set generator possesses at least one unique value as a quality?",
                            "Can a set generator's 'has_quality' relation be satisfied only by unique values?",
                            "Are unique values necessarily present among the qualities assigned to any set generator?"
                        ]
                    }
                ]
            },
            "class generator": {
                "axiom": {
                    "subClassOf": [
                        "heterogenous aggregate generator"
                    ],
                    "disjointWith": [
                        "record generator",
                        "table generator"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some key access]",
                        "[has_quality some unordered aggregate]",
                        "[has_quality some non-unique values]",
                        "[has_quality some one dimensional]",
                        "[has_quality some fixed size]"
                    ]
                },
                "description": "class generator is defined as a subclass of heterogenous aggregate generator and is explicitly disjoint with both record generator and table generator, meaning an individual cannot belong to more than one of these classes simultaneously. Members of the class generator are characterized by having the following qualities: key access, unordered aggregate structure, non-unique values, one-dimensional organization, and fixed size. These properties collectively define class generator as a type of aggregate generator that supports key-based, unordered collections with potentially repeated values, all arranged in a single dimension with a fixed number of elements.",
                "CQ": [
                    {
                        "axiom": "class generator subClassOf heterogenous aggregate generator",
                        "CQ": [
                            "Is class generator categorized as a type of heterogenous aggregate generator?",
                            "Which specific generators fall under the broader class of heterogenous aggregate generator, such as class generator?",
                            "What higher-level generator classifications include class generator within their hierarchy?"
                        ]
                    },
                    {
                        "axiom": "class generator disjointWith record generator",
                        "CQ": [
                            "What logical incompatibility exists between class generator and record generator in the ontology?",
                            "Is it permitted for an entity to be both a class generator and a record generator?",
                            "Which classes are formally specified as disjoint with record generator?"
                        ]
                    },
                    {
                        "axiom": "class generator disjointWith table generator",
                        "CQ": [
                            "What formal separation is defined between class generator and table generator in the ontology?",
                            "Is there any instance that can be classified as both a class generator and a table generator?",
                            "Which other entities are specified as being incompatible with table generator?"
                        ]
                    },
                    {
                        "axiom": "class generator propertyRestrictions [has_quality some key access]",
                        "CQ": [
                            "Is it required for every generator to possess at least one key access quality?",
                            "Does the class generator necessarily have the property 'has_quality' related in some way to key access?",
                            "Can a member of the generator class lack any association to key access through the has_quality property?"
                        ]
                    },
                    {
                        "axiom": "class generator propertyRestrictions [has_quality some unordered aggregate]",
                        "CQ": [
                            "Is every instance of the class 'generator' required to have at least one 'has_quality' relationship with an 'unordered aggregate'?",
                            "Can a generator possess a quality that is not an unordered aggregate?",
                            "Are all qualities attributed to generators necessarily instances of unordered aggregates?"
                        ]
                    },
                    {
                        "axiom": "class generator propertyRestrictions [has_quality some non-unique values]",
                        "CQ": [
                            "Must every instance of generator possess at least one non-unique quality via the has_quality property?",
                            "Is it required that a generator is related by has_quality to something described as a non-unique value?",
                            "Can a generator exist in the ontology without being associated with any non-unique value through has_quality?"
                        ]
                    },
                    {
                        "axiom": "class generator propertyRestrictions [has_quality some one dimensional]",
                        "CQ": [
                            "Must every instance of generator have at least one quality that is one dimensional?",
                            "Are all generators required to possess some quality classified as one dimensional?",
                            "Is it necessary that generator is related via has_quality to a one dimensional entity?"
                        ]
                    },
                    {
                        "axiom": "class generator propertyRestrictions [has_quality some fixed size]",
                        "CQ": [
                            "Is it required that every generator has at least one quality that is a fixed size?",
                            "Can a generator possess a quality other than fixed size, or is fixed size the only necessary quality?",
                            "Does the ontology require the existence of a fixed size quality for all instances of generators?"
                        ]
                    }
                ]
            },
            "record generator": {
                "axiom": {
                    "subClassOf": [
                        "heterogenous aggregate generator"
                    ],
                    "disjointWith": [
                        "table datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some fixed size]",
                        "[has_quality some one dimensional]",
                        "[has_quality some unordered aggregate]",
                        "[has_quality some key access]",
                        "[has_quality some non-unique values]"
                    ]
                },
                "description": "record generator is defined as a subclass of heterogenous aggregate generator and is explicitly disjoint with table datatype, ensuring that an individual cannot be both a record generator and a table datatype. Members of the record generator class must possess several qualities: they have a fixed size, are one-dimensional, form an unordered aggregate, support key access, and can contain non-unique values. This formalization captures the characteristic structure of a record generator, emphasizing its fixed, one-dimensional, unordered nature with keyed access and allowance for repeated values.",
                "CQ": [
                    {
                        "axiom": "record generator subClassOf heterogenous aggregate generator",
                        "CQ": [
                            "Is record generator categorized under heterogenous aggregate generator?",
                            "Which entities are classified as specific types of heterogenous aggregate generator, including record generator?",
                            "To which broader classifications does record generator belong?"
                        ]
                    },
                    {
                        "axiom": "record generator disjointWith table datatype",
                        "CQ": [
                            "What logical separation exists between the record generator and table datatype classes in the ontology?",
                            "Can an entity simultaneously be classified as both a record generator and a table datatype?",
                            "Which ontology classes are declared as disjoint with the table datatype class?"
                        ]
                    },
                    {
                        "axiom": "record generator propertyRestrictions [has_quality some fixed size]",
                        "CQ": [
                            "Is it required that every record generator has at least one quality characterized by a fixed size?",
                            "Must a record generator possess the property 'has_quality' with a value of fixed size?",
                            "Does the presence of the fixed size quality define the class of record generators with respect to the has_quality property?"
                        ]
                    },
                    {
                        "axiom": "record generator propertyRestrictions [has_quality some one dimensional]",
                        "CQ": [
                            "Is every record generator required to possess at least one quality that is classified as one dimensional?",
                            "Can a record generator exist without having any one dimensional quality?",
                            "Does the presence of a one dimensional quality suffice for an entity to be regarded as a record generator?"
                        ]
                    },
                    {
                        "axiom": "record generator propertyRestrictions [has_quality some unordered aggregate]",
                        "CQ": [
                            "Must every record generator have the property 'has_quality' associated with at least one unordered aggregate?",
                            "Is there a requirement for a record generator to possess any quality that is classified as an unordered aggregate?",
                            "Can a record generator exist without having a 'has_quality' relationship to an unordered aggregate?"
                        ]
                    },
                    {
                        "axiom": "record generator propertyRestrictions [has_quality some key access]",
                        "CQ": [
                            "Is it required for a record generator to have at least one 'has_quality' relationship with a key access instance?",
                            "Can a record generator exist without possessing any key access quality via the 'has_quality' relation?",
                            "Does every record generator necessarily exhibit some form of key access as a quality?"
                        ]
                    },
                    {
                        "axiom": "record generator propertyRestrictions [has_quality some non-unique values]",
                        "CQ": [
                            "Must every record generator possess at least one quality characterized as having non-unique values?",
                            "Is it required that some quality associated with a record generator be of the type where values are not unique?",
                            "Can a record generator exist without being linked to a quality with non-unique values?"
                        ]
                    }
                ]
            },
            "table generator": {
                "axiom": {
                    "subClassOf": [
                        "heterogenous aggregate generator"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some non-unique values]",
                        "[has_quality some variable size]",
                        "[has_quality some unordered aggregate]",
                        "[has_quality some two dimensional]"
                    ]
                },
                "description": "table generator is defined as a subclass of heterogenous aggregate generator and is characterized by several property restrictions: it must possess the qualities of having non-unique values, variable size, being an unordered aggregate, and being two dimensional. These constraints specify that any instance of table generator produces or represents a two-dimensional collection of items where elements may repeat, the number of items can vary, the arrangement lacks a specific sequence, and multiple types of elements (heterogeneity) are permitted.",
                "CQ": [
                    {
                        "axiom": "table generator subClassOf heterogenous aggregate generator",
                        "CQ": [
                            "Is table generator classified under the broader category of heterogenous aggregate generator?",
                            "What specific types are encompassed by heterogenous aggregate generator, including table generator?",
                            "To which higher-level categories does table generator belong within the ontology?"
                        ]
                    },
                    {
                        "axiom": "table generator propertyRestrictions [has_quality some non-unique values]",
                        "CQ": [
                            "Must a table generator possess at least one quality that is not unique among its values?",
                            "Can a table generator exhibit qualities where the same value is shared by more than one instance?",
                            "Is it required for a table generator to have the property 'has_quality' associated with values that are not unique?"
                        ]
                    },
                    {
                        "axiom": "table generator propertyRestrictions [has_quality some variable size]",
                        "CQ": [
                            "Is it required that every table generator possesses at least one variable size as a quality?",
                            "Does a table generator necessarily have the property ‘has_quality’ associated with some variable size?",
                            "Must all table generators be characterized by having a quality that is a variable size?"
                        ]
                    },
                    {
                        "axiom": "table generator propertyRestrictions [has_quality some unordered aggregate]",
                        "CQ": [
                            "Is every table generator required to have at least one quality that is an unordered aggregate?",
                            "Can a table generator ever lack the property 'has_quality' with an unordered aggregate as a value?",
                            "Does the existence of the 'has_quality' relationship between a table generator and an unordered aggregate imply that unordered aggregate is a necessary quality for all table generators?"
                        ]
                    },
                    {
                        "axiom": "table generator propertyRestrictions [has_quality some two dimensional]",
                        "CQ": [
                            "Is every table generator required to have at least one quality that is two dimensional?",
                            "Can a table generator possess qualities other than being two dimensional?",
                            "Does a two dimensional quality necessarily apply to all table generators through the has_quality relationship?"
                        ]
                    }
                ]
            },
            "sequence generator": {
                "axiom": {
                    "subClassOf": [
                        "homogenous aggregate generator with variable size"
                    ],
                    "disjointWith": [
                        "homogenous unordered aggregate generator with variable size"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some non-unique values]",
                        "[has_quality some ordered aggregate]",
                        "[has_quality some position access]"
                    ]
                },
                "description": "sequence generator is defined as a subclass of homogenous aggregate generator with variable size, and is explicitly disjoint from homogenous unordered aggregate generator with variable size—meaning an individual cannot belong to both classes at once. Members of the sequence generator class are characterized by possessing certain qualities: they generate aggregates with non-unique values, maintain an ordered structure, and support position-based access to elements. These constraints formally specify that sequence generators create ordered collections (or aggregates) where repeated values are permissible and positional referencing is available, distinguishing them from unordered aggregate generators.",
                "CQ": [
                    {
                        "axiom": "sequence generator subClassOf homogenous aggregate generator with variable size",
                        "CQ": [
                            "Is sequence generator included as a type of homogenous aggregate generator with variable size?",
                            "What specific subclasses fall under homogenous aggregate generator with variable size, including sequence generator?",
                            "Which broader categories does sequence generator belong to within the ontology?"
                        ]
                    },
                    {
                        "axiom": "sequence generator disjointWith homogenous unordered aggregate generator with variable size",
                        "CQ": [
                            "What logical separation is defined between sequence generators and homogenous unordered aggregate generators with variable size in the ontology?",
                            "Is any system classified as both a sequence generator and a homogenous unordered aggregate generator with variable size?",
                            "Which generator classes are declared as incompatible with homogenous unordered aggregate generators with variable size?"
                        ]
                    },
                    {
                        "axiom": "sequence generator propertyRestrictions [has_quality some non-unique values]",
                        "CQ": [
                            "Is it required that a sequence generator has at least one quality corresponding to non-unique values?",
                            "Can a sequence generator exist without possessing the non-unique values quality?",
                            "Must all sequence generators be associated with the non-unique values quality through the has_quality property?"
                        ]
                    },
                    {
                        "axiom": "sequence generator propertyRestrictions [has_quality some ordered aggregate]",
                        "CQ": [
                            "Must every sequence generator possess at least one quality characterized as an ordered aggregate?",
                            "Is it required that a sequence generator be associated, via the has_quality property, with something that is an ordered aggregate?",
                            "Can a sequence generator exist without having the has_quality relationship to an ordered aggregate?"
                        ]
                    },
                    {
                        "axiom": "sequence generator propertyRestrictions [has_quality some position access]",
                        "CQ": [
                            "Does every sequence generator necessarily have at least one quality associated with position access?",
                            "Is possessing the quality of position access required for an entity to be classified as a sequence generator?",
                            "Can a sequence generator exist without having the property 'has_quality' linked to position access?"
                        ]
                    }
                ]
            },
            "homogenous unordered aggregate generator with variable size": {
                "axiom": {
                    "subClassOf": [
                        "homogenous aggregate generator with variable size"
                    ],
                    "equivalentClass": [
                        "(bag generator or set generator)"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some unordered aggregate]"
                    ]
                },
                "description": "homogenous unordered aggregate generator with variable size is a subclass of homogenous aggregate generator with variable size and is defined as being equivalent to either a bag generator or a set generator. Members of this class are characterized by having the quality of generating unordered aggregates, reflecting that the elements produced do not have intrinsic order. This ontology definition ensures that any homogenous unordered aggregate generator with variable size behaves as a variable-sized aggregate generator whose items are homogeneous and unordered, aligning with the behaviors of both bag generators and set generators.",
                "CQ": [
                    {
                        "axiom": "homogenous unordered aggregate generator with variable size subClassOf homogenous aggregate generator with variable size",
                        "CQ": [
                            "Does a homogenous unordered aggregate generator with variable size constitute a specific kind of homogenous aggregate generator with variable size?",
                            "Which aggregate generators with variable size fall under the category of homogenous aggregate generator with variable size, including homogenous unordered aggregate generator with variable size?",
                            "What broader aggregate generator classes encompass homogenous unordered aggregate generator with variable size?"
                        ]
                    },
                    {
                        "axiom": "homogenous unordered aggregate generator with variable size equivalentClass (bag generator or set generator)",
                        "CQ": [
                            "Is a homogenous unordered aggregate generator with variable size equivalent to a bag generator or a set generator?",
                            "Are all homogenous unordered aggregate generators with variable size instances of either bag generators or set generators?",
                            "Can any generator outside the categories of bag generator or set generator be classified as a homogenous unordered aggregate generator with variable size?"
                        ]
                    },
                    {
                        "axiom": "homogenous unordered aggregate generator with variable size propertyRestrictions [has_quality some unordered aggregate]",
                        "CQ": [
                            "Does every homogenous unordered aggregate generator necessarily have at least one quality characterized as an unordered aggregate?",
                            "Can a homogenous unordered aggregate generator possess the 'has_quality' property only if the quality is of type unordered aggregate?",
                            "Is it possible for a homogenous unordered aggregate generator to lack any 'has_quality' relationship to unordered aggregate entities?"
                        ]
                    }
                ]
            },
            "choice generator": {
                "axiom": {
                    "subClassOf": [
                        "non-aggregate generator"
                    ],
                    "propertyRestrictions": [
                        "[is_member_of some choice datatype]"
                    ]
                },
                "description": "choice generator is defined as a subclass of non-aggregate generator. Members of this class are further characterized by the property that they are associated with at least one choice datatype, as expressed by the restriction [is_member_of some choice datatype]. This means any individual classified as a choice generator must participate in or be a member of a choice datatype, distinguishing them from other forms of non-aggregate generators.",
                "CQ": [
                    {
                        "axiom": "choice generator subClassOf non-aggregate generator",
                        "CQ": [
                            "Is every choice generator categorized under non-aggregate generator?",
                            "Which generator types fall under the broader class of non-aggregate generator?",
                            "What more general classes include choice generator as a subclass?"
                        ]
                    },
                    {
                        "axiom": "choice generator propertyRestrictions [is_member_of some choice datatype]",
                        "CQ": [
                            "Is it required that a choice generator possesses at least one is_member_of relationship with an instance of the choice datatype?",
                            "Can a choice generator exist without being linked to any element from the choice datatype through the is_member_of property?",
                            "Are all choice generators necessarily associated via is_member_of with members from the specified choice datatype?"
                        ]
                    }
                ]
            },
            "pointer generator": {
                "axiom": {
                    "subClassOf": [
                        "non-aggregate generator"
                    ],
                    "propertyRestrictions": [
                        "[is_member_of some pointer datatype]"
                    ]
                },
                "description": "pointer generator is defined as a subclass of non-aggregate generator. Every instance of pointer generator must be a member of some pointer datatype, indicating that this class is characterized by its association with pointer datatypes. This structure ensures that all pointer generators participate specifically within the context of pointer datatypes and inherit the properties of non-aggregate generators.",
                "CQ": [
                    {
                        "axiom": "pointer generator subClassOf non-aggregate generator",
                        "CQ": [
                            "Does pointer generator fall under the classification of non-aggregate generator?",
                            "Which types of generators are subclasses of non-aggregate generator, such as pointer generator?",
                            "What broader generator categories include pointer generator as a member?"
                        ]
                    },
                    {
                        "axiom": "pointer generator propertyRestrictions [is_member_of some pointer datatype]",
                        "CQ": [
                            "Is every pointer generator necessarily associated with at least one pointer datatype through the 'is_member_of' property?",
                            "Does a pointer generator require the existence of some related pointer datatype via the 'is_member_of' relationship?",
                            "Must each instance of pointer generator be linked to a pointer datatype by the 'is_member_of' property?"
                        ]
                    }
                ]
            },
            "procedure generator": {
                "axiom": {
                    "subClassOf": [
                        "non-aggregate generator"
                    ]
                },
                "description": "procedure generator is defined as a subclass of non-aggregate generator. This means that every procedure generator is a specific type of non-aggregate generator, inheriting all properties and constraints applicable to non-aggregate generators. No further restrictions or characteristics are provided by the current axioms.",
                "CQ": [
                    {
                        "axiom": "procedure generator subClassOf non-aggregate generator",
                        "CQ": [
                            "Does a procedure generator fall under the classification of non-aggregate generator?",
                            "Which types of generators are specific forms of non-aggregate generator, such as procedure generator?",
                            "To which broader generator categories does procedure generator belong?"
                        ]
                    }
                ]
            },
            "table datatype": {
                "axiom": {
                    "subClassOf": [
                        "heterogenous aggregate datatype"
                    ],
                    "disjointWith": [
                        "record (tuple) datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_member some table generator]",
                        "[has_operation some IsEmpty:table]",
                        "[has_operation some MapToBag:table]",
                        "[has_operation some Insert:table]",
                        "[has_operation some Select:table]",
                        "[has_operation some MapToTable:table]",
                        "[has_member some field-list]",
                        "[has_quality some exact]",
                        "[has_operation some Delete:table]",
                        "[has_operation some Fetch:table]",
                        "[has_operation some Serialize:table]",
                        "[has_quality some non-numeric]"
                    ]
                },
                "description": "table datatype is defined as a subclass of heterogenous aggregate datatype, and is explicitly disjoint with record (tuple) datatype, indicating that no instance can simultaneously belong to both classes. Members of the table datatype class are characterized by the following: they always have at least one table generator and a field-list as members; possess the qualities of being exact and non-numeric; and support several specific operations, including IsEmpty, MapToBag, Insert, Select, MapToTable, Delete, Fetch, and Serialize. This formalization distinguishes table datatype from other aggregate types, ensuring that it is uniquely identified by its supported operations, membership requirements, and data qualities.",
                "CQ": [
                    {
                        "axiom": "table datatype subClassOf heterogenous aggregate datatype",
                        "CQ": [
                            "Is table datatype classified as a subtype of heterogenous aggregate datatype?",
                            "What specific datatypes fall under the category of heterogenous aggregate datatype, including table datatype?",
                            "Which broader datatype classes does table datatype belong to?"
                        ]
                    },
                    {
                        "axiom": "table datatype disjointWith record (tuple) datatype",
                        "CQ": [
                            "How is the relationship between table datatype and record (tuple) datatype defined in the ontology?",
                            "Is there any datatype that qualifies as both table datatype and record (tuple) datatype?",
                            "Which datatypes are explicitly specified as incompatible with record (tuple) datatype?"
                        ]
                    },
                    {
                        "axiom": "table datatype propertyRestrictions [has_member some table generator]",
                        "CQ": [
                            "Is it required that every table has at least one member generated by a table generator?",
                            "Does a table necessarily include some entity that originates from a table generator through the has_member property?",
                            "Can any table be defined without having the has_member relationship to a table generator?"
                        ]
                    },
                    {
                        "axiom": "table datatype propertyRestrictions [has_operation some IsEmpty:table]",
                        "CQ": [
                            "Is every instance of the table required to have at least one 'has_operation' relationship with an instance of IsEmpty?",
                            "Can a table exist without being associated through 'has_operation' to IsEmpty?",
                            "Are all tables characterized by the presence of a 'has_operation' property linking them to IsEmpty?"
                        ]
                    },
                    {
                        "axiom": "table datatype propertyRestrictions [has_operation some MapToBag:table]",
                        "CQ": [
                            "Is every instance of 'table' required to have at least one 'has_operation' relationship with an entity of type 'MapToBag:table'?",
                            "Can a 'table' exist without being linked through 'has_operation' to any 'MapToBag:table'?",
                            "Does the presence of the 'has_operation' property linking 'table' to 'MapToBag:table' define all instances of the class 'table'?"
                        ]
                    },
                    {
                        "axiom": "table datatype propertyRestrictions [has_operation some Insert:table]",
                        "CQ": [
                            "Must every table participate in at least one 'Insert:table' operation?",
                            "Does the presence of the 'has_operation' relationship with 'Insert:table' characterize all instances of table?",
                            "Is it required that every table is associated with some insertion operation?"
                        ]
                    },
                    {
                        "axiom": "table datatype propertyRestrictions [has_operation some Select:table]",
                        "CQ": [
                            "Is every table required to have at least one 'has_operation' relationship to an entity of type Select?",
                            "Are there tables that do not have any 'has_operation' property pointing to a Select instance?",
                            "Must a table always be associated with a Select through the 'has_operation' property?"
                        ]
                    },
                    {
                        "axiom": "table datatype propertyRestrictions [has_operation some MapToTable:table]",
                        "CQ": [
                            "Is it required that a table always has at least one has_operation relationship to a MapToTable:table?",
                            "Can a table exist without being associated via has_operation to any MapToTable:table?",
                            "Does every instance of table necessarily participate in the has_operation property involving a MapToTable:table?"
                        ]
                    },
                    {
                        "axiom": "table datatype propertyRestrictions [has_member some field-list]",
                        "CQ": [
                            "Is it required that every table has at least one member from the field-list?",
                            "Does the definition of a table ensure that it must be associated with some field-list member via the has_member property?",
                            "Can a table exist without having any has_member link to a field-list individual?"
                        ]
                    },
                    {
                        "axiom": "table datatype propertyRestrictions [has_quality some exact]",
                        "CQ": [
                            "Is every table required to have at least one 'has_quality' property with the value 'exact'?",
                            "Can a table exist without possessing the 'has_quality' property set to 'exact' in any instance?",
                            "Does the definition of table permit 'has_quality' property values other than 'exact', or is 'exact' necessary for all tables?"
                        ]
                    },
                    {
                        "axiom": "table datatype propertyRestrictions [has_operation some Delete:table]",
                        "CQ": [
                            "Is it required for a table to participate in at least one 'Delete' operation?",
                            "Can every table have an associated 'Delete' operation through the property 'has_operation'?",
                            "Does the ontology entail that any table must have the 'has_operation' relationship to a 'Delete' process?"
                        ]
                    },
                    {
                        "axiom": "table datatype propertyRestrictions [has_operation some Fetch:table]",
                        "CQ": [
                            "Is every table in the scope required to have at least one 'has_operation' connection with a Fetch action?",
                            "Can a table exist without being associated with any Fetch operation through the 'has_operation' property?",
                            "Is it necessary for tables to participate in the 'has_operation' relationship with at least one Fetch instance?"
                        ]
                    },
                    {
                        "axiom": "table datatype propertyRestrictions [has_operation some Serialize:table]",
                        "CQ": [
                            "Is it required that a table have at least one has_operation relation to Serialize:table?",
                            "Does every table necessarily perform a Serialize:table operation via the has_operation property?",
                            "Can a table exist without being associated with Serialize:table through the has_operation property?"
                        ]
                    },
                    {
                        "axiom": "table datatype propertyRestrictions [has_quality some non-numeric]",
                        "CQ": [
                            "Are all tables required to possess at least one quality that is considered non-numeric?",
                            "Is it essential for any instance of a table to have the 'has_quality' property relating to a value categorized as non-numeric?",
                            "Can a table exist in the ontology without any non-numeric quality assigned through the 'has_quality' property?"
                        ]
                    }
                ]
            },
            "class datatype": {
                "axiom": {
                    "subClassOf": [
                        "heterogenous aggregate datatype"
                    ],
                    "disjointWith": [
                        "record (tuple) datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_operation some AttributeSelect:class]",
                        "[has_operation some AttributeReplace:class]",
                        "[has_operation some Equal:class]",
                        "[has_member some class generator]",
                        "[has_quality some non-ordered]",
                        "[has_quality some non-numeric]",
                        "[has_member some attribute-list]"
                    ]
                },
                "description": "class datatype is a subclass of heterogenous aggregate datatype and is explicitly disjoint with record (tuple) datatype, ensuring that no individual can belong to both classes. Members of class datatype are characterized by the following property restrictions: they must have operations such as AttributeSelect, AttributeReplace, and Equal (each operating on class), must include members such as a class generator and an attribute-list, and must exhibit the qualities of being non-ordered and non-numeric. This formalization distinguishes class datatypes from other aggregates (like records) by their operations and inherent qualities.",
                "CQ": [
                    {
                        "axiom": "class datatype subClassOf heterogenous aggregate datatype",
                        "CQ": [
                            "Is class datatype classified under the group of heterogenous aggregate datatype?",
                            "Which datatypes are specialized forms of heterogenous aggregate datatype, including class datatype?",
                            "What broader datatype categories encompass class datatype?"
                        ]
                    },
                    {
                        "axiom": "class datatype disjointWith record (tuple) datatype",
                        "CQ": [
                            "What formal separation exists between class datatypes and record (tuple) datatypes in the ontology?",
                            "Can an entity simultaneously be classified as both a class datatype and a record (tuple) datatype?",
                            "Which datatypes are specified as being incompatible with class datatypes?"
                        ]
                    },
                    {
                        "axiom": "class datatype propertyRestrictions [has_operation some AttributeSelect:class]",
                        "CQ": [
                            "Is every instance of class required to have at least one has_operation relationship to an AttributeSelect?",
                            "Can a class exist without having an operation that is of type AttributeSelect?",
                            "Are classes defined such that they may have the has_operation property only with instances of AttributeSelect?"
                        ]
                    },
                    {
                        "axiom": "class datatype propertyRestrictions [has_operation some AttributeReplace:class]",
                        "CQ": [
                            "Is every instance of the class required to participate in at least one 'has_operation' relationship with an AttributeReplace instance?",
                            "Does the class necessarily have some association via 'has_operation' to objects categorized as AttributeReplace?",
                            "Can a member of this class exist without having the 'has_operation' property linking it to AttributeReplace?"
                        ]
                    },
                    {
                        "axiom": "class datatype propertyRestrictions [has_operation some Equal:class]",
                        "CQ": [
                            "Is every instance of class required to participate in at least one has_operation relationship with an individual of Equal:class?",
                            "Must class necessarily have some association via has_operation with Equal:class?",
                            "Can an individual of class exist without a has_operation link to any Equal:class?"
                        ]
                    },
                    {
                        "axiom": "class datatype propertyRestrictions [has_member some class generator]",
                        "CQ": [
                            "Is every instance of 'propertyRestrictions' required to have at least one value for 'has_member' that is a 'generator'?",
                            "Does 'propertyRestrictions' necessarily include a 'generator' through the 'has_member' property?",
                            "Can an instance of 'propertyRestrictions' exist without being related to a 'generator' via 'has_member'?"
                        ]
                    },
                    {
                        "axiom": "class datatype propertyRestrictions [has_quality some non-ordered]",
                        "CQ": [
                            "Is it required that every instance in the class has the 'has_quality' property relating to at least one instance of 'non-ordered'?",
                            "Does membership in the class entail possessing the 'has_quality' relationship with an entity of type 'non-ordered'?",
                            "Can a class member exist without having the 'has_quality' attribute associated with something classified as 'non-ordered'?"
                        ]
                    },
                    {
                        "axiom": "class datatype propertyRestrictions [has_quality some non-numeric]",
                        "CQ": [
                            "Is every instance of 'class' required to have at least one 'has_quality' property relating to a 'non-numeric' value?",
                            "Must all entities of type 'class' possess some 'has_quality' relationship to a non-numeric attribute?",
                            "Does the existence of the 'class' category entail that its members always exhibit at least one non-numeric quality via the 'has_quality' property?"
                        ]
                    },
                    {
                        "axiom": "class datatype propertyRestrictions [has_member some attribute-list]",
                        "CQ": [
                            "Are all instances of the class required to have at least one member with an attribute from the attribute-list due to the has_member property?",
                            "Does every member connected to the class via has_member necessarily possess at least one attribute from the attribute-list?",
                            "Is it always the case that the class includes some entity related by has_member to any attribute specified in the attribute-list?"
                        ]
                    }
                ]
            },
            "record (tuple) datatype": {
                "axiom": {
                    "subClassOf": [
                        "heterogenous aggregate datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some non-numeric]",
                        "[has_operation some FieldSelect:record]",
                        "[has_operation some Equal:record]",
                        "[has_quality some exact]",
                        "[has_quality some non-ordered]",
                        "[has_member some record generator]",
                        "[has_operation some FieldReplace:record]",
                        "[has_member some field-list]"
                    ]
                },
                "description": "record (tuple) datatype is defined as a subclass of heterogenous aggregate datatype, representing a collection of fields that may be of differing types. It is synonymous with \"tuple datatype.\" Members of this class possess non-numeric, non-ordered, and exact qualities, supporting operations such as field selection (FieldSelect:record), field replacement (FieldReplace:record), and equality checking (Equal:record). Additionally, each record (tuple) must include a member that is a record generator and a member that is a field-list. This class formalizes the concept of records or tuples typically used to model structured, fixed-length data with heterogeneous types.",
                "CQ": [
                    {
                        "axiom": "record (tuple) datatype subClassOf heterogenous aggregate datatype",
                        "CQ": [
                            "Is every record (tuple) datatype classified under heterogenous aggregate datatype?",
                            "What specific datatypes are recognized as subclasses of heterogenous aggregate datatype, including record (tuple) datatype?",
                            "Which broader categories encompass the record (tuple) datatype?"
                        ]
                    },
                    {
                        "axiom": "record (tuple) datatype propertyRestrictions [has_quality some non-numeric]",
                        "CQ": [
                            "Is it required that every record has at least one quality that is non-numeric?",
                            "Does the definition of record permit it to possess only non-numeric qualities via the has_quality property?",
                            "Can a record exist without having a non-numeric value assigned through has_quality?"
                        ]
                    },
                    {
                        "axiom": "record (tuple) datatype propertyRestrictions [has_operation some FieldSelect:record]",
                        "CQ": [
                            "Is every instance of record (tuple) required to have at least one has_operation property relating to a FieldSelect:record?",
                            "Can a record (tuple) exist without any has_operation connection to a FieldSelect:record?",
                            "Does the ontology specify that a record (tuple) must always participate in at least one has_operation relationship with a FieldSelect:record?"
                        ]
                    },
                    {
                        "axiom": "record (tuple) datatype propertyRestrictions [has_operation some Equal:record]",
                        "CQ": [
                            "Must a record always have at least one operation that is classified as Equal?",
                            "Is it required for every record to possess an operation property linking to an instance of Equal?",
                            "Can a record exist without having its has_operation property related to Equal?"
                        ]
                    },
                    {
                        "axiom": "record (tuple) datatype propertyRestrictions [has_quality some exact]",
                        "CQ": [
                            "Must every record (tuple) have at least one has_quality property with the value exact?",
                            "Is it required for any instance of record (tuple) to possess the has_quality property related specifically to exact?",
                            "Can a record (tuple) exist without being associated with the has_quality property to exact?"
                        ]
                    },
                    {
                        "axiom": "record (tuple) datatype propertyRestrictions [has_quality some non-ordered]",
                        "CQ": [
                            "Does every record tuple necessarily possess the quality of being non-ordered?",
                            "Can a record tuple exist without having at least one non-ordered quality?",
                            "Is it required that some aspect of a record tuple must be described by the has_quality property related to non-ordered?"
                        ]
                    },
                    {
                        "axiom": "record (tuple) datatype propertyRestrictions [has_member some record generator]",
                        "CQ": [
                            "Is it required that a record must have at least one member with the role of generator?",
                            "Can a record exist without including any generator as a member?",
                            "Are all records defined to contain some member identified specifically as a generator?"
                        ]
                    },
                    {
                        "axiom": "record (tuple) datatype propertyRestrictions [has_operation some FieldReplace:record]",
                        "CQ": [
                            "Does every record require at least one has_operation relation to a FieldReplace record?",
                            "Is it necessary for a record to participate in the has_operation property with a FieldReplace instance?",
                            "Can a record exist without being associated via has_operation to any FieldReplace record?"
                        ]
                    },
                    {
                        "axiom": "record (tuple) datatype propertyRestrictions [has_member some field-list]",
                        "CQ": [
                            "Is it required that every record has at least one member from the field-list?",
                            "Can a record exist if it does not have the has_member property with any element in the field-list?",
                            "Does the definition of record ensure the presence of at least one value from the field-list via the has_member property?"
                        ]
                    }
                ]
            },
            "attribute identifier": {
                "axiom": {
                    "subClassOf": [
                        "identifier"
                    ]
                },
                "description": "attribute identifier is defined as a subclass of identifier, indicating that every attribute identifier is an identifier with a specific role in distinguishing or denoting attributes within a system. This class inherits all properties associated with identifiers, but specializes them for use in the identification of attributes. No further property restrictions or disjointness axioms are specified.",
                "CQ": [
                    {
                        "axiom": "attribute identifier subClassOf identifier",
                        "CQ": [
                            "Is attribute identifier classified under the broader group of identifier?",
                            "Which specific types are encompassed by the identifier category, including attribute identifier?",
                            "What higher-level classes is attribute identifier associated with?"
                        ]
                    }
                ]
            },
            "parameter identifier": {
                "axiom": {
                    "subClassOf": [
                        "identifier"
                    ]
                },
                "description": "parameter identifier is a subclass of identifier. This means every parameter identifier is an identifier, inheriting all its properties and characteristics, but is specifically used to denote or reference parameters (such as in functions or methods). The axiom ensures that all parameter identifiers are included within the broader category of identifiers.",
                "CQ": [
                    {
                        "axiom": "parameter identifier subClassOf identifier",
                        "CQ": [
                            "Is parameter identifier classified as a more specific instance within the category of identifier?",
                            "Which subclasses exist under identifier, and does parameter identifier appear among them?",
                            "What general categories encompass parameter identifier as a member?"
                        ]
                    }
                ]
            },
            "enumerated-value identifier": {
                "axiom": {
                    "subClassOf": [
                        "identifier"
                    ],
                    "propertyRestrictions": [
                        "[has-value some rdfs:Literal]"
                    ]
                },
                "description": "enumerated-value identifier is a subclass of identifier, characterized by the restriction that its values must be associated (through the has-value property) with at least one literal value (rdfs:Literal). This formalization ensures that every enumerated-value identifier refers explicitly to a concrete literal value, distinguishing it from other identifiers that may not be directly tied to literal data.",
                "CQ": [
                    {
                        "axiom": "enumerated-value identifier subClassOf identifier",
                        "CQ": [
                            "Is enumerated-value identifier a more specific type within the category of identifier?",
                            "Which subclasses does identifier include, specifically is enumerated-value identifier among them?",
                            "What are the broader categories encompassing enumerated-value identifier?"
                        ]
                    },
                    {
                        "axiom": "enumerated-value identifier propertyRestrictions [has-value some rdfs:Literal]",
                        "CQ": [
                            "Are all enumerated-value identifiers required to have at least one property restriction with a value of type rdfs:Literal?",
                            "Is it necessary for every enumerated-value identifier to be associated with a property restriction whose value is a literal?",
                            "Does the presence of a property restriction with an rdfs:Literal value characterize all enumerated-value identifiers?"
                        ]
                    }
                ]
            },
            "discrete-value identifier": {
                "axiom": {
                    "subClassOf": [
                        "identifier"
                    ],
                    "propertyRestrictions": [
                        "[has-value some rdfs:Literal]"
                    ]
                },
                "description": "discrete-value identifier is a subclass of identifier whose instances are constrained to have at least one associated value specified as an rdfs:Literal. This means that every discrete-value identifier must be linked to some literal value (such as a string, number, or date), formalizing the notion of identifiers that represent or encode discrete, literal data.",
                "CQ": [
                    {
                        "axiom": "discrete-value identifier subClassOf identifier",
                        "CQ": [
                            "Are all discrete-value identifiers classified under the identifier category?",
                            "Which identifier types are more specific, such as discrete-value identifier?",
                            "What broader class contains discrete-value identifier as a member?"
                        ]
                    },
                    {
                        "axiom": "discrete-value identifier propertyRestrictions [has-value some rdfs:Literal]",
                        "CQ": [
                            "Does every discrete-value identifier necessarily have a value for the property 'propertyRestrictions' that is a literal?",
                            "Is it required that each discrete-value identifier possesses at least one propertyRestrictions value belonging to rdfs:Literal?",
                            "Can a discrete-value identifier exist without having propertyRestrictions set to any literal value?"
                        ]
                    }
                ]
            },
            "extended-value identifier": {
                "axiom": {
                    "subClassOf": [
                        "identifier"
                    ]
                },
                "description": "extended-value identifier is defined as a subclass of identifier. Members of this class inherit all characteristics of identifiers, serving the purpose of uniquely distinguishing entities, but are further specified as relating to extended-value contexts. No additional property restrictions or disjointness axioms are currently asserted for this class.",
                "CQ": [
                    {
                        "axiom": "extended-value identifier subClassOf identifier",
                        "CQ": [
                            "Is every extended-value identifier classified as an identifier?",
                            "Which subclasses of identifier encompass extended-value identifier?",
                            "What higher-level classes does extended-value identifier fall under within the identifier hierarchy?"
                        ]
                    }
                ]
            },
            "character-set identifier": {
                "axiom": {
                    "subClassOf": [
                        "identifier"
                    ]
                },
                "description": "character-set identifier is defined as a subclass of identifier. This means every character-set identifier is an identifier, but with a more specific role, typically used to uniquely represent or designate different character sets within a system or context. There are no further axioms or restrictions specified for this class.",
                "CQ": [
                    {
                        "axiom": "character-set identifier subClassOf identifier",
                        "CQ": [
                            "Is every character-set identifier also categorized as an identifier?",
                            "Which identifier types include character-set identifier as a specialization?",
                            "What broader classes does character-set identifier fall under in the ontology?"
                        ]
                    }
                ]
            },
            "field identifier": {
                "axiom": {
                    "subClassOf": [
                        "identifier"
                    ]
                },
                "description": "field identifier is defined as a subclass of identifier. Members of this class inherit all characteristics of identifiers, specifically representing identifiers that are associated with fields. This formalization ensures field identifiers are treated as a specialized type of identifier, typically used to uniquely reference or denote fields within a given context or system.",
                "CQ": [
                    {
                        "axiom": "field identifier subClassOf identifier",
                        "CQ": [
                            "Does field identifier fall under the broader classification of identifier?",
                            "What specific subtypes exist within the identifier category, including field identifier?",
                            "To which higher-level classes is field identifier related?"
                        ]
                    }
                ]
            },
            "aggregate imposed ordering": {
                "axiom": {
                    "subClassOf": [
                        "aggregate generator property"
                    ],
                    "disjointWith": [
                        "aggregate-imposed identifier uniqueness",
                        "homogenity",
                        "agregate size",
                        "uniqueness",
                        "component mandatoriness",
                        "structurness",
                        "recursiveness",
                        "access type"
                    ],
                    "equivalentClass": [
                        "(ordered aggregate or unordered aggregate)"
                    ]
                },
                "description": "aggregate imposed ordering is defined as a subclass of aggregate generator property and is disjoint with aggregate-imposed identifier uniqueness, homogenity, aggregate size, uniqueness, component mandatoriness, structurness, recursiveness, and access type—ensuring that no individual can simultaneously belong to these disjoint classes. It is equivalent to the union of ordered aggregate and unordered aggregate, indicating that every aggregate imposed ordering instance must be either an ordered aggregate or an unordered aggregate. This class captures the property by which an aggregate specifies an ordering—imposed or absent—over its components, distinguishing it from other aggregate generator properties.",
                "CQ": [
                    {
                        "axiom": "aggregate imposed ordering subClassOf aggregate generator property",
                        "CQ": [
                            "Is aggregate imposed ordering categorized as a type of aggregate generator property?",
                            "Which properties fall under the broader class of aggregate generator property, such as aggregate imposed ordering?",
                            "What are the more general classes that aggregate imposed ordering is a member of?"
                        ]
                    },
                    {
                        "axiom": "aggregate imposed ordering disjointWith aggregate-imposed identifier uniqueness",
                        "CQ": [
                            "What is the ontological separation between aggregate imposed ordering and aggregate-imposed identifier uniqueness within the model?",
                            "Can an entity simultaneously exhibit aggregate imposed ordering and aggregate-imposed identifier uniqueness?",
                            "Which ontology concepts are defined as mutually exclusive with aggregate-imposed identifier uniqueness?"
                        ]
                    },
                    {
                        "axiom": "aggregate imposed ordering disjointWith homogenity",
                        "CQ": [
                            "What distinguishes aggregate imposed ordering from homogenity within the ontology?",
                            "Is any entity permitted to belong to both aggregate imposed ordering and homogenity simultaneously?",
                            "Which other classes are explicitly defined as disjoint with homogenity?"
                        ]
                    },
                    {
                        "axiom": "aggregate imposed ordering disjointWith agregate size",
                        "CQ": [
                            "What logical separation is defined between aggregate imposed ordering and aggregate size within the ontology?",
                            "Can an aggregate characteristic belong to both imposed ordering and size categories simultaneously?",
                            "Which other aggregate-related concepts are specified as disjoint with aggregate imposed ordering?"
                        ]
                    },
                    {
                        "axiom": "aggregate imposed ordering disjointWith uniqueness",
                        "CQ": [
                            "What classification differentiates aggregate imposed ordering from uniqueness within the ontology?",
                            "Is it feasible for a concept to exemplify both aggregate imposed ordering and uniqueness simultaneously?",
                            "Which concepts are explicitly incompatible with uniqueness by disjointness declarations?"
                        ]
                    },
                    {
                        "axiom": "aggregate imposed ordering disjointWith component mandatoriness",
                        "CQ": [
                            "What is the formal separateness specified between aggregate imposed ordering and component mandatoriness?",
                            "Could an entity in the ontology be simultaneously classified as exhibiting both aggregate imposed ordering and component mandatoriness?",
                            "Which classes are asserted as disjoint with aggregate imposed ordering?"
                        ]
                    },
                    {
                        "axiom": "aggregate imposed ordering disjointWith structurness",
                        "CQ": [
                            "What ontological constraint exists between aggregate imposed ordering and structurness?",
                            "Is there an entity that can be classified under both aggregate imposed ordering and structurness?",
                            "Which classes are specified as disjoint with structurness in the ontology?"
                        ]
                    },
                    {
                        "axiom": "aggregate imposed ordering disjointWith recursiveness",
                        "CQ": [
                            "How does the ontology differentiate between aggregate imposed ordering and recursiveness?",
                            "Is there any entity that can be classified as both aggregate imposed ordering and recursiveness?",
                            "Which classes are defined as mutually exclusive with recursiveness?"
                        ]
                    },
                    {
                        "axiom": "aggregate imposed ordering disjointWith access type",
                        "CQ": [
                            "What logical separation exists between aggregate imposed ordering and access type in the ontology?",
                            "Is there any entity that can simultaneously be classified as aggregate imposed ordering and access type?",
                            "Which other classes, apart from access type, are explicitly declared as disjoint with aggregate imposed ordering?"
                        ]
                    },
                    {
                        "axiom": "aggregate imposed ordering equivalentClass (ordered aggregate or unordered aggregate)",
                        "CQ": [
                            "Is aggregate imposed ordering equivalent to the union of ordered aggregate and unordered aggregate?",
                            "Can every instance of aggregate imposed ordering be classified as either an ordered aggregate or an unordered aggregate?",
                            "Are there any instances of aggregate imposed ordering that are not part of ordered aggregate or unordered aggregate?"
                        ]
                    }
                ]
            },
            "aggregate-imposed identifier uniqueness": {
                "axiom": {
                    "subClassOf": [
                        "aggregate generator property"
                    ],
                    "disjointWith": [
                        "homogenity",
                        "agregate size",
                        "uniqueness",
                        "component mandatoriness",
                        "structurness",
                        "recursiveness",
                        "access type"
                    ],
                    "equivalentClass": [
                        "(identifier not unique or identifier unique)"
                    ]
                },
                "description": "aggregate-imposed identifier uniqueness is a subclass of aggregate generator property, and is explicitly disjoint with classes such as homogenity, aggregate size, uniqueness, component mandatoriness, structurness, recursiveness, and access type, ensuring mutual exclusivity with these notions. It is defined equivalently as a situation where an identifier may or may not be unique (identifier not unique or identifier unique), capturing precisely those cases where the uniqueness of identifiers is determined at the aggregate level rather than being strictly enforced or absent.",
                "CQ": [
                    {
                        "axiom": "aggregate-imposed identifier uniqueness subClassOf aggregate generator property",
                        "CQ": [
                            "Is aggregate-imposed identifier uniqueness categorized under aggregate generator property?",
                            "Which concepts are direct specializations of aggregate generator property?",
                            "What broader classes encompass aggregate-imposed identifier uniqueness?"
                        ]
                    },
                    {
                        "axiom": "aggregate-imposed identifier uniqueness disjointWith homogenity",
                        "CQ": [
                            "What logical separation is defined between aggregate-imposed identifier uniqueness and homogenity within the ontology?",
                            "Is there any scenario in the ontology where an entity can exhibit both aggregate-imposed identifier uniqueness and homogenity?",
                            "Which other concepts are declared as disjoint with homogenity?"
                        ]
                    },
                    {
                        "axiom": "aggregate-imposed identifier uniqueness disjointWith agregate size",
                        "CQ": [
                            "What is the formal distinction between aggregate-imposed identifier uniqueness and aggregate size within the ontology?",
                            "Are there any entities that can simultaneously possess properties of both aggregate-imposed identifier uniqueness and aggregate size?",
                            "Which ontology classes are established as disjoint with aggregate-imposed identifier uniqueness?"
                        ]
                    },
                    {
                        "axiom": "aggregate-imposed identifier uniqueness disjointWith uniqueness",
                        "CQ": [
                            "How does the ontology differentiate between aggregate-imposed identifier uniqueness and uniqueness?",
                            "Is it allowed for an entity to possess both aggregate-imposed identifier uniqueness and uniqueness simultaneously?",
                            "Which classes are defined as mutually exclusive with uniqueness?"
                        ]
                    },
                    {
                        "axiom": "aggregate-imposed identifier uniqueness disjointWith component mandatoriness",
                        "CQ": [
                            "What logical separation is asserted between aggregate-imposed identifier uniqueness and component mandatoriness within the ontology?",
                            "Is there an instance that can satisfy both aggregate-imposed identifier uniqueness and component mandatoriness simultaneously?",
                            "Which classes are explicitly defined as incompatible with component mandatoriness?"
                        ]
                    },
                    {
                        "axiom": "aggregate-imposed identifier uniqueness disjointWith structurness",
                        "CQ": [
                            "What is the logical distinction between aggregate-imposed identifier uniqueness and structurness within the ontology?",
                            "Can any entity simultaneously fulfill both aggregate-imposed identifier uniqueness and structurness?",
                            "Which other concepts are declared as mutually exclusive with structurness?"
                        ]
                    },
                    {
                        "axiom": "aggregate-imposed identifier uniqueness disjointWith recursiveness",
                        "CQ": [
                            "How does the ontology distinguish between aggregate-imposed identifier uniqueness and recursiveness?",
                            "Is it valid for a construct to exhibit both aggregate-imposed identifier uniqueness and recursiveness simultaneously?",
                            "Which entities or properties are explicitly set as incompatible with recursiveness?"
                        ]
                    },
                    {
                        "axiom": "aggregate-imposed identifier uniqueness disjointWith access type",
                        "CQ": [
                            "What is the formal differentiation between aggregate-imposed identifier uniqueness and access type in the ontology?",
                            "Is it allowable for an entity to be classified as both aggregate-imposed identifier uniqueness and access type?",
                            "Which other classes in the ontology are specified to be incompatible with access type?"
                        ]
                    },
                    {
                        "axiom": "aggregate-imposed identifier uniqueness equivalentClass (identifier not unique or identifier unique)",
                        "CQ": [
                            "Is aggregate-imposed identifier uniqueness equivalent to the union of identifier not unique and identifier unique?",
                            "Can aggregate-imposed identifier uniqueness be completely described as either identifier not unique or identifier unique?",
                            "Does aggregate-imposed identifier uniqueness include all instances with identifier unique or identifier not unique, and no others?"
                        ]
                    }
                ]
            },
            "homogenity": {
                "axiom": {
                    "subClassOf": [
                        "aggregate generator property"
                    ],
                    "disjointWith": [
                        "agregate size",
                        "uniqueness",
                        "component mandatoriness",
                        "structurness",
                        "recursiveness",
                        "access type"
                    ],
                    "equivalentClass": [
                        "(homogenous or heterogenous)"
                    ]
                },
                "description": "homogenity is defined as a subclass of aggregate generator property and is explicitly disjoint with the classes aggregate size, uniqueness, component mandatoriness, structurness, recursiveness, and access type, ensuring that no individual can simultaneously belong to these. It is also equivalent to the union of homogenous or heterogenous, indicating that any instance of homogenity must be categorized as either homogenous or heterogenous with respect to an aggregate generator property.",
                "CQ": [
                    {
                        "axiom": "homogenity subClassOf aggregate generator property",
                        "CQ": [
                            "Is homogenity classified under the aggregate generator property category?",
                            "What specific properties are distinguished as subclasses of aggregate generator property, including homogenity?",
                            "Which higher-level property categories encompass homogenity?"
                        ]
                    },
                    {
                        "axiom": "homogenity disjointWith agregate size",
                        "CQ": [
                            "Are there any entities that can simultaneously belong to both the 'homogenity' and 'agregate size' classes?",
                            "Which ontology classes are specified as mutually exclusive with 'agregate size'?",
                            "How does the ontology formally distinguish between 'homogenity' and 'agregate size'?"
                        ]
                    },
                    {
                        "axiom": "homogenity disjointWith uniqueness",
                        "CQ": [
                            "How is the concept of homogenity formally separated from uniqueness in the ontology?",
                            "Is there any entity that can simultaneously possess both homogenity and uniqueness?",
                            "Which other concepts are specified as mutually exclusive with homogenity?"
                        ]
                    },
                    {
                        "axiom": "homogenity disjointWith component mandatoriness",
                        "CQ": [
                            "How does the ontology treat the connection between homogenity and component mandatoriness?",
                            "Is it valid for an entity to possess both homogenity and component mandatoriness simultaneously?",
                            "Which concepts are formally specified as incompatible with component mandatoriness within the ontology?"
                        ]
                    },
                    {
                        "axiom": "homogenity disjointWith structurness",
                        "CQ": [
                            "How are homogenity and structurness represented in relation to each other within the ontology?",
                            "Is any entity allowed to possess both homogenity and structurness simultaneously?",
                            "Which classes are defined as mutually exclusive with structurness?"
                        ]
                    },
                    {
                        "axiom": "homogenity disjointWith recursiveness",
                        "CQ": [
                            "How are homogeneity and recursiveness formally related within the ontology?",
                            "Is there an instance that can possess both homogeneity and recursiveness?",
                            "Which classes are stated to be incompatible with homogeneity?"
                        ]
                    },
                    {
                        "axiom": "homogenity disjointWith access type",
                        "CQ": [
                            "How does the ontology differentiate between homogenity and access type as separate concepts?",
                            "Is it permissible for an entity to be classified simultaneously as homogenity and access type?",
                            "Which classes are stated to be mutually exclusive with access type?"
                        ]
                    },
                    {
                        "axiom": "homogenity equivalentClass (homogenous or heterogenous)",
                        "CQ": [
                            "Is every instance classified as homogenity necessarily either homogenous or heterogenous?",
                            "Is the class homogenity equivalent to the union of homogenous and heterogenous?",
                            "Can anything be considered homogenity that does not fall under either homogenous or heterogenous?"
                        ]
                    }
                ]
            },
            "agregate size": {
                "axiom": {
                    "subClassOf": [
                        "aggregate generator property"
                    ],
                    "disjointWith": [
                        "uniqueness",
                        "component mandatoriness",
                        "structurness",
                        "recursiveness",
                        "access type"
                    ],
                    "equivalentClass": [
                        "(fixed size or variable size)"
                    ]
                },
                "description": "aggregate size is a subclass of aggregate generator property and is formally equivalent to either fixed size or variable size, indicating that it refers to the characteristic of an aggregate having a specified or changeable quantity of components. It is explicitly disjoint with uniqueness, component mandatoriness, structurness, recursiveness, and access type, ensuring that no instance can simultaneously belong to these classes. This class is used to describe whether an aggregate maintains a constant number of elements or allows its size to vary.",
                "CQ": [
                    {
                        "axiom": "agregate size subClassOf aggregate generator property",
                        "CQ": [
                            "Is aggregate size classified as a type of aggregate generator property?",
                            "Which properties are directly subsumed by aggregate generator property, including aggregate size?",
                            "What are the broader categories that aggregate size is categorized under?"
                        ]
                    },
                    {
                        "axiom": "agregate size disjointWith uniqueness",
                        "CQ": [
                            "What logical separation exists between aggregate size and uniqueness within the ontology?",
                            "Is it permissible for an entity to possess both aggregate size and uniqueness attributes simultaneously?",
                            "Which classes or properties are explicitly stated as being disjoint with aggregate size?"
                        ]
                    },
                    {
                        "axiom": "agregate size disjointWith component mandatoriness",
                        "CQ": [
                            "What is the ontological separation between aggregate size and component mandatoriness?",
                            "Is there any entity in the ontology that can be classified as both aggregate size and component mandatoriness?",
                            "Which classes are defined as being mutually exclusive with aggregate size?"
                        ]
                    },
                    {
                        "axiom": "agregate size disjointWith structurness",
                        "CQ": [
                            "What logical separation is defined between agregate size and structurness in the ontology?",
                            "Is there any entity that can simultaneously possess agregate size and structurness?",
                            "Which classes within the ontology are explicitly incompatible with agregate size?"
                        ]
                    },
                    {
                        "axiom": "agregate size disjointWith recursiveness",
                        "CQ": [
                            "What is the formal relationship defined between aggregate size and recursiveness in the ontology?",
                            "Is there any entity that can possess both aggregate size and recursiveness characteristics simultaneously?",
                            "Which classes are modelled as being disjoint with recursiveness within the ontology?"
                        ]
                    },
                    {
                        "axiom": "agregate size disjointWith access type",
                        "CQ": [
                            "What conceptual separation is defined between aggregate size and access type in the ontology?",
                            "Is there an instance that can simultaneously belong to both aggregate size and access type categories?",
                            "Which ontology categories are specified as disjoint with aggregate size?"
                        ]
                    },
                    {
                        "axiom": "agregate size equivalentClass (fixed size or variable size)",
                        "CQ": [
                            "Is agregate size precisely the union of fixed size and variable size?",
                            "Can every agregate size be classified as either fixed size or variable size?",
                            "Are there any agregate sizes that are not characterized as fixed size or variable size?"
                        ]
                    }
                ]
            },
            "uniqueness": {
                "axiom": {
                    "subClassOf": [
                        "aggregate generator property"
                    ],
                    "disjointWith": [
                        "component mandatoriness",
                        "structurness",
                        "recursiveness",
                        "access type"
                    ],
                    "equivalentClass": [
                        "(non-unique values or unique values)"
                    ]
                },
                "description": "uniqueness is defined as a subclass of aggregate generator property and is explicitly disjoint from component mandatoriness, structurness, recursiveness, and access type, meaning no entity can be an instance of both uniqueness and any of these disjoint classes simultaneously. It is equivalent to the presence of either unique values or non-unique values, capturing the property of whether values are distinct or may repeat within an aggregate context. This definition formalizes how uniqueness characterizes and distinguishes value patterns in aggregate generator properties.",
                "CQ": [
                    {
                        "axiom": "uniqueness subClassOf aggregate generator property",
                        "CQ": [
                            "Is aggregate generator property a direct or indirect superclass of uniqueness?",
                            "What classes are subsumed under aggregate generator property, and does uniqueness appear among them?",
                            "Which general class hierarchies does uniqueness pertain to within the ontology?"
                        ]
                    },
                    {
                        "axiom": "uniqueness disjointWith component mandatoriness",
                        "CQ": [
                            "What formal separation is specified between uniqueness and component mandatoriness in the ontology?",
                            "Is there any entity that can simultaneously possess uniqueness and component mandatoriness characteristics?",
                            "Which classes are defined as disjoint with component mandatoriness?"
                        ]
                    },
                    {
                        "axiom": "uniqueness disjointWith structurness",
                        "CQ": [
                            "What formal separation exists between uniqueness and structurness within the ontology?",
                            "Is any entity permitted to possess both uniqueness and structurness properties simultaneously?",
                            "Which classes or properties are specifically stated as being disjoint with structurness?"
                        ]
                    },
                    {
                        "axiom": "uniqueness disjointWith recursiveness",
                        "CQ": [
                            "How are uniqueness and recursiveness differentiated within the ontology?",
                            "Is there any entity that can possess both uniqueness and recursiveness?",
                            "Which classes are defined as incompatible with recursiveness?"
                        ]
                    },
                    {
                        "axiom": "uniqueness disjointWith access type",
                        "CQ": [
                            "What constraint does the ontology enforce between uniqueness and access type classes?",
                            "Is any entity allowed to possess both the uniqueness and access type classifications simultaneously?",
                            "Which classes within the ontology are specifically declared as incompatible with access type?"
                        ]
                    },
                    {
                        "axiom": "uniqueness equivalentClass (non-unique values or unique values)",
                        "CQ": [
                            "Is uniqueness equivalent to the class containing either only non-unique values or only unique values?",
                            "Can all instances classified as uniqueness be described as those having non-unique values or unique values?",
                            "Does the definition of uniqueness encompass exclusively the union of non-unique values and unique values?"
                        ]
                    }
                ]
            },
            "component mandatoriness": {
                "axiom": {
                    "subClassOf": [
                        "aggregate generator property"
                    ],
                    "disjointWith": [
                        "structurness",
                        "recursiveness",
                        "access type"
                    ],
                    "equivalentClass": [
                        "(component mandatory or component non-mandatory)"
                    ]
                },
                "description": "component mandatoriness is defined as a subclass of aggregate generator property and is explicitly disjoint with structurness, recursiveness, and access type, ensuring no overlap among individuals of these classes. It is equivalent to the union of component mandatory and component non-mandatory, meaning every instance of component mandatoriness must be either component mandatory or component non-mandatory. This class categorizes aggregate generator properties by specifying whether a component is mandatory or not.",
                "CQ": [
                    {
                        "axiom": "component mandatoriness subClassOf aggregate generator property",
                        "CQ": [
                            "Is every instance of component mandatoriness necessarily an instance of aggregate generator property?",
                            "What properties are considered more specific subclasses under aggregate generator property?",
                            "Which broader property categories encompass component mandatoriness?"
                        ]
                    },
                    {
                        "axiom": "component mandatoriness disjointWith structurness",
                        "CQ": [
                            "How does the ontology distinguish between component mandatoriness and structurness?",
                            "Is there any entity that can simultaneously possess both component mandatoriness and structurness?",
                            "Which concepts are defined as mutually exclusive with structurness?"
                        ]
                    },
                    {
                        "axiom": "component mandatoriness disjointWith recursiveness",
                        "CQ": [
                            "How does the ontology differentiate between component mandatoriness and recursiveness?",
                            "Is any element allowed to possess both the properties of component mandatoriness and recursiveness?",
                            "Which concepts are specified as disjoint with recursiveness in the ontology?"
                        ]
                    },
                    {
                        "axiom": "component mandatoriness disjointWith access type",
                        "CQ": [
                            "What logical separation is established between component mandatoriness and access type in the ontology?",
                            "Is any entity allowed to simultaneously belong to both the component mandatoriness and access type categories?",
                            "Which classes, aside from access type, are specified as mutually exclusive with component mandatoriness?"
                        ]
                    },
                    {
                        "axiom": "component mandatoriness equivalentClass (component mandatory or component non-mandatory)",
                        "CQ": [
                            "Is component mandatoriness defined as either component mandatory or component non-mandatory?",
                            "Is the class component mandatoriness equivalent to the union of component mandatory and component non-mandatory?",
                            "Can any instance of component mandatoriness be classified as either component mandatory or component non-mandatory, but not outside these two categories?"
                        ]
                    }
                ]
            },
            "structurness": {
                "axiom": {
                    "subClassOf": [
                        "aggregate generator property"
                    ],
                    "disjointWith": [
                        "recursiveness",
                        "access type"
                    ],
                    "equivalentClass": [
                        "(structured or unstructured or semi-structured)"
                    ]
                },
                "description": "structurness is defined as a subclass of aggregate generator property and is disjoint with both recursiveness and access type, indicating that no entity can simultaneously belong to structurness and either of these disjoint classes. Additionally, structurness is formally equivalent to the union of structured, unstructured, or semi-structured, meaning any entity that is classified as one of these three types is also considered an instance of structurness. This definition situates structurness as a categorical property that distinguishes types of structural organization within aggregate generator properties.",
                "CQ": [
                    {
                        "axiom": "structurness subClassOf aggregate generator property",
                        "CQ": [
                            "Is structurness included among the subclasses of aggregate generator property?",
                            "Which general property categories encompass structurness?",
                            "Is aggregate generator property a direct superclass of structurness?"
                        ]
                    },
                    {
                        "axiom": "structurness disjointWith recursiveness",
                        "CQ": [
                            "How does the ontology formally separate structurness from recursiveness?",
                            "Is it allowable for an entity to possess both structurness and recursiveness attributes simultaneously?",
                            "Which classes or concepts are specified as incompatible with recursiveness?"
                        ]
                    },
                    {
                        "axiom": "structurness disjointWith access type",
                        "CQ": [
                            "How does the ontology distinguish between structurness and access type?",
                            "Is it permissible for an entity to be classified simultaneously as structurness and access type?",
                            "Which classes are specified as mutually exclusive with access type?"
                        ]
                    },
                    {
                        "axiom": "structurness equivalentClass (structured or unstructured or semi-structured)",
                        "CQ": [
                            "Is structurness equivalent to the union of structured, unstructured, and semi-structured?",
                            "Can structurness include any entities other than structured, unstructured, or semi-structured?",
                            "Are all entities classified as structurness either structured, unstructured, or semi-structured?"
                        ]
                    }
                ]
            },
            "recursiveness": {
                "axiom": {
                    "subClassOf": [
                        "aggregate generator property"
                    ],
                    "disjointWith": [
                        "access type"
                    ],
                    "equivalentClass": [
                        "(recursive or non-recursive)"
                    ]
                },
                "description": "recursiveness is defined as a subclass of aggregate generator property, indicating it is a specific kind of property related to aggregate generators. It is explicitly disjoint with access type, meaning no entity can simultaneously be both an access type and exhibit recursiveness. Additionally, recursiveness is formally equivalent to either recursive or non-recursive, fully covering both possibilities as mutually exclusive characteristics within this context.",
                "CQ": [
                    {
                        "axiom": "recursiveness subClassOf aggregate generator property",
                        "CQ": [
                            "Is recursiveness an instance of the aggregate generator property class?",
                            "Which properties are considered more specific forms of aggregate generator property, such as recursiveness?",
                            "What broader property categories encompasses recursiveness?"
                        ]
                    },
                    {
                        "axiom": "recursiveness disjointWith access type",
                        "CQ": [
                            "What differentiates recursiveness from access type according to the ontology?",
                            "Is it permissible for an entity to be classified as both recursiveness and access type?",
                            "Which ontology classes are shown as incompatible with access type?"
                        ]
                    },
                    {
                        "axiom": "recursiveness equivalentClass (recursive or non-recursive)",
                        "CQ": [
                            "Is recursiveness equivalent to the union of recursive and non-recursive concepts?",
                            "Can recursiveness be entirely described as either recursive or non-recursive?",
                            "Are all entities classified as recursiveness necessarily either recursive or non-recursive?"
                        ]
                    }
                ]
            },
            "access type": {
                "axiom": {
                    "subClassOf": [
                        "aggregate generator property"
                    ],
                    "equivalentClass": [
                        "(direct access property or indirect acess property)"
                    ]
                },
                "description": "access type is defined as a subclass of aggregate generator property and is equivalent to the union of direct access property and indirect access property. This means that any instance of access type must be either a direct access property or an indirect access property, and no other properties qualify as access types outside of this definition.",
                "CQ": [
                    {
                        "axiom": "access type subClassOf aggregate generator property",
                        "CQ": [
                            "Is access type categorized under aggregate generator property?",
                            "Which types are more specific than aggregate generator property, such as access type?",
                            "What broader property classes include access type as a specialized type?"
                        ]
                    },
                    {
                        "axiom": "access type equivalentClass (direct access property or indirect acess property)",
                        "CQ": [
                            "Is an access type defined as either a direct access property or an indirect access property?",
                            "Are all instances of access type necessarily classified as direct access property, indirect access property, or both?",
                            "Can access type be characterized as the union of direct access property and indirect access property?"
                        ]
                    }
                ]
            },
            "dimensionality": {
                "axiom": {
                    "subClassOf": [
                        "aggregate generator property"
                    ],
                    "equivalentClass": [
                        "(one dimensional or two dimensional or multi dimensional)"
                    ]
                },
                "description": "dimensionality is defined as a subclass of aggregate generator property, characterizing properties related to the generation or structure of aggregates. It is equivalent to the union of one dimensional, two dimensional, or multi dimensional classes, meaning that an instance of dimensionality must fall into one of these specific categories. This ensures that any property classified as dimensionality pertains to aggregates with exactly one, two, or multiple dimensions.",
                "CQ": [
                    {
                        "axiom": "dimensionality subClassOf aggregate generator property",
                        "CQ": [
                            "Does dimensionality fall under the classification of aggregate generator property?",
                            "Which properties are more specific than aggregate generator property, such as dimensionality?",
                            "What broader property categories is dimensionality a member of?"
                        ]
                    },
                    {
                        "axiom": "dimensionality equivalentClass (one dimensional or two dimensional or multi dimensional)",
                        "CQ": [
                            "Is dimensionality equivalent to the union of one dimensional, two dimensional, and multi dimensional classes?",
                            "Are all instances of dimensionality necessarily instances of either one dimensional, two dimensional, or multi dimensional?",
                            "Does dimensionality include any concepts apart from one dimensional, two dimensional, and multi dimensional?"
                        ]
                    }
                ]
            },
            "primitive datatype": {
                "axiom": {
                    "subClassOf": [
                        "datatype"
                    ],
                    "disjointWith": [
                        "generated datatype",
                        "defined datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some equality]"
                    ]
                },
                "description": "primitive datatype is a subclass of datatype, and is explicitly disjoint from both generated datatype and defined datatype, ensuring that no individual can simultaneously belong to these classes. Members of primitive datatype are characterized by the requirement that they possess at least one quality related to equality (expressed as having some has_quality relationship to equality). This formalization captures the basic, irreducible nature of primitive datatypes, differentiating them from those that are constructed or defined based on other rules.",
                "CQ": [
                    {
                        "axiom": "primitive datatype subClassOf datatype",
                        "CQ": [
                            "Is primitive datatype categorized under the broader class of datatype?",
                            "What are the more specific subclasses within datatype, including primitive datatype?",
                            "To which higher-level classes does primitive datatype conceptually belong?"
                        ]
                    },
                    {
                        "axiom": "primitive datatype disjointWith generated datatype",
                        "CQ": [
                            "What differentiates primitive datatype from generated datatype in terms of ontology classification?",
                            "Is it allowed for a datatype to belong to both primitive and generated categories simultaneously?",
                            "Which datatype classes are asserted to be incompatible with primitive datatype?"
                        ]
                    },
                    {
                        "axiom": "primitive datatype disjointWith defined datatype",
                        "CQ": [
                            "What is the ontological separation between primitive datatype and defined datatype?",
                            "Is any datatype allowed to belong to both the primitive and defined datatype categories?",
                            "Which datatypes are specified as being mutually exclusive with defined datatype within the model?"
                        ]
                    },
                    {
                        "axiom": "primitive datatype propertyRestrictions [has_quality some equality]",
                        "CQ": [
                            "Is it required for every instance with a primitive datatype propertyRestriction to possess at least one has_quality relation to equality?",
                            "Does the definition of primitive datatype propertyRestrictions ensure that the has_quality property always connects to equality for its instances?",
                            "Must all primitive datatype propertyRestrictions have the property has_quality with the value equality?"
                        ]
                    }
                ]
            },
            "generated datatype": {
                "axiom": {
                    "subClassOf": [
                        "datatype"
                    ],
                    "disjointWith": [
                        "defined datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_member some generated datatype generator]"
                    ]
                },
                "description": "generated datatype is defined as a subclass of datatype and is explicitly disjoint with defined datatype, meaning no individual can be both a generated datatype and a defined datatype. Members of this class are further constrained by the property restriction that each generated datatype must have at least one member (has_member) that is a generated datatype generator. This formalization distinguishes generated datatypes from defined datatypes and ensures their association with specific generating mechanisms.",
                "CQ": [
                    {
                        "axiom": "generated datatype subClassOf datatype",
                        "CQ": [
                            "Does the class generated datatype represent a more specific form of datatype?",
                            "What are the immediate subclasses found within datatype, including generated datatype?",
                            "Which general classification does generated datatype fall under in the ontology?"
                        ]
                    },
                    {
                        "axiom": "generated datatype disjointWith defined datatype",
                        "CQ": [
                            "How does the ontology distinguish between generated datatype and defined datatype?",
                            "Is any entity allowed to be classified simultaneously as a generated datatype and a defined datatype?",
                            "Which datatypes are specified as being mutually exclusive with generated datatype?"
                        ]
                    },
                    {
                        "axiom": "generated datatype propertyRestrictions [has_member some generated datatype generator]",
                        "CQ": [
                            "Is it required that every instance with ‘has_member’ property must be associated with at least one item of type ‘generator’?",
                            "Does having at least one relation via ‘has_member’ to a ‘generator’ entity suffice to fulfill the restriction?",
                            "Are there any cases where an entity satisfies ‘has_member some generator’ without being linked to at least one ‘generator’?"
                        ]
                    }
                ]
            },
            "defined datatype": {
                "axiom": {
                    "subClassOf": [
                        "datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_member some defined generator]",
                        "[has_member some defined datatype parameter-list]"
                    ]
                },
                "description": "defined datatype is a subclass of datatype. It is characterized by having some members that are defined generators and some members that are defined datatype parameter-lists. This means that any defined datatype instance must be associated with at least one defined generator and at least one defined datatype parameter-list via the has_member property.",
                "CQ": [
                    {
                        "axiom": "defined datatype subClassOf datatype",
                        "CQ": [
                            "Is defined datatype categorized under the broader class of datatype?",
                            "What are the specific subclasses found within datatype, such as defined datatype?",
                            "Which higher-level categories does defined datatype belong to in this ontology?"
                        ]
                    },
                    {
                        "axiom": "defined datatype propertyRestrictions [has_member some defined generator]",
                        "CQ": [
                            "Is it required that any entity with 'propertyRestrictions' must have at least one 'has_member' relationship with a defined generator?",
                            "Does the existence of 'propertyRestrictions' in an entity imply the presence of some member classified as a defined generator?",
                            "Can an instance with 'propertyRestrictions' exist without having any defined generator as a member?"
                        ]
                    },
                    {
                        "axiom": "defined datatype propertyRestrictions [has_member some defined datatype parameter-list]",
                        "CQ": [
                            "Is it required that an instance with defined datatype propertyRestrictions must have at least one has_member relationship to a defined datatype parameter-list?",
                            "Can something be described by defined datatype propertyRestrictions if it does not have any has_member relation to parameter-list?",
                            "Does the existence of defined datatype propertyRestrictions imply the presence of at least one member drawn from parameter-list via has_member?"
                        ]
                    }
                ]
            },
            "defined datatype parameter": {
                "axiom": {
                    "subClassOf": [
                        "datatype role"
                    ],
                    "propertyRestrictions": [
                        "[has_identifier some parameter identifier]",
                        "[is_member_of some defined datatype parameter-list]",
                        "[role_of some datatype]"
                    ]
                },
                "description": "defined datatype parameter is a subclass of datatype role, representing a parameter that is specifically associated with datatypes. Any member of this class must have an identifier (i.e., satisfy the has_identifier property with respect to some parameter identifier), must be a member of a defined datatype parameter-list, and must play the role_of some datatype. This formalization ensures that a defined datatype parameter is always linked to a datatype and properly identified within a parameter list structure.",
                "CQ": [
                    {
                        "axiom": "defined datatype parameter subClassOf datatype role",
                        "CQ": [
                            "Is defined datatype parameter classified under datatype role?",
                            "Which roles encompass defined datatype parameter as a specific member?",
                            "What more general concepts does defined datatype parameter fall under with respect to datatype role?"
                        ]
                    },
                    {
                        "axiom": "defined datatype parameter propertyRestrictions [has_identifier some parameter identifier]",
                        "CQ": [
                            "Is it necessary for a defined datatype parameter to have at least one 'has_identifier' relationship with a parameter identifier?",
                            "Does every defined datatype parameter include some form of association via 'has_identifier' to a parameter identifier?",
                            "Can a defined datatype parameter exist without possessing the 'has_identifier' property linking to any parameter identifier?"
                        ]
                    },
                    {
                        "axiom": "defined datatype parameter propertyRestrictions [is_member_of some defined datatype parameter-list]",
                        "CQ": [
                            "Is every defined datatype parameter required to be a member of at least one defined datatype parameter-list?",
                            "Can a defined datatype parameter exist without belonging to any defined datatype parameter-list?",
                            "Does associating a defined datatype parameter with the property 'is_member_of' ensure its inclusion in some defined datatype parameter-list?"
                        ]
                    },
                    {
                        "axiom": "defined datatype parameter propertyRestrictions [role_of some datatype]",
                        "CQ": [
                            "Is it required that propertyRestrictions always involves at least one role_of relation to a datatype?",
                            "Can an entity with propertyRestrictions lack any role_of association to a datatype?",
                            "Does the definition of propertyRestrictions entail that there must exist some role_of connection to a datatype for its instances?"
                        ]
                    }
                ]
            },
            "field component": {
                "axiom": {
                    "subClassOf": [
                        "datatype role"
                    ],
                    "propertyRestrictions": [
                        "[role_of some datatype]",
                        "[has_identifier some field identifier]"
                    ]
                },
                "description": "field component is defined as a subclass of datatype role. It is further characterized by two property restrictions: every field component must participate in the role_of relationship with at least one datatype, and must have at least one identifier of type field identifier. This formalization ensures that field components are specifically associated with datatypes and are uniquely identifiable within the ontology.",
                "CQ": [
                    {
                        "axiom": "field component subClassOf datatype role",
                        "CQ": [
                            "Does field component fall under the category of datatype role?",
                            "What components are classified as more specific types within datatype role, including field component?",
                            "Which broader categories encompass field component as a subclass?"
                        ]
                    },
                    {
                        "axiom": "field component propertyRestrictions [role_of some datatype]",
                        "CQ": [
                            "Is every field component required to have the property 'role_of' with at least one datatype?",
                            "Can a field component exist without being related to any datatype through the 'role_of' property?",
                            "Does the definition of field component allow for multiple instances of the 'role_of' property linking to different datatypes?"
                        ]
                    },
                    {
                        "axiom": "field component propertyRestrictions [has_identifier some field identifier]",
                        "CQ": [
                            "Is it required for every field component to have at least one identifier via the 'has_identifier' property?",
                            "Can a field component exist without possessing any field identifier assigned by 'has_identifier'?",
                            "Does the presence of a field identifier through 'has_identifier' necessarily pertain to all field components?"
                        ]
                    }
                ]
            },
            "tag-type": {
                "axiom": {
                    "subClassOf": [
                        "datatype role"
                    ],
                    "propertyRestrictions": [
                        "[role_of some datatype]"
                    ]
                },
                "description": "tag-type is defined as a subclass of datatype role. Every instance of tag-type must serve as the role_of at least one datatype, meaning that each tag-type is associated with one or more datatype instances through the role_of property. This establishes tag-type as a specific role related to datatypes within the ontology.",
                "CQ": [
                    {
                        "axiom": "tag-type subClassOf datatype role",
                        "CQ": [
                            "Is tag-type categorized under the broader concept of datatype role?",
                            "What kinds of datatype role include tag-type as a specific instance?",
                            "Which general roles encompass tag-type?"
                        ]
                    },
                    {
                        "axiom": "tag-type propertyRestrictions [role_of some datatype]",
                        "CQ": [
                            "Must every tag of type 'propertyRestrictions' necessarily have at least one 'role_of' relationship with some datatype?",
                            "Is it required for instances of propertyRestrictions to be associated, via the 'role_of' property, with one or more datatypes?",
                            "Can a propertyRestrictions tag exist without participating in a 'role_of' connection to any datatype?"
                        ]
                    }
                ]
            },
            "alternative-type": {
                "axiom": {
                    "subClassOf": [
                        "datatype role"
                    ],
                    "propertyRestrictions": [
                        "[role_of some datatype]",
                        "[is_member_of some alternative component]"
                    ]
                },
                "description": "alternative-type is defined as a subclass of datatype role. Instances of this class must be the role of at least one datatype and must also be a member of some alternative component. This formalization ensures that alternative-type represents a specialized datatype role that is contextually linked both to specific datatypes and to alternative components.",
                "CQ": [
                    {
                        "axiom": "alternative-type subClassOf datatype role",
                        "CQ": [
                            "Does alternative-type fall under the broader class of datatype role?",
                            "Which kinds of entities are recognized as subclasses of datatype role, and does that include alternative-type?",
                            "What are all the general categories (superclasses) that alternative-type is grouped within?"
                        ]
                    },
                    {
                        "axiom": "alternative-type propertyRestrictions [role_of some datatype]",
                        "CQ": [
                            "Is it required that every alternative-type instance has at least one role_of relationship with a value from datatype?",
                            "Can alternative-type exist without having any role_of association to a value belonging to datatype?",
                            "Does every alternative-type entail the presence of a role_of property linked to some instance of datatype?"
                        ]
                    },
                    {
                        "axiom": "alternative-type propertyRestrictions [is_member_of some alternative component]",
                        "CQ": [
                            "Must every alternative-type entity be related via 'is_member_of' to at least one alternative component?",
                            "Is it required that an alternative-type individual participate as a member in some alternative component?",
                            "Can an alternative-type exist in the ontology without being a member of any alternative component through the 'is_member_of' property?"
                        ]
                    }
                ]
            },
            "alternative component": {
                "axiom": {
                    "subClassOf": [
                        "datatype role"
                    ],
                    "propertyRestrictions": [
                        "[has_member some tag-value list]",
                        "[has_member some alternative-type]"
                    ]
                },
                "description": "alternative component is defined as a subclass of datatype role, characterized by the requirement that it must have at least one member that is a tag-value list and at least one member that is an alternative-type. This means every instance of alternative component is associated with at least one tag-value list and one alternative-type via the has_member property, formalizing its structure as a composition of these elements.",
                "CQ": [
                    {
                        "axiom": "alternative component subClassOf datatype role",
                        "CQ": [
                            "Which datatype roles include alternative components as their subclasses?",
                            "Is alternative component categorized under the superclass datatype role?",
                            "What general classes encompass alternative component within their hierarchy?"
                        ]
                    },
                    {
                        "axiom": "alternative component propertyRestrictions [has_member some tag-value list]",
                        "CQ": [
                            "Is it required that an alternative component must have at least one member belonging to a tag-value list?",
                            "Can an alternative component exist without having any member that is included in a tag-value list?",
                            "Are all alternative components necessarily associated with the has_member property linked to some tag-value list?"
                        ]
                    },
                    {
                        "axiom": "alternative component propertyRestrictions [has_member some alternative-type]",
                        "CQ": [
                            "Is it necessary for an alternative component to have at least one member that is of type alternative-type?",
                            "Does every alternative component include some member classified as an alternative-type?",
                            "Can an alternative component exist without having any member that is an alternative-type?"
                        ]
                    }
                ]
            },
            "pointer-element-type": {
                "axiom": {
                    "subClassOf": [
                        "datatype role"
                    ],
                    "propertyRestrictions": [
                        "[role_of some datatype]"
                    ]
                },
                "description": "pointer-element-type is a subclass of datatype role, characterized by the restriction that it must be a role of some datatype. This means that any instance of pointer-element-type is specifically associated with at least one datatype through the \"role_of\" property, formalizing its function as a role connecting to datatypes within the ontology.",
                "CQ": [
                    {
                        "axiom": "pointer-element-type subClassOf datatype role",
                        "CQ": [
                            "Is pointer-element-type categorized under the broader class of datatype role?",
                            "Which entity types are more specific instances of datatype role, such as pointer-element-type?",
                            "What are the parent classes that pointer-element-type is associated with?"
                        ]
                    },
                    {
                        "axiom": "pointer-element-type propertyRestrictions [role_of some datatype]",
                        "CQ": [
                            "Is every pointer element type required to be related through the 'role_of' property to some datatype?",
                            "Can a pointer element type exist without participating in a 'role_of' relationship with at least one datatype?",
                            "Does the presence of 'role_of' with a datatype define membership in the pointer element type category?"
                        ]
                    }
                ]
            },
            "parameter": {
                "axiom": {
                    "subClassOf": [
                        "datatype role"
                    ],
                    "propertyRestrictions": [
                        "[role_of some datatype]",
                        "[has_identifier some parameter identifier]"
                    ]
                },
                "description": "parameter is defined as a subclass of datatype role, representing entities that serve a specific function within a datatype context. Each parameter must be associated with some datatype (via the role_of property) and must have an identifier that is a member of the parameter identifier class. This ensures that every parameter is explicitly linked to the datatype it qualifies and is uniquely identified within the system.",
                "CQ": [
                    {
                        "axiom": "parameter subClassOf datatype role",
                        "CQ": [
                            "Is parameter categorized under datatype role?",
                            "Which subclasses fall beneath the class datatype role, such as parameter?",
                            "What are the direct superclasses of parameter in the ontology?"
                        ]
                    },
                    {
                        "axiom": "parameter propertyRestrictions [role_of some datatype]",
                        "CQ": [
                            "Is it necessary for parameter to have the property propertyRestrictions with some value that plays the role_of a specified datatype?",
                            "Can a parameter exist without propertyRestrictions relating to at least one instance of datatype through role_of?",
                            "Does every valid parameter exhibit propertyRestrictions to at least one entity classified as datatype by role_of?"
                        ]
                    },
                    {
                        "axiom": "parameter propertyRestrictions [has_identifier some parameter identifier]",
                        "CQ": [
                            "Must every parameter have at least one identifier via the property 'has_identifier'?",
                            "Is it possible for a parameter to exist without being related through 'has_identifier' to any identifier?",
                            "Does there exist a requirement that each parameter be associated with some identifier using 'has_identifier'?"
                        ]
                    }
                ]
            },
            "index-type": {
                "axiom": {
                    "subClassOf": [
                        "datatype role"
                    ],
                    "propertyRestrictions": [
                        "[has_member some index upperbound]",
                        "[is_member_of some index-type list]",
                        "[role_of some datatype]",
                        "[has_member some index lowerbound]"
                    ]
                },
                "description": "index-type is a subclass of datatype role, characterized by specific property restrictions. Any instance of index-type must have as members both an index upperbound and an index lowerbound, indicating the range of allowable index values. Additionally, index-type instances are members of an index-type list and are associated, via the role_of property, with some datatype. This formalization ensures that index-type serves as a role connecting data types to index value ranges, organized within relevant index-type lists.",
                "CQ": [
                    {
                        "axiom": "index-type subClassOf datatype role",
                        "CQ": [
                            "Is index-type classified as a more specific type under the general category of datatype role?",
                            "Which specialized types are categorized beneath datatype role, such as index-type?",
                            "What broader categories encompass index-type within the ontology?"
                        ]
                    },
                    {
                        "axiom": "index-type propertyRestrictions [has_member some index upperbound]",
                        "CQ": [
                            "Must every instance of index-type have at least one 'has_member' relationship to an instance of index upperbound?",
                            "Is it required for an index-type to include at least one member that is classified as index upperbound via the 'has_member' property?",
                            "Can an index-type be considered valid if it lacks any 'has_member' connection to an index upperbound?"
                        ]
                    },
                    {
                        "axiom": "index-type propertyRestrictions [is_member_of some index-type list]",
                        "CQ": [
                            "Is every index-type entity required to be a member of at least one index-type list?",
                            "Can an index-type exist without being associated via is_member_of to any index-type list?",
                            "Does the definition of index-type necessitate a relationship through is_member_of to an index-type list?"
                        ]
                    },
                    {
                        "axiom": "index-type propertyRestrictions [role_of some datatype]",
                        "CQ": [
                            "Is it required that every index-type has at least one role_of relationship to a datatype?",
                            "Can an index-type exist without being associated through role_of to any datatype?",
                            "Does the presence of a role_of link with a datatype distinguish index-type from other classes?"
                        ]
                    },
                    {
                        "axiom": "index-type propertyRestrictions [has_member some index lowerbound]",
                        "CQ": [
                            "Is it required for propertyRestrictions to have at least one has_member relationship to an index in the lowerbound category?",
                            "Does every instance of propertyRestrictions include a member of type index whose value meets the lowerbound constraint?",
                            "Can propertyRestrictions exist without having any has_member connections to an index corresponding to lowerbound?"
                        ]
                    }
                ]
            },
            "base type": {
                "axiom": {
                    "subClassOf": [
                        "datatype role"
                    ],
                    "propertyRestrictions": [
                        "[role_of some datatype]",
                        "[is_member_of some (array datatype or sequence datatype or bag datatype or set datatype or extended datatype)]"
                    ]
                },
                "description": "base type is defined as a subclass of datatype role. Any instance of base type must fulfill two key conditions: it must have a relationship 'role_of' to at least one datatype, and it must be a member of at least one complex datatype—specifically, an array datatype, sequence datatype, bag datatype, set datatype, or extended datatype. This formalization ensures that base type instances are foundational datatypes actively participating in, and forming members of, various structured or composite datatypes.",
                "CQ": [
                    {
                        "axiom": "base type subClassOf datatype role",
                        "CQ": [
                            "Is base type categorized as a subclass under datatype role?",
                            "Which types are encompassed within the datatype role class, including base type?",
                            "What broader datatype role classes does base type fall under?"
                        ]
                    },
                    {
                        "axiom": "base type propertyRestrictions [role_of some datatype]",
                        "CQ": [
                            "Is it required that base type always has the property propertyRestrictions with at least one value of role_of?",
                            "Can every instance of base type be associated with propertyRestrictions only if it involves some role_of datatype?",
                            "Does the existence of propertyRestrictions on base type guarantee the involvement of role_of datatype?"
                        ]
                    },
                    {
                        "axiom": "base type propertyRestrictions [is_member_of some (array datatype or sequence datatype or bag datatype or set datatype or extended datatype)]",
                        "CQ": [
                            "Is it required that every base type with property restrictions is a member of at least one of array, sequence, bag, set, or extended datatypes?",
                            "Can a base type propertyRestrictions instance exist that is not associated with any of the array, sequence, bag, set, or extended datatypes?",
                            "Does the membership of base type propertyRestrictions always include at least one datatype from array, sequence, bag, set, or extended?"
                        ]
                    }
                ]
            },
            "attribute component": {
                "axiom": {
                    "subClassOf": [
                        "datatype role"
                    ],
                    "propertyRestrictions": [
                        "[has_identifier some attribute identifier]"
                    ]
                },
                "description": "attribute component is defined as a subclass of datatype role, meaning each attribute component is a specific kind of datatype role. Additionally, attribute component instances are required to be associated with at least one attribute identifier through the has_identifier property. This ensures that every attribute component is uniquely identified by an attribute identifier.",
                "CQ": [
                    {
                        "axiom": "attribute component subClassOf datatype role",
                        "CQ": [
                            "What broader categories encompass attribute component according to the ontology?",
                            "Which entities are more general than attribute component, including datatype role?",
                            "Are attribute component types always considered forms of datatype role?"
                        ]
                    },
                    {
                        "axiom": "attribute component propertyRestrictions [has_identifier some attribute identifier]",
                        "CQ": [
                            "Is it required for every attribute component to have at least one attribute identifier via the has_identifier property?",
                            "Can an attribute component exist without being linked to an attribute identifier through has_identifier?",
                            "Must each attribute component be associated with some attribute identifier?"
                        ]
                    }
                ]
            },
            "real field-list": {
                "axiom": {
                    "subClassOf": [
                        "field-list"
                    ],
                    "disjointWith": [
                        "boolean field-list",
                        "discrete field-list"
                    ],
                    "propertyRestrictions": [
                        "[has_member some real field component]"
                    ]
                },
                "description": "real field-list is defined as a subclass of field-list, explicitly disjoint from boolean field-list and discrete field-list, ensuring no overlap in membership between these types. Members of real field-list are characterized by the property that they contain at least one real field component as a member. This formalization guarantees that any real field-list includes real-valued field components and cannot simultaneously be considered a boolean or discrete field-list.",
                "CQ": [
                    {
                        "axiom": "real field-list subClassOf field-list",
                        "CQ": [
                            "Is real field-list categorized under the scope of field-list?",
                            "Which specialized field-list types encompass real field-list?",
                            "What broader classes include real field-list within their hierarchy?"
                        ]
                    },
                    {
                        "axiom": "real field-list disjointWith boolean field-list",
                        "CQ": [
                            "What ontological separation is defined between real field-list and boolean field-list?",
                            "Is an entity allowed to be classified under both real field-list and boolean field-list categories?",
                            "Which field-list types are formally specified as disjoint with boolean field-list?"
                        ]
                    },
                    {
                        "axiom": "real field-list disjointWith discrete field-list",
                        "CQ": [
                            "What is the logical separation between real field-list and discrete field-list according to the ontology?",
                            "Is any field-list instance permitted to belong to both real and discrete field-list classes?",
                            "Which entities are declared as mutually exclusive with discrete field-list within the ontology?"
                        ]
                    },
                    {
                        "axiom": "real field-list propertyRestrictions [has_member some real field component]",
                        "CQ": [
                            "Is every real field-list required to have at least one member that is a real field component?",
                            "Does the property 'has_member' applied to a real field-list necessarily include some real field component?",
                            "Can a real field-list exist without having any members from the class of real field components?"
                        ]
                    }
                ]
            },
            "boolean field-list": {
                "axiom": {
                    "subClassOf": [
                        "field-list"
                    ],
                    "disjointWith": [
                        "discrete field-list"
                    ],
                    "propertyRestrictions": [
                        "[has_member some boolean field component]"
                    ]
                },
                "description": "boolean field-list is a subclass of field-list and is explicitly disjoint with discrete field-list, ensuring no instance can be both a boolean field-list and a discrete field-list. Every boolean field-list must include at least one member that is a boolean field component, establishing that the primary distinguishing feature of this class is the presence of boolean field components among its members.",
                "CQ": [
                    {
                        "axiom": "boolean field-list subClassOf field-list",
                        "CQ": [
                            "Is boolean field-list included as a subtype under field-list?",
                            "What specific variants are classified as field-list, including boolean field-list?",
                            "Which general categories does boolean field-list fall under within the ontology?"
                        ]
                    },
                    {
                        "axiom": "boolean field-list disjointWith discrete field-list",
                        "CQ": [
                            "How does the ontology differentiate boolean field-list from discrete field-list?",
                            "Is there a scenario where a field-list instance can be both boolean and discrete?",
                            "Which field-list types are declared as mutually exclusive with boolean field-list?"
                        ]
                    },
                    {
                        "axiom": "boolean field-list propertyRestrictions [has_member some boolean field component]",
                        "CQ": [
                            "Is every instance of 'field-list' required to have at least one 'has_member' relationship to a 'field component'?",
                            "Could a 'field-list' exist without being associated with any 'field component' through the 'has_member' property?",
                            "Must a 'field-list' always include some entity classified as a 'field component' via the 'has_member' property?"
                        ]
                    }
                ]
            },
            "discrete field-list": {
                "axiom": {
                    "subClassOf": [
                        "field-list"
                    ],
                    "propertyRestrictions": [
                        "[has_member some discrete field component]"
                    ]
                },
                "description": "discrete field-list is a subclass of field-list, defined by the restriction that its members must include at least one discrete field component. This ensures that every instance of discrete field-list contains some element that is characterized as a discrete field component.",
                "CQ": [
                    {
                        "axiom": "discrete field-list subClassOf field-list",
                        "CQ": [
                            "Is discrete field-list categorized under field-list?",
                            "What types are included within the field-list category?",
                            "Which general groupings contain discrete field-list as a member?"
                        ]
                    },
                    {
                        "axiom": "discrete field-list propertyRestrictions [has_member some discrete field component]",
                        "CQ": [
                            "Must every discrete field-list include at least one member that is a discrete field component?",
                            "Is it required for a discrete field-list to have the has_member property relating it to some discrete field component?",
                            "Can a discrete field-list exist without having any discrete field component as a member?"
                        ]
                    }
                ]
            },
            "primitive field-list": {
                "axiom": {
                    "subClassOf": [
                        "field-list"
                    ],
                    "propertyRestrictions": [
                        "[has_member some primitive field component]"
                    ]
                },
                "description": "primitive field-list is defined as a subclass of field-list, with the restriction that it must have at least one member that is a primitive field component. This means that every instance of primitive field-list comprises a collection of fields where at least one member is a primitive field component.",
                "CQ": [
                    {
                        "axiom": "primitive field-list subClassOf field-list",
                        "CQ": [
                            "Is primitive field-list included in the set of subclasses of field-list?",
                            "What more general class does primitive field-list belong to within the ontology?",
                            "Which lists are classified as more specific instances under field-list, such as primitive field-list?"
                        ]
                    },
                    {
                        "axiom": "primitive field-list propertyRestrictions [has_member some primitive field component]",
                        "CQ": [
                            "Is every primitive field-list required to have at least one 'has_member' relationship with a primitive field component?",
                            "Can a primitive field-list exist if it does not include any primitive field component as a member?",
                            "Does the existence of a 'primitive field-list' imply the presence of a related 'primitive field component' via the 'has_member' property?"
                        ]
                    }
                ]
            },
            "labeled dataset field-list": {
                "axiom": {
                    "subClassOf": [
                        "field-list"
                    ],
                    "propertyRestrictions": [
                        "[has_member some labeled dataset target field component]",
                        "[has_member some labeled dataset descriptive field component]"
                    ]
                },
                "description": "labeled dataset field-list is defined as a subclass of field-list that must contain at least one member that is a labeled dataset target field component and at least one member that is a labeled dataset descriptive field component. This structure ensures that any labeled dataset field-list necessarily includes both target and descriptive components, reflecting the typical schema of labeled datasets where descriptive fields provide input features and target fields represent outputs or labels.",
                "CQ": [
                    {
                        "axiom": "labeled dataset field-list subClassOf field-list",
                        "CQ": [
                            "Is labeled dataset field-list classified under the broader field-list category?",
                            "What specific types are encompassed by field-list, including labeled dataset field-list?",
                            "Which higher-level categories include labeled dataset field-list as a member?"
                        ]
                    },
                    {
                        "axiom": "labeled dataset field-list propertyRestrictions [has_member some labeled dataset target field component]",
                        "CQ": [
                            "Is it required for a labeled dataset field-list to have at least one has_member relation to a labeled dataset target field component?",
                            "Can every labeled dataset field-list include members other than labeled dataset target field components?",
                            "Does the property restriction on labeled dataset field-list ensure that its has_member property always relates to at least one labeled dataset target field component?"
                        ]
                    },
                    {
                        "axiom": "labeled dataset field-list propertyRestrictions [has_member some labeled dataset descriptive field component]",
                        "CQ": [
                            "Must every labeled dataset include at least one member that is a labeled dataset descriptive field component?",
                            "Does a labeled dataset necessarily have a 'has_member' relationship with at least one labeled dataset descriptive field component?",
                            "Is it required for every labeled dataset to possess a field that is classified as a labeled dataset descriptive field component?"
                        ]
                    }
                ]
            },
            "unlabeled dataset field-list": {
                "axiom": {
                    "subClassOf": [
                        "field-list"
                    ],
                    "propertyRestrictions": [
                        "[has_member some labeled dataset descriptive field component]"
                    ]
                },
                "description": "unlabeled dataset field-list is a subclass of field-list, characterized by the axiom that its members must include at least one labeled dataset descriptive field component through the has_member property. This means any instance of unlabeled dataset field-list is a field-list that necessarily contains some labeled dataset descriptive field components.",
                "CQ": [
                    {
                        "axiom": "unlabeled dataset field-list subClassOf field-list",
                        "CQ": [
                            "Is every unlabeled dataset field-list included under the general category of field-list?",
                            "What specific types of field-list include unlabeled dataset field-list as a subclass?",
                            "Which broader groupings encompass the unlabeled dataset field-list concept?"
                        ]
                    },
                    {
                        "axiom": "unlabeled dataset field-list propertyRestrictions [has_member some labeled dataset descriptive field component]",
                        "CQ": [
                            "Is it required for an unlabeled dataset to include at least one member that is a labeled dataset descriptive field component?",
                            "Can an unlabeled dataset have members other than labeled dataset descriptive field components?",
                            "Does every unlabeled dataset necessarily relate through 'has_member' to a labeled dataset descriptive field component?"
                        ]
                    }
                ]
            },
            "date-time factor": {
                "axiom": {
                    "subClassOf": [
                        "factor"
                    ]
                },
                "description": "date-time factor is defined as a subclass of factor. This means every date-time factor is a type of factor, inheriting its general properties and constraints. No additional disjointness or property restrictions are specified, so instances of date-time factor possess all the characteristics of factors, potentially specializing in aspects related to date or time within their domain.",
                "CQ": [
                    {
                        "axiom": "date-time factor subClassOf factor",
                        "CQ": [
                            "Is date-time factor classified as a type under factor?",
                            "What factors are more specific than factor, such as date-time factor?",
                            "Which higher-level categories include date-time factor?"
                        ]
                    }
                ]
            },
            "scaled factor": {
                "axiom": {
                    "subClassOf": [
                        "factor"
                    ]
                },
                "description": "scaled factor is defined as a subclass of factor. This means that every scaled factor is a specific kind of factor, inheriting all characteristics of factors, but may possess additional properties or constraints related to scaling, depending on further ontology specification. There are no further axioms provided, so this class serves as a specialization for factors that have been subject to scaling.",
                "CQ": [
                    {
                        "axiom": "scaled factor subClassOf factor",
                        "CQ": [
                            "Is scaled factor classified as a specific kind of factor?",
                            "Which subcategories fall under factor, including scaled factor?",
                            "What broader class does scaled factor conceptually fall under?"
                        ]
                    }
                ]
            },
            "real factor": {
                "axiom": {
                    "subClassOf": [
                        "factor"
                    ]
                },
                "description": "real factor is defined as a subclass of factor. This means every real factor is, by definition, a factor, inheriting all characteristics shared by factors in general. There are no further distinguishing restrictions or properties specified, so real factor can be understood as a type of factor without additional specified constraints.",
                "CQ": [
                    {
                        "axiom": "real factor subClassOf factor",
                        "CQ": [
                            "Is real factor categorized under the broader class of factor?",
                            "Which subclasses comprise the set defined by factor, including real factor?",
                            "To which general classes does real factor belong within the context of factors?"
                        ]
                    }
                ]
            },
            "complex factor": {
                "axiom": {
                    "subClassOf": [
                        "factor"
                    ]
                },
                "description": "complex factor is defined as a subclass of factor. This means that every complex factor is a kind of factor, inheriting all properties of the factor class. There are no additional restrictions, disjointness, or property constraints specified for complex factor in the current formalization.",
                "CQ": [
                    {
                        "axiom": "complex factor subClassOf factor",
                        "CQ": [
                            "Does complex factor represent a specific kind under the general category of factor?",
                            "Which subclasses are encompassed by factor, such as complex factor?",
                            "What are the broader class hierarchies that complex factor falls under?"
                        ]
                    }
                ]
            },
            "graph aggregate component": {
                "axiom": {
                    "subClassOf": [
                        "aggregate field component"
                    ]
                },
                "description": "graph aggregate component is defined as a subclass of aggregate field component. This indicates that every graph aggregate component inherits all characteristics of aggregate field components but may have additional specialized properties or constraints. Instances of this class are, therefore, specific types of aggregate field components, potentially involved in representing or handling aggregated data within a graph structure.",
                "CQ": [
                    {
                        "axiom": "graph aggregate component subClassOf aggregate field component",
                        "CQ": [
                            "Is graph aggregate component classified under the broader category of aggregate field component?",
                            "Which aggregate field component subclasses include graph aggregate component?",
                            "What parent categories encompass graph aggregate component?"
                        ]
                    }
                ]
            },
            "dyadic operation": {
                "axiom": {
                    "subClassOf": [
                        "characterizing operation"
                    ],
                    "disjointWith": [
                        "niladic operation",
                        "monadic operation",
                        "n-adic operation"
                    ]
                },
                "description": "dyadic operation is defined as a subclass of characterizing operation, and is disjoint with niladic operation, monadic operation, and n-adic operation, ensuring that no individual can be simultaneously classified as any of these mutually exclusive operation types. A dyadic operation is characterized by mapping a pair of values from a given datatype to either another value of the same datatype or to a Boolean value. This formalization supports the clear distinction and function of dyadic operations within the hierarchy of operation arities.",
                "CQ": [
                    {
                        "axiom": "dyadic operation subClassOf characterizing operation",
                        "CQ": [
                            "Is every dyadic operation encompassed by the category of characterizing operation?",
                            "What operations fall under the broader class of characterizing operation, including dyadic operation?",
                            "Which more general operation types include dyadic operation?"
                        ]
                    },
                    {
                        "axiom": "dyadic operation disjointWith niladic operation",
                        "CQ": [
                            "How are dyadic operations and niladic operations classified with respect to each other in the ontology?",
                            "Is there an entity that can be considered both a dyadic operation and a niladic operation?",
                            "Which operation types are defined as disjoint with dyadic operations?"
                        ]
                    },
                    {
                        "axiom": "dyadic operation disjointWith monadic operation",
                        "CQ": [
                            "How does the ontology differentiate dyadic operations from monadic operations?",
                            "Is it permissible for an operation to be classified as both dyadic and monadic according to the ontology?",
                            "Which operation types are defined as mutually exclusive with monadic operations in the knowledge model?"
                        ]
                    },
                    {
                        "axiom": "dyadic operation disjointWith n-adic operation",
                        "CQ": [
                            "What is the ontological separation between dyadic operation and n-adic operation?",
                            "Is any mathematical operation classified as both a dyadic operation and an n-adic operation?",
                            "Which operation types are stated as disjoint with n-adic operation in the ontology?"
                        ]
                    }
                ]
            },
            "niladic operation": {
                "axiom": {
                    "subClassOf": [
                        "characterizing operation"
                    ],
                    "disjointWith": [
                        "monadic operation",
                        "n-adic operation"
                    ]
                },
                "description": "niladic operation is defined as a subclass of characterizing operation and is explicitly disjoint with both monadic operation and n-adic operation, ensuring that an operation cannot simultaneously belong to these classes. Niladic operations are characterized by yielding values of a given datatype, typically without requiring any input arguments.",
                "CQ": [
                    {
                        "axiom": "niladic operation subClassOf characterizing operation",
                        "CQ": [
                            "Is every niladic operation included in the set of characterizing operations?",
                            "Which operations fall under the category of characterizing operation, specifically including niladic operation?",
                            "What broader operation categories does niladic operation belong to within the ontology?"
                        ]
                    },
                    {
                        "axiom": "niladic operation disjointWith monadic operation",
                        "CQ": [
                            "How are niladic operations and monadic operations conceptually differentiated within the ontology?",
                            "Is there any operation that can be classified as both niladic and monadic?",
                            "Which operation types are explicitly specified as incompatible with monadic operations?"
                        ]
                    },
                    {
                        "axiom": "niladic operation disjointWith n-adic operation",
                        "CQ": [
                            "How are niladic operation and n-adic operation distinguished in the ontology?",
                            "Is any operation classified as both a niladic operation and an n-adic operation?",
                            "Which operation classes are asserted as disjoint with n-adic operation?"
                        ]
                    }
                ]
            },
            "monadic operation": {
                "axiom": {
                    "subClassOf": [
                        "characterizing operation"
                    ],
                    "disjointWith": [
                        "n-adic operation"
                    ]
                },
                "description": "monadic operation is defined as a subclass of characterizing operation and is explicitly disjoint with n-adic operation, meaning an operation cannot be both monadic and n-adic. Monadic operations map a value of the given datatype to either another value of the same datatype or to a Boolean value, thus operating on a single input. This distinguishes monadic operations from n-adic operations, which take multiple inputs.",
                "CQ": [
                    {
                        "axiom": "monadic operation subClassOf characterizing operation",
                        "CQ": [
                            "Does a monadic operation fall under the category of characterizing operation?",
                            "Which operations are classified as specializations of characterizing operation, such as monadic operation?",
                            "To which higher-level operation types does monadic operation belong?"
                        ]
                    },
                    {
                        "axiom": "monadic operation disjointWith n-adic operation",
                        "CQ": [
                            "How does the ontology formally distinguish between monadic operations and n-adic operations?",
                            "Is it permitted for an operation to be both monadic and n-adic simultaneously within the ontology framework?",
                            "Which types of operations are specified as being mutually exclusive with n-adic operations?"
                        ]
                    }
                ]
            },
            "n-adic operation": {
                "axiom": {
                    "subClassOf": [
                        "characterizing operation"
                    ]
                },
                "description": "n-adic operation is defined as a subclass of characterizing operation. It represents operations that map ordered n-tuples of values—where each value may belong to a given or parameterized datatype—into a result that is also of the given or a parametric datatype. This class models operations with arity n, generalizing functions over sequences of values and emphasizing their domain and codomain datatype constraints.",
                "CQ": [
                    {
                        "axiom": "n-adic operation subClassOf characterizing operation",
                        "CQ": [
                            "Is n-adic operation categorized under characterizing operation?",
                            "Which operations are specific types of characterizing operation, such as n-adic operation?",
                            "What broader operational categories include n-adic operation?"
                        ]
                    }
                ]
            },
            "attribute-list": {
                "axiom": {
                    "subClassOf": [
                        "list specification"
                    ],
                    "propertyRestrictions": [
                        "[has_member some attribute component]"
                    ]
                },
                "description": "attribute-list is defined as a subclass of list specification, characterized by the requirement that every attribute-list must have at least one member that is an attribute component. This formalization specifies that the class comprises list specifications whose members necessarily include attribute components.",
                "CQ": [
                    {
                        "axiom": "attribute-list subClassOf list specification",
                        "CQ": [
                            "In what ways does attribute-list relate to list specification within the ontology?",
                            "Which concepts are categorized under the broader class of list specification, including attribute-list?",
                            "What are the direct superordinate classes for attribute-list?"
                        ]
                    },
                    {
                        "axiom": "attribute-list propertyRestrictions [has_member some attribute component]",
                        "CQ": [
                            "Is it required that every attribute-list includes at least one component as a member?",
                            "Does the existence of a member with the attribute 'component' suffice for something to be classified under attribute-list?",
                            "Can an attribute-list be identified solely by having the property 'has_member' with at least one component?"
                        ]
                    }
                ]
            },
            "discrete-value-list": {
                "axiom": {
                    "subClassOf": [
                        "list specification"
                    ],
                    "propertyRestrictions": [
                        "[has_member some discrete-value identifier]"
                    ]
                },
                "description": "discrete-value-list is defined as a subclass of list specification. Every instance of discrete-value-list must have at least one member that is a discrete-value identifier. This formalization ensures that all discrete-value-lists are specifically collections containing discrete-value identifiers as elements, distinguishing them from other types of lists.",
                "CQ": [
                    {
                        "axiom": "discrete-value-list subClassOf list specification",
                        "CQ": [
                            "Is discrete-value-list categorized under list specification in the ontology?",
                            "Which types fall under the class of list specification, such as discrete-value-list?",
                            "What broader classifications encompass discrete-value-list within the ontology?"
                        ]
                    },
                    {
                        "axiom": "discrete-value-list propertyRestrictions [has_member some discrete-value identifier]",
                        "CQ": [
                            "Is it required that a discrete-value-list always contains at least one member of type discrete-value identifier?",
                            "Can a discrete-value-list exist without having any has_member relationship to a discrete-value identifier?",
                            "Does the presence of a has_member relationship to a discrete-value identifier define the membership criteria for discrete-value-list?"
                        ]
                    }
                ]
            },
            "alternative-list": {
                "axiom": {
                    "subClassOf": [
                        "list specification"
                    ],
                    "propertyRestrictions": [
                        "[has_member some alternative component]"
                    ]
                },
                "description": "alternative-list is defined as a subclass of list specification, incorporating a property restriction requiring that its members must include at least one alternative component. This ensures that any instance of alternative-list represents a list specification whose elements are specifically alternative components.",
                "CQ": [
                    {
                        "axiom": "alternative-list subClassOf list specification",
                        "CQ": [
                            "Is alternative-list classified under the broader category of list specification?",
                            "Which specific types of list specification include alternative-list as a subclass?",
                            "What are the more general categories encompassing alternative-list in the context of list specification?"
                        ]
                    },
                    {
                        "axiom": "alternative-list propertyRestrictions [has_member some alternative component]",
                        "CQ": [
                            "Must every alternative-list include at least one alternative component as a member?",
                            "Is it required that alternative-list items possess a member that is classified as an alternative component?",
                            "Does the structure of alternative-list entail having some association with an alternative component through the has_member property?"
                        ]
                    }
                ]
            },
            "procedure-parameter-list": {
                "axiom": {
                    "subClassOf": [
                        "list specification"
                    ],
                    "propertyRestrictions": [
                        "[has_member some procedure-paremeter declaration]"
                    ]
                },
                "description": "procedure-parameter-list is defined as a subclass of list specification, restricted so that it must have at least one member which is a procedure-parameter declaration. This formalization ensures that any instance of procedure-parameter-list represents a list where each member is specifically a declaration pertaining to procedure parameters.",
                "CQ": [
                    {
                        "axiom": "procedure-parameter-list subClassOf list specification",
                        "CQ": [
                            "Is procedure-parameter-list categorized under list specification?",
                            "Which specific types fall under the category of list specification, and does procedure-parameter-list appear among them?",
                            "What broader classifications include procedure-parameter-list?"
                        ]
                    },
                    {
                        "axiom": "procedure-parameter-list propertyRestrictions [has_member some procedure-paremeter declaration]",
                        "CQ": [
                            "Must every procedure-parameter-list include at least one member that is a procedure-parameter declaration?",
                            "Is the presence of a procedure-parameter declaration as a member required for an instance to be recognized as a procedure-parameter-list?",
                            "Can a procedure-parameter-list exist without having any procedure-parameter declaration as a member?"
                        ]
                    }
                ]
            },
            "defined generator parameter-list": {
                "axiom": {
                    "subClassOf": [
                        "list specification"
                    ]
                },
                "description": "defined generator parameter-list is a subclass of list specification. This means every defined generator parameter-list is a type of list specification, inheriting all its properties and constraints. Individuals in this class are formally recognized as specialized list specifications used for defining generator parameters.",
                "CQ": [
                    {
                        "axiom": "defined generator parameter-list subClassOf list specification",
                        "CQ": [
                            "Is defined generator parameter-list categorized under list specification?",
                            "What are the more specialized types within list specification, such as defined generator parameter-list?",
                            "To which higher-level group does defined generator parameter-list conceptually belong?"
                        ]
                    }
                ]
            },
            "defined datatype parameter-list": {
                "axiom": {
                    "subClassOf": [
                        "list specification"
                    ],
                    "propertyRestrictions": [
                        "[has_member some defined datatype parameter]"
                    ]
                },
                "description": "defined datatype parameter-list is a subclass of list specification. Each instance of this class is required to have at least one member that is a defined datatype parameter. This formally specifies that any defined datatype parameter-list consists of, or includes, defined datatype parameters as its elements.",
                "CQ": [
                    {
                        "axiom": "defined datatype parameter-list subClassOf list specification",
                        "CQ": [
                            "Does defined datatype parameter-list fall under the broader classification of list specification?",
                            "Which types are categorized as list specification, specifically including defined datatype parameter-list?",
                            "What higher-level classes encompass defined datatype parameter-list in the ontology?"
                        ]
                    },
                    {
                        "axiom": "defined datatype parameter-list propertyRestrictions [has_member some defined datatype parameter]",
                        "CQ": [
                            "Is it required for a parameter-list to have at least one has_member relationship with a defined datatype parameter?",
                            "Can a parameter-list exist without including any defined datatype parameter as a member?",
                            "Does every instance of parameter-list necessarily possess a has_member link with some defined datatype parameter?"
                        ]
                    }
                ]
            },
            "select-list": {
                "axiom": {
                    "subClassOf": [
                        "list specification"
                    ],
                    "propertyRestrictions": [
                        "[has_member some select-item specification]"
                    ]
                },
                "description": "select-list is defined as a subclass of list specification, representing a specialized type of list that must include at least one member which is a select-item specification. Any instance of select-list is thus required to be a list specification containing one or more select-item specifications as its members.",
                "CQ": [
                    {
                        "axiom": "select-list subClassOf list specification",
                        "CQ": [
                            "Is select-list categorized under the broader class of list specification?",
                            "Which list specifications include select-list as a more specific form?",
                            "What are the direct superclasses of select-list within the ontology?"
                        ]
                    },
                    {
                        "axiom": "select-list propertyRestrictions [has_member some select-item specification]",
                        "CQ": [
                            "Are all individuals in select-list required to have at least one member specified by the property has_member from the select-item specification?",
                            "Can an instance belonging to select-list exist without having a member that satisfies the select-item specification through has_member?",
                            "Is it necessary for any member of select-list to be linked to some entity defined by the select-item specification via has_member?"
                        ]
                    }
                ]
            },
            "extended-value-list": {
                "axiom": {
                    "subClassOf": [
                        "list specification"
                    ],
                    "propertyRestrictions": [
                        "[has_identifier some extended-value identifier]"
                    ]
                },
                "description": "extended-value-list is defined as a subclass of list specification, meaning it inherits the general characteristics of list specifications. Additionally, every member of this class must have at least one associated extended-value identifier, as specified by the property has_identifier. This ensures that all instances of extended-value-list are identifiable through one or more extended-value identifiers.",
                "CQ": [
                    {
                        "axiom": "extended-value-list subClassOf list specification",
                        "CQ": [
                            "Is extended-value-list encompassed by the broader category of list specification?",
                            "What are the more specialized forms of list specification, particularly those including extended-value-list?",
                            "Which higher-level categories does extended-value-list fall under within the ontology?"
                        ]
                    },
                    {
                        "axiom": "extended-value-list propertyRestrictions [has_identifier some extended-value identifier]",
                        "CQ": [
                            "Is every instance of an extended-value-list required to have at least one has_identifier relationship with an extended-value identifier?",
                            "Can an extended-value-list exist without being linked by has_identifier to an extended-value identifier?",
                            "Does the presence of the has_identifier property between an extended-value-list and an extended-value identifier define the membership of extended-value-list in the ontology?"
                        ]
                    }
                ]
            },
            "index-type list": {
                "axiom": {
                    "subClassOf": [
                        "list specification"
                    ],
                    "propertyRestrictions": [
                        "[has_member some index-type]"
                    ]
                },
                "description": "index-type list is a subclass of list specification, defined as a collection that has at least one member of type index-type. This means any instance of index-type list must contain one or more elements that are classified as index-type.",
                "CQ": [
                    {
                        "axiom": "index-type list subClassOf list specification",
                        "CQ": [
                            "Does an index-type list fall under the general classification of list specification?",
                            "Which list types are explicitly defined as subclasses of list specification, including index-type list?",
                            "To what broader specifications does index-type list belong within the list ontology?"
                        ]
                    },
                    {
                        "axiom": "index-type list propertyRestrictions [has_member some index-type]",
                        "CQ": [
                            "Must an index-type list always include at least one member that is an index-type?",
                            "Can an index-type list be valid if it does not have any member of type index-type?",
                            "Is every index-type list required to have the has_member property relating it to an index-type individual?"
                        ]
                    }
                ]
            },
            "enumerated-value-list": {
                "axiom": {
                    "subClassOf": [
                        "list specification"
                    ],
                    "propertyRestrictions": [
                        "[has_member some enumerated-value identifier]"
                    ]
                },
                "description": "enumerated-value-list is defined as a subclass of list specification, with the defining property that it must have at least one member that is an enumerated-value identifier. This means any instance of enumerated-value-list is a list specification characterized by containing one or more explicitly enumerated values as its members.",
                "CQ": [
                    {
                        "axiom": "enumerated-value-list subClassOf list specification",
                        "CQ": [
                            "Is every enumerated-value-list classified as a type of list specification?",
                            "Which list specifications have enumerated-value-list as a more specific form?",
                            "What broader categories include enumerated-value-list as a subclass within list specifications?"
                        ]
                    },
                    {
                        "axiom": "enumerated-value-list propertyRestrictions [has_member some enumerated-value identifier]",
                        "CQ": [
                            "Is every member in an enumerated-value-list required to have at least one enumerated-value identified by the 'has_member' property?",
                            "Can an enumerated-value-list contain an element that does not meet the identifier criteria via 'has_member'?",
                            "Does the definition of enumerated-value-list ensure the inclusion of only those values that are explicitly connected through 'has_member' to a recognized enumerated-value identifier?"
                        ]
                    }
                ]
            },
            "field-list": {
                "axiom": {
                    "subClassOf": [
                        "list specification"
                    ],
                    "propertyRestrictions": [
                        "[has_member some field component]"
                    ]
                },
                "description": "field-list is defined as a subclass of list specification, meaning it inherits all properties of a list specification. Additionally, it is characterized by a property restriction: every field-list must have at least one member that is a field component. This ensures that any instance of field-list specifically contains field components as its members.",
                "CQ": [
                    {
                        "axiom": "field-list subClassOf list specification",
                        "CQ": [
                            "Is field-list classified as a subtype of list specification?",
                            "What broader category does field-list fall under within the list specification hierarchy?",
                            "Which list specification subclasses encompass field-list?"
                        ]
                    },
                    {
                        "axiom": "field-list propertyRestrictions [has_member some field component]",
                        "CQ": [
                            "Must every field-list include at least one field component as a member?",
                            "Is it required for the has_member property of a field-list to relate to a field component?",
                            "Can a field-list exist without having any field component as its member?"
                        ]
                    }
                ]
            },
            "tree datatype generator": {
                "axiom": {
                    "subClassOf": [
                        "directed labeled graph datatype generator"
                    ],
                    "disjointWith": [
                        "DAG datatype generator"
                    ]
                },
                "description": "tree datatype generator is defined as a subclass of directed labeled graph datatype generator, meaning it inherits all structural properties of directed labeled graphs. Additionally, it is explicitly disjoint with DAG datatype generator, indicating that no datatype generator can be both a tree and a directed acyclic graph (DAG) generator at the same time. This class represents datatype generators that output trees, which are specialized directed labeled graphs, ensuring a clear distinction from generators that produce more general acyclic structures.",
                "CQ": [
                    {
                        "axiom": "tree datatype generator subClassOf directed labeled graph datatype generator",
                        "CQ": [
                            "Is tree datatype generator categorized under directed labeled graph datatype generator?",
                            "Which specific datatype generators are classified as subtypes of directed labeled graph datatype generator?",
                            "Within which broader datatype generator types does tree datatype generator fit?"
                        ]
                    },
                    {
                        "axiom": "tree datatype generator disjointWith DAG datatype generator",
                        "CQ": [
                            "What is the ontological distinction between tree datatype generators and DAG datatype generators?",
                            "Is there any entity categorized under both tree datatype generator and DAG datatype generator?",
                            "Which classes are declared as disjoint with DAG datatype generator in the ontology?"
                        ]
                    }
                ]
            },
            "DAG datatype generator": {
                "axiom": {
                    "subClassOf": [
                        "directed labeled graph datatype generator"
                    ]
                },
                "description": "DAG datatype generator is defined as a subclass of directed labeled graph datatype generator. Members of this class inherit all properties of directed labeled graph datatype generators, specializing in generating data types based on directed acyclic graph (DAG) structures. This class is used to represent systems or components that produce datatypes structured according to DAGs, ensuring acyclicity and directionality in their outputs.",
                "CQ": [
                    {
                        "axiom": "DAG datatype generator subClassOf directed labeled graph datatype generator",
                        "CQ": [
                            "Is DAG datatype generator classified under directed labeled graph datatype generator?",
                            "Which generators are categorized as subclasses of directed labeled graph datatype generator?",
                            "What broader datatype generator classes include DAG datatype generator?"
                        ]
                    }
                ]
            },
            "array datatype": {
                "axiom": {
                    "subClassOf": [
                        "homogenous aggregate datatype"
                    ],
                    "disjointWith": [
                        "homogenous aggregate datatype with variable size"
                    ],
                    "propertyRestrictions": [
                        "[has_operation some Select:table]",
                        "[has_member some index-type list]",
                        "[has_quality some exact]",
                        "[has_operation some Replace:array]",
                        "[has_member some base type]",
                        "[has_quality some non-ordered]",
                        "[has_quality some non-numeric]",
                        "[has_operation some Equal:array]",
                        "[has_member some array generator]"
                    ]
                },
                "description": "array datatype is defined as a subclass of homogenous aggregate datatype, and is explicitly disjoint from homogenous aggregate datatype with variable size, indicating arrays have a fixed size. Members of this class possess the following characteristics: they have members of a specific base type, members are indexed (by an index-type list), and an array can be generated by an array generator. Arrays are associated with qualities such as being exact, non-ordered, and non-numeric. They support operations including selection (Select:table), replacement (Replace:array), and testing for equality (Equal:array). These axioms provide a formal definition capturing the essential nature and operational behavior of array datatypes.",
                "CQ": [
                    {
                        "axiom": "array datatype subClassOf homogenous aggregate datatype",
                        "CQ": [
                            "Does array datatype qualify as a specialized form of homogenous aggregate datatype?",
                            "Which datatypes are classified as narrower terms under homogenous aggregate datatype, specifically including array datatype?",
                            "What are the broader datatype categories that array datatype falls under?"
                        ]
                    },
                    {
                        "axiom": "array datatype disjointWith homogenous aggregate datatype with variable size",
                        "CQ": [
                            "What logical separation is defined between array datatype and homogenous aggregate datatype with variable size within the ontology?",
                            "Is there any datatype instance that can belong to both array datatype and homogenous aggregate datatype with variable size?",
                            "Which datatypes, aside from array datatype, are specified as disjoint with homogenous aggregate datatype with variable size?"
                        ]
                    },
                    {
                        "axiom": "array datatype propertyRestrictions [has_operation some Select:table]",
                        "CQ": [
                            "Is it required that an array has at least one 'has_operation' relationship with a Select:table?",
                            "Can an array exist without having any 'has_operation' connection to a Select:table?",
                            "Does the definition of array entail the possibility of 'has_operation' only with instances of Select:table?"
                        ]
                    },
                    {
                        "axiom": "array datatype propertyRestrictions [has_member some index-type list]",
                        "CQ": [
                            "Is every instance of array required to have at least one has_member relationship with an index-type list?",
                            "Does the array class necessarily include a member that belongs to the index-type list through the has_member property?",
                            "Can an array exist without referencing any index-type list via the has_member property?"
                        ]
                    },
                    {
                        "axiom": "array datatype propertyRestrictions [has_quality some exact]",
                        "CQ": [
                            "Is it required that entities classified under 'array' always possess the 'has_quality' property with at least one value of 'exact'?",
                            "Does every instance of an array have a 'has_quality' relation to some 'exact' value?",
                            "Can something be an array if it lacks an association via 'has_quality' to exact?"
                        ]
                    },
                    {
                        "axiom": "array datatype propertyRestrictions [has_operation some Replace:array]",
                        "CQ": [
                            "Is it required for an array to have at least one 'has_operation' relationship with a Replace operation?",
                            "Can an array exist without being associated with the 'Replace' operation via the 'has_operation' property?",
                            "Does every instance of array necessarily participate in a 'has_operation' relation involving the Replace operation?"
                        ]
                    },
                    {
                        "axiom": "array datatype propertyRestrictions [has_member some base type]",
                        "CQ": [
                            "Must every array have at least one member of the base type?",
                            "Does an array necessarily include some value identified by the base type through the property has_member?",
                            "Is it required that any instance of array is associated via has_member with at least one instance of the base type?"
                        ]
                    },
                    {
                        "axiom": "array datatype propertyRestrictions [has_quality some non-ordered]",
                        "CQ": [
                            "Is every entity associated with 'array' required to have the property 'has_quality' with some instance of 'non-ordered'?",
                            "Can an instance of 'array' exist without being linked to at least one 'non-ordered' quality through the 'has_quality' property?",
                            "Does the definition of 'array' necessitate the presence of the 'has_quality' relation to at least one 'non-ordered' entity?"
                        ]
                    },
                    {
                        "axiom": "array datatype propertyRestrictions [has_quality some non-numeric]",
                        "CQ": [
                            "Is it necessary for an entity to have at least one has_quality relationship pointing to a non-numeric value?",
                            "Can an entity possess a has_quality property that must reference a non-numeric characteristic?",
                            "Does every instance require the existence of some non-numeric value for the has_quality property?"
                        ]
                    },
                    {
                        "axiom": "array datatype propertyRestrictions [has_operation some Equal:array]",
                        "CQ": [
                            "Is it necessary for an array to have at least one operation that is equal to array?",
                            "Does the array class require the presence of the has_operation property with values of type Equal:array?",
                            "Are all arrays in the ontology ensured to participate in some has_operation relationship involving Equal:array?"
                        ]
                    },
                    {
                        "axiom": "array datatype propertyRestrictions [has_member some array generator]",
                        "CQ": [
                            "Must every array necessarily have at least one member that is an array generator?",
                            "Is it required for an array to include a member with the role of array generator?",
                            "Can an entity be considered an array without possessing the has_member relationship to an array generator?"
                        ]
                    }
                ]
            },
            "homogenous aggregate datatype with variable size": {
                "axiom": {
                    "subClassOf": [
                        "homogenous aggregate datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_member some homogenous aggregate generator with variable size]"
                    ]
                },
                "description": "homogenous aggregate datatype with variable size is a subclass of homogenous aggregate datatype. Each instance in this class is characterized by having at least one member that is a homogenous aggregate generator with variable size. This means members of this class are structured as aggregates comprised of homogeneous components, and the size or number of these components can vary, as generated by the associated generator.",
                "CQ": [
                    {
                        "axiom": "homogenous aggregate datatype with variable size subClassOf homogenous aggregate datatype",
                        "CQ": [
                            "Can a homogenous aggregate datatype with variable size be classified under homogenous aggregate datatype?",
                            "What are the specific types categorized as homogenous aggregate datatype, including those with variable size?",
                            "Which general datatype categories include homogenous aggregate datatype with variable size as a specialization?"
                        ]
                    },
                    {
                        "axiom": "homogenous aggregate datatype with variable size propertyRestrictions [has_member some homogenous aggregate generator with variable size]",
                        "CQ": [
                            "Is it necessary for a homogenous aggregate datatype with variable size to have at least one member that is a homogenous aggregate generator with variable size?",
                            "Does every homogenous aggregate datatype with variable size always include some homogenous aggregate generator with variable size as a member?",
                            "Can a homogenous aggregate datatype with variable size exist without containing any homogenous aggregate generator with variable size as a member?"
                        ]
                    }
                ]
            },
            "scaled datatype": {
                "axiom": {
                    "subClassOf": [
                        "numeric ordered primitive datatype"
                    ],
                    "disjointWith": [
                        "integer datatype",
                        "rational datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some unbounded]",
                        "[has_operation some Divide:scaled]",
                        "[has_operation some InOrder:scaled]",
                        "[has_operation some Multiply:scaled]",
                        "[has_member some scaled radix]",
                        "[has_quality some exact]",
                        "[has_operation some Negate:scaled]",
                        "[has_operation some Round:scaled]",
                        "[has_operation some Add:scaled]",
                        "[has_member some scaled factor]",
                        "[has_operation some Equal:scaled]"
                    ]
                },
                "description": "scaled datatype is defined as a subclass of numeric ordered primitive datatype and is disjoint with both integer datatype and rational datatype, meaning it cannot overlap with these types. Members of the scaled datatype class must possess qualities such as being unbounded and exact, and must have members including scaled radix and scaled factor. They also support a defined set of operations, including divide, multiply, add, round, negate, equal, and in-order comparisons, all specific to the scaled datatype. This formalization distinguishes scaled datatype as a numeric primitive that facilitates arithmetic and ordering operations based on scaling factors, but is neither a traditional integer nor a rational type.",
                "CQ": [
                    {
                        "axiom": "scaled datatype subClassOf numeric ordered primitive datatype",
                        "CQ": [
                            "Does scaled datatype belong to the broader class of numeric ordered primitive datatypes?",
                            "Which datatypes are specializations of numeric ordered primitive datatype, such as scaled datatype?",
                            "What superordinate datatype categories does scaled datatype fit under?"
                        ]
                    },
                    {
                        "axiom": "scaled datatype disjointWith integer datatype",
                        "CQ": [
                            "What is the ontological separation between scaled datatypes and integer datatypes?",
                            "Can a datatype be classified simultaneously as both a scaled datatype and an integer datatype?",
                            "Which datatype classes are defined as mutually exclusive with integer datatypes?"
                        ]
                    },
                    {
                        "axiom": "scaled datatype disjointWith rational datatype",
                        "CQ": [
                            "What ontological distinction is specified between scaled datatypes and rational datatypes?",
                            "Is any datatype instance allowed to be classified as both scaled and rational?",
                            "Which datatypes are specified as mutually exclusive with rational datatypes in the ontology?"
                        ]
                    },
                    {
                        "axiom": "scaled datatype propertyRestrictions [has_quality some unbounded]",
                        "CQ": [
                            "Is it required that every scaled datatype possesses at least one 'has_quality' relationship to an unbounded value?",
                            "Can a scaled datatype exist without having the 'has_quality' property linking to something that is unbounded?",
                            "Does the axiom entail that the property 'has_quality' on scaled datatypes must reference at least one entity that is unbounded?"
                        ]
                    },
                    {
                        "axiom": "scaled datatype propertyRestrictions [has_operation some Divide:scaled]",
                        "CQ": [
                            "Is every instance in the relevant class required to participate in at least one 'has_operation' relationship with an entity of type Divide:scaled?",
                            "Does the ontology specify that having a 'has_operation' relation with Divide:scaled is mandatory for the defined concept?",
                            "Can an individual lacking any 'has_operation' linkage to Divide:scaled still be considered a valid member of the target class?"
                        ]
                    },
                    {
                        "axiom": "scaled datatype propertyRestrictions [has_operation some InOrder:scaled]",
                        "CQ": [
                            "Is it required that every instance within 'scaled' has at least one 'has_operation' relationship to an instance of 'InOrder:scaled'?",
                            "Does the 'scaled' class necessarily involve performing an operation classified as 'InOrder:scaled'?",
                            "For an entity to be categorized under 'scaled', must it exhibit the 'has_operation' property with a value from the 'InOrder:scaled' class?"
                        ]
                    },
                    {
                        "axiom": "scaled datatype propertyRestrictions [has_operation some Multiply:scaled]",
                        "CQ": [
                            "Is every instance associated with 'scaled' required to have at least one 'has_operation' relation to a 'Multiply:scaled' entity?",
                            "Can an instance that lacks any 'has_operation' link to 'Multiply:scaled' still be classified as 'scaled'?",
                            "Does the scope of 'scaled' entail that it must participate in some 'has_operation' relationship with 'Multiply:scaled'?"
                        ]
                    },
                    {
                        "axiom": "scaled datatype propertyRestrictions [has_member some scaled radix]",
                        "CQ": [
                            "Is it necessary for an entity with scaled datatype property restrictions to have at least one member related by 'has_member' to a scaled radix?",
                            "Does the restriction imply that all instances must possess the property 'has_member' linked to some scaled radix value?",
                            "Can an individual lacking a 'has_member' relationship to any scaled radix be considered compliant with the scaled datatype property restrictions?"
                        ]
                    },
                    {
                        "axiom": "scaled datatype propertyRestrictions [has_quality some exact]",
                        "CQ": [
                            "Is it required that entities with a scaled datatype have at least one 'has_quality' relationship to 'exact'?",
                            "Can a scaled datatype exist without possessing the 'has_quality' property with value 'exact'?",
                            "Do all instances of scaled datatype necessarily exhibit the quality specified as 'exact'?"
                        ]
                    },
                    {
                        "axiom": "scaled datatype propertyRestrictions [has_operation some Negate:scaled]",
                        "CQ": [
                            "Must every instance of propertyRestrictions have at least one has_operation relationship to a Negate operation of type scaled?",
                            "Is it required that propertyRestrictions are associated with some has_operation involving Negate applied to scaled entities?",
                            "Can an instance of propertyRestrictions exist without participating in a has_operation with a Negate:scaled element?"
                        ]
                    },
                    {
                        "axiom": "scaled datatype propertyRestrictions [has_operation some Round:scaled]",
                        "CQ": [
                            "Is it required that every scaled entity must participate in at least one 'has_operation' relationship with an individual from the class Round:scaled?",
                            "Does a scaled entity always have some operation that is associated with an instance of Round:scaled?",
                            "Must there exist a 'has_operation' link from every instance of scaled to something in Round:scaled?"
                        ]
                    },
                    {
                        "axiom": "scaled datatype propertyRestrictions [has_operation some Add:scaled]",
                        "CQ": [
                            "Is it required that every instance with propertyRestrictions must have the 'has_operation' property relating to at least one Add:scaled entity?",
                            "Are all entities described by propertyRestrictions ensured to participate in a 'has_operation' relationship with a member of Add:scaled?",
                            "Does the ontology necessitate that propertyRestrictions only apply if there is a connection via 'has_operation' to an Add:scaled element?"
                        ]
                    },
                    {
                        "axiom": "scaled datatype propertyRestrictions [has_member some scaled factor]",
                        "CQ": [
                            "Must every instance with a scaled datatype property involve at least one member related by the scaled factor?",
                            "Is it required that entities possessing the scaled property have some association to a member through the scaled factor?",
                            "Is the existence of a member connected by the scaled factor a necessary condition for the scaled property to apply?"
                        ]
                    },
                    {
                        "axiom": "scaled datatype propertyRestrictions [has_operation some Equal:scaled]",
                        "CQ": [
                            "Is it necessary for an entity with property restriction to have at least one 'has_operation' relationship to an instance of 'Equal:scaled'?",
                            "Does every instance in the propertyRestrictions class require a 'has_operation' link to something classified as 'Equal:scaled'?",
                            "Can a member of propertyRestrictions exist without any 'has_operation' relation to 'Equal:scaled'?"
                        ]
                    }
                ]
            },
            "real datatype": {
                "axiom": {
                    "subClassOf": [
                        "numeric ordered primitive datatype"
                    ],
                    "disjointWith": [
                        "integer datatype",
                        "rational datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_operation some Multiply:real]",
                        "[has_quality some approximate]",
                        "[has_operation some Negate:real]",
                        "[has_member some real radix]",
                        "[has_quality some unbounded]",
                        "[has_operation some Reciprocal:real]",
                        "[has_operation some InOrder:real]",
                        "[has_operation some Add:real]",
                        "[has_operation some Promote:real]",
                        "[has_operation some Equal:real]",
                        "[has_member some real factor]"
                    ]
                },
                "description": "real datatype is defined as a subclass of numeric ordered primitive datatype and is explicitly disjoint with both integer datatype and rational datatype, ensuring that no individual can be simultaneously classified as a real datatype and either of those classes. Members of this class support a range of operations, including addition (Add), multiplication (Multiply), negation (Negate), reciprocals (Reciprocal), equality comparison (Equal), order comparison (InOrder), and type promotion (Promote), all among real values. Instances of real datatype possess qualities of being unbounded and approximate, distinguishing them from other numeric types. They also include members such as real radix and real factor, further characterizing the structure and application of real datatypes.",
                "CQ": [
                    {
                        "axiom": "real datatype subClassOf numeric ordered primitive datatype",
                        "CQ": [
                            "Is real datatype classified under the broader category of numeric ordered primitive datatype?",
                            "Which datatypes fall within the scope of numeric ordered primitive datatype, specifically including real datatype?",
                            "What more general datatype categories does real datatype belong to?"
                        ]
                    },
                    {
                        "axiom": "real datatype disjointWith integer datatype",
                        "CQ": [
                            "How does the ontology differentiate between real datatype and integer datatype?",
                            "Is there any datatype that can belong to both real and integer datatypes concurrently?",
                            "Which datatypes are explicitly marked as incompatible with integer datatype?"
                        ]
                    },
                    {
                        "axiom": "real datatype disjointWith rational datatype",
                        "CQ": [
                            "How does the ontology specify the separation between real and rational datatypes?",
                            "Is there an entity in the ontology that can be classified as both a real and a rational datatype?",
                            "Which datatypes are explicitly defined as incompatible with rational datatypes?"
                        ]
                    },
                    {
                        "axiom": "real datatype propertyRestrictions [has_operation some Multiply:real]",
                        "CQ": [
                            "Is it required for a real datatype property to participate in at least one 'has_operation' relation involving the Multiply operation?",
                            "Can a real datatype property exist without being associated with the 'has_operation' property to a Multiply operation?",
                            "Does the presence of a Multiply operation under the 'has_operation' property suffice to classify a real datatype property under this restriction?"
                        ]
                    },
                    {
                        "axiom": "real datatype propertyRestrictions [has_quality some approximate]",
                        "CQ": [
                            "Is it necessary for a real value to have the quality 'approximate'?",
                            "Can a real value possess only the quality of being 'approximate'?",
                            "Are all real values required to exhibit some form of the 'approximate' quality?"
                        ]
                    },
                    {
                        "axiom": "real datatype propertyRestrictions [has_operation some Negate:real]",
                        "CQ": [
                            "Is every instance of 'real' required to have at least one 'has_operation' relationship to a 'Negate:real'?",
                            "Must all 'real' entities possess an associated 'has_operation' linking them to some instance of 'Negate:real'?",
                            "Can a 'real' exist without being related to any 'Negate:real' via the 'has_operation' property?"
                        ]
                    },
                    {
                        "axiom": "real datatype propertyRestrictions [has_member some real radix]",
                        "CQ": [
                            "Is it required that every instance related by 'has_member' must include at least one real number of type 'real radix'?",
                            "Does an individual with the property 'has_member' necessarily reference some entity classified under 'real radix'?",
                            "Can an entity be considered valid if it lacks any 'has_member' relationship to a 'real radix' real number?"
                        ]
                    },
                    {
                        "axiom": "real datatype propertyRestrictions [has_quality some unbounded]",
                        "CQ": [
                            "Is every instance of real associated with at least one value for the property has_quality?",
                            "Can any instance of real exist without possessing the has_quality relationship to some value?",
                            "Does the real class require that there be at least one has_quality property present for its instances?"
                        ]
                    },
                    {
                        "axiom": "real datatype propertyRestrictions [has_operation some Reciprocal:real]",
                        "CQ": [
                            "Is it required that every instance with the 'has_operation' property must relate to at least one value from the Reciprocal:real class?",
                            "Can an instance exist without having a 'has_operation' relationship to any Reciprocal:real value?",
                            "Does the axiom allow an instance to have multiple 'has_operation' relationships with different Reciprocal:real values?"
                        ]
                    },
                    {
                        "axiom": "real datatype propertyRestrictions [has_operation some InOrder:real]",
                        "CQ": [
                            "Is every instance with the property 'has_operation' necessarily associated with at least one real-valued value in the InOrder:real datatype?",
                            "Can an entity satisfying the property restriction 'has_operation some InOrder:real' lack a value of InOrder:real type for 'has_operation'?",
                            "Does the use of 'has_operation some InOrder:real' require that any member must have a 'has_operation' property filled by some value from the InOrder:real range?"
                        ]
                    },
                    {
                        "axiom": "real datatype propertyRestrictions [has_operation some Add:real]",
                        "CQ": [
                            "Is it required for a real datatype property restriction to include at least one has_operation relation to an instance of Add:real?",
                            "Can a real datatype property restriction exist without having any has_operation relationship to Add:real?",
                            "Do all real datatype property restrictions necessarily involve some instance where has_operation points to Add:real?"
                        ]
                    },
                    {
                        "axiom": "real datatype propertyRestrictions [has_operation some Promote:real]",
                        "CQ": [
                            "Are all entities in the 'real datatype' class required to have at least one 'has_operation' relationship involving 'Promote:real'?",
                            "Is it possible for a 'real datatype' instance to lack the 'has_operation' property with respect to 'Promote:real'?",
                            "Does the specification of 'real datatype' entail that there exists at least one association via 'has_operation' to 'Promote:real'?"
                        ]
                    },
                    {
                        "axiom": "real datatype propertyRestrictions [has_operation some Equal:real]",
                        "CQ": [
                            "Is every instance with the property 'has_operation' necessarily associated with at least one real value equal to a specific real number?",
                            "Must there exist a real value such that the property 'has_operation' relates an entity to a value exactly matching that real number?",
                            "Can an entity be classified under this restriction if it does not possess a 'has_operation' relation to any real value equal to a particular real number?"
                        ]
                    },
                    {
                        "axiom": "real datatype propertyRestrictions [has_member some real factor]",
                        "CQ": [
                            "Is every instance defined by 'real datatype propertyRestrictions' required to have at least one 'has_member' relationship with a 'real factor'?",
                            "Can an entity covered by 'real datatype propertyRestrictions' exist without associating to a 'real factor' via the 'has_member' property?",
                            "Does the specification of 'real datatype propertyRestrictions' imply the involvement of at least one 'real factor' through the 'has_member' property?"
                        ]
                    }
                ]
            },
            "integer datatype": {
                "axiom": {
                    "subClassOf": [
                        "numeric ordered primitive datatype"
                    ],
                    "disjointWith": [
                        "rational datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_operation some NonNegative:integer]",
                        "[has_quality some ordered]",
                        "[has_operation some Equal:integer]",
                        "[has_operation some InOrder:interger]",
                        "[has_quality some numeric]",
                        "[has_quality some exact]",
                        "[has_operation some Add:integer]",
                        "[has_quality some unbounded]",
                        "[has_operation some Multiply:integer]",
                        "[has_operation some Negate:integer]"
                    ]
                },
                "description": "integer datatype is a subclass of numeric ordered primitive datatype, characterized by qualities such as being ordered, numeric, exact, and unbounded. It supports operations including addition, multiplication, negation, equality checking, and ordered comparison among integers, as well as ensuring the existence of non-negative integers. The class is explicitly disjoint with rational datatype, indicating that no individual can be both an integer and a rational that is not an integer. These axioms formalize the mathematical and operational properties unique to the integer datatype.",
                "CQ": [
                    {
                        "axiom": "integer datatype subClassOf numeric ordered primitive datatype",
                        "CQ": [
                            "Does integer datatype fall under the broader classification of numeric ordered primitive datatype?",
                            "What specific datatypes are categorized as subclasses of numeric ordered primitive datatype, including integer datatype?",
                            "Which higher-level datatype groups encompass integer datatype?"
                        ]
                    },
                    {
                        "axiom": "integer datatype disjointWith rational datatype",
                        "CQ": [
                            "What logical separation is established between integer datatype and rational datatype in the ontology?",
                            "Can a datatype simultaneously be classified as both integer and rational?",
                            "Which datatypes are explicitly specified as incompatible with rational datatype?"
                        ]
                    },
                    {
                        "axiom": "integer datatype propertyRestrictions [has_operation some NonNegative:integer]",
                        "CQ": [
                            "Is it required that an integer entity possesses at least one 'has_operation' value that is a non-negative integer?",
                            "Can an integer instance exist without having any association to 'has_operation' with a non-negative integer value?",
                            "Does the scope of 'has_operation' for an integer specifically include only non-negative integer values?"
                        ]
                    },
                    {
                        "axiom": "integer datatype propertyRestrictions [has_quality some ordered]",
                        "CQ": [
                            "Must every integer possess at least one 'has_quality' relationship with an entity classified as ordered?",
                            "Is the presence of the 'ordered' quality through the 'has_quality' property a necessary characteristic for all integers?",
                            "Do integers require a 'has_quality' association that entails the existence of the 'ordered' attribute?"
                        ]
                    },
                    {
                        "axiom": "integer datatype propertyRestrictions [has_operation some Equal:integer]",
                        "CQ": [
                            "Must every instance related to 'has_operation' include at least one connection to an integer value through the 'Equal' restriction?",
                            "Is it necessary for the property 'has_operation' of an individual to relate that individual to an integer satisfying the 'Equal' constraint?",
                            "Are all individuals with the 'has_operation' property required to demonstrate the existence of an 'Equal' integer value?"
                        ]
                    },
                    {
                        "axiom": "integer datatype propertyRestrictions [has_operation some InOrder:interger]",
                        "CQ": [
                            "Must every instance with an integer datatype have at least one 'has_operation' property relating it to an integer in the set InOrder?",
                            "Is it required for entities described by this axiom to possess some operation involving an integer classified as InOrder?",
                            "Can an entity with an integer datatype exist in this ontology without being linked by 'has_operation' to at least one InOrder integer value?"
                        ]
                    },
                    {
                        "axiom": "integer datatype propertyRestrictions [has_quality some numeric]",
                        "CQ": [
                            "Must every integer possess at least one quality value that is numeric?",
                            "Is it required for instances of integer to be associated with a numeric quality through the has_quality property?",
                            "Can an integer exist without having the has_quality property linking it to a numeric value?"
                        ]
                    },
                    {
                        "axiom": "integer datatype propertyRestrictions [has_quality some exact]",
                        "CQ": [
                            "Is it necessary for an integer to have the 'has_quality' property with at least one value of 'exact'?",
                            "Does every integer always possess the 'has_quality' property linked to 'exact', or can it be associated with other qualities as well?",
                            "Are there integers that do not have any 'has_quality' relationship with 'exact'?"
                        ]
                    },
                    {
                        "axiom": "integer datatype propertyRestrictions [has_operation some Add:integer]",
                        "CQ": [
                            "Must every instance with an integer datatype property have at least one 'has_operation' relationship to an Add operation of type integer?",
                            "Is it required that any entity with an integer property value performs an Add operation involving integers?",
                            "Does the presence of an integer datatype property imply an association with the 'has_operation' property linking to an Add:integer?"
                        ]
                    },
                    {
                        "axiom": "integer datatype propertyRestrictions [has_quality some unbounded]",
                        "CQ": [
                            "Is it required that every integer possesses at least one 'has_quality' relation to some value within the scope of 'unbounded'?",
                            "Does the definition of integer entail the existence of a 'has_quality' property with an unbounded value?",
                            "Must an integer always be associated with at least one unbounded quality through the 'has_quality' property?"
                        ]
                    },
                    {
                        "axiom": "integer datatype propertyRestrictions [has_operation some Multiply:integer]",
                        "CQ": [
                            "Is it necessary for an integer to have at least one 'has_operation' relationship with a Multiply operation involving another integer?",
                            "Does every instance of integer participate in a 'has_operation' property where the operation performed is multiplication with another integer?",
                            "Are there integers that do not engage in any 'has_operation' relation with a Multiply operation involving an integer?"
                        ]
                    },
                    {
                        "axiom": "integer datatype propertyRestrictions [has_operation some Negate:integer]",
                        "CQ": [
                            "Is it required that an integer has at least one operation involving negation?",
                            "Can every integer be associated with some operation categorized as negation?",
                            "Does the existence of a negation operation apply to all members of the integer class?"
                        ]
                    }
                ]
            },
            "rational datatype": {
                "axiom": {
                    "subClassOf": [
                        "numeric ordered primitive datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_operation some Multiply:rational]",
                        "[has_operation some Reciprocal:rational]",
                        "[has_quality some numeric]",
                        "[has_operation some NonNegative:rational]",
                        "[has_quality some ordered]",
                        "[has_operation some Promote:rational]",
                        "[has_operation some Equal:rational]",
                        "[has_operation some Add:rational]",
                        "[has_operation some Negate:rational]",
                        "[has_quality some exact]",
                        "[has_operation some InOrder:rational]",
                        "[has_quality some unbounded]"
                    ]
                },
                "description": "rational datatype is defined as a subclass of numeric ordered primitive datatype. It possesses several qualities: it is numeric, ordered, exact, and unbounded. Individuals in this class support a set of operations, including multiplication, addition, negation, equality testing, reciprocal, in-order comparison, non-negativity, and promotion. These characteristics collectively formalize the rational datatype as representing rational numbers that are precise, can be manipulated with various arithmetic operations, and do not have inherent bounds on size or value.",
                "CQ": [
                    {
                        "axiom": "rational datatype subClassOf numeric ordered primitive datatype",
                        "CQ": [
                            "Is rational datatype conceptually classified as a kind of numeric ordered primitive datatype?",
                            "Which datatype categories include rational datatype as a more specific instance?",
                            "What broader datatype categories encompass rational datatype?"
                        ]
                    },
                    {
                        "axiom": "rational datatype propertyRestrictions [has_operation some Multiply:rational]",
                        "CQ": [
                            "Must an instance of rational datatype necessarily possess at least one 'has_operation' relationship to Multiply:rational?",
                            "Are all instances of rational datatype required to have a 'has_operation' link with an entity classified as Multiply:rational?",
                            "Does the rational datatype always involve a connection through the 'has_operation' property to something of type Multiply:rational?"
                        ]
                    },
                    {
                        "axiom": "rational datatype propertyRestrictions [has_operation some Reciprocal:rational]",
                        "CQ": [
                            "Must every instance of \"datatype propertyRestrictions\" have at least one \"has_operation\" relationship with a \"Reciprocal:rational\"?",
                            "Is it required that \"datatype propertyRestrictions\" entities possess the \"has_operation\" property linking them to a \"Reciprocal:rational\" instance?",
                            "Can an individual classified as \"datatype propertyRestrictions\" exist without being associated via \"has_operation\" to \"Reciprocal:rational\"?"
                        ]
                    },
                    {
                        "axiom": "rational datatype propertyRestrictions [has_quality some numeric]",
                        "CQ": [
                            "Is every instance of rational required to have at least one 'has_quality' relation to a numeric value?",
                            "Can a rational exist without being related by 'has_quality' to any numeric value?",
                            "Does the ontology ensure that rational individuals possess some quality quantified by a numeric type?"
                        ]
                    },
                    {
                        "axiom": "rational datatype propertyRestrictions [has_operation some NonNegative:rational]",
                        "CQ": [
                            "Is it required that every instance with a rational datatype propertyRestriction must have at least one 'has_operation' relation to a NonNegative rational value?",
                            "Can a rational datatype propertyRestriction exist without a 'has_operation' link to a NonNegative rational value?",
                            "Does the definition of rational datatype propertyRestrictions permit values of 'has_operation' that are not NonNegative rationals?"
                        ]
                    },
                    {
                        "axiom": "rational datatype propertyRestrictions [has_quality some ordered]",
                        "CQ": [
                            "Does every rational entity necessarily have at least one quality that is ordered?",
                            "Can a rational entity exist without the property 'has_quality' relating it to at least one ordered item?",
                            "Is it required that rational entities be associated exclusively with qualities that are ordered?"
                        ]
                    },
                    {
                        "axiom": "rational datatype propertyRestrictions [has_operation some Promote:rational]",
                        "CQ": [
                            "Is it required that a rational datatype entity must participate in at least one 'has_operation' relationship with a Promote:rational instance?",
                            "Does every rational datatype object have some association through 'has_operation' to an individual classified as Promote:rational?",
                            "Can a rational datatype entity exist without having 'has_operation' linked to at least one Promote:rational?"
                        ]
                    },
                    {
                        "axiom": "rational datatype propertyRestrictions [has_operation some Equal:rational]",
                        "CQ": [
                            "Must every instance of rational have at least one has_operation relationship to an entity of type Equal:rational?",
                            "Is it required that rational entities participate in some operation classified as Equal:rational?",
                            "Does the existence of rational depend on the presence of a has_operation link to Equal:rational?"
                        ]
                    },
                    {
                        "axiom": "rational datatype propertyRestrictions [has_operation some Add:rational]",
                        "CQ": [
                            "Is it necessary for a rational datatype property restriction to involve at least one 'has_operation' relationship with 'Add:rational'?",
                            "Does a rational datatype property restriction always include the 'has_operation' property linked to 'Add:rational'?",
                            "Can a rational datatype property restriction exist without participating in 'has_operation' with 'Add:rational'?"
                        ]
                    },
                    {
                        "axiom": "rational datatype propertyRestrictions [has_operation some Negate:rational]",
                        "CQ": [
                            "Is every instance with a 'rational' datatype required to have at least one 'has_operation' relation to a 'Negate:rational' operation?",
                            "Can a rational value exist without participating in any 'has_operation' with 'Negate:rational'?",
                            "Does the ontology guarantee that the 'has_operation' property for 'rational' types always relates to a 'Negate:rational' operation?"
                        ]
                    },
                    {
                        "axiom": "rational datatype propertyRestrictions [has_quality some exact]",
                        "CQ": [
                            "Is it necessary for a rational datatype entity to possess the 'has_quality' property with some value classified as 'exact'?",
                            "Can a rational datatype exist without having at least one 'has_quality' relationship to 'exact'?",
                            "Does the definition of rational datatype require that every instance has at least one associated 'exact' quality via the 'has_quality' property?"
                        ]
                    },
                    {
                        "axiom": "rational datatype propertyRestrictions [has_operation some InOrder:rational]",
                        "CQ": [
                            "Is it required that rational datatype propertyRestrictions always involves at least one has_operation relation to an InOrder:rational?",
                            "Can rational datatype propertyRestrictions exist without having any has_operation relationship to InOrder:rational?",
                            "Does the presence of rational datatype propertyRestrictions guarantee the involvement of has_operation with some instance of InOrder:rational?"
                        ]
                    },
                    {
                        "axiom": "rational datatype propertyRestrictions [has_quality some unbounded]",
                        "CQ": [
                            "Is every instance with the rational datatype required to possess at least one quality via the 'has_quality' property?",
                            "Can an entity of rational datatype have the 'has_quality' attribute associated with any type of quality without restriction?",
                            "Does the rational datatype necessarily exhibit the existence of some related quality as described by the 'has_quality' property?"
                        ]
                    }
                ]
            },
            "non-aggregate generator": {
                "axiom": {
                    "subClassOf": [
                        "generated datatype generator"
                    ],
                    "disjointWith": [
                        "defined generator",
                        "aggregate datatype",
                        "aggregate generator"
                    ],
                    "equivalentClass": [
                        "(choice generator or pointer generator or procedure generator)"
                    ]
                },
                "description": "non-aggregate generator is defined as a subclass of generated datatype generator, and is explicitly disjoint from defined generator, aggregate datatype, and aggregate generator. Every non-aggregate generator is equivalent to being either a choice generator, pointer generator, or procedure generator. This class groups generator types that are not aggregate in nature, thereby excluding those that represent defined, aggregate, or aggregate-related generator functionalities.",
                "CQ": [
                    {
                        "axiom": "non-aggregate generator subClassOf generated datatype generator",
                        "CQ": [
                            "Is non-aggregate generator classified under the broader category of generated datatype generator?",
                            "Which generator types are more specific than generated datatype generator, such as non-aggregate generator?",
                            "To which higher-level categories does non-aggregate generator belong?"
                        ]
                    },
                    {
                        "axiom": "non-aggregate generator disjointWith defined generator",
                        "CQ": [
                            "What ontological separation is defined between non-aggregate generators and defined generators?",
                            "Is there any instance that could simultaneously belong to both non-aggregate generator and defined generator classes?",
                            "Which generator categories are specified as mutually exclusive with the defined generator class?"
                        ]
                    },
                    {
                        "axiom": "non-aggregate generator disjointWith aggregate datatype",
                        "CQ": [
                            "How does the ontology distinguish between non-aggregate generators and aggregate datatypes?",
                            "Is there any instance that can be classified as both a non-aggregate generator and an aggregate datatype?",
                            "Which ontology classes are specified as disjoint with aggregate datatype?"
                        ]
                    },
                    {
                        "axiom": "non-aggregate generator disjointWith aggregate generator",
                        "CQ": [
                            "What logical separation is formalized between non-aggregate generators and aggregate generators in the ontology?",
                            "Is any device allowed to be classified as both a non-aggregate generator and an aggregate generator simultaneously?",
                            "Which generator types, other than aggregate generators, are specified to be disjoint with non-aggregate generators?"
                        ]
                    },
                    {
                        "axiom": "non-aggregate generator equivalentClass (choice generator or pointer generator or procedure generator)",
                        "CQ": [
                            "Is a non-aggregate generator necessarily equivalent to either a choice generator, a pointer generator, or a procedure generator?",
                            "Is every non-aggregate generator either a choice generator, a pointer generator, or a procedure generator, and vice versa?",
                            "Are the classes choice generator, pointer generator, and procedure generator jointly exhaustive and mutually exclusive with respect to non-aggregate generator?"
                        ]
                    }
                ]
            },
            "aggregate generator": {
                "axiom": {
                    "subClassOf": [
                        "generated datatype generator"
                    ],
                    "equivalentClass": [
                        "(array generator or bag generator or class generator or record generator or sequence generator or set generator or table generator)"
                    ]
                },
                "description": "aggregate generator is defined as a subclass of generated datatype generator and is equivalent to any generator that is either an array generator, bag generator, class generator, record generator, sequence generator, set generator, or table generator. This class serves as a synonym for \"aggregate datatype constructor,\" reflecting its role in constructing aggregate or composite datatypes from collections of elements or records.",
                "CQ": [
                    {
                        "axiom": "aggregate generator subClassOf generated datatype generator",
                        "CQ": [
                            "Does every aggregate generator fall under the category of generated datatype generator?",
                            "Which generator types are encompassed by the generated datatype generator class?",
                            "To which higher-level classes does aggregate generator pertain within the ontology?"
                        ]
                    },
                    {
                        "axiom": "aggregate generator equivalentClass (array generator or bag generator or class generator or record generator or sequence generator or set generator or table generator)",
                        "CQ": [
                            "Is an aggregate generator defined as a generator that is either an array generator, a bag generator, a class generator, a record generator, a sequence generator, a set generator, or a table generator?",
                            "Does every aggregate generator fall into at least one of the categories: array generator, bag generator, class generator, record generator, sequence generator, set generator, or table generator?",
                            "Can any generator that is an array generator, bag generator, class generator, record generator, sequence generator, set generator, or table generator be classified as an aggregate generator?"
                        ]
                    }
                ]
            },
            "identifier": {
                "axiom": {
                    "subClassOf": [
                        "information artifact entity"
                    ]
                },
                "description": "identifier is defined as a subclass of information artifact entity. Members of this class represent informational constructs specifically designed to uniquely distinguish or label entities, concepts, or data within information systems. This formalization means every identifier is categorized under the broader class of information artifact entities, emphasizing its role in conveying and maintaining unique identity information.",
                "CQ": [
                    {
                        "axiom": "identifier subClassOf information artifact entity",
                        "CQ": [
                            "Does identifier belong to the broader group of information artifact entity?",
                            "What types are classified under information artifact entity, including identifier?",
                            "Which higher-level categories encompass identifier?"
                        ]
                    }
                ]
            },
            "value expression": {
                "axiom": {
                    "subClassOf": [
                        "information artifact entity"
                    ]
                },
                "description": "value expression is a subclass of information artifact entity. This means every value expression is formally classified as a type of information artifact entity, inheriting all its general properties and restrictions. No additional axioms or property restrictions are specified, so value expression is currently distinguished solely by its classification within the ontology hierarchy as a specialized form of information artifact entity.",
                "CQ": [
                    {
                        "axiom": "value expression subClassOf information artifact entity",
                        "CQ": [
                            "What general class does value expression fall under within the context of information artifact entity?",
                            "Which subclasses are defined within the scope of information artifact entity, such as value expression?",
                            "Does value expression inherit characteristics from information artifact entity?"
                        ]
                    }
                ]
            },
            "label": {
                "axiom": {
                    "subClassOf": [
                        "information artifact entity"
                    ]
                },
                "description": "label is defined as a subclass of information artifact entity, indicating that it represents a type of information artifact. Instances of this class are understood to bear, convey, or represent information, typically serving as markers or identifiers that provide descriptive or categorical details about other entities.",
                "CQ": [
                    {
                        "axiom": "label subClassOf information artifact entity",
                        "CQ": [
                            "Is label a specific type of information artifact entity?",
                            "Which information artifact entities include label as a subclass?",
                            "What are the more general classes that label is classified under?"
                        ]
                    }
                ]
            },
            "directive information entity": {
                "axiom": {
                    "subClassOf": [
                        "information artifact entity"
                    ]
                },
                "description": "directive information entity is defined as a subclass of information artifact entity. This means that every directive information entity is a type of information artifact entity, with no additional property restrictions or disjointness specified. Members of this class represent entities that are informational in nature and classified within the broader category of information artifact entities.",
                "CQ": [
                    {
                        "axiom": "directive information entity subClassOf information artifact entity",
                        "CQ": [
                            "Is directive information entity classified under the broader group of information artifact entity?",
                            "Which specific subtypes of information artifact entity include directive information entity as a member?",
                            "What are the direct and indirect parent classes of directive information entity?"
                        ]
                    }
                ]
            },
            "representation": {
                "axiom": {
                    "subClassOf": [
                        "information artifact entity"
                    ]
                },
                "description": "representation is defined as a subclass of information artifact entity, indicating that every instance of representation is an information-based object or artifact. This formalization situates representations within the broader context of informational entities, ensuring that they inherit all characteristic properties of information artifact entities. There are no additional property restrictions or disjointness conditions specified for this class.",
                "CQ": [
                    {
                        "axiom": "representation subClassOf information artifact entity",
                        "CQ": [
                            "Is representation a more specific type within the category of information artifact entity?",
                            "Which subclasses fall under information artifact entity, such as representation?",
                            "What are the broader categories that encompass representation?"
                        ]
                    }
                ]
            },
            "specification": {
                "axiom": {
                    "subClassOf": [
                        "information artifact entity"
                    ]
                },
                "description": "specification is defined as a subclass of information artifact entity. This means every specification is considered a type of information artifact, formally representing structured information or requirements typically used to describe, detail, or govern the properties or behavior of an entity, system, or process.",
                "CQ": [
                    {
                        "axiom": "specification subClassOf information artifact entity",
                        "CQ": [
                            "Is specification categorized under information artifact entity?",
                            "Which entities are recognized as more specific forms of information artifact entity, including specification?",
                            "What general categories encompass specification in the ontology?"
                        ]
                    }
                ]
            },
            "exactness": {
                "axiom": {
                    "subClassOf": [
                        "datatype property"
                    ],
                    "disjointWith": [
                        "numericalness",
                        "cardinality",
                        "order",
                        "boundedness",
                        "equality"
                    ],
                    "equivalentClass": [
                        "(approximate or exact)"
                    ]
                },
                "description": "exactness is defined as a subclass of datatype property and is explicitly disjoint from the classes numericalness, cardinality, order, boundedness, and equality—meaning no instance can belong to any of these classes simultaneously. Additionally, exactness is equivalent to the union of approximate or exact, capturing the notion that it characterizes properties specifying whether something is described with complete precision or approximation. This class formally distinguishes the aspect of being exact from other quantitative or structural datatype attributes.",
                "CQ": [
                    {
                        "axiom": "exactness subClassOf datatype property",
                        "CQ": [
                            "What properties are more specific than datatype property, such as exactness?",
                            "Does exactness belong to the category of datatype property?",
                            "Which general property types include exactness as a member?"
                        ]
                    },
                    {
                        "axiom": "exactness disjointWith numericalness",
                        "CQ": [
                            "How does the ontology distinguish between exactness and numericalness?",
                            "Is any entity permitted to possess both exactness and numericalness characteristics simultaneously?",
                            "Which classes, besides numericalness, are specified as disjoint with exactness?"
                        ]
                    },
                    {
                        "axiom": "exactness disjointWith cardinality",
                        "CQ": [
                            "What logical separation is asserted between exactness and cardinality within the ontology?",
                            "Is there any entity that can simultaneously be classified as both exactness and cardinality?",
                            "Which concepts are specified as mutually exclusive with cardinality?"
                        ]
                    },
                    {
                        "axiom": "exactness disjointWith order",
                        "CQ": [
                            "How are the concepts of exactness and order separated within the ontology?",
                            "Is there any entity that can be simultaneously classified as exactness and order?",
                            "Which classes are specified as incompatible with order in the ontology?"
                        ]
                    },
                    {
                        "axiom": "exactness disjointWith boundedness",
                        "CQ": [
                            "How does the ontology differentiate between exactness and boundedness?",
                            "Can an entity possess both exactness and boundedness simultaneously?",
                            "Which classes in the ontology are declared disjoint with boundedness?"
                        ]
                    },
                    {
                        "axiom": "exactness disjointWith equality",
                        "CQ": [
                            "How does the ontology characterize the separation between exactness and equality?",
                            "Is any entity permitted to possess both exactness and equality properties simultaneously?",
                            "What other classes or properties are specified as disjoint with exactness?"
                        ]
                    },
                    {
                        "axiom": "exactness equivalentClass (approximate or exact)",
                        "CQ": [
                            "Is exactness defined by the union of approximate and exact categories?",
                            "Is every instance of exactness necessarily classified as either approximate or exact?",
                            "Are there any examples of exactness that do not fall under approximate or exact?"
                        ]
                    }
                ]
            },
            "numericalness": {
                "axiom": {
                    "subClassOf": [
                        "datatype property"
                    ],
                    "disjointWith": [
                        "cardinality",
                        "order",
                        "boundedness",
                        "equality"
                    ],
                    "equivalentClass": [
                        "(numeric or non-numeric)"
                    ]
                },
                "description": "numericalness is a subclass of datatype property that classifies properties as either numeric or non-numeric. It is formally specified to be equivalent to the union of numeric and non-numeric, meaning all members must belong to one of these two categories. Additionally, numericalness is explicitly disjoint with cardinality, order, boundedness, and equality, ensuring these property types are mutually exclusive and no property can simultaneously belong to both numericalness and any of these other classes. This class captures the essential distinction between properties based on their numerical character.",
                "CQ": [
                    {
                        "axiom": "numericalness subClassOf datatype property",
                        "CQ": [
                            "Is numericalness categorized under datatype property?",
                            "Which datatype properties encompass numericalness as a more specific property?",
                            "What broader property classification includes numericalness within its hierarchy?"
                        ]
                    },
                    {
                        "axiom": "numericalness disjointWith cardinality",
                        "CQ": [
                            "What logical separation is defined between numericalness and cardinality in the ontology?",
                            "Is there any entity in the ontology that can be classified as both numericalness and cardinality?",
                            "Which other classes are formally specified as incompatible with numericalness?"
                        ]
                    },
                    {
                        "axiom": "numericalness disjointWith order",
                        "CQ": [
                            "What logical separation is defined between numericalness and order in the ontology?",
                            "Is there any entity that can simultaneously belong to both numericalness and order?",
                            "Which classes are specified as disjoint with numericalness?"
                        ]
                    },
                    {
                        "axiom": "numericalness disjointWith boundedness",
                        "CQ": [
                            "How does the ontology differentiate between numericalness and boundedness?",
                            "Is it allowed for an entity to possess both numericalness and boundedness simultaneously?",
                            "Which classes are explicitly marked as disjoint with boundedness?"
                        ]
                    },
                    {
                        "axiom": "numericalness disjointWith equality",
                        "CQ": [
                            "How does the ontology differentiate between numericalness and equality?",
                            "Is it permissible for an entity to possess both numericalness and equality attributes simultaneously?",
                            "Which classes within the ontology are specified as being incompatible with numericalness?"
                        ]
                    },
                    {
                        "axiom": "numericalness equivalentClass (numeric or non-numeric)",
                        "CQ": [
                            "Is numericalness defined as the union of numeric and non-numeric entities?",
                            "Are all instances of numericalness necessarily either numeric or non-numeric?",
                            "Does numericalness encompass all and only those classes that are numeric or non-numeric?"
                        ]
                    }
                ]
            },
            "cardinality": {
                "axiom": {
                    "subClassOf": [
                        "datatype property"
                    ],
                    "disjointWith": [
                        "order",
                        "boundedness",
                        "equality"
                    ],
                    "equivalentClass": [
                        "(countable or finite or uncountable)"
                    ]
                },
                "description": "cardinality is a subclass of datatype property and is disjoint from the classes order, boundedness, and equality, meaning no entity can simultaneously belong to both cardinality and any of these classes. It is formally equivalent to the union of countable, finite, and uncountable, reflecting that cardinality expresses the size or \"number of elements\" in a set, which may be countable, finite, or uncountable. This structure ensures clear differentiation from related set properties such as order, boundedness, and equality.",
                "CQ": [
                    {
                        "axiom": "cardinality subClassOf datatype property",
                        "CQ": [
                            "Is cardinality categorized as a specific type of datatype property?",
                            "Which datatype properties have cardinality as a specialized form?",
                            "What general categories encompass cardinality in the context of datatype properties?"
                        ]
                    },
                    {
                        "axiom": "cardinality disjointWith order",
                        "CQ": [
                            "How does the ontology specify the incompatibility between cardinality and order?",
                            "Is it logically consistent in the ontology for an entity to simultaneously possess both cardinality and order properties?",
                            "Which classes or concepts are explicitly defined as disjoint with cardinality?"
                        ]
                    },
                    {
                        "axiom": "cardinality disjointWith boundedness",
                        "CQ": [
                            "How does the ontology distinguish between cardinality and boundedness as separate concepts?",
                            "Is any entity permitted to belong to both cardinality and boundedness categories simultaneously?",
                            "Which other classes, apart from boundedness, are defined as mutually exclusive with cardinality?"
                        ]
                    },
                    {
                        "axiom": "cardinality disjointWith equality",
                        "CQ": [
                            "What logical separation is specified between cardinality and equality in the ontology?",
                            "Is there any entity that can belong to both the concepts of cardinality and equality simultaneously?",
                            "Which ontology classes are formally defined as disjoint with equality?"
                        ]
                    },
                    {
                        "axiom": "cardinality equivalentClass (countable or finite or uncountable)",
                        "CQ": [
                            "Is cardinality equivalent to the union of countable, finite, and uncountable concepts?",
                            "Can every instance classified under cardinality be either countable, finite, or uncountable?",
                            "Does cardinality include only those entities that are finite, countable, or uncountable, with no others?"
                        ]
                    }
                ]
            },
            "order": {
                "axiom": {
                    "subClassOf": [
                        "datatype property"
                    ],
                    "disjointWith": [
                        "boundedness",
                        "equality"
                    ],
                    "equivalentClass": [
                        "(ordered or non-ordered)"
                    ]
                },
                "description": "order is defined as a subclass of datatype property, meaning it is a specific kind of property whose value is a data value (as opposed to an object property). It is explicitly disjoint from the classes boundedness and equality, ensuring that no property instance can simultaneously be classified under these categories. Furthermore, order is equivalent to the union of ordered and non-ordered, indicating that any property that falls under the order class must be characterized as either ordered or non-ordered, and these two subclasses exhaust all possibilities for order. This structure formally differentiates order-related properties from those related to boundedness or equality.",
                "CQ": [
                    {
                        "axiom": "order subClassOf datatype property",
                        "CQ": [
                            "Is order classified as a datatype property in the ontology?",
                            "Which datatype properties have order as a more specific subtype?",
                            "What are the immediate superclasses of the property order?"
                        ]
                    },
                    {
                        "axiom": "order disjointWith boundedness",
                        "CQ": [
                            "What logical constraint separates order from boundedness within the ontology?",
                            "Is any entity allowed to belong to both order and boundedness categories simultaneously?",
                            "Which other concepts are formally specified as disjoint with boundedness?"
                        ]
                    },
                    {
                        "axiom": "order disjointWith equality",
                        "CQ": [
                            "How does the ontology formally differentiate order from equality?",
                            "Is it allowable for a concept to be simultaneously classified under both order and equality categories?",
                            "Which other mathematical properties are specified as disjoint with equality?"
                        ]
                    },
                    {
                        "axiom": "order equivalentClass (ordered or non-ordered)",
                        "CQ": [
                            "Is order defined as the union of ordered and non-ordered?",
                            "Is every instance of order necessarily an ordered instance or a non-ordered instance?",
                            "Are there any orders that do not belong to either the ordered or non-ordered categories?"
                        ]
                    }
                ]
            },
            "boundedness": {
                "axiom": {
                    "subClassOf": [
                        "datatype property"
                    ],
                    "disjointWith": [
                        "equality"
                    ],
                    "equivalentClass": [
                        "(bounded or unbounded)"
                    ]
                },
                "description": "boundedness is defined as a subclass of datatype property and is explicitly disjoint with equality, indicating that no instance can simultaneously represent boundedness and equality. It is further specified as being equivalent to either bounded or unbounded, meaning every instance of boundedness must fall into one of these two categories. This class formally captures the notion of whether a datatype property exhibits bounds or not, distinguishing it from properties concerning equality.",
                "CQ": [
                    {
                        "axiom": "boundedness subClassOf datatype property",
                        "CQ": [
                            "Is boundedness classified as a kind of datatype property?",
                            "Which datatype properties have more specific subclasses, such as boundedness?",
                            "To which broader property categories does boundedness belong?"
                        ]
                    },
                    {
                        "axiom": "boundedness disjointWith equality",
                        "CQ": [
                            "What kind of logical constraint prevents boundedness and equality from overlapping within the ontology?",
                            "Is it possible for an entity to simultaneously satisfy both boundedness and equality?",
                            "Which classes, in addition to equality, are declared disjoint with boundedness?"
                        ]
                    },
                    {
                        "axiom": "boundedness equivalentClass (bounded or unbounded)",
                        "CQ": [
                            "Is boundedness defined as the union of bounded and unbounded classes?",
                            "Are all instances of boundedness either bounded or unbounded?",
                            "Does boundedness include any class other than bounded and unbounded?"
                        ]
                    }
                ]
            },
            "equality": {
                "axiom": {
                    "subClassOf": [
                        "datatype property"
                    ]
                },
                "description": "equality is defined as a subclass of datatype property, indicating that it represents a specific type of property that links individuals to data values. This classification ensures that equality is used exclusively in contexts appropriate for datatype properties, which relate individuals to literal values rather than to other individuals.",
                "CQ": [
                    {
                        "axiom": "equality subClassOf datatype property",
                        "CQ": [
                            "Is equality classified as a kind of datatype property?",
                            "Which datatype properties encompass equality as a more specific type?",
                            "What are the broader property categories that include equality?"
                        ]
                    }
                ]
            },
            "vector datatype": {
                "axiom": {
                    "subClassOf": [
                        "array datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_member some vector generator]"
                    ]
                },
                "description": "vector datatype is defined as a subclass of array datatype. Every vector datatype must have at least one member that is generated by or corresponds to a vector generator, as specified by the property restriction [has_member some vector generator]. This formalizes vector datatypes as array datatypes with elements produced or related to a specific generation mechanism.",
                "CQ": [
                    {
                        "axiom": "vector datatype subClassOf array datatype",
                        "CQ": [
                            "Is every vector datatype classified as a kind of array datatype?",
                            "What types of array datatype encompass vector datatype as a more specific type?",
                            "Which broader datatype categories include vector datatype as a member?"
                        ]
                    },
                    {
                        "axiom": "vector datatype propertyRestrictions [has_member some vector generator]",
                        "CQ": [
                            "Is every instance with a 'has_member' relation to a vector required to be associated with a vector generator?",
                            "Can an entity with the 'has_member' property pointing to a vector be something other than a vector generator?",
                            "Are all entities that have members of type vector necessarily linked to a vector generator through the 'has_member' property?"
                        ]
                    }
                ]
            },
            "maximum-size": {
                "axiom": {
                    "subClassOf": [
                        "size"
                    ]
                },
                "description": "maximum-size is a subclass of size, representing the largest possible or allowable extent within a given context. Any individual classified as maximum-size must also be an instance of size, specifying the upper limit or boundary in measurement or quantity.",
                "CQ": [
                    {
                        "axiom": "maximum-size subClassOf size",
                        "CQ": [
                            "Does maximum-size fall under the broader classification of size?",
                            "What are the specific types categorized within size, including maximum-size?",
                            "Which higher-level categories encompass maximum-size?"
                        ]
                    }
                ]
            },
            "minimum-size": {
                "axiom": {
                    "subClassOf": [
                        "size"
                    ]
                },
                "description": "minimum-size is defined as a subclass of size, indicating that it represents a more specific concept within the broader category of size. Members of this class inherit all characteristics of size, and are distinguished by representing some form of minimum or least amount within size-related contexts.",
                "CQ": [
                    {
                        "axiom": "minimum-size subClassOf size",
                        "CQ": [
                            "Does minimum-size represent a specialization of size?",
                            "Which concepts are encompassed within size and include minimum-size as a subclass?",
                            "Under which broader category is minimum-size classified?"
                        ]
                    }
                ]
            },
            "discrete field component": {
                "axiom": {
                    "subClassOf": [
                        "primitive field component"
                    ],
                    "disjointWith": [
                        "real field component",
                        "boolean field component"
                    ],
                    "propertyRestrictions": [
                        "[role_of some discrete datatype]"
                    ]
                },
                "description": "discrete field component is a subclass of primitive field component and is explicitly disjoint with both real field component and boolean field component, ensuring that no individual can be classified as more than one of these types. Members of this class are characterized by their relationship to discrete datatypes, as every discrete field component must play the role of some discrete datatype. This formalization distinguishes discrete field components from other primitive field components based on their association with discrete data.",
                "CQ": [
                    {
                        "axiom": "discrete field component subClassOf primitive field component",
                        "CQ": [
                            "Is discrete field component classified as a type of primitive field component?",
                            "Which components fall under the category of primitive field component, specifically those more specific like discrete field component?",
                            "What broader categories encompass discrete field component within their taxonomy?"
                        ]
                    },
                    {
                        "axiom": "discrete field component disjointWith real field component",
                        "CQ": [
                            "Are any entities defined as both discrete field components and real field components?",
                            "Which ontology classes are explicitly incompatible with real field components?",
                            "What type of exclusivity exists between discrete field components and real field components?"
                        ]
                    },
                    {
                        "axiom": "discrete field component disjointWith boolean field component",
                        "CQ": [
                            "How does the ontology express the separation between discrete field components and boolean field components?",
                            "Is any field component allowed to be both a discrete field component and a boolean field component?",
                            "Which classes are identified as mutually exclusive to discrete field components?"
                        ]
                    },
                    {
                        "axiom": "discrete field component propertyRestrictions [role_of some discrete datatype]",
                        "CQ": [
                            "Must every discrete field component necessarily play the role of some discrete datatype?",
                            "Is it required for a discrete field component to be related via 'role_of' to at least one discrete datatype?",
                            "Does the definition ensure that discrete field component is linked by 'role_of' to at least one entity classified as a discrete datatype?"
                        ]
                    }
                ]
            },
            "real field component": {
                "axiom": {
                    "subClassOf": [
                        "primitive field component"
                    ],
                    "disjointWith": [
                        "boolean field component"
                    ],
                    "propertyRestrictions": [
                        "[role_of some real datatype]"
                    ]
                },
                "description": "real field component is defined as a subclass of primitive field component, disjoint with boolean field component—which ensures that no individual can be both a real field component and a boolean field component simultaneously. Members of this class are further constrained by a property restriction: each real field component must have a role with respect to some real datatype. This means that any real field component always relates in some way to a real (numeric, continuous) datatype, distinguishing it from other types of primitive field components.",
                "CQ": [
                    {
                        "axiom": "real field component subClassOf primitive field component",
                        "CQ": [
                            "Is real field component classified as a kind of primitive field component?",
                            "Which components fall under the category of primitive field component, such as real field component?",
                            "What are the broader classes that encompass real field component?"
                        ]
                    },
                    {
                        "axiom": "real field component disjointWith boolean field component",
                        "CQ": [
                            "Are real field components and boolean field components treated as mutually exclusive categories in the ontology?",
                            "Does any field component belong to both the real field component and boolean field component classes?",
                            "Which field component types are defined as disjoint with real field component?"
                        ]
                    },
                    {
                        "axiom": "real field component propertyRestrictions [role_of some real datatype]",
                        "CQ": [
                            "Does a real field component necessarily play the role of some real datatype?",
                            "Is it required for every real field component to be associated, through 'role_of', with at least one instance of real datatype?",
                            "Can a real field component exist without participating in the 'role_of' relationship with any real datatype?"
                        ]
                    }
                ]
            },
            "boolean field component": {
                "axiom": {
                    "subClassOf": [
                        "primitive field component"
                    ],
                    "propertyRestrictions": [
                        "[role_of some boolean datatype]"
                    ]
                },
                "description": "boolean field component is defined as a subclass of primitive field component and is characterized by the restriction that it must have some relationship (role_of) to a boolean datatype. This means every boolean field component represents or is associated with a value that is strictly of boolean type (such as true or false), distinguishing it from other field components that may represent different primitive datatypes.",
                "CQ": [
                    {
                        "axiom": "boolean field component subClassOf primitive field component",
                        "CQ": [
                            "Is boolean field component categorized under primitive field component?",
                            "Which field components are encompassed by primitive field component, such as boolean field component?",
                            "Under which higher-level components does boolean field component fall?"
                        ]
                    },
                    {
                        "axiom": "boolean field component propertyRestrictions [role_of some boolean datatype]",
                        "CQ": [
                            "Is it required that the 'component' property of a boolean field always relates only to values of the boolean datatype?",
                            "Can a boolean field have a 'component' relationship to any entity that is not of boolean datatype?",
                            "Does every instance of a boolean field necessarily possess at least one 'component' that is a boolean datatype?"
                        ]
                    }
                ]
            },
            "pointer datatype": {
                "axiom": {
                    "subClassOf": [
                        "non-aggregate datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some non-ordered]",
                        "[has_quality some non-numeric]",
                        "[has_member some pointer generator]",
                        "[has_member some pointer-element-type]",
                        "[has_operation some Equal:pointer]",
                        "[has_operation some Dereference:pointer]",
                        "[has_quality some exact]"
                    ]
                },
                "description": "pointer datatype is a subclass of non-aggregate datatype, whose values act as references to values of another datatype (the element datatype), and each value is atomic. Members of this class are characterized by possessing non-ordered and non-numeric qualities, and have “exact” as a quality. Additionally, every pointer datatype must have members corresponding to a pointer generator and a pointer-element-type, along with operations for equality (Equal:pointer) and dereferencing (Dereference:pointer). This formalization ensures that pointers are distinct, reference-capable datatypes with well-defined generative and operational properties but are not ordered or numeric collections.",
                "CQ": [
                    {
                        "axiom": "pointer datatype subClassOf non-aggregate datatype",
                        "CQ": [
                            "Is pointer datatype encompassed by the category of non-aggregate datatype?",
                            "Which datatypes are classified as more specific types under non-aggregate datatype, including pointer datatype?",
                            "To what broader datatype categories does pointer datatype belong?"
                        ]
                    },
                    {
                        "axiom": "pointer datatype propertyRestrictions [has_quality some non-ordered]",
                        "CQ": [
                            "Is it necessary for a pointer to possess the 'has_quality' property with some value from the class 'non-ordered'?",
                            "Does every pointer necessarily have at least one 'has_quality' relationship to a 'non-ordered' entity?",
                            "Are there any pointers that do not have 'has_quality' related to 'non-ordered'?"
                        ]
                    },
                    {
                        "axiom": "pointer datatype propertyRestrictions [has_quality some non-numeric]",
                        "CQ": [
                            "Is every pointer required to have at least one quality that is non-numeric?",
                            "Can a pointer exist without possessing a non-numeric quality via the has_quality property?",
                            "Does the ontology specify that pointers must be associated with some non-numeric quality through has_quality?"
                        ]
                    },
                    {
                        "axiom": "pointer datatype propertyRestrictions [has_member some pointer generator]",
                        "CQ": [
                            "Is every pointer required to have at least one member that is a pointer generator?",
                            "Does the existence of a pointer imply the existence of a has_member relationship with a pointer generator?",
                            "Can any pointer exist without having a member of type pointer generator?"
                        ]
                    },
                    {
                        "axiom": "pointer datatype propertyRestrictions [has_member some pointer-element-type]",
                        "CQ": [
                            "Is it necessary for pointer to have at least one has_member relationship with a pointer-element-type?",
                            "Can a pointer exist without referencing any element of pointer-element-type through has_member?",
                            "Does every pointer require some association, via has_member, to a value classified as pointer-element-type?"
                        ]
                    },
                    {
                        "axiom": "pointer datatype propertyRestrictions [has_operation some Equal:pointer]",
                        "CQ": [
                            "Is every instance of pointer required to have at least one has_operation relationship with an individual of type Equal:pointer?",
                            "Must a pointer necessarily be associated with an Equal:pointer entity through the has_operation property?",
                            "Can a pointer exist without having has_operation linked to any Equal:pointer?"
                        ]
                    },
                    {
                        "axiom": "pointer datatype propertyRestrictions [has_operation some Dereference:pointer]",
                        "CQ": [
                            "Is it required that every pointer is associated via 'has_operation' with at least one Dereference:pointer operation?",
                            "Can a pointer exist without having any 'has_operation' relationship to a Dereference:pointer?",
                            "Does the presence of a Dereference:pointer operation fulfill the property restriction imposed on the 'has_operation' relationship for pointers?"
                        ]
                    },
                    {
                        "axiom": "pointer datatype propertyRestrictions [has_quality some exact]",
                        "CQ": [
                            "Is it required that a pointer possess the 'has_quality' property with at least one instance of 'exact'?",
                            "Can any pointer be without a 'has_quality' relation to 'exact'?",
                            "Is every pointer necessarily associated with an 'exact' value via the 'has_quality' property?"
                        ]
                    }
                ]
            },
            "choice datatype": {
                "axiom": {
                    "subClassOf": [
                        "non-aggregate datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some exact]",
                        "[has_operation some Discriminant:choice]",
                        "[has_quality some non-ordered]",
                        "[has_operation some Tag:choice]",
                        "[has_operation some Cast:choice]",
                        "[has_operation some Equal:choice]",
                        "[has_member some tag-type]",
                        "[has_member some alternative-list]",
                        "[has_member some choice generator]"
                    ]
                },
                "description": "choice datatype is a subclass of non-aggregate datatype, characterized by having values that represent a single value selected from a set of alternative datatypes. These alternative datatypes are differentiated by their correspondence to values from a tag-type, known as the tag datatype. Formally, a choice datatype has members such as tag-type, alternative-list, and a choice generator; it is subject to property restrictions requiring qualities such as exactness and being non-ordered. It supports specific operations, including Discriminant:choice, Tag:choice, Cast:choice, and Equal:choice, which facilitate the selection and identification of alternatives by tag values.",
                "CQ": [
                    {
                        "axiom": "choice datatype subClassOf non-aggregate datatype",
                        "CQ": [
                            "Is every choice datatype classified under non-aggregate datatype?",
                            "Which datatypes are encompassed by the broader category of non-aggregate datatype, specifically including choice datatype?",
                            "What general datatype categories does choice datatype fall under?"
                        ]
                    },
                    {
                        "axiom": "choice datatype propertyRestrictions [has_quality some exact]",
                        "CQ": [
                            "Is it required that every choice possesses at least one quality described as exact?",
                            "Can a choice exist without having the quality exact?",
                            "Does the existence of the has_quality relation to exact sufficiently characterize the class choice?"
                        ]
                    },
                    {
                        "axiom": "choice datatype propertyRestrictions [has_operation some Discriminant:choice]",
                        "CQ": [
                            "Does every instance that has the 'has_operation' property necessarily relate to at least one 'Discriminant:choice'?",
                            "Is it possible for an entity restricted by 'has_operation some Discriminant:choice' to lack the 'has_operation' property entirely?",
                            "Can something classified under this restriction have 'has_operation' only with values outside 'Discriminant:choice'?"
                        ]
                    },
                    {
                        "axiom": "choice datatype propertyRestrictions [has_quality some non-ordered]",
                        "CQ": [
                            "Must every instance of 'choice' possess at least one 'has_quality' relation to a 'non-ordered' entity?",
                            "Is it required that 'choice' entities have the 'has_quality' attribute assigned with at least one value categorized as 'non-ordered'?",
                            "Can a 'choice' exist without exhibiting the 'has_quality' property with respect to a 'non-ordered' quality?"
                        ]
                    },
                    {
                        "axiom": "choice datatype propertyRestrictions [has_operation some Tag:choice]",
                        "CQ": [
                            "Is every instance of 'choice' required to have at least one 'has_operation' relation to an entity of type Tag:choice?",
                            "Can a 'choice' exist without the 'has_operation' property relating it to Tag:choice?",
                            "Do all 'choice' entities necessarily participate in some 'has_operation' association with Tag:choice?"
                        ]
                    },
                    {
                        "axiom": "choice datatype propertyRestrictions [has_operation some Cast:choice]",
                        "CQ": [
                            "Is it required that Choice always involves at least one has_operation relation with an instance of Cast?",
                            "Can a Choice exist without having the has_operation property filled by Cast?",
                            "Does every instance of Choice necessarily participate in a has_operation relationship with Cast?"
                        ]
                    },
                    {
                        "axiom": "choice datatype propertyRestrictions [has_operation some Equal:choice]",
                        "CQ": [
                            "Is it required for 'choice' to have at least one 'has_operation' property relating to 'Equal'?",
                            "Can an instance of 'choice' exist without being associated via 'has_operation' to 'Equal'?",
                            "Does every 'choice' necessarily involve the 'has_operation' property with the value 'Equal' at least once?"
                        ]
                    },
                    {
                        "axiom": "choice datatype propertyRestrictions [has_member some tag-type]",
                        "CQ": [
                            "Is every instance of 'choice' required to have at least one 'has_member' relationship to a 'tag-type'?",
                            "Can a 'choice' exist without being associated with any 'tag-type' via 'has_member'?",
                            "Does the ontology stipulate that 'choice' entities necessarily feature at least one 'has_member' link to a 'tag-type' entity?"
                        ]
                    },
                    {
                        "axiom": "choice datatype propertyRestrictions [has_member some alternative-list]",
                        "CQ": [
                            "Is it required that every 'choice' includes at least one member from the 'alternative-list' via the has_member property?",
                            "Can a 'choice' exist without having any members linked through the has_member property to the alternative-list?",
                            "Must an entity of type 'choice' always have at least one relationship to an instance classified under 'alternative-list' using has_member?"
                        ]
                    },
                    {
                        "axiom": "choice datatype propertyRestrictions [has_member some choice generator]",
                        "CQ": [
                            "Is it required that every choice must have at least one member that is a choice generator?",
                            "Can a choice exist without having any member that is a choice generator?",
                            "Does the definition of choice ensure the presence of at least one has_member relationship with a choice generator?"
                        ]
                    }
                ]
            },
            "procedure datatype": {
                "axiom": {
                    "subClassOf": [
                        "non-aggregate datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some non-numeric]",
                        "[has_member some procedure generator]",
                        "[has_quality some exact]",
                        "[has_member some procedure-parameter-list]",
                        "[has_member some return-parameter specification]",
                        "[has_operation some Equal:procedure]",
                        "[has_quality some non-ordered]",
                        "[has_operation some Invoke:procedure]"
                    ]
                },
                "description": "procedure datatype is defined as a subclass of non-aggregate datatype. Instances of this class represent atomic values that are operations (procedures) on values of designated parameter datatypes. A procedure datatype must possess non-numeric, exact, and non-ordered qualities, and it is composed of specific members: a procedure generator, a procedure-parameter list, and a return-parameter specification. It is also characterized by having at least the operations ‘Equal:procedure’ and ‘Invoke:procedure’. This formalization encapsulates all operations on a collection of datatypes, treating each procedure as an indivisible (atomic) value.",
                "CQ": [
                    {
                        "axiom": "procedure datatype subClassOf non-aggregate datatype",
                        "CQ": [
                            "Is every procedure datatype classified under non-aggregate datatypes?",
                            "Which datatypes are categorized as specializations of non-aggregate datatype, including procedure datatype?",
                            "What higher-level datatype categories encompass procedure datatype?"
                        ]
                    },
                    {
                        "axiom": "procedure datatype propertyRestrictions [has_quality some non-numeric]",
                        "CQ": [
                            "Is it required that every procedure has at least one quality that is non-numeric?",
                            "Could a procedure exist without having any non-numeric quality?",
                            "Must the value of the 'has_quality' property for procedures always include some non-numeric attribute?"
                        ]
                    },
                    {
                        "axiom": "procedure datatype propertyRestrictions [has_member some procedure generator]",
                        "CQ": [
                            "Is it necessary for a procedure to have at least one member that is a procedure generator?",
                            "Does every instance of procedure include some relationship via 'has_member' to a procedure generator?",
                            "Can a procedure exist without having a 'has_member' link to any procedure generator?"
                        ]
                    },
                    {
                        "axiom": "procedure datatype propertyRestrictions [has_quality some exact]",
                        "CQ": [
                            "Is it required that any procedure always possesses at least one 'has_quality' attribute with the value 'exact'?",
                            "Can a procedure be classified under this ontology if it does not have the 'has_quality' property set to 'exact'?",
                            "Is the assignment of the 'exact' value within the 'has_quality' property obligatory for every procedure instance?"
                        ]
                    },
                    {
                        "axiom": "procedure datatype propertyRestrictions [has_member some procedure-parameter-list]",
                        "CQ": [
                            "Is every procedure required to have at least one member from procedure-parameter-list via the has_member property?",
                            "Must a procedure always relate to a procedure-parameter-list through has_member?",
                            "Does the definition of procedure entail the existence of some associated procedure-parameter-list using has_member?"
                        ]
                    },
                    {
                        "axiom": "procedure datatype propertyRestrictions [has_member some return-parameter specification]",
                        "CQ": [
                            "Does every procedure necessarily have at least one return-parameter specified as a member?",
                            "Is it required for a procedure to have the property 'has_member' relating to a return-parameter specification?",
                            "Can there exist a procedure without an associated return-parameter specification via the 'has_member' property?"
                        ]
                    },
                    {
                        "axiom": "procedure datatype propertyRestrictions [has_operation some Equal:procedure]",
                        "CQ": [
                            "Is it required that every instance of procedure has at least one has_operation relationship to Equal:procedure?",
                            "Can a procedure exist without being associated with Equal:procedure via the has_operation property?",
                            "Does the presence of the has_operation property with Equal:procedure guarantee that an entity is classified as procedure?"
                        ]
                    },
                    {
                        "axiom": "procedure datatype propertyRestrictions [has_quality some non-ordered]",
                        "CQ": [
                            "Is every procedure required to have at least one has_quality relationship to a non-ordered value?",
                            "Can a procedure exist without exhibiting the has_quality property to a non-ordered entity?",
                            "Does the property restriction on procedures mean that non-ordered qualities are necessarily associated with them via has_quality?"
                        ]
                    },
                    {
                        "axiom": "procedure datatype propertyRestrictions [has_operation some Invoke:procedure]",
                        "CQ": [
                            "Is it required that every procedure has at least one has_operation relation to an Invoke:procedure?",
                            "Can a procedure exist without being related via has_operation to any Invoke:procedure?",
                            "Are procedures always associated through the has_operation property with at least one instance of Invoke:procedure?"
                        ]
                    }
                ]
            },
            "tree datatype": {
                "axiom": {
                    "subClassOf": [
                        "labeled graph datatype"
                    ],
                    "disjointWith": [
                        "DAG datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_member some tree datatype generator]"
                    ]
                },
                "description": "tree datatype is defined as a subclass of labeled graph datatype, ensuring that every tree datatype inherits all structural features of labeled graph datatypes. It is explicitly disjoint with DAG datatype, meaning no instance can simultaneously belong to both classes. Additionally, every member of the tree datatype class must have at least one associated tree datatype generator, as specified by the property restriction. This formalization captures tree datatypes as hierarchical, non-cyclic structures generated by specific mechanisms and distinct from more general directed acyclic graphs.",
                "CQ": [
                    {
                        "axiom": "tree datatype subClassOf labeled graph datatype",
                        "CQ": [
                            "Is tree datatype classified under the group of labeled graph datatypes?",
                            "Which datatypes are considered more specific instances of labeled graph datatype, including tree datatype?",
                            "To which broader datatype categories does tree datatype belong?"
                        ]
                    },
                    {
                        "axiom": "tree datatype disjointWith DAG datatype",
                        "CQ": [
                            "What logical separation is specified between tree datatype and DAG datatype in the ontology?",
                            "Is any structure permitted to be classified as both tree datatype and DAG datatype?",
                            "Which datatypes are set as disjoint with DAG datatype?"
                        ]
                    },
                    {
                        "axiom": "tree datatype propertyRestrictions [has_member some tree datatype generator]",
                        "CQ": [
                            "Is it required that a tree datatype property restriction always involves at least one has_member relation to a tree datatype generator?",
                            "Can a tree datatype property restriction exist without relating via has_member to any tree datatype generator?",
                            "Does every tree datatype property restriction necessarily specify the presence of a has_member property with a tree datatype generator?"
                        ]
                    }
                ]
            },
            "DAG datatype": {
                "axiom": {
                    "subClassOf": [
                        "labeled graph datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_member some DAG datatype generator]"
                    ]
                },
                "description": "DAG datatype is specified as a subclass of labeled graph datatype, meaning it inherits all characteristics of a labeled graph datatype. Additionally, every DAG datatype must have at least one member that is a DAG datatype generator, as indicated by the property restriction [has_member some DAG datatype generator]. This ensures each instance of DAG datatype is associated with a generator tailored for directed acyclic graph structures.",
                "CQ": [
                    {
                        "axiom": "DAG datatype subClassOf labeled graph datatype",
                        "CQ": [
                            "Does the category labeled graph datatype encompass DAG datatype as a more specific type?",
                            "Which datatypes are directly categorized under labeled graph datatype, including DAG datatype?",
                            "To what broader datatype classes does DAG datatype belong?"
                        ]
                    },
                    {
                        "axiom": "DAG datatype propertyRestrictions [has_member some DAG datatype generator]",
                        "CQ": [
                            "Must a DAG datatype always have at least one 'has_member' relationship with a DAG datatype generator?",
                            "Can a DAG datatype exist without being associated to any DAG datatype generator through the 'has_member' property?",
                            "Is the presence of a 'has_member' link to a DAG datatype generator necessary for every DAG datatype instance?"
                        ]
                    }
                ]
            },
            "aggregate generator property": {
                "axiom": {
                    "subClassOf": [
                        "quality"
                    ]
                },
                "description": "aggregate generator property is defined as a subclass of quality, indicating that it represents a specialized type of quality. Members of this class inherit all characteristics of qualities, and specifically pertain to attributes or aspects associated with aggregate generators. No additional restrictions or disjointness axioms are specified.",
                "CQ": [
                    {
                        "axiom": "aggregate generator property subClassOf quality",
                        "CQ": [
                            "Is every aggregate generator property classified under the broader category of quality?",
                            "Which property types fall under the superclass quality, including aggregate generator property?",
                            "What are the more general categories that encompass aggregate generator property?"
                        ]
                    }
                ]
            },
            "datatype property": {
                "axiom": {
                    "subClassOf": [
                        "quality"
                    ]
                },
                "description": "datatype property is defined as a subclass of quality, indicating that each instance of datatype property inherits characteristics associated with quality. This classification suggests that datatype properties are viewed as specific types of qualities within the ontology.",
                "CQ": [
                    {
                        "axiom": "datatype property subClassOf quality",
                        "CQ": [
                            "Does every datatype property fall under the category of quality?",
                            "Which properties are classified as more specific than quality, including datatype property?",
                            "To which upper-level categories does datatype property belong within the ontology?"
                        ]
                    }
                ]
            },
            "upper bound": {
                "axiom": {
                    "subClassOf": [
                        "bound"
                    ],
                    "propertyRestrictions": [
                        "[has-value exactly 1 xsd:integer]"
                    ]
                },
                "description": "upper bound is defined as a subclass of bound, representing a specific type of bound characterized by having exactly one value of type xsd:integer associated through the has-value property. This formalization ensures that every instance of upper bound uniquely specifies a single integer value as its bound.",
                "CQ": [
                    {
                        "axiom": "upper bound subClassOf bound",
                        "CQ": [
                            "Does upper bound belong to the more general category of bound?",
                            "What specific concepts are subclasses under the class bound, such as upper bound?",
                            "Which broader categories encompass upper bound as a member?"
                        ]
                    },
                    {
                        "axiom": "upper bound propertyRestrictions [has-value exactly 1 xsd:integer]",
                        "CQ": [
                            "Is it required that an upper bound always has exactly one property restriction with a value of type integer?",
                            "Can an upper bound possess more than one property restriction assigned to integer values?",
                            "Are multiple xsd:integer values allowed for the property restriction in the context of an upper bound?"
                        ]
                    }
                ]
            },
            "lower bound": {
                "axiom": {
                    "subClassOf": [
                        "bound"
                    ],
                    "propertyRestrictions": [
                        "[has-value exactly 1 xsd:integer]"
                    ]
                },
                "description": "lower bound is defined as a subclass of bound, representing a specific type of bound that is associated with exactly one integer value via the has-value property. This restriction ensures that each lower bound instance is uniquely identified by a single integer.",
                "CQ": [
                    {
                        "axiom": "lower bound subClassOf bound",
                        "CQ": [
                            "Is lower bound categorized as a type of bound?",
                            "Which specific subclasses fall under the general class bound?",
                            "What broader classes encompass lower bound?"
                        ]
                    },
                    {
                        "axiom": "lower bound propertyRestrictions [has-value exactly 1 xsd:integer]",
                        "CQ": [
                            "Is there a requirement that lower bound has exactly one propertyRestriction with a value of type xsd:integer?",
                            "Can an instance of lower bound have more than one propertyRestriction with a value of type xsd:integer?",
                            "Is it possible for lower bound to have no propertyRestriction with a value of type xsd:integer?"
                        ]
                    }
                ]
            },
            "index upperbound": {
                "axiom": {
                    "subClassOf": [
                        "bound"
                    ],
                    "propertyRestrictions": [
                        "[has-value exactly 1 xsd:integer]"
                    ]
                },
                "description": "index upperbound is defined as a subclass of bound, characterized by the property restriction that it must have exactly one value of type xsd:integer. This ensures that any instance of index upperbound represents a unique integer value serving as an upper bound within an indexing context.",
                "CQ": [
                    {
                        "axiom": "index upperbound subClassOf bound",
                        "CQ": [
                            "Is bound a superclass encompassing index upperbound?",
                            "Which subclasses does bound include, such as index upperbound?",
                            "To what broader categories does index upperbound belong?"
                        ]
                    },
                    {
                        "axiom": "index upperbound propertyRestrictions [has-value exactly 1 xsd:integer]",
                        "CQ": [
                            "Is an index upperbound characterized by having exactly one value of type xsd:integer for its property restrictions?",
                            "Can an index upperbound have more than one xsd:integer value as a property restriction?",
                            "Must the property restriction for index upperbound be limited to a single xsd:integer value?"
                        ]
                    }
                ]
            },
            "index lowerbound": {
                "axiom": {
                    "subClassOf": [
                        "bound"
                    ],
                    "propertyRestrictions": [
                        "[has-value exactly 1 xsd:integer]"
                    ]
                },
                "description": "index lowerbound is a subclass of bound, representing a specific type of boundary. It is characterized by the property restriction that it must have exactly one value of type xsd:integer, indicating the precise lower limit or starting point within an index or range. This formalization ensures that each instance of index lowerbound uniquely defines a single integer value as its boundary.",
                "CQ": [
                    {
                        "axiom": "index lowerbound subClassOf bound",
                        "CQ": [
                            "Does index lowerbound fall under the category of bound?",
                            "What concepts are classified as subclasses of bound, such as index lowerbound?",
                            "Which broader categories include index lowerbound as a member?"
                        ]
                    },
                    {
                        "axiom": "index lowerbound propertyRestrictions [has-value exactly 1 xsd:integer]",
                        "CQ": [
                            "Is each instance of index required to have the property lowerbound with exactly one integer value?",
                            "Can an index possess more than one lowerbound value assigned as an integer?",
                            "Is it necessary that the lowerbound property of index refers to one and only one xsd:integer?"
                        ]
                    }
                ]
            },
            "character datatype": {
                "axiom": {
                    "subClassOf": [
                        "non-numeric unordered primitive datatype"
                    ],
                    "disjointWith": [
                        "discrete datatype",
                        "boolean datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some exact]",
                        "[has_operation some Equal:character]",
                        "[has_identifier some character-set identifier]"
                    ]
                },
                "description": "character datatype is defined as a subclass of non-numeric unordered primitive datatype. It is disjoint with discrete datatype and boolean datatype, ensuring that no datatype can be both a character datatype and either of those types. Members of the character datatype class are characterized by possessing at least one exact quality, supporting the Equal operation restricted to characters, and being associated with at least one character-set identifier. This formalization captures the essential properties of character datatypes, which are used to represent single text characters from specific character sets and are distinct from numeric or logical datatypes.",
                "CQ": [
                    {
                        "axiom": "character datatype subClassOf non-numeric unordered primitive datatype",
                        "CQ": [
                            "Does character datatype fall under the broader classification of non-numeric unordered primitive datatype?",
                            "Which primitive datatypes are specified as subclasses of non-numeric unordered primitive datatype?",
                            "What general datatype categories encompass character datatype?"
                        ]
                    },
                    {
                        "axiom": "character datatype disjointWith discrete datatype",
                        "CQ": [
                            "What classifies a datatype as either character or discrete within the ontology?",
                            "Is it allowed for a datatype to be both categorized as character and discrete?",
                            "Which datatype categories are specified as mutually exclusive with character datatype?"
                        ]
                    },
                    {
                        "axiom": "character datatype disjointWith boolean datatype",
                        "CQ": [
                            "How does the ontology differentiate between character datatype and boolean datatype?",
                            "Is it allowed for a datatype to be both a character datatype and a boolean datatype?",
                            "Which datatypes are defined as mutually exclusive with boolean datatype?"
                        ]
                    },
                    {
                        "axiom": "character datatype propertyRestrictions [has_quality some exact]",
                        "CQ": [
                            "Is it required that every character has at least one quality described as 'exact'?",
                            "Must a character necessarily exhibit the property 'has_quality' with the value 'exact' at least once?",
                            "Does the character class ensure that all of its instances possess some exact quality?"
                        ]
                    },
                    {
                        "axiom": "character datatype propertyRestrictions [has_operation some Equal:character]",
                        "CQ": [
                            "Is every character required to have at least one operation of type 'Equal'?",
                            "Does the ontology define that there exists an 'Equal' operation associated with each character via the 'has_operation' property?",
                            "Can a character exist without being linked to an 'Equal' operation through 'has_operation'?"
                        ]
                    },
                    {
                        "axiom": "character datatype propertyRestrictions [has_identifier some character-set identifier]",
                        "CQ": [
                            "Must every character have at least one identifier from some character-set?",
                            "Is it required that a character is associated with an identifier belonging to a specific character-set?",
                            "Can a character exist without possessing any identifier corresponding to a character-set?"
                        ]
                    }
                ]
            },
            "discrete datatype": {
                "axiom": {
                    "subClassOf": [
                        "non-numeric unordered primitive datatype"
                    ],
                    "disjointWith": [
                        "boolean datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_member some discrete-value-list]",
                        "[has_operation some Equal:discrete]",
                        "[has_quality some exact]"
                    ]
                },
                "description": "discrete datatype is a subclass of non-numeric unordered primitive datatype, and it is explicitly disjoint with boolean datatype, ensuring that no individual can be both a discrete datatype and a boolean datatype. Members of this class must have at least one member from a discrete-value-list, support at least the equality operation (Equal:discrete), and possess the quality of exactness. This formalization captures the distinct, non-numeric, unordered nature of discrete datatypes, characterized by well-defined, separate values and an emphasis on precise equality comparisons.",
                "CQ": [
                    {
                        "axiom": "discrete datatype subClassOf non-numeric unordered primitive datatype",
                        "CQ": [
                            "Is discrete datatype classified under non-numeric unordered primitive datatype?",
                            "Which datatypes are categorized as subtypes of non-numeric unordered primitive datatype?",
                            "What broader datatype classes include discrete datatype as a subtype?"
                        ]
                    },
                    {
                        "axiom": "discrete datatype disjointWith boolean datatype",
                        "CQ": [
                            "How does the ontology define the interaction between discrete datatypes and boolean datatypes?",
                            "Is it allowed for a datatype to be both classified as discrete and as boolean?",
                            "Which datatype groups, besides boolean datatype, are specified as disjoint with discrete datatype?"
                        ]
                    },
                    {
                        "axiom": "discrete datatype propertyRestrictions [has_member some discrete-value-list]",
                        "CQ": [
                            "Is it required for a discrete datatype property restriction to have at least one member from the discrete value list?",
                            "Does every instance with a discrete datatype property restriction necessarily include some values from the discrete-value-list?",
                            "Can an entity with a discrete datatype property restriction exist without having any values specified in the discrete-value-list?"
                        ]
                    },
                    {
                        "axiom": "discrete datatype propertyRestrictions [has_operation some Equal:discrete]",
                        "CQ": [
                            "Is it required that an entity with discrete datatype property restrictions must have at least one operation classified as 'Equal:discrete'?",
                            "Can a discrete datatype property restriction exist without being related to an 'Equal:discrete' operation through the has_operation property?",
                            "Does every instance with discrete datatype property restrictions necessarily possess some 'has_operation' relation to the 'Equal:discrete' operation?"
                        ]
                    },
                    {
                        "axiom": "discrete datatype propertyRestrictions [has_quality some exact]",
                        "CQ": [
                            "Is every instance with the discrete datatype required to possess at least one 'has_quality' relationship to 'exact'?",
                            "Can an entity classified by the discrete datatype lack any association via 'has_quality' to 'exact'?",
                            "Must the discrete datatype always be described by the property 'has_quality' with value 'exact'?"
                        ]
                    }
                ]
            },
            "boolean datatype": {
                "axiom": {
                    "subClassOf": [
                        "non-numeric unordered primitive datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some non-ordered]",
                        "[has_quality some non-numeric]",
                        "[has_quality some exact]",
                        "[has_operation some Not:boolean]",
                        "[has_operation some And:boolean]",
                        "[has_operation some Or:boolean]",
                        "[has_operation some Equal:boolean]"
                    ]
                },
                "description": "boolean datatype is defined as a subclass of non-numeric unordered primitive datatype. It has qualities that are non-ordered, non-numeric, and exact, indicating that boolean values are discrete, precise, and lack inherent ordering or numeric magnitude. Instances of boolean datatype support specific logical operations, including Not, And, Or, and Equal, with all operations yielding boolean results. This formalization captures the core characteristics of the boolean datatype: a primitive type that represents values with two alternatives (typically true and false), distinct from numeric or ordered datatypes, and amenable to fundamental logic operations.",
                "CQ": [
                    {
                        "axiom": "boolean datatype subClassOf non-numeric unordered primitive datatype",
                        "CQ": [
                            "Is boolean datatype classified under the category of non-numeric unordered primitive datatypes?",
                            "Which datatypes are subclasses of non-numeric unordered primitive datatype, and does this list include boolean datatype?",
                            "To which higher-level categories does boolean datatype belong within the datatype hierarchy?"
                        ]
                    },
                    {
                        "axiom": "boolean datatype propertyRestrictions [has_quality some non-ordered]",
                        "CQ": [
                            "Is every instance with the property 'has_quality' necessarily associated with at least one 'non-ordered' value?",
                            "Does the presence of 'has_quality' for an entity imply it must exhibit some form of 'non-ordered' quality?",
                            "Can an entity qualify if it does not have the 'has_quality' property linked to a 'non-ordered' value?"
                        ]
                    },
                    {
                        "axiom": "boolean datatype propertyRestrictions [has_quality some non-numeric]",
                        "CQ": [
                            "Must everything with the 'has_quality' property possess at least one non-numeric value?",
                            "Is it required that any instance with a 'has_quality' relationship be associated with a non-numeric quality?",
                            "Can there be an entity related by 'has_quality' that does not have a non-numeric quality?"
                        ]
                    },
                    {
                        "axiom": "boolean datatype propertyRestrictions [has_quality some exact]",
                        "CQ": [
                            "Must every instance with a 'has_quality' property possess at least one 'exact' quality?",
                            "Is it required that entities described by this class have the 'has_quality' relation to some individual of type 'exact'?",
                            "Can any instance of this class lack the 'has_quality' property linking it to an 'exact' quality?"
                        ]
                    },
                    {
                        "axiom": "boolean datatype propertyRestrictions [has_operation some Not:boolean]",
                        "CQ": [
                            "Is it required for an entity with the 'has_operation' property to have at least one instance where the value is not boolean?",
                            "Can an entity possess the 'has_operation' property only if its value is other than boolean?",
                            "Are there restrictions that exclude boolean values for the 'has_operation' property on this entity?"
                        ]
                    },
                    {
                        "axiom": "boolean datatype propertyRestrictions [has_operation some And:boolean]",
                        "CQ": [
                            "Is it required that an entity with the has_operation property is associated with the boolean value 'And'?",
                            "Must every instance with a has_operation property necessarily involve the 'And' boolean operation?",
                            "Can an entity be considered valid if its has_operation property is linked to a boolean value other than 'And'?"
                        ]
                    },
                    {
                        "axiom": "boolean datatype propertyRestrictions [has_operation some Or:boolean]",
                        "CQ": [
                            "Is it necessary for an entity in this class to have the 'has_operation' property with some value of type boolean?",
                            "Can the 'has_operation' property associated with this class ever have a value that is not of boolean type?",
                            "Does membership in this class imply the existence of at least one 'has_operation' relationship with a boolean value?"
                        ]
                    },
                    {
                        "axiom": "boolean datatype propertyRestrictions [has_operation some Equal:boolean]",
                        "CQ": [
                            "Is it required that boolean datatype entities must participate in at least one 'has_operation' relation with an individual from the class Equal?",
                            "Are all boolean datatype instances constrained to exhibit a 'has_operation' link to something classified as Equal?",
                            "Must any instance defined by boolean always possess a 'has_operation' association with a member of Equal?"
                        ]
                    }
                ]
            },
            "defined generator": {
                "axiom": {
                    "subClassOf": [
                        "datatype generator"
                    ],
                    "propertyRestrictions": [
                        "[is_member_of some defined datatype]"
                    ]
                },
                "description": "defined generator is a subclass of datatype generator. Every instance of defined generator is required to be associated with at least one defined datatype through the property is_member_of. This formalization ensures that defined generators are specifically linked to defined datatypes within the ontology.",
                "CQ": [
                    {
                        "axiom": "defined generator subClassOf datatype generator",
                        "CQ": [
                            "Is every defined generator classified under the datatype generator category?",
                            "What specific types belong to the broader class of datatype generator, such as defined generator?",
                            "Which overarching groups does defined generator fall within according to the classification?"
                        ]
                    },
                    {
                        "axiom": "defined generator propertyRestrictions [is_member_of some defined datatype]",
                        "CQ": [
                            "Is it necessary for a generator to have the property 'is_member_of' with at least one defined datatype?",
                            "Can a generator exist without being a member of any defined datatype?",
                            "Does a generator always possess an association to some defined datatype through the 'is_member_of' property?"
                        ]
                    }
                ]
            },
            "generated datatype generator": {
                "axiom": {
                    "subClassOf": [
                        "datatype generator"
                    ],
                    "equivalentClass": [
                        "(non-aggregate generator or aggregate generator)"
                    ],
                    "propertyRestrictions": [
                        "[is_member_of some generated datatype]"
                    ]
                },
                "description": "generated datatype generator is defined as a subclass of datatype generator and is considered equivalent to either a non-aggregate generator or an aggregate generator. Members of this class must be associated, via the is_member_of property, with some generated datatype. The class is also described by the synonym \"datatype constructor.\"",
                "CQ": [
                    {
                        "axiom": "generated datatype generator subClassOf datatype generator",
                        "CQ": [
                            "Is generated datatype generator an instance of the broader datatype generator category?",
                            "What other specific kinds fall under the datatype generator category in addition to generated datatype generator?",
                            "Which higher-level groups include generated datatype generator as a member?"
                        ]
                    },
                    {
                        "axiom": "generated datatype generator equivalentClass (non-aggregate generator or aggregate generator)",
                        "CQ": [
                            "Is a generated datatype generator defined as either a non-aggregate generator or an aggregate generator?",
                            "Are all generated datatype generators necessarily instances of non-aggregate generator or aggregate generator, with no additional members?",
                            "Is a generated datatype generator logically equivalent to the union of non-aggregate generator and aggregate generator?"
                        ]
                    },
                    {
                        "axiom": "generated datatype generator propertyRestrictions [is_member_of some generated datatype]",
                        "CQ": [
                            "Is it required that an entity classified under 'generated datatype' must be a member of at least one 'generated datatype' instance?",
                            "Does every instance of 'generated datatype' participate in the 'is_member_of' relationship with some instance of 'generated datatype'?",
                            "Can a 'generated datatype' exist without being linked via 'is_member_of' to any other 'generated datatype'?"
                        ]
                    }
                ]
            },
            "subtype generator": {
                "axiom": {
                    "subClassOf": [
                        "datatype generator"
                    ]
                },
                "description": "subtype generator is defined as a subclass of datatype generator, indicating that every instance of subtype generator is also an instance of datatype generator. This classification specifies that subtype generators operate within the broader framework of datatype generators but may provide more specialized or refined functionality. No additional disjointness or property restrictions are specified.",
                "CQ": [
                    {
                        "axiom": "subtype generator subClassOf datatype generator",
                        "CQ": [
                            "Is subtype generator an example of datatype generator?",
                            "Which generators are classified under datatype generator, including subtype generator?",
                            "What general generator categories encompass subtype generator?"
                        ]
                    }
                ]
            },
            "discrete base type": {
                "axiom": {
                    "subClassOf": [
                        "base type"
                    ],
                    "disjointWith": [
                        "real base type"
                    ],
                    "propertyRestrictions": [
                        "[role_of some discrete datatype]"
                    ]
                },
                "description": "discrete base type is defined as a subclass of base type, and is disjoint with real base type, ensuring that no individual can belong to both classes simultaneously. Members of this class participate in the role_of relationship with at least one discrete datatype, meaning that every discrete base type must be associated with some discrete datatype. This formalization distinguishes discrete base types from real base types and characterizes them by their association with discrete datatypes.",
                "CQ": [
                    {
                        "axiom": "discrete base type subClassOf base type",
                        "CQ": [
                            "Is discrete base type classified under the broader category of base type?",
                            "Which types are more specific instances of base type, such as discrete base type?",
                            "What broader type categories does discrete base type fall within?"
                        ]
                    },
                    {
                        "axiom": "discrete base type disjointWith real base type",
                        "CQ": [
                            "What is the logical separation between discrete base type and real base type in the ontology?",
                            "Can a data type be defined as both discrete and real simultaneously?",
                            "Which base types are explicitly declared as disjoint with real base type?"
                        ]
                    },
                    {
                        "axiom": "discrete base type propertyRestrictions [role_of some discrete datatype]",
                        "CQ": [
                            "Is every instance of discrete base type required to fulfill the role_of property with at least one discrete datatype?",
                            "Does discrete base type necessarily participate in the role_of relationship with some member of the discrete datatype class?",
                            "Are there any instances of discrete base type that do not have a role_of relation to any discrete datatype?"
                        ]
                    }
                ]
            },
            "real base type": {
                "axiom": {
                    "subClassOf": [
                        "base type"
                    ],
                    "propertyRestrictions": [
                        "[role_of some real datatype]"
                    ]
                },
                "description": "real base type is defined as a subclass of base type, with the additional restriction that every real base type must serve as the role_of some real datatype. This means that any individual belonging to real base type participates in the role_of property relation to at least one real datatype, thereby explicitly connecting real base type to the real datatype concept within the ontology structure.",
                "CQ": [
                    {
                        "axiom": "real base type subClassOf base type",
                        "CQ": [
                            "Does real base type fall under the classification of base type?",
                            "Which types are directly specified as specializations of base type, such as real base type?",
                            "What is the immediate superclass of real base type within the type hierarchy?"
                        ]
                    },
                    {
                        "axiom": "real base type propertyRestrictions [role_of some real datatype]",
                        "CQ": [
                            "Is it necessary for a real base type to have the property 'role_of' with at least one real datatype?",
                            "Which kinds of real datatypes must be associated with real base types through the 'role_of' property?",
                            "Can a real base type exist without having a 'role_of' relationship to any real datatype?"
                        ]
                    }
                ]
            },
            "integer base datatype": {
                "axiom": {
                    "subClassOf": [
                        "base type"
                    ],
                    "propertyRestrictions": [
                        "[role_of some integer datatype]"
                    ]
                },
                "description": "integer base datatype is defined as a subclass of base type and is constrained by the axiom that it must play the role of some integer datatype. This means that every instance of integer base datatype is a specific kind of base type that is characterized by being related to at least one integer datatype through the role_of property.",
                "CQ": [
                    {
                        "axiom": "integer base datatype subClassOf base type",
                        "CQ": [
                            "Is integer base datatype categorized under the broader base type classification?",
                            "Which datatypes are more specific than base type, such as integer base datatype?",
                            "To which higher-level types does integer base datatype conceptually pertain?"
                        ]
                    },
                    {
                        "axiom": "integer base datatype propertyRestrictions [role_of some integer datatype]",
                        "CQ": [
                            "Is it required that the base datatype 'integer' has at least one role filled by an integer value?",
                            "Does every instance of the base datatype 'integer' necessarily possess the property 'role_of' relating it to an integer value?",
                            "Can an instance of the base datatype 'integer' exist without the property 'role_of' connecting it to an integer?"
                        ]
                    }
                ]
            },
            "record of boolean datatype": {
                "axiom": {
                    "subClassOf": [
                        "record (tuple) datatype"
                    ],
                    "disjointWith": [
                        "record of real datatype",
                        "record of discrete datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_member some boolean field-list]"
                    ]
                },
                "description": "record of boolean datatype is a subclass of record (tuple) datatype, disjoint from both record of real datatype and record of discrete datatype, ensuring that no individual can belong to any two of these classes simultaneously. Members of this class are characterized by having at least one member that is a boolean field-list, meaning each record must include at least one field of boolean type. This enforces that the records grouped under this class are distinguished by containing boolean data fields.",
                "CQ": [
                    {
                        "axiom": "record of boolean datatype subClassOf record (tuple) datatype",
                        "CQ": [
                            "Is record of boolean datatype recognized as a specific kind of record (tuple) datatype?",
                            "Which data types fall under the category of record (tuple) datatype, including those that handle booleans?",
                            "What broader data type hierarchies encompass the record of boolean datatype?"
                        ]
                    },
                    {
                        "axiom": "record of boolean datatype disjointWith record of real datatype",
                        "CQ": [
                            "What logical separation is established between records of boolean datatype and records of real datatype within the ontology?",
                            "Is it possible for a record to simultaneously belong to both boolean and real datatypes?",
                            "Which record types are declared as disjoint with those of real datatype?"
                        ]
                    },
                    {
                        "axiom": "record of boolean datatype disjointWith record of discrete datatype",
                        "CQ": [
                            "What ontological separation exists between records of boolean datatype and records of discrete datatype?",
                            "Is it allowable for a single record to possess both boolean and discrete datatypes?",
                            "Which other record types are formally incompatible with records of discrete datatype?"
                        ]
                    },
                    {
                        "axiom": "record of boolean datatype propertyRestrictions [has_member some boolean field-list]",
                        "CQ": [
                            "Is it required that a record includes at least one value for the field 'has_member' and that this value is of boolean type?",
                            "Must every record assign the 'has_member' property exclusively to fields of type boolean?",
                            "Can a record instance exist without providing a boolean value for the 'has_member' property?"
                        ]
                    }
                ]
            },
            "record of real datatype": {
                "axiom": {
                    "subClassOf": [
                        "record (tuple) datatype"
                    ],
                    "disjointWith": [
                        "record of discrete datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_member some real field-list]"
                    ]
                },
                "description": "record of real datatype is defined as a subclass of record (tuple) datatype, and is explicitly disjoint with record of discrete datatype, ensuring that no individual can belong to both categories. Members of this class are characterized by the presence of at least one member field (has_member) that is of real type within its field-list. This constrains records in this class to contain real-valued data fields, distinguishing them from records composed entirely of discrete datatypes.",
                "CQ": [
                    {
                        "axiom": "record of real datatype subClassOf record (tuple) datatype",
                        "CQ": [
                            "Is the record of real datatype classified under the general record (tuple) datatype category?",
                            "Which datatypes are narrower concepts encompassed by record (tuple) datatype, such as record of real datatype?",
                            "To which parent datatype categories does record of real datatype belong?"
                        ]
                    },
                    {
                        "axiom": "record of real datatype disjointWith record of discrete datatype",
                        "CQ": [
                            "How does the ontology differentiate between records of real datatype and records of discrete datatype?",
                            "Is there any instance that can be considered both a record of real datatype and a record of discrete datatype?",
                            "Which other record types are formally specified as disjoint with records of discrete datatype?"
                        ]
                    },
                    {
                        "axiom": "record of real datatype propertyRestrictions [has_member some real field-list]",
                        "CQ": [
                            "Is it required that a record in this context must have at least one member associated with the real field-list through the has_member property?",
                            "Can a record exist without being related to any real field-list via the has_member property?",
                            "Does every record necessarily participate in some has_member relationship with an instance of the real field-list?"
                        ]
                    }
                ]
            },
            "record of primitives datatype": {
                "axiom": {
                    "subClassOf": [
                        "record (tuple) datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_member some primitive field-list]"
                    ]
                },
                "description": "record of primitives datatype is defined as a subclass of record (tuple) datatype. Members of this class are characterized by the property restriction that they must have at least one member that is a primitive field-list. This formalization ensures that any instance of record of primitives datatype represents a structured record whose fields are all of primitive types.",
                "CQ": [
                    {
                        "axiom": "record of primitives datatype subClassOf record (tuple) datatype",
                        "CQ": [
                            "Is record of primitives datatype encompassed within the record (tuple) datatype category?",
                            "Which datatypes are specialized forms of record (tuple) datatype, including record of primitives datatype?",
                            "What broader datatype categories does record of primitives datatype fall under?"
                        ]
                    },
                    {
                        "axiom": "record of primitives datatype propertyRestrictions [has_member some primitive field-list]",
                        "CQ": [
                            "Is every record of primitives required to have at least one member that is a primitive listed in the field list?",
                            "Does the definition of a record of primitives entail that it must possess a 'has_member' relationship with at least one entity in the primitive field-list?",
                            "Can a record of primitives exist without having the 'has_member' property connecting it to an element from the primitive field-list?"
                        ]
                    }
                ]
            },
            "record of discrete datatype": {
                "axiom": {
                    "subClassOf": [
                        "record (tuple) datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_member some discrete field-list]"
                    ]
                },
                "description": "record of discrete datatype is a subclass of record (tuple) datatype, characterized by the requirement that it must have at least one member drawn from a discrete field-list. This ensures that instances of this class represent tuple datatypes whose components include one or more fields with discrete (distinct, countable) values.",
                "CQ": [
                    {
                        "axiom": "record of discrete datatype subClassOf record (tuple) datatype",
                        "CQ": [
                            "Is record of discrete datatype a member of the broader class of record (tuple) datatype?",
                            "What are the more specialized datatypes found within the category record (tuple) datatype, including record of discrete datatype?",
                            "Which higher-level datatype groups does record of discrete datatype fall under?"
                        ]
                    },
                    {
                        "axiom": "record of discrete datatype propertyRestrictions [has_member some discrete field-list]",
                        "CQ": [
                            "Must every record of discrete datatype necessarily have at least one has_member relationship to an entity within discrete field-list?",
                            "Is it obligatory for a record of discrete datatype to include a member from the discrete field-list through the has_member property?",
                            "Can a record of discrete datatype exist without the has_member property linking it to some element of the discrete field-list?"
                        ]
                    }
                ]
            },
            "labeled dataset record datatype": {
                "axiom": {
                    "subClassOf": [
                        "record (tuple) datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_member exactly 1 labeled dataset field-list]"
                    ]
                },
                "description": "labeled dataset record datatype is defined as a subclass of record (tuple) datatype. Each instance must have exactly one member, specified by the has_member property, which must be a labeled dataset field-list. This ensures that every labeled dataset record datatype represents a tuple structure with a precisely defined schema for its contents.",
                "CQ": [
                    {
                        "axiom": "labeled dataset record datatype subClassOf record (tuple) datatype",
                        "CQ": [
                            "Is labeled dataset record datatype a more specific form of record (tuple) datatype?",
                            "What types of datatypes are classified as subclasses under record (tuple) datatype?",
                            "Which general datatype categories include labeled dataset record datatype?"
                        ]
                    },
                    {
                        "axiom": "labeled dataset record datatype propertyRestrictions [has_member exactly 1 labeled dataset field-list]",
                        "CQ": [
                            "Is it required that a labeled dataset record contains exactly one has_member property referring to a labeled dataset field-list?",
                            "Can a labeled dataset record be associated with more than one labeled dataset field-list via has_member?",
                            "Does a labeled dataset record exist if it lacks the has_member relationship with a labeled dataset field-list?"
                        ]
                    }
                ]
            },
            "unlabeled dataset record datatype": {
                "axiom": {
                    "subClassOf": [
                        "record (tuple) datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_member some unlabeled dataset field-list]"
                    ]
                },
                "description": "unlabeled dataset record datatype is defined as a subclass of record (tuple) datatype. Members of this class are characterized by the presence of at least one has_member relationship to an unlabeled dataset field-list, meaning each record contains a list of fields but without associated labels. This structure is suitable for representing data records in datasets where attribute names are absent.",
                "CQ": [
                    {
                        "axiom": "unlabeled dataset record datatype subClassOf record (tuple) datatype",
                        "CQ": [
                            "Does unlabeled dataset record datatype fall under the category of record (tuple) datatype?",
                            "Which datatypes are classified as more specific types than record (tuple) datatype, such as unlabeled dataset record datatype?",
                            "What are the general datatype categories that encompass unlabeled dataset record datatype?"
                        ]
                    },
                    {
                        "axiom": "unlabeled dataset record datatype propertyRestrictions [has_member some unlabeled dataset field-list]",
                        "CQ": [
                            "Does every unlabeled dataset record necessarily have at least one has_member relationship to an unlabeled dataset field-list?",
                            "Is it required for unlabeled dataset records to include some member from the unlabeled dataset field-list?",
                            "Can an unlabeled dataset record exist without being related via has_member to any unlabeled dataset field-list?"
                        ]
                    }
                ]
            },
            "date-time unit": {
                "axiom": {
                    "subClassOf": [
                        "label"
                    ]
                },
                "description": "date-time unit is defined as a subclass of label, indicating that it represents a specific type of label used to denote units of time such as seconds, minutes, or hours in the context of date and time. No additional constraints or disjointness are specified, so its primary distinguishing feature is its specialization from the broader category of label.",
                "CQ": [
                    {
                        "axiom": "date-time unit subClassOf label",
                        "CQ": [
                            "Is date-time unit encompassed within the hierarchy of label?",
                            "Which concept categories does date-time unit derive from, including label?",
                            "What specific subclasses are classified under label, such as date-time unit?"
                        ]
                    }
                ]
            },
            "set of discrete datatype": {
                "axiom": {
                    "subClassOf": [
                        "set datatype"
                    ],
                    "disjointWith": [
                        "set of real datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_member some discrete base type]"
                    ]
                },
                "description": "set of discrete datatype is defined as a subclass of set datatype, representing collections where each member belongs to a discrete base type (such as integers or other countable values). This class is explicitly disjoint from set of real datatype, ensuring that no instance can simultaneously be a set of both discrete and real datatypes. The axiom requires that every member of a set of discrete datatype must be of a discrete base type, emphasizing its use for finite or countably infinite elements.",
                "CQ": [
                    {
                        "axiom": "set of discrete datatype subClassOf set datatype",
                        "CQ": [
                            "Is every set of discrete datatype also categorized as a set datatype?",
                            "Which types are direct specializations under set datatype, such as set of discrete datatype?",
                            "To which general datatype categories does set of discrete datatype belong?"
                        ]
                    },
                    {
                        "axiom": "set of discrete datatype disjointWith set of real datatype",
                        "CQ": [
                            "What logical separation does the ontology specify between sets of discrete and sets of real datatypes?",
                            "Is any datatype set classified simultaneously as both discrete and real within the ontology?",
                            "Which other sets of datatypes are explicitly defined as disjoint with sets of real datatypes?"
                        ]
                    },
                    {
                        "axiom": "set of discrete datatype propertyRestrictions [has_member some discrete base type]",
                        "CQ": [
                            "Must every instance in the set have at least one member of the specified discrete base type through the property 'has_member'?",
                            "Is it required that all elements related by 'has_member' belong to the discrete base type defined for the set?",
                            "Can any element in the set have a 'has_member' relationship to a value outside the defined discrete base type?"
                        ]
                    }
                ]
            },
            "set of real datatype": {
                "axiom": {
                    "subClassOf": [
                        "set datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_member some real base type]"
                    ]
                },
                "description": "set of real datatype is defined as a subclass of set datatype, where every instance must contain at least one member of the real base type. This means that any set classified under this class necessarily includes real numbers among its elements, distinguishing it from other datatype sets whose members may be of different types.",
                "CQ": [
                    {
                        "axiom": "set of real datatype subClassOf set datatype",
                        "CQ": [
                            "Is the set of real datatype encompassed within the set datatype category?",
                            "Which datatype classes are direct specializations of set datatype, such as set of real datatype?",
                            "To which datatype hierarchies does set of real datatype belong?"
                        ]
                    },
                    {
                        "axiom": "set of real datatype propertyRestrictions [has_member some real base type]",
                        "CQ": [
                            "Is it required that the set includes at least one member of the real base type via the has_member property?",
                            "Can any instance of the set exist without having a has_member relationship to a real base type individual?",
                            "Does the definition of the set guarantee that there is at least one has_member property pointing to an individual of the real base type?"
                        ]
                    }
                ]
            },
            "set of integer datatype": {
                "axiom": {
                    "subClassOf": [
                        "set datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_member some integer base datatype]"
                    ]
                },
                "description": "set of integer datatype is defined as a subclass of set datatype. Each instance of this class is constrained by the requirement that it has members, all of which are from the integer base datatype. This ensures that any individual classified as set of integer datatype can only contain integers as its elements.",
                "CQ": [
                    {
                        "axiom": "set of integer datatype subClassOf set datatype",
                        "CQ": [
                            "Is set datatype a broader category that encompasses set of integer datatype?",
                            "Which datatypes are more specific than set datatype, such as set of integer datatype?",
                            "What general datatype groupings include set of integer datatype?"
                        ]
                    },
                    {
                        "axiom": "set of integer datatype propertyRestrictions [has_member some integer base datatype]",
                        "CQ": [
                            "Is it required for a set to include at least one member with an integer base datatype?",
                            "Must every instance of the set have the 'has_member' property assigned to some value of type integer?",
                            "Can a set of integer datatype propertyRestrictions exist without containing an integer as a member?"
                        ]
                    }
                ]
            },
            "aggregate datatype": {
                "axiom": {
                    "subClassOf": [
                        "generated datatype"
                    ],
                    "disjointWith": [
                        "non-aggregate datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_member some aggregate generator]"
                    ]
                },
                "description": "aggregate datatype is defined as a subclass of generated datatype and is explicitly disjoint with non-aggregate datatype, ensuring that no individual can be both an aggregate and a non-aggregate datatype. It is characterized by having at least one member that is an aggregate generator (has_member some aggregate generator). Commonly referred to as a \"structured datatype,\" this class captures datatypes that are composed of multiple components or members rather than being atomic.",
                "CQ": [
                    {
                        "axiom": "aggregate datatype subClassOf generated datatype",
                        "CQ": [
                            "Is aggregate datatype classified as a more specific type under generated datatype?",
                            "Which datatypes are narrower than generated datatype, such as aggregate datatype?",
                            "To what broader datatype category does aggregate datatype belong?"
                        ]
                    },
                    {
                        "axiom": "aggregate datatype disjointWith non-aggregate datatype",
                        "CQ": [
                            "How does the ontology differentiate between aggregate datatypes and non-aggregate datatypes?",
                            "Is there any datatype that belongs to both aggregate and non-aggregate categories?",
                            "Which datatype categories are formally recognized as distinct from aggregate datatypes?"
                        ]
                    },
                    {
                        "axiom": "aggregate datatype propertyRestrictions [has_member some aggregate generator]",
                        "CQ": [
                            "Is it required for an aggregate to have at least one member that is an aggregate generator?",
                            "Does every aggregate necessarily include some entity related by 'has_member' to the class aggregate generator?",
                            "Can an aggregate exist without having a 'has_member' relationship to any aggregate generator?"
                        ]
                    }
                ]
            },
            "non-aggregate datatype": {
                "axiom": {
                    "subClassOf": [
                        "generated datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_member some non-aggregate generator]"
                    ]
                },
                "description": "non-aggregate datatype is defined as a subclass of generated datatype. All members of this class are characterized by the property restriction that they must have at least one member (has_member) that is a non-aggregate generator. This formalization ensures that any non-aggregate datatype is generated through or associated with at least one non-aggregate generator, distinguishing it from other types of generated datatypes.",
                "CQ": [
                    {
                        "axiom": "non-aggregate datatype subClassOf generated datatype",
                        "CQ": [
                            "Does every non-aggregate datatype belong under the category of generated datatype?",
                            "Which datatypes are explicitly classified as specializations of generated datatype?",
                            "To what higher-level datatype categories does non-aggregate datatype correspond?"
                        ]
                    },
                    {
                        "axiom": "non-aggregate datatype propertyRestrictions [has_member some non-aggregate generator]",
                        "CQ": [
                            "Is it required that a non-aggregate must have at least one member that is a non-aggregate generator?",
                            "Can a non-aggregate exist without being associated with any non-aggregate generator through the has_member property?",
                            "Does every instance of non-aggregate have a has_member relationship with some entity classified as a non-aggregate generator?"
                        ]
                    }
                ]
            },
            "enumerated datatype": {
                "axiom": {
                    "subClassOf": [
                        "non-numeric ordered primitive datatype"
                    ],
                    "disjointWith": [
                        "date and time datatype",
                        "ordinal datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_operation some Equal:enumerated]",
                        "[has_member some enumerated-value-list]",
                        "[has_operation some Successor:enumerated]",
                        "[has_quality some bounded]",
                        "[has_operation some InOrder:enumerated]",
                        "[has_quality some exact]"
                    ]
                },
                "description": "enumerated datatype is defined as a subclass of non-numeric ordered primitive datatype, and is explicitly disjoint with both date and time datatype and ordinal datatype. As a discrete (synonymously, enumerated) datatype, it is characterized by having an explicit set of member values (enumerated-value-list) and supports specific operations such as equality checking (Equal:enumerated), successor determination (Successor:enumerated), and ordered comparison (InOrder:enumerated). Additionally, every enumerated datatype must possess qualities of being bounded (having finite limits) and exact (precisely defined), ensuring it only allows selection from a strictly defined, ordered set of non-numeric values.",
                "CQ": [
                    {
                        "axiom": "enumerated datatype subClassOf non-numeric ordered primitive datatype",
                        "CQ": [
                            "Does enumerated datatype fall under the category of non-numeric ordered primitive datatypes?",
                            "Which specific datatypes are specialized forms of non-numeric ordered primitive datatype, such as enumerated datatype?",
                            "What broader datatype classifications include enumerated datatype?"
                        ]
                    },
                    {
                        "axiom": "enumerated datatype disjointWith date and time datatype",
                        "CQ": [
                            "What is the formal distinction between the enumerated datatype and the date and time datatype within the ontology?",
                            "Is it allowed for a datatype to be classified as both enumerated and date and time?",
                            "Which datatypes are explicitly set as disjoint with the date and time datatype in this model?"
                        ]
                    },
                    {
                        "axiom": "enumerated datatype disjointWith ordinal datatype",
                        "CQ": [
                            "How does the ontology distinguish between enumerated datatypes and ordinal datatypes?",
                            "Is there any datatype that can be classified as both enumerated and ordinal?",
                            "Which datatypes are defined as mutually exclusive with ordinal datatypes?"
                        ]
                    },
                    {
                        "axiom": "enumerated datatype propertyRestrictions [has_operation some Equal:enumerated]",
                        "CQ": [
                            "Does the class propertyRestrictions require at least one 'has_operation' relation to an instance of Equal from the enumerated set?",
                            "Is it necessary that propertyRestrictions has an operation that is specifically Equal, according to the enumerated values?",
                            "Are instances of propertyRestrictions restricted to possessing only 'has_operation' relationships involving the Equal operation from the enumerated options?"
                        ]
                    },
                    {
                        "axiom": "enumerated datatype propertyRestrictions [has_member some enumerated-value-list]",
                        "CQ": [
                            "Are all members described by the enumerated-value-list necessarily present via the has_member property?",
                            "Is it possible for an entity related by has_member to include values not specified in the enumerated-value-list?",
                            "Does the restriction guarantee that has_member only relates to values included in the enumerated-value-list?"
                        ]
                    },
                    {
                        "axiom": "enumerated datatype propertyRestrictions [has_operation some Successor:enumerated]",
                        "CQ": [
                            "Is it required that any instance with a propertyRestriction on 'has_operation' must relate to at least one member of the 'Successor' enumeration?",
                            "Does the presence of a propertyRestriction on 'has_operation' necessarily imply association with a value specifically from the enumerated set 'Successor'?",
                            "Can propertyRestrictions specify the existence of a 'has_operation' relationship exclusively with members of the enumerated class 'Successor'?"
                        ]
                    },
                    {
                        "axiom": "enumerated datatype propertyRestrictions [has_quality some bounded]",
                        "CQ": [
                            "Does the enumerated datatype have at least one quality that is bounded?",
                            "Must every enumerated datatype include some relationship to a bounded quality?",
                            "Is it possible for an enumerated datatype not to possess any qualities unless one of them is bounded?"
                        ]
                    },
                    {
                        "axiom": "enumerated datatype propertyRestrictions [has_operation some InOrder:enumerated]",
                        "CQ": [
                            "Is it required that entities with propertyRestrictions have at least one has_operation value from the InOrder enumerated set?",
                            "Can propertyRestrictions include has_operation values that are not part of the InOrder enumerated type?",
                            "Does the presence of propertyRestrictions guarantee that the has_operation property is assigned to an individual in the InOrder enumeration?"
                        ]
                    },
                    {
                        "axiom": "enumerated datatype propertyRestrictions [has_quality some exact]",
                        "CQ": [
                            "Are entities in the enumerated datatype required to have at least one 'has_quality' relationship to 'exact'?",
                            "Is it necessary that any instance of the enumerated datatype possesses the property 'has_quality' with the value 'exact'?",
                            "Can an instance be part of the enumerated datatype if it lacks the 'has_quality' property relating to 'exact'?"
                        ]
                    }
                ]
            },
            "date and time datatype": {
                "axiom": {
                    "subClassOf": [
                        "non-numeric ordered primitive datatype"
                    ],
                    "disjointWith": [
                        "ordinal datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_operation some Extend:time&date]",
                        "[has_operation some Equal:time&date]",
                        "[has_operation some InOrder:time&date]",
                        "[has_member some date-time unit]",
                        "[has_operation some Difference:time&date]",
                        "[has_quality some unbounded]",
                        "[has_member some date-time radix]",
                        "[has_quality some exact]",
                        "[has_operation some Round:time&date]",
                        "[has_member some date-time factor]"
                    ]
                },
                "description": "date and time datatype is a subclass of non-numeric ordered primitive datatype, and is explicitly disjoint with ordinal datatype—meaning no instance can simultaneously belong to both classes. Members of this class possess qualities of being exact and potentially unbounded, and they necessarily have members such as date-time units, date-time radices, and date-time factors. The class supports specific operations, including extension, equality checking, ordering, difference calculation, and rounding of date and time values. This formalization ensures a precise and operation-rich definition of datatypes used for representing and manipulating combined date and time information, distinct from ordinal forms of data.",
                "CQ": [
                    {
                        "axiom": "date and time datatype subClassOf non-numeric ordered primitive datatype",
                        "CQ": [
                            "Is date and time datatype classified under non-numeric ordered primitive datatypes?",
                            "What primitive datatypes are more specific subclasses of non-numeric ordered ordered primitive datatype, such as date and time datatype?",
                            "Which broader non-numeric datatype categories include date and time datatype as a subclass?"
                        ]
                    },
                    {
                        "axiom": "date and time datatype disjointWith ordinal datatype",
                        "CQ": [
                            "How does the ontology differentiate between date and time datatypes and ordinal datatypes?",
                            "Is any datatype instance allowed to be classified as both date and time and ordinal at once?",
                            "Which datatypes are specified as mutually exclusive with ordinal datatype?"
                        ]
                    },
                    {
                        "axiom": "date and time datatype propertyRestrictions [has_operation some Extend:time&date]",
                        "CQ": [
                            "Is it required that a date and time entity must have an operation associated with some instances of Extend:time&date?",
                            "Can every date and time entity possess at least one 'has_operation' relationship linked to Extend:time&date?",
                            "Are there any restrictions on a date and time entity having the 'has_operation' property only with values from Extend:time&date?"
                        ]
                    },
                    {
                        "axiom": "date and time datatype propertyRestrictions [has_operation some Equal:time&date]",
                        "CQ": [
                            "Must every instance with a date and time property have at least one operation equal to a time and date?",
                            "Does an individual with a date and time attribute always require the presence of an operation defined as Equal:time&date?",
                            "Is it necessary for any entity possessing the date and time datatype property to engage in some operation characterized by equality with time and date?"
                        ]
                    },
                    {
                        "axiom": "date and time datatype propertyRestrictions [has_operation some InOrder:time&date]",
                        "CQ": [
                            "Is it mandatory for any instance with a date and time to participate in at least one 'has_operation' relationship with an individual of type InOrder:time&date?",
                            "Can an entity described by date and time exist without having a 'has_operation' link to InOrder:time&date?",
                            "Does the ontology require that every instance with a 'date and time' attribute be related through 'has_operation' to at least one instance of InOrder:time&date?"
                        ]
                    },
                    {
                        "axiom": "date and time datatype propertyRestrictions [has_member some date-time unit]",
                        "CQ": [
                            "Is it required that every instance with the date and time datatype property includes at least one member representing a date-time unit?",
                            "Does the presence of the 'has_member' relationship with a date-time unit establish the existence of the date and time datatype property in an entity?",
                            "Must any entity described by the date and time datatype property have at least one associated date-time unit as a member?"
                        ]
                    },
                    {
                        "axiom": "date and time datatype propertyRestrictions [has_operation some Difference:time&date]",
                        "CQ": [
                            "Is it required that an entity with a date and time has at least one 'has_operation' relationship with an instance of Difference:time&date?",
                            "Can a date and time entity exist without any 'has_operation' linking it to the concept of Difference:time&date?",
                            "Must every date and time entity perform at least one operation classified under Difference:time&date?"
                        ]
                    },
                    {
                        "axiom": "date and time datatype propertyRestrictions [has_quality some unbounded]",
                        "CQ": [
                            "Is it required that every instance with a date and time datatype property has at least one 'has_quality' relationship to something unbounded?",
                            "Are all values of the 'has_quality' property for date and time datatype objects necessarily unbounded?",
                            "Does the existence of a 'has_quality' relation to an unbounded entity define or constrain the usage of date and time datatype properties?"
                        ]
                    },
                    {
                        "axiom": "date and time datatype propertyRestrictions [has_member some date-time radix]",
                        "CQ": [
                            "Is it required that has_member property of a date and time datatype always relates to at least one date-time radix?",
                            "Does every date and time datatype necessarily include a member that is a date-time radix?",
                            "Can a date and time datatype exist without being linked via has_member to any date-time radix?"
                        ]
                    },
                    {
                        "axiom": "date and time datatype propertyRestrictions [has_quality some exact]",
                        "CQ": [
                            "Is every instance of the date and time datatype required to have the 'has_quality' property with at least one value of type 'exact'?",
                            "Does the model allow a date and time value to exist without associating any 'exact' quality via the 'has_quality' property?",
                            "Are there instances where the 'has_quality' property for date and time datatype can refer to a quality other than 'exact'?"
                        ]
                    },
                    {
                        "axiom": "date and time datatype propertyRestrictions [has_operation some Round:time&date]",
                        "CQ": [
                            "Is it required that an entity with a time and date restriction has at least one 'has_operation' property related to a Round instance with specified time and date?",
                            "Can an entity with this property restriction have an operation that is not associated with a Round instance defined by time and date?",
                            "Does the presence of the 'has_operation' property for an entity imply the existence of a Round event with corresponding time and date values?"
                        ]
                    },
                    {
                        "axiom": "date and time datatype propertyRestrictions [has_member some date-time factor]",
                        "CQ": [
                            "Must every instance related via 'has_member' possess a date-time factor?",
                            "Does the presence of a date-time factor suffice for membership via 'has_member'?",
                            "Is it necessary for members linked by 'has_member' to have at least one date-time factor associated with them?"
                        ]
                    }
                ]
            },
            "ordinal datatype": {
                "axiom": {
                    "subClassOf": [
                        "non-numeric ordered primitive datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_operation some InOrder:ordinal]",
                        "[has_quality some bounded below]",
                        "[has_quality some unbounded above]",
                        "[has_quality some ordered]",
                        "[has_operation some Successor:ordinal]",
                        "[has_operation some Equal:ordinal]",
                        "[has_quality some non-numeric]",
                        "[has_quality some exact]"
                    ]
                },
                "description": "ordinal datatype is a subclass of non-numeric ordered primitive datatype. It is defined by possessing a set of operations and qualities: members must support operations such as \"InOrder\", \"Successor\", and \"Equal\" specific to ordinals. Ordinal datatypes are characterized by being ordered, exact, non-numeric in nature, and always bounded below but may be unbounded above. This constrains ordinal datatypes to those that allow clear ordering of their instances, with well-defined succession and equality, but without numeric interpretation.",
                "CQ": [
                    {
                        "axiom": "ordinal datatype subClassOf non-numeric ordered primitive datatype",
                        "CQ": [
                            "Is ordinal datatype encompassed within the general classification of non-numeric ordered primitive datatype?",
                            "Which datatypes are more specialized forms of non-numeric ordered primitive datatype, including ordinal datatype?",
                            "What higher-level categories can ordinal datatype be assigned to within the datatype hierarchy?"
                        ]
                    },
                    {
                        "axiom": "ordinal datatype propertyRestrictions [has_operation some InOrder:ordinal]",
                        "CQ": [
                            "Is it required that every instance with ordinal datatype property restrictions must have the 'has_operation' property associated with at least one value from the InOrder:ordinal set?",
                            "Does the existence of 'has_operation' linking to InOrder:ordinal suffice for an instance to comply with the ordinal datatype property restrictions?",
                            "Are instances with ordinal datatype property restrictions guaranteed to possess 'has_operation' relating specifically to some InOrder:ordinal value?"
                        ]
                    },
                    {
                        "axiom": "ordinal datatype propertyRestrictions [has_quality some bounded below]",
                        "CQ": [
                            "Is it required that every ordinal value possesses at least one quality that is bounded below?",
                            "Must all instances related by has_quality to an ordinal datatype be bounded below in nature?",
                            "Can an ordinal datatype have a quality that is not bounded below?"
                        ]
                    },
                    {
                        "axiom": "ordinal datatype propertyRestrictions [has_quality some unbounded above]",
                        "CQ": [
                            "Must every instance with an ordinal datatype property have at least one quality that is unbounded above?",
                            "Is it required for entities with the 'has_quality' property to possess some quality that exhibits no upper bound in the ordinal scale?",
                            "Are there cases where the 'has_quality' property can only be filled by qualities that are not restricted above in the ordinal ordering?"
                        ]
                    },
                    {
                        "axiom": "ordinal datatype propertyRestrictions [has_quality some ordered]",
                        "CQ": [
                            "Is it required that any entity with an ordinal datatype property possesses at least one quality classified as ordered?",
                            "Can an object with an ordinal datatype property lack association with an ordered quality?",
                            "Must the property 'has_quality' for entities using ordinal datatype always refer to some ordered quality?"
                        ]
                    },
                    {
                        "axiom": "ordinal datatype propertyRestrictions [has_operation some Successor:ordinal]",
                        "CQ": [
                            "Is it required that every ordinal has at least one operation relating it to a Successor ordinal?",
                            "Does the property 'has_operation' for ordinals necessarily involve a relation to a Successor ordinal?",
                            "Can there exist an ordinal that lacks a 'has_operation' link to any Successor ordinal?"
                        ]
                    },
                    {
                        "axiom": "ordinal datatype propertyRestrictions [has_operation some Equal:ordinal]",
                        "CQ": [
                            "Is it necessary for an entity with ordinal datatype property restrictions to have at least one operation involving equality on an ordinal value?",
                            "Does every instance with ordinal datatype property restrictions participate in some operation that uses the 'Equal:ordinal' relation?",
                            "Must entities constrained by ordinal datatype property restrictions be associated with a 'has_operation' involving an equal comparison on ordinals?"
                        ]
                    },
                    {
                        "axiom": "ordinal datatype propertyRestrictions [has_quality some non-numeric]",
                        "CQ": [
                            "Is every entity with an ordinal datatype required to have the property 'has_quality' with a non-numeric value?",
                            "Must an ordinal datatype always be associated with some quality that is non-numeric via the 'has_quality' property?",
                            "Can an ordinal datatype exist without possessing the 'has_quality' property relating to a non-numeric value?"
                        ]
                    },
                    {
                        "axiom": "ordinal datatype propertyRestrictions [has_quality some exact]",
                        "CQ": [
                            "Is every entity associated with a value for the property ‘has_quality’ that must be classified as ‘exact’?",
                            "Must instances that possess the property ‘has_quality’ necessarily have it with the value ‘exact’?",
                            "Are entities permitted to have any value other than ‘exact’ for their ‘has_quality’ property?"
                        ]
                    }
                ]
            },
            "date-time radix": {
                "axiom": {
                    "subClassOf": [
                        "radix"
                    ]
                },
                "description": "date-time radix is defined as a subclass of radix. This indicates that any instance of date-time radix inherits all characteristics of radix, while potentially adding more specific constraints or properties relevant to date and time representation bases. No further description or property restrictions are provided.",
                "CQ": [
                    {
                        "axiom": "date-time radix subClassOf radix",
                        "CQ": [
                            "Is date-time radix classified under the broader group of radix?",
                            "Which specialized forms are encompassed by the class radix, such as date-time radix?",
                            "What larger categories does date-time radix fall under in this ontology?"
                        ]
                    }
                ]
            },
            "complex radix": {
                "axiom": {
                    "subClassOf": [
                        "radix"
                    ]
                },
                "description": "complex radix is a subclass of radix. This means every complex radix is a type of radix, inheriting all the general properties of radix. There are no additional property restrictions or disjointness axioms specified, so complex radix is simply categorized as a specialized form within the broader radix class.",
                "CQ": [
                    {
                        "axiom": "complex radix subClassOf radix",
                        "CQ": [
                            "Is complex radix classified as a subtype under the category of radix?",
                            "Which specific types fall under the broader class of radix?",
                            "What are the parent categories that encompass complex radix?"
                        ]
                    }
                ]
            },
            "real radix": {
                "axiom": {
                    "subClassOf": [
                        "radix"
                    ]
                },
                "description": "real radix is a subclass of radix, representing those members of radix that have the property of being real. Every real radix is formally included in the broader category of radix, but may possess additional distinguishing characteristics specifying real-valued properties. No further property restrictions or disjointness axioms are specified.",
                "CQ": [
                    {
                        "axiom": "real radix subClassOf radix",
                        "CQ": [
                            "Does real radix fall under the broader classification of radix?",
                            "Which specific types are categorized within radix, such as real radix?",
                            "What general classifications encompass real radix?"
                        ]
                    }
                ]
            },
            "scaled radix": {
                "axiom": {
                    "subClassOf": [
                        "radix"
                    ]
                },
                "description": "scaled radix is defined as a subclass of radix. This means every instance of scaled radix is also considered a radix. No additional property restrictions or disjointness axioms are specified, so a scaled radix inherits all characteristics of radix, potentially with further differentiation implied by its name or use context.",
                "CQ": [
                    {
                        "axiom": "scaled radix subClassOf radix",
                        "CQ": [
                            "Does scaled radix fall under the broader concept of radix?",
                            "Which classifications are recognized as specializations of radix, such as scaled radix?",
                            "To which overarching categories is scaled radix assigned within the taxonomy?"
                        ]
                    }
                ]
            },
            "factor": {
                "axiom": {
                    "subClassOf": [
                        "value expression"
                    ]
                },
                "description": "factor is defined as a subclass of value expression, indicating that every instance of factor is also recognized as a value expression. There are no additional restrictions or disjointness axioms specified, so factor inherits all characteristics of value expressions without further constraints.",
                "CQ": [
                    {
                        "axiom": "factor subClassOf value expression",
                        "CQ": [
                            "Does every factor represent a form of value expression?",
                            "Which entities are classified under value expression, such as factor?",
                            "To which broader classifications does factor belong within the ontology?"
                        ]
                    }
                ]
            },
            "size": {
                "axiom": {
                    "subClassOf": [
                        "value expression"
                    ],
                    "propertyRestrictions": [
                        "[has-value exactly 1 xsd:integer]"
                    ]
                },
                "description": "size is defined as a subclass of value expression, representing a value-based concept within the ontology. Members of the size class are characterized by having exactly one associated value of type xsd:integer through the has-value property. This means each individual of size must specify a single integer value, reflecting the quantitative measurement that the class is intended to capture.",
                "CQ": [
                    {
                        "axiom": "size subClassOf value expression",
                        "CQ": [
                            "Is size categorized under value expression?",
                            "What broader category encompasses size in this ontology?",
                            "Which more specific concepts are grouped as subtypes of value expression, such as size?"
                        ]
                    },
                    {
                        "axiom": "size propertyRestrictions [has-value exactly 1 xsd:integer]",
                        "CQ": [
                            "Does an entity with the 'size' property have exactly one value of type integer?",
                            "Is it required that the 'size' attribute for each instance contains only a single integer value?",
                            "Can an instance be described as having more than one integer value for the 'size' property?"
                        ]
                    }
                ]
            },
            "radix": {
                "axiom": {
                    "subClassOf": [
                        "value expression"
                    ]
                },
                "description": "radix is defined as a subclass of value expression. This indicates that any radix is a specific kind of value expression, inheriting all characteristics of value expressions and further specializing their meaning, typically referring to the numerical base in mathematical or computational contexts.",
                "CQ": [
                    {
                        "axiom": "radix subClassOf value expression",
                        "CQ": [
                            "Can radix be classified as a kind of value expression?",
                            "Which entities are subclasses under value expression, such as radix?",
                            "What are the general categories that radix is a member of within the ontology?"
                        ]
                    }
                ]
            },
            "range": {
                "axiom": {
                    "subClassOf": [
                        "value expression"
                    ],
                    "propertyRestrictions": [
                        "[has_member some lower bound]",
                        "[has_member some upper bound]"
                    ]
                },
                "description": "range is defined as a subclass of value expression. Members of this class are characterized by having at least one association, through the property has_member, to both a lower bound and an upper bound. This formalization ensures that each instance of range must specify some lower and some upper bound, thereby representing a bounded interval or extent within the context of value expressions.",
                "CQ": [
                    {
                        "axiom": "range subClassOf value expression",
                        "CQ": [
                            "Is value expression a broader category that encompasses range?",
                            "Which specific subcategories fall under value expression, such as range?",
                            "To which higher-level classes does range belong in the ontology?"
                        ]
                    },
                    {
                        "axiom": "range propertyRestrictions [has_member some lower bound]",
                        "CQ": [
                            "Is every value of the property 'has_member' required to include at least one instance from the class 'lower bound'?",
                            "Does enforcing the property restriction 'has_member some lower bound' ensure that any entity linked by 'has_member' must have a member from the 'lower bound' class?",
                            "Can an entity have the 'has_member' property without referencing at least one 'lower bound' individual?"
                        ]
                    },
                    {
                        "axiom": "range propertyRestrictions [has_member some upper bound]",
                        "CQ": [
                            "Does the property 'has_member' necessarily include at least one entity of type 'upper bound'?",
                            "Is it required for all values of 'has_member' to be instances of 'upper bound'?",
                            "Can 'has_member' ever link to an entity outside of the class 'upper bound'?"
                        ]
                    }
                ]
            },
            "bound": {
                "axiom": {
                    "subClassOf": [
                        "value expression"
                    ]
                },
                "description": "bound is defined as a subclass of value expression, indicating that every instance of bound is also considered a value expression. No further restrictions or disjointness axioms are specified, so the defining characteristic of the bound class is its inheritance from value expression.",
                "CQ": [
                    {
                        "axiom": "bound subClassOf value expression",
                        "CQ": [
                            "Is value expression a broader category that includes bound as a more specific concept?",
                            "Which subclasses fall under value expression, and does bound appear among them?",
                            "What general class hierarchies encompass bound, considering its relation to value expression?"
                        ]
                    }
                ]
            },
            "datatype": {
                "axiom": {
                    "subClassOf": [
                        "data representational model"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some datatype property]",
                        "[has_operation some characterizing operation]",
                        "[has_attribute some value space]"
                    ]
                },
                "description": "datatype is defined as a subclass of data representational model. Members of this class are characterized by three property restrictions: they possess at least one datatype property (has_quality some datatype property), are associated with at least one characterizing operation (has_operation some characterizing operation), and have at least one value space (has_attribute some value space). This formalization ensures that any individual classified as a datatype is a type of data representation distinguished by its qualities, the operations applicable to it, and its defined set of possible values.",
                "CQ": [
                    {
                        "axiom": "datatype subClassOf data representational model",
                        "CQ": [
                            "Is datatype categorized under the broader class of data representational model?",
                            "Which subclasses constitute the data representational model class, such as datatype?",
                            "Of which higher-level concepts is datatype an instance within the domain?"
                        ]
                    },
                    {
                        "axiom": "datatype propertyRestrictions [has_quality some datatype property]",
                        "CQ": [
                            "Is it a requirement that instances must have at least one 'has_quality' property with a value of the specified datatype?",
                            "Are there any instances that lack the 'has_quality' property altogether under this restriction?",
                            "Does the ontology allow an individual to have multiple 'has_quality' relationships with values of the defined datatype?"
                        ]
                    },
                    {
                        "axiom": "datatype propertyRestrictions [has_operation some characterizing operation]",
                        "CQ": [
                            "Is it required that every instance with datatype propertyRestrictions has at least one has_operation relationship to a characterizing operation?",
                            "Can an entity described by datatype propertyRestrictions lack any has_operation link to a characterizing operation?",
                            "Must characterizing operation be present under has_operation for any object satisfying datatype propertyRestrictions?"
                        ]
                    },
                    {
                        "axiom": "datatype propertyRestrictions [has_attribute some value space]",
                        "CQ": [
                            "Does every instance with 'has_attribute' necessarily have a value from the 'value space'?",
                            "Is it required that the 'has_attribute' property for an entity be filled with at least one value that belongs to the specified value space?",
                            "Can an individual be considered part of the class only if there exists a 'has_attribute' value within the defined value space?"
                        ]
                    }
                ]
            },
            "extended datatype": {
                "axiom": {
                    "subClassOf": [
                        "data representational model"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some datatype property]",
                        "[has_member some subtype generator]",
                        "[has_attribute some value space]",
                        "[has_member some base type]"
                    ]
                },
                "description": "extended datatype is defined as a subclass of data representational model. It is characterized by possessing at least one datatype property (has_quality some datatype property), at least one subtype generator as a member (has_member some subtype generator), at least one value space attribute (has_attribute some value space), and at least one base type as a member (has_member some base type). The class is also associated with the synonym \"subtype\". This formalization ensures that any instance of extended datatype is richly described in terms of qualities, generative subtypes, value domains, and derived from fundamental base types.",
                "CQ": [
                    {
                        "axiom": "extended datatype subClassOf data representational model",
                        "CQ": [
                            "Is extended datatype categorized under data representational model?",
                            "Which data representational model subclasses include extended datatype?",
                            "What broader classes encompass extended datatype within the ontology?"
                        ]
                    },
                    {
                        "axiom": "extended datatype propertyRestrictions [has_quality some datatype property]",
                        "CQ": [
                            "Is it required that every instance of extended possesses at least one 'has_quality' property with a datatype value?",
                            "Must each extended entity be associated with some value through the 'has_quality' property?",
                            "Does the existence of an extended entity imply the presence of a datatype property assertion via 'has_quality'?"
                        ]
                    },
                    {
                        "axiom": "extended datatype propertyRestrictions [has_member some subtype generator]",
                        "CQ": [
                            "Does the extended datatype require that it must have at least one member that is an instance of a subtype generator?",
                            "Is it necessary for every extended datatype to possess the has_member property relating to a subtype generator?",
                            "Can an extended datatype exist without being associated with any subtype generator via the has_member property?"
                        ]
                    },
                    {
                        "axiom": "extended datatype propertyRestrictions [has_attribute some value space]",
                        "CQ": [
                            "Is every instance with the 'extended datatype propertyRestrictions' required to have at least one 'has_attribute' in the value space?",
                            "Can something classified under 'extended datatype propertyRestrictions' exist without possessing the 'has_attribute' property associated with any value space?",
                            "Does the existence of 'has_attribute' with any value from the specified space determine membership in 'extended datatype propertyRestrictions'?"
                        ]
                    },
                    {
                        "axiom": "extended datatype propertyRestrictions [has_member some base type]",
                        "CQ": [
                            "Is every instance with the property 'has_member' required to include at least one value of the base type?",
                            "Can something be classified under extended datatype propertyRestrictions if it does not possess the 'has_member' property pointing to any base type?",
                            "Does the existence of a 'has_member' property with a value from the base type suffice for an entity to meet the extended datatype propertyRestrictions criterion?"
                        ]
                    }
                ]
            },
            "complex datatype": {
                "axiom": {
                    "subClassOf": [
                        "numeric primitive datatype"
                    ],
                    "disjointWith": [
                        "numeric ordered primitive datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_operation some Reciprocal:complex]",
                        "[has_operation some Negate:complex]",
                        "[has_quality some non-ordered]",
                        "[has_member some complex radix]",
                        "[has_quality some numeric]",
                        "[has_operation some SquareRoot:complex]",
                        "[has_operation some Multiply:complex]",
                        "[has_operation some Add:complex]",
                        "[has_quality some approximate]",
                        "[has_operation some Promote:complex]",
                        "[has_member some complex factor]",
                        "[has_operation some Equal:complex]"
                    ]
                },
                "description": "complex datatype is defined as a subclass of numeric primitive datatype and is disjoint with numeric ordered primitive datatype—meaning no individual can simultaneously belong to both classes. Members of this class are characterized as numeric, non-ordered, and approximate in nature. They support operations specific to complex numbers, such as reciprocal, negation, square root, multiplication, addition, promotion, and equality (all in the complex domain). Instances of complex datatype must include members such as complex radix and complex factor. This formalization captures the essential characteristics and operations associated with complex numbers in data representation, distinguishing them from ordered numeric primitive datatypes.",
                "CQ": [
                    {
                        "axiom": "complex datatype subClassOf numeric primitive datatype",
                        "CQ": [
                            "Can a complex datatype be classified under numeric primitive datatypes?",
                            "Which datatypes fall under the broader class of numeric primitive datatypes, specifically including complex datatype?",
                            "What are the parent classes associated with complex datatype?"
                        ]
                    },
                    {
                        "axiom": "complex datatype disjointWith numeric ordered primitive datatype",
                        "CQ": [
                            "What entities are prevented from being both complex datatype and numeric ordered primitive datatype within the ontology?",
                            "Is there any overlap permitted between instances of complex datatype and numeric ordered primitive datatype?",
                            "Which datatype categories are expressly defined as disjoint with numeric ordered primitive datatype?"
                        ]
                    },
                    {
                        "axiom": "complex datatype propertyRestrictions [has_operation some Reciprocal:complex]",
                        "CQ": [
                            "Does every instance of complex datatype propertyRestrictions require at least one 'has_operation' relationship to a Reciprocal instance?",
                            "Is it possible for complex datatype propertyRestrictions to have the 'has_operation' property only if the value is of type Reciprocal?",
                            "Must complex datatype propertyRestrictions always involve an operation that is classified as Reciprocal?"
                        ]
                    },
                    {
                        "axiom": "complex datatype propertyRestrictions [has_operation some Negate:complex]",
                        "CQ": [
                            "Must every entity with the property 'has_operation' necessarily involve a Negate operation?",
                            "Can an entity exist without having the 'has_operation' property to a Negate operation?",
                            "Are all instances with the 'has_operation' property required to perform at least one Negate operation?"
                        ]
                    },
                    {
                        "axiom": "complex datatype propertyRestrictions [has_quality some non-ordered]",
                        "CQ": [
                            "Is it required that every instance with a 'has_quality' relation possesses at least one 'non-ordered' quality?",
                            "Must all entities associated via 'has_quality' necessarily exhibit the characteristic of being non-ordered?",
                            "Can an entity without any 'non-ordered' quality be linked by the 'has_quality' property?"
                        ]
                    },
                    {
                        "axiom": "complex datatype propertyRestrictions [has_member some complex radix]",
                        "CQ": [
                            "Is it required that an entity with the complex property restriction has at least one member that is a complex radix?",
                            "Can an instance with the property 'has_member' be associated with objects that are not of type complex radix?",
                            "Does the existence of a complex member with the radix property guarantee satisfaction of the complex datatype property restriction?"
                        ]
                    },
                    {
                        "axiom": "complex datatype propertyRestrictions [has_quality some numeric]",
                        "CQ": [
                            "Is it required that entities with complex datatype propertyRestrictions have at least one 'has_quality' property with a numeric value?",
                            "Can an instance of complex datatype propertyRestrictions lack the 'has_quality' property with a numeric datatype?",
                            "Are all qualities associated through 'has_quality' for complex datatype propertyRestrictions necessarily numeric?"
                        ]
                    },
                    {
                        "axiom": "complex datatype propertyRestrictions [has_operation some SquareRoot:complex]",
                        "CQ": [
                            "Is it required that complex entities possess at least one operation corresponding to the square root function?",
                            "Can a complex entity exist without having the has_operation property with a SquareRoot function?",
                            "Are all instances defined by the necessity that some operation must be a SquareRoot on complexes?"
                        ]
                    },
                    {
                        "axiom": "complex datatype propertyRestrictions [has_operation some Multiply:complex]",
                        "CQ": [
                            "Is every instance of complex datatype propertyRestrictions required to have at least one has_operation relationship with Multiply:complex?",
                            "Does complex datatype propertyRestrictions necessitate the existence of a Multiply:complex operation among its operations?",
                            "Must an entity classified as complex datatype propertyRestrictions possess a has_operation link to a Multiply:complex instance?"
                        ]
                    },
                    {
                        "axiom": "complex datatype propertyRestrictions [has_operation some Add:complex]",
                        "CQ": [
                            "Is it required that an entity with complex datatype propertyRestrictions must have at least one has_operation relation to an instance of Add:complex?",
                            "Can complex datatype propertyRestrictions exist without the presence of the has_operation property linking to Add:complex?",
                            "Does the presence of the has_operation property with Add:complex suffice to classify something under complex datatype propertyRestrictions?"
                        ]
                    },
                    {
                        "axiom": "complex datatype propertyRestrictions [has_quality some approximate]",
                        "CQ": [
                            "Is every complex entity required to have at least one quality that is approximate?",
                            "Does the existence of a complex entity entail the presence of some approximate quality?",
                            "Can a complex entity exist without being associated with an approximate quality?"
                        ]
                    },
                    {
                        "axiom": "complex datatype propertyRestrictions [has_operation some Promote:complex]",
                        "CQ": [
                            "Is it necessary for an entity to have at least one 'has_operation' relationship with a Promote:complex for it to satisfy the axiom?",
                            "Can an entity exist without participating in any 'has_operation' involving a Promote:complex?",
                            "Does the axiom require that every instance related via 'has_operation' must be of type Promote:complex?"
                        ]
                    },
                    {
                        "axiom": "complex datatype propertyRestrictions [has_member some complex factor]",
                        "CQ": [
                            "Is it necessary for complex to have at least one has_member relationship with an instance of complex factor?",
                            "Can a complex exist without being associated via has_member to a complex factor?",
                            "Does every instance of complex require the presence of a has_member link to some complex factor?"
                        ]
                    },
                    {
                        "axiom": "complex datatype propertyRestrictions [has_operation some Equal:complex]",
                        "CQ": [
                            "Does every instance satisfying the class necessarily have at least one 'has_operation' relation involving an operation of type Equal:complex?",
                            "Is it possible for any instance of the class to lack a 'has_operation' to an Equal:complex operation?",
                            "Are all members of this class required to participate in at least one 'has_operation' relation with an operand of Equal:complex type?"
                        ]
                    }
                ]
            },
            "numeric ordered primitive datatype": {
                "axiom": {
                    "subClassOf": [
                        "numeric primitive datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some ordered]"
                    ]
                },
                "description": "numeric ordered primitive datatype is defined as a subclass of numeric primitive datatype, with the additional restriction that it must possess the quality of being ordered. This means that any datatype in this class is numeric by nature and supports an intrinsic ordering, enabling comparison between its members (e.g., less than, greater than relationships).",
                "CQ": [
                    {
                        "axiom": "numeric ordered primitive datatype subClassOf numeric primitive datatype",
                        "CQ": [
                            "Is numeric ordered primitive datatype one of the specific types classified under numeric primitive datatype?",
                            "What datatypes fall under the broader category of numeric primitive datatype, such as numeric ordered primitive datatype?",
                            "Which higher-level datatype categories include numeric ordered primitive datatype as a subclass?"
                        ]
                    },
                    {
                        "axiom": "numeric ordered primitive datatype propertyRestrictions [has_quality some ordered]",
                        "CQ": [
                            "Does every 'numeric ordered primitive datatype' instance have at least one 'has_quality' relation to an 'ordered' entity?",
                            "Is it mandatory for a 'numeric ordered primitive datatype' to possess a 'has_quality' association with something that is 'ordered'?",
                            "Can a 'numeric ordered primitive datatype' exist without being linked via 'has_quality' to any 'ordered' entity?"
                        ]
                    }
                ]
            },
            "sequence of discrete datatype": {
                "axiom": {
                    "subClassOf": [
                        "sequence datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_member some discrete base type]"
                    ]
                },
                "description": "sequence of discrete datatype is defined as a subclass of sequence datatype, meaning it inherits all characteristics associated with sequence datatypes. Individuals of this class are further characterized by the property that each member of the sequence must be of a discrete base type. This restriction ensures that only elements classified as discrete base types are permitted as members in such sequences, differentiating this class from more general sequence datatypes that may include other types of elements.",
                "CQ": [
                    {
                        "axiom": "sequence of discrete datatype subClassOf sequence datatype",
                        "CQ": [
                            "Is sequence of discrete datatype classified as a kind of sequence datatype?",
                            "Which datatypes are more specific instances under the category of sequence datatype?",
                            "To which higher-level datatype categories does sequence of discrete datatype belong?"
                        ]
                    },
                    {
                        "axiom": "sequence of discrete datatype propertyRestrictions [has_member some discrete base type]",
                        "CQ": [
                            "Must every sequence contain at least one member drawn from the discrete base type?",
                            "Is it required that a sequence always includes a value for the property 'has_member' sourced from a discrete base type?",
                            "Do all instances of the sequence have at least one association via 'has_member' to an element of the discrete base type?"
                        ]
                    }
                ]
            },
            "sequence of real datatype": {
                "axiom": {
                    "subClassOf": [
                        "sequence datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_member some real base type]"
                    ]
                },
                "description": "sequence of real datatype is a subclass of sequence datatype, characterized by the restriction that its members must be of the real base type. This means every element within a sequence of this type is a real number, ensuring that the sequence contains no members of other datatypes.",
                "CQ": [
                    {
                        "axiom": "sequence of real datatype subClassOf sequence datatype",
                        "CQ": [
                            "Is sequence of real datatype a specialization of sequence datatype?",
                            "Which datatypes fall under the general class of sequence datatype, including sequence of real datatype?",
                            "What broader datatype categories encompass sequence of real datatype?"
                        ]
                    },
                    {
                        "axiom": "sequence of real datatype propertyRestrictions [has_member some real base type]",
                        "CQ": [
                            "Is every instance of 'sequence of real' required to have at least one 'has_member' value of real base type?",
                            "Can a 'sequence of real' exist without being related through 'has_member' to any real base type element?",
                            "Does the property 'has_member' necessarily associate every 'sequence of real' with instances belonging to the real base type?"
                        ]
                    }
                ]
            },
            "sequence datatype": {
                "axiom": {
                    "subClassOf": [
                        "homogenous aggregate datatype with variable size"
                    ],
                    "disjointWith": [
                        "homogenous  unordered aggregate datatype with variable size"
                    ],
                    "propertyRestrictions": [
                        "[has_operation some Equal:sequence]",
                        "[has_quality some exact]",
                        "[has_operation some IsEmpty:sequence]",
                        "[has_quality some non-ordered]",
                        "[has_operation some Head:sequence]",
                        "[has_quality some non-numeric]",
                        "[has_member some base type]",
                        "[has_operation some Append:sequence]",
                        "[has_operation some Tail:sequence]",
                        "[has_member some sequence generator]"
                    ]
                },
                "description": "sequence datatype is defined as a subclass of homogenous aggregate datatype with variable size, and is explicitly disjoint with homogenous unordered aggregate datatype with variable size, ensuring no individual can belong to both classes. Members of this class are characterized by being non-ordered and non-numeric, containing only elements (members) of a base type and potentially a sequence generator. Sequence datatype supports several operations: checking for equality with another sequence, checking if the sequence is empty, retrieving the head (first element), appending elements, and retrieving the tail (all elements except the head). The inclusion of only these features signifies that sequence datatype represents an ordered, variable-sized, homogenous collection of elements with well-defined sequence-based operations.",
                "CQ": [
                    {
                        "axiom": "sequence datatype subClassOf homogenous aggregate datatype with variable size",
                        "CQ": [
                            "Is sequence datatype classified as a kind of homogenous aggregate datatype with variable size?",
                            "Which datatypes are more specific variants under homogenous aggregate datatype with variable size, such as sequence datatype?",
                            "To which higher-level datatype categories does sequence datatype belong?"
                        ]
                    },
                    {
                        "axiom": "sequence datatype disjointWith homogenous  unordered aggregate datatype with variable size",
                        "CQ": [
                            "What is the logical separation between sequence datatypes and homogenous unordered aggregate datatypes with variable size?",
                            "Is there any datatype that can be classified as both a sequence datatype and a homogenous unordered aggregate datatype with variable size?",
                            "Which other datatype categories are formally specified as disjoint with sequence datatypes?"
                        ]
                    },
                    {
                        "axiom": "sequence datatype propertyRestrictions [has_operation some Equal:sequence]",
                        "CQ": [
                            "Is it required that a sequence be associated with at least one operation of type Equal:sequence?",
                            "Does every instance of sequence necessarily participate in the has_operation property with something classified as Equal:sequence?",
                            "Can a sequence exist without having the has_operation property relating it to an Equal:sequence?"
                        ]
                    },
                    {
                        "axiom": "sequence datatype propertyRestrictions [has_quality some exact]",
                        "CQ": [
                            "Is it required that every Sequence possesses at least one quality which is classified as Exact?",
                            "Can a Sequence exist that does not have the property 'has_quality' related to Exact?",
                            "Is the association between Sequence and Exact enforced through the property 'has_quality' for all members of the Sequence class?"
                        ]
                    },
                    {
                        "axiom": "sequence datatype propertyRestrictions [has_operation some IsEmpty:sequence]",
                        "CQ": [
                            "Is every instance of sequence required to have at least one has_operation property relating to IsEmpty?",
                            "Can a sequence exist without the has_operation property pointing to IsEmpty?",
                            "Does the definition of sequence ensure an operation of type IsEmpty is necessarily associated with it?"
                        ]
                    },
                    {
                        "axiom": "sequence datatype propertyRestrictions [has_quality some non-ordered]",
                        "CQ": [
                            "Is every sequence required to possess at least one quality that is classified as non-ordered?",
                            "Must a sequence have the 'has_quality' property relating it to a non-ordered characteristic?",
                            "Can a sequence exist without having any 'has_quality' relationship to a non-ordered attribute?"
                        ]
                    },
                    {
                        "axiom": "sequence datatype propertyRestrictions [has_operation some Head:sequence]",
                        "CQ": [
                            "Must every instance of sequence participate in at least one has_operation relationship with an instance of Head:sequence?",
                            "Is it required that a sequence has at least one 'has_operation' property linking it to something of type Head:sequence?",
                            "Can a sequence exist without any has_operation connection to a Head:sequence individual?"
                        ]
                    },
                    {
                        "axiom": "sequence datatype propertyRestrictions [has_quality some non-numeric]",
                        "CQ": [
                            "Does every sequence have at least one 'has_quality' property relating it to a non-numeric value?",
                            "Is the existence of a non-numeric quality mandatory for any instance classified as a sequence?",
                            "Must sequences always possess some non-numeric quality via the 'has_quality' property?"
                        ]
                    },
                    {
                        "axiom": "sequence datatype propertyRestrictions [has_member some base type]",
                        "CQ": [
                            "Is every sequence required to include at least one member of the specified base type?",
                            "Does a sequence always have the property 'has_member' relating it to an instance of its base type?",
                            "Can a sequence exist if it does not have any member from the base type?"
                        ]
                    },
                    {
                        "axiom": "sequence datatype propertyRestrictions [has_operation some Append:sequence]",
                        "CQ": [
                            "Is it required for a sequence to participate in at least one 'has_operation' relationship with an instance of Append:sequence?",
                            "Must every sequence be associated with the Append:sequence entity through the 'has_operation' property?",
                            "Can a sequence exist in the ontology without the 'has_operation' property linking it to an Append:sequence?"
                        ]
                    },
                    {
                        "axiom": "sequence datatype propertyRestrictions [has_operation some Tail:sequence]",
                        "CQ": [
                            "Is it necessary for a sequence to have at least one operation that is a Tail sequence?",
                            "Can a sequence exist without having any operation associated with a Tail sequence?",
                            "Does every instance of sequence have the property 'has_operation' relating it to at least one Tail sequence?"
                        ]
                    },
                    {
                        "axiom": "sequence datatype propertyRestrictions [has_member some sequence generator]",
                        "CQ": [
                            "Must a sequence always have at least one member associated with a sequence generator?",
                            "Is the existence of a sequence generator mandatory for any member of a sequence?",
                            "Does every sequence necessarily require that at least one of its members is linked to a sequence generator?"
                        ]
                    }
                ]
            },
            "homogenous  unordered aggregate datatype with variable size": {
                "axiom": {
                    "subClassOf": [
                        "homogenous aggregate datatype with variable size"
                    ],
                    "propertyRestrictions": [
                        "[has_member some homogenous unordered aggregate generator with variable size]"
                    ]
                },
                "description": "homogenous unordered aggregate datatype with variable size is a subclass of homogenous aggregate datatype with variable size. Each instance of this class must have at least one member that is an instance of homogenous unordered aggregate generator with variable size. This class groups together collections of elements that are all of the same type, where the order of elements is not significant, and the number of elements may vary.",
                "CQ": [
                    {
                        "axiom": "homogenous  unordered aggregate datatype with variable size subClassOf homogenous aggregate datatype with variable size",
                        "CQ": [
                            "Does every homogenous unordered aggregate datatype with variable size fall under the classification of homogenous aggregate datatype with variable size?",
                            "Which aggregate datatypes with variable size encompass homogenous unordered variants as specific types?",
                            "What are the more general datatype categories that include homogenous unordered aggregate datatype with variable size as a subclass?"
                        ]
                    },
                    {
                        "axiom": "homogenous  unordered aggregate datatype with variable size propertyRestrictions [has_member some homogenous unordered aggregate generator with variable size]",
                        "CQ": [
                            "Must a homogenous unordered aggregate datatype with variable size always include at least one homogenous unordered aggregate generator with variable size as a member?",
                            "Is it required that every homogenous unordered aggregate datatype with variable size is composed of one or more members which are homogenous unordered aggregate generators with variable size?",
                            "Does the presence of a homogenous unordered aggregate generator with variable size as a member determine the classification of a datatype as a homogenous unordered aggregate datatype with variable size?"
                        ]
                    }
                ]
            },
            "bag datatype": {
                "axiom": {
                    "subClassOf": [
                        "homogenous  unordered aggregate datatype with variable size"
                    ],
                    "disjointWith": [
                        "set datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some non-ordered]",
                        "[has_operation some Select:bag]",
                        "[has_operation some Insert:bag]",
                        "[has_member some base type]",
                        "[has_operation some Delete:bag]",
                        "[has_operation some IsEmpty:bag]",
                        "[has_operation some Equal:bag]",
                        "[has_member some bag generator]",
                        "[has_quality some non-numeric]",
                        "[has_operation some Serialize:bag]",
                        "[has_quality some exact]"
                    ]
                },
                "description": "bag datatype is defined as a subclass of homogenous unordered aggregate datatype with variable size, and is explicitly disjoint with set datatype, ensuring that no instance can be both a bag and a set. Members of this class are characterized by containing elements (members) from a specified base type as well as from possible bag generators. Bags possess qualities of being non-ordered (element sequence is not significant), non-numeric, and \"exact\" (potentially referring to preserving element multiplicities). Bags support the following operations: Select, Insert, Delete, IsEmpty, Equal, and Serialize. This formalization models bags as flexible, unordered collections that can contain duplicate elements, are distinguished from sets by their handling of element multiplicity, and provide standard collection manipulation operations.",
                "CQ": [
                    {
                        "axiom": "bag datatype subClassOf homogenous  unordered aggregate datatype with variable size",
                        "CQ": [
                            "Is bag datatype an example of homogenous unordered aggregate datatype with variable size?",
                            "What are the specific types classified under homogenous unordered aggregate datatype with variable size?",
                            "Which higher-level datatype categories include bag datatype?"
                        ]
                    },
                    {
                        "axiom": "bag datatype disjointWith set datatype",
                        "CQ": [
                            "How does the ontology formally distinguish between bag datatype and set datatype?",
                            "Is it allowed for a datatype to be classified as both a bag and a set within the ontology?",
                            "What other datatypes, besides set datatype, are declared as mutually exclusive with bag datatype?"
                        ]
                    },
                    {
                        "axiom": "bag datatype propertyRestrictions [has_quality some non-ordered]",
                        "CQ": [
                            "Is every bag required to have the quality of being non-ordered?",
                            "Can a bag exist without possessing the non-ordered quality?",
                            "Does classification as a bag necessarily entail having at least one non-ordered quality?"
                        ]
                    },
                    {
                        "axiom": "bag datatype propertyRestrictions [has_operation some Select:bag]",
                        "CQ": [
                            "Is it required that every bag instance must perform at least one 'Select:bag' operation?",
                            "Can any bag have an operation other than 'Select:bag', or is 'Select:bag' the only necessary operation for bags?",
                            "Does the existence of the 'has_operation' property for a bag necessarily imply the presence of a 'Select:bag' operation?"
                        ]
                    },
                    {
                        "axiom": "bag datatype propertyRestrictions [has_operation some Insert:bag]",
                        "CQ": [
                            "Is it required for every bag to have at least one operation of type Insert?",
                            "Can a bag exist without being associated with an Insert operation via the has_operation property?",
                            "Are all instances of bag linked through has_operation to at least one Insert process?"
                        ]
                    },
                    {
                        "axiom": "bag datatype propertyRestrictions [has_member some base type]",
                        "CQ": [
                            "Is it required that a bag contains at least one member of the base type?",
                            "Can a bag exist without having any members of the specified base type?",
                            "Does every instance of a bag have the has_member property linking to an individual of the base type?"
                        ]
                    },
                    {
                        "axiom": "bag datatype propertyRestrictions [has_operation some Delete:bag]",
                        "CQ": [
                            "Is it required for a bag to support at least one 'has_operation' relation to Delete:bag?",
                            "Must every bag possess a 'has_operation' link with some instance of Delete:bag?",
                            "Does the existence of a bag imply involvement in a 'has_operation' connection to a Delete:bag instance?"
                        ]
                    },
                    {
                        "axiom": "bag datatype propertyRestrictions [has_operation some IsEmpty:bag]",
                        "CQ": [
                            "Must every instance of 'bag' have at least one 'has_operation' relationship to 'IsEmpty:bag'?",
                            "Does the presence of 'has_operation' relating to 'IsEmpty:bag' define all bags?",
                            "Is it necessary for a 'bag' to perform the 'IsEmpty:bag' operation?"
                        ]
                    },
                    {
                        "axiom": "bag datatype propertyRestrictions [has_operation some Equal:bag]",
                        "CQ": [
                            "Does every bag require at least one operation characterized as Equal?",
                            "Is it necessary for a bag to always have an operation involving Equal?",
                            "Can a bag exist without having any operation of the type Equal?"
                        ]
                    },
                    {
                        "axiom": "bag datatype propertyRestrictions [has_member some bag generator]",
                        "CQ": [
                            "Does every bag necessarily have at least one member associated with a bag generator?",
                            "Is it required for a bag to possess a member that is related to a bag generator through the has_member property?",
                            "Can a bag exist without having any connection via has_member to a bag generator?"
                        ]
                    },
                    {
                        "axiom": "bag datatype propertyRestrictions [has_quality some non-numeric]",
                        "CQ": [
                            "Is every bag required to have at least one value for the has_quality property that is non-numeric?",
                            "Must a bag possess a non-numeric quality according to its has_quality property?",
                            "Does the ontology assert that there exists a non-numeric instance for the has_quality property of a bag?"
                        ]
                    },
                    {
                        "axiom": "bag datatype propertyRestrictions [has_operation some Serialize:bag]",
                        "CQ": [
                            "Is it required that a bag entity must support at least one operation of type Serialize specific to bag?",
                            "Does every bag possess an operational capability solely related to serialization as defined by Serialize:bag?",
                            "Can a bag exist within the ontology without having the has_operation property linked to Serialize:bag?"
                        ]
                    },
                    {
                        "axiom": "bag datatype propertyRestrictions [has_quality some exact]",
                        "CQ": [
                            "Is it required that every bag has at least one quality specified as exact?",
                            "Can a bag possess the quality 'exact' as defined by the property restriction?",
                            "Does the ontology constrain bags such that they must be associated with the quality 'exact' through the has_quality property?"
                        ]
                    }
                ]
            },
            "set datatype": {
                "axiom": {
                    "subClassOf": [
                        "homogenous  unordered aggregate datatype with variable size"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some non-ordered]",
                        "[has_operation some Lsln:set]",
                        "[has_operation some Intersection:set]",
                        "[has_member some base type]",
                        "[has_operation some SetOf:set]",
                        "[has_member some set generator]",
                        "[has_operation some Select:set]",
                        "[has_operation some Equal:class]",
                        "[has_quality some non-numeric]",
                        "[has_quality some exact]",
                        "[has_operation some Empty:set]",
                        "[has_operation some Difference:set]",
                        "[has_operation some Union:set]",
                        "[has_operation some Subset:set]"
                    ]
                },
                "description": "set datatype is a subclass of homogenous unordered aggregate datatype with variable size. It is characterized by being non-ordered, non-numeric, and exact. Individuals of this class have members that are of some base type or set generator and support operations such as set creation (Lsln:set), intersection, selection, equality checking, set construction (SetOf:set), checking emptiness (Empty:set), difference, union, and subset. This formalization reflects the mathematical concept of sets: collections consisting of distinct, unordered elements of the same type, with a well-defined suite of set-theoretic operations.",
                "CQ": [
                    {
                        "axiom": "set datatype subClassOf homogenous  unordered aggregate datatype with variable size",
                        "CQ": [
                            "Is set datatype classified as a specific kind of homogenous unordered aggregate datatype with variable size?",
                            "Which datatype categories encompass set datatype as a more specialized form?",
                            "What are the more specialized datatypes that fall under homogenous unordered aggregate datatype with variable size?"
                        ]
                    },
                    {
                        "axiom": "set datatype propertyRestrictions [has_quality some non-ordered]",
                        "CQ": [
                            "Must every instance that has 'has_quality' property possess at least one 'non-ordered' quality?",
                            "Is it obligatory for an entity with the 'has_quality' relation to always be associated with some non-ordered attribute?",
                            "Are there any entities for which the 'has_quality' property exists but does not connect to a non-ordered value?"
                        ]
                    },
                    {
                        "axiom": "set datatype propertyRestrictions [has_operation some Lsln:set]",
                        "CQ": [
                            "Is every instance of 'set' required to participate in at least one 'has_operation' relationship with an instance of 'Lsln:set'?",
                            "Must a 'set' always have some 'has_operation' link to 'Lsln:set' entities within the scope of this ontology?",
                            "Does the ontology specify that every 'set' is associated, via the 'has_operation' property, with at least one 'Lsln:set'?"
                        ]
                    },
                    {
                        "axiom": "set datatype propertyRestrictions [has_operation some Intersection:set]",
                        "CQ": [
                            "Must every instance with a 'set' have at least one 'has_operation' relationship to an entity of type 'Intersection:set'?",
                            "Is it required for entities classified as 'set' to participate in the 'has_operation' property with some 'Intersection:set'?",
                            "Does the ontology define that any 'set' must be associated via 'has_operation' with at least one instance belonging to 'Intersection:set'?"
                        ]
                    },
                    {
                        "axiom": "set datatype propertyRestrictions [has_member some base type]",
                        "CQ": [
                            "Is each set required to have at least one member from the base type through the has_member property?",
                            "Does any instance of set necessarily possess the has_member property with some value of base type?",
                            "For a given set, must there exist an association via has_member to an individual of base type?"
                        ]
                    },
                    {
                        "axiom": "set datatype propertyRestrictions [has_operation some SetOf:set]",
                        "CQ": [
                            "Is it required for every instance in 'set' to have at least one 'has_operation' relationship to an entity in 'SetOf:set'?",
                            "Can a 'set' entity exist without any associated 'has_operation' to a member of 'SetOf:set'?",
                            "Does the presence of a 'has_operation' link to an individual in 'SetOf:set' suffice for an entity to be recognized as part of the 'set' class?"
                        ]
                    },
                    {
                        "axiom": "set datatype propertyRestrictions [has_member some set generator]",
                        "CQ": [
                            "Is every instance of 'set' required to have at least one 'has_member' relationship to an instance of 'generator'?",
                            "Must a 'set' necessarily include at least one 'generator' as a member via 'has_member'?",
                            "Can an instance of 'set' exist without being linked to any 'generator' through the 'has_member' property?"
                        ]
                    },
                    {
                        "axiom": "set datatype propertyRestrictions [has_operation some Select:set]",
                        "CQ": [
                            "Is it necessary for an entity to have at least one 'has_operation' relationship with an instance of Select:set?",
                            "Does every instance within the scope of this ontology perform at least one operation classified under Select:set?",
                            "Can an individual possess the 'has_operation' property only if it is associated with the Select:set operation?"
                        ]
                    },
                    {
                        "axiom": "set datatype propertyRestrictions [has_operation some Equal:class]",
                        "CQ": [
                            "Must every instance of set have at least one has_operation relation to something classified as Equal?",
                            "Can a set exist without being associated, via has_operation, to the class Equal?",
                            "Is it obligatory for set to participate in the has_operation property with an individual of the Equal class?"
                        ]
                    },
                    {
                        "axiom": "set datatype propertyRestrictions [has_quality some non-numeric]",
                        "CQ": [
                            "Are all entities with the property 'has_quality' necessarily associated with at least one non-numeric value?",
                            "Does the existence of a 'has_quality' property for a given entity imply the presence of some non-numeric quality?",
                            "Can any entity be described using 'has_quality' only if it possesses at least one non-numeric attribute?"
                        ]
                    },
                    {
                        "axiom": "set datatype propertyRestrictions [has_quality some exact]",
                        "CQ": [
                            "Is every member of 'set' required to have at least one 'has_quality' relation to 'exact'?",
                            "Must instances of 'set' possess the property 'has_quality' with a value of 'exact'?",
                            "Does the class 'set' include only those entities that exhibit the 'has_quality' property with 'exact'?"
                        ]
                    },
                    {
                        "axiom": "set datatype propertyRestrictions [has_operation some Empty:set]",
                        "CQ": [
                            "Is it required that there exists at least one has_operation relationship to an instance of Empty for the concept set?",
                            "Does every set necessarily perform at least one operation that yields an Empty set?",
                            "Can a set exist without having any has_operation connection to Empty?"
                        ]
                    },
                    {
                        "axiom": "set datatype propertyRestrictions [has_operation some Difference:set]",
                        "CQ": [
                            "Must every instance in the defined set have at least one 'has_operation' relationship to a member of the Difference set?",
                            "Is it required for elements of the set to be associated via 'has_operation' with some Difference set element?",
                            "Are all set members necessarily connected by the 'has_operation' property to at least one Difference set entity?"
                        ]
                    },
                    {
                        "axiom": "set datatype propertyRestrictions [has_operation some Union:set]",
                        "CQ": [
                            "Is it required that instances of set have at least one has_operation relationship to a member of Union:set?",
                            "Can every set be related to at least one element in Union:set via the has_operation property?",
                            "Does the class set necessarily possess the has_operation property with some value from Union:set?"
                        ]
                    },
                    {
                        "axiom": "set datatype propertyRestrictions [has_operation some Subset:set]",
                        "CQ": [
                            "Is it required that every instance with property 'has_operation' must be associated with at least one member of the class 'Subset:set'?",
                            "Can an individual satisfy the axiom only if it participates in some 'has_operation' relation with an entity of type 'Subset:set'?",
                            "Does the ontology permit an entity with no 'has_operation' link to any 'Subset:set' instance to fulfill the property restriction?"
                        ]
                    }
                ]
            },
            "node component": {
                "axiom": {
                    "subClassOf": [
                        "graph aggregate component"
                    ],
                    "disjointWith": [
                        "edge component"
                    ]
                },
                "description": "node component is defined as a subclass of graph aggregate component and is explicitly disjoint with edge component, meaning an individual cannot simultaneously be a node component and an edge component. This class represents components within a graph structure that function as nodes, distinct from components serving as edges.",
                "CQ": [
                    {
                        "axiom": "node component subClassOf graph aggregate component",
                        "CQ": [
                            "Is node component an instance of the broader class of graph aggregate component?",
                            "Which components are classified as specializations of graph aggregate component, including node component?",
                            "What higher-level categories encompass node component in the ontology?"
                        ]
                    },
                    {
                        "axiom": "node component disjointWith edge component",
                        "CQ": [
                            "What is the formal distinction between node component and edge component within the ontology?",
                            "Is there any entity that can simultaneously be classified as both node component and edge component?",
                            "Which other classes are specified as disjoint with edge component?"
                        ]
                    }
                ]
            },
            "edge component": {
                "axiom": {
                    "subClassOf": [
                        "graph aggregate component"
                    ]
                },
                "description": "edge component is defined as a subclass of graph aggregate component. This means that every edge component is a specialized type of graph aggregate component, inheriting all its characteristics. The class represents a distinct part or module within the broader category of aggregated components in graph structures. No additional property restrictions or disjointness axioms are specified.",
                "CQ": [
                    {
                        "axiom": "edge component subClassOf graph aggregate component",
                        "CQ": [
                            "Is edge component included within the hierarchy of graph aggregate component?",
                            "Which components are classified as specializations of graph aggregate component, specifically noting edge component?",
                            "To what broader structural groups does edge component pertain?"
                        ]
                    }
                ]
            },
            "aggregate field component": {
                "axiom": {
                    "subClassOf": [
                        "field component"
                    ],
                    "disjointWith": [
                        "primitive field component"
                    ],
                    "propertyRestrictions": [
                        "[role_of some aggregate datatype]"
                    ]
                },
                "description": "aggregate field component is defined as a subclass of field component and is explicitly disjoint with primitive field component, meaning no instance can belong to both classes simultaneously. Every aggregate field component must play the role of or be associated with some aggregate datatype, as specified by the property restriction (role_of some aggregate datatype). This formalization captures that aggregate field components are complex field components characterized by their association with aggregate datatypes, distinguishing them from primitive field components.",
                "CQ": [
                    {
                        "axiom": "aggregate field component subClassOf field component",
                        "CQ": [
                            "Is aggregate field component categorized under the broader class of field component?",
                            "Which components are defined as specializations of field component, including aggregate field component?",
                            "To what higher-level classifications does aggregate field component pertain?"
                        ]
                    },
                    {
                        "axiom": "aggregate field component disjointWith primitive field component",
                        "CQ": [
                            "How is the mutual exclusivity of aggregate field component and primitive field component represented in the ontology?",
                            "Is there any field component classified simultaneously as both aggregate and primitive?",
                            "Which field component types are formally specified as disjoint with aggregate field component?"
                        ]
                    },
                    {
                        "axiom": "aggregate field component propertyRestrictions [role_of some aggregate datatype]",
                        "CQ": [
                            "Does every aggregate field necessarily include at least one component that plays the role_of some aggregate datatype?",
                            "Is it required for an aggregate field to have a component related through role_of to an aggregate datatype?",
                            "Can an aggregate field exist without any component that fulfills the role_of some aggregate datatype?"
                        ]
                    }
                ]
            },
            "primitive field component": {
                "axiom": {
                    "subClassOf": [
                        "field component"
                    ],
                    "propertyRestrictions": [
                        "[role_of some primitive datatype]"
                    ]
                },
                "description": "primitive field component is defined as a subclass of field component, where each member must play the role of some primitive datatype. This means that any primitive field component is intrinsically linked to a primitive datatype, distinguishing it from other types of field components that may be associated with more complex data structures.",
                "CQ": [
                    {
                        "axiom": "primitive field component subClassOf field component",
                        "CQ": [
                            "Is primitive field component a specialized form within the broader class of field component?",
                            "Which entities are direct subclasses of field component, including primitive field component?",
                            "What higher-level classes encompass primitive field component in the ontology hierarchy?"
                        ]
                    },
                    {
                        "axiom": "primitive field component propertyRestrictions [role_of some primitive datatype]",
                        "CQ": [
                            "Is every primitive field component necessarily associated with a role that plays some primitive datatype?",
                            "Must a primitive field component have at least one role linked to a primitive datatype?",
                            "Can a primitive field component exist without being connected via 'role_of' to a primitive datatype?"
                        ]
                    }
                ]
            },
            "labeled dataset descriptive field component": {
                "axiom": {
                    "subClassOf": [
                        "field component"
                    ]
                },
                "description": "labeled dataset descriptive field component is defined as a subclass of field component. This means every labeled dataset descriptive field component is by definition a type of field component. No additional property restrictions or disjointness constraints are specified, so its unique characterization is its specialization of the more general field component class.",
                "CQ": [
                    {
                        "axiom": "labeled dataset descriptive field component subClassOf field component",
                        "CQ": [
                            "Is every labeled dataset descriptive field component classified under the field component category?",
                            "What categories encompass labeled dataset descriptive field component as a more specific element?",
                            "Which components are more specific exemplars of field component, including labeled dataset descriptive field component?"
                        ]
                    }
                ]
            },
            "labeled dataset target field component": {
                "axiom": {
                    "subClassOf": [
                        "field component"
                    ]
                },
                "description": "labeled dataset target field component is defined as a subclass of field component. This means every labeled dataset target field component is a specific type of field component, typically representing the target variable in a labeled dataset. No additional property or disjointness restrictions are specified for this class.",
                "CQ": [
                    {
                        "axiom": "labeled dataset target field component subClassOf field component",
                        "CQ": [
                            "Is every labeled dataset target field component a specific kind of field component?",
                            "Which entities are classified as field component subclasses, such as labeled dataset target field component?",
                            "To which broader groups does labeled dataset target field component belong within the hierarchy of field component?"
                        ]
                    }
                ]
            },
            "void datatype": {
                "axiom": {
                    "subClassOf": [
                        "primitive datatype"
                    ],
                    "disjointWith": [
                        "non-numeric primitive datatype",
                        "numeric primitive datatype",
                        "non-numeric unordered primitive datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_operation some Equal:void]"
                    ]
                },
                "description": "void datatype is a subclass of primitive datatype and is explicitly disjoint from non-numeric primitive datatype, numeric primitive datatype, and non-numeric unordered primitive datatype—no individual can belong to more than one of these categories. Members of the void datatype class are characterized by supporting at least the Equal:void operation, meaning comparison for equality is defined. This class formalizes the concept of a primitive datatype that does not represent numeric or non-numeric unordered values, distinguishing it within datatype hierarchies.",
                "CQ": [
                    {
                        "axiom": "void datatype subClassOf primitive datatype",
                        "CQ": [
                            "Is void datatype categorized as a type of primitive datatype?",
                            "Which data types fall under the category of primitive datatype, specifically including void datatype?",
                            "To which higher-level data type groupings does void datatype conceptually belong?"
                        ]
                    },
                    {
                        "axiom": "void datatype disjointWith non-numeric primitive datatype",
                        "CQ": [
                            "What is the formal separation defined between void datatype and non-numeric primitive datatype?",
                            "Could an instance belong simultaneously to both void datatype and non-numeric primitive datatype?",
                            "Which datatypes are specified as incompatible with non-numeric primitive datatype?"
                        ]
                    },
                    {
                        "axiom": "void datatype disjointWith numeric primitive datatype",
                        "CQ": [
                            "What logical difference is asserted between void datatypes and numeric primitive datatypes in the ontology?",
                            "Is there any datatype that can simultaneously be classified as both a void datatype and a numeric primitive datatype?",
                            "Which datatypes are specified as disjoint with numeric primitive datatypes?"
                        ]
                    },
                    {
                        "axiom": "void datatype disjointWith non-numeric unordered primitive datatype",
                        "CQ": [
                            "How does the ontology differentiate between void datatypes and non-numeric unordered primitive datatypes?",
                            "Is there any datatype that can simultaneously be classified as both a void datatype and a non-numeric unordered primitive datatype?",
                            "Which additional datatypes are defined as mutually exclusive with non-numeric unordered primitive datatypes?"
                        ]
                    },
                    {
                        "axiom": "void datatype propertyRestrictions [has_operation some Equal:void]",
                        "CQ": [
                            "Is it a requirement for any void entity to have at least one has_operation relationship with an instance of Equal:void?",
                            "Does every void entity necessarily possess an operation of type Equal:void through the has_operation property?",
                            "Can a void exist without the has_operation property relating it to Equal:void?"
                        ]
                    }
                ]
            },
            "non-numeric primitive datatype": {
                "axiom": {
                    "subClassOf": [
                        "primitive datatype"
                    ],
                    "disjointWith": [
                        "numeric primitive datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some non-numeric]"
                    ]
                },
                "description": "non-numeric primitive datatype is a subclass of primitive datatype and is explicitly disjoint with numeric primitive datatype, ensuring no individual can belong to both classes simultaneously. Members of this class must possess at least one quality that is non-numeric, as specified by the existential property restriction [has_quality some non-numeric]. This formalization captures primitive datatypes whose essential characteristics are not quantifiable numerically.",
                "CQ": [
                    {
                        "axiom": "non-numeric primitive datatype subClassOf primitive datatype",
                        "CQ": [
                            "Is non-numeric primitive datatype categorized under primitive datatype?",
                            "Which types are included as subclasses of primitive datatype, such as non-numeric primitive datatype?",
                            "What are the broader categories that encompass non-numeric primitive datatype?"
                        ]
                    },
                    {
                        "axiom": "non-numeric primitive datatype disjointWith numeric primitive datatype",
                        "CQ": [
                            "How are non-numeric primitive datatypes and numeric primitive datatypes differentiated within the ontology?",
                            "Is there any datatype in the ontology that qualifies as both numeric and non-numeric primitive datatype?",
                            "Which datatypes are asserted as disjoint with numeric primitive datatypes?"
                        ]
                    },
                    {
                        "axiom": "non-numeric primitive datatype propertyRestrictions [has_quality some non-numeric]",
                        "CQ": [
                            "Is it necessary for a resource to have at least one 'has_quality' property value of non-numeric type?",
                            "Does the use of the 'has_quality' property guarantee assignment with only non-numeric values?",
                            "Can an entity exist without any non-numeric value for its 'has_quality' property?"
                        ]
                    }
                ]
            },
            "numeric primitive datatype": {
                "axiom": {
                    "subClassOf": [
                        "primitive datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some numeric]"
                    ]
                },
                "description": "numeric primitive datatype is defined as a subclass of primitive datatype and is characterized by the restriction that its instances must possess at least one quality that is numeric in nature. This class captures all primitive datatypes that inherently have numeric qualities, distinguishing them from other primitive datatypes that may not involve numeric properties.",
                "CQ": [
                    {
                        "axiom": "numeric primitive datatype subClassOf primitive datatype",
                        "CQ": [
                            "Is numeric primitive datatype categorized under the broader class of primitive datatype?",
                            "Which datatypes are considered specializations of primitive datatype, specifically including numeric primitive datatype?",
                            "To which more general datatype groups does numeric primitive datatype belong?"
                        ]
                    },
                    {
                        "axiom": "numeric primitive datatype propertyRestrictions [has_quality some numeric]",
                        "CQ": [
                            "Is it mandatory for every instance with a numeric primitive datatype property restriction to have at least one associated numeric quality?",
                            "Can an entity constrained by a numeric primitive datatype restriction exist without possessing any numeric quality?",
                            "Does the property 'has_quality' necessarily link instances with numeric primitive datatype restrictions to some numeric value?"
                        ]
                    }
                ]
            },
            "homogenous aggregate generator": {
                "axiom": {
                    "subClassOf": [
                        "aggregate generator"
                    ],
                    "disjointWith": [
                        "heterogenous aggregate generator"
                    ],
                    "equivalentClass": [
                        "(array generator or bag generator or sequence generator or set generator)"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some homogenous]"
                    ]
                },
                "description": "homogenous aggregate generator is defined as a subclass of aggregate generator and is equivalent to any generator that is an array generator, bag generator, sequence generator, or set generator. It is explicitly disjoint with heterogenous aggregate generator, meaning that no individual can belong to both classes simultaneously. Members of this class are further characterized by the property restriction that they must have at least one quality that is homogenous, indicating that the elements they generate are of a uniform type or nature.",
                "CQ": [
                    {
                        "axiom": "homogenous aggregate generator subClassOf aggregate generator",
                        "CQ": [
                            "Is homogenous aggregate generator classified under the category of aggregate generator?",
                            "Which specific types fall under aggregate generator, such as homogenous aggregate generator?",
                            "What upper-level groupings include homogenous aggregate generator?"
                        ]
                    },
                    {
                        "axiom": "homogenous aggregate generator disjointWith heterogenous aggregate generator",
                        "CQ": [
                            "What is the nature of the disjointness between homogenous aggregate generators and heterogenous aggregate generators?",
                            "Is it permissible for an entity to be classified as both a homogenous aggregate generator and a heterogenous aggregate generator?",
                            "Which types of generators are explicitly defined as disjoint with homogenous aggregate generators within the ontology?"
                        ]
                    },
                    {
                        "axiom": "homogenous aggregate generator equivalentClass (array generator or bag generator or sequence generator or set generator)",
                        "CQ": [
                            "Is every homogenous aggregate generator necessarily either an array generator, a bag generator, a sequence generator, or a set generator?",
                            "Is a homogenous aggregate generator equivalent to the union of array generator, bag generator, sequence generator, and set generator?",
                            "Are there any entities considered a homogenous aggregate generator that do not belong to array generator, bag generator, sequence generator, or set generator?"
                        ]
                    },
                    {
                        "axiom": "homogenous aggregate generator propertyRestrictions [has_quality some homogenous]",
                        "CQ": [
                            "Is it required that every aggregate generator possesses the quality of being homogenous?",
                            "Does an aggregate generator necessarily exhibit some homogenous characteristic?",
                            "Can an aggregate generator be classified as homogenous if it lacks the property 'has_quality' with homogenous?"
                        ]
                    }
                ]
            },
            "heterogenous aggregate generator": {
                "axiom": {
                    "subClassOf": [
                        "aggregate generator"
                    ],
                    "equivalentClass": [
                        "(class generator or record generator or table datatype)"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some heterogenous]"
                    ]
                },
                "description": "heterogenous aggregate generator is a subclass of aggregate generator and is equivalent to any class that is either a class generator, record generator, or table datatype. Members of this class possess the quality of being heterogenous, indicating that they generate or represent aggregates containing elements of diverse types or structures. This formalization ensures that any heterogenous aggregate generator is characterized by its structural diversity and can functionally align with multiple generator types.",
                "CQ": [
                    {
                        "axiom": "heterogenous aggregate generator subClassOf aggregate generator",
                        "CQ": [
                            "Is a heterogenous aggregate generator classified as a kind of aggregate generator?",
                            "Which aggregate generator types encompass heterogenous aggregate generators as subclasses?",
                            "What broader generator categories include heterogenous aggregate generator within their hierarchy?"
                        ]
                    },
                    {
                        "axiom": "heterogenous aggregate generator equivalentClass (class generator or record generator or table datatype)",
                        "CQ": [
                            "Is every heterogenous aggregate generator necessarily classified as either a class generator, a record generator, or a table datatype?",
                            "Is the class heterogenous aggregate generator logically equivalent to the union of class generator, record generator, and table datatype?",
                            "Does heterogenous aggregate generator include any entities besides those identified as class generator, record generator, or table datatype?"
                        ]
                    },
                    {
                        "axiom": "heterogenous aggregate generator propertyRestrictions [has_quality some heterogenous]",
                        "CQ": [
                            "Must every heterogenous aggregate generator possess at least one quality classified as heterogenous?",
                            "Is it required that a heterogenous aggregate generator exhibits the 'has_quality' relationship with an entity identified as heterogenous?",
                            "Does a heterogenous aggregate generator necessarily have some quality falling within the heterogenous category?"
                        ]
                    }
                ]
            },
            "non-numeric unordered primitive datatype": {
                "axiom": {
                    "subClassOf": [
                        "non-numeric primitive datatype"
                    ],
                    "disjointWith": [
                        "non-numeric ordered primitive datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some non-ordered]"
                    ]
                },
                "description": "non-numeric unordered primitive datatype is defined as a subclass of non-numeric primitive datatype, and is explicitly disjoint with non-numeric ordered primitive datatype, ensuring that no datatype can simultaneously be both unordered and ordered. Members of this class are characterized by the property restriction that they possess the quality of being non-ordered (has_quality some non-ordered), indicating that instances do not have an inherent order among their possible values.",
                "CQ": [
                    {
                        "axiom": "non-numeric unordered primitive datatype subClassOf non-numeric primitive datatype",
                        "CQ": [
                            "Does non-numeric unordered primitive datatype fall under the broader group of non-numeric primitive datatype?",
                            "Which primitive datatypes are specializations of non-numeric primitive datatype, specifically including non-numeric unordered primitive datatype?",
                            "What higher level categories encompass non-numeric unordered primitive datatype?"
                        ]
                    },
                    {
                        "axiom": "non-numeric unordered primitive datatype disjointWith non-numeric ordered primitive datatype",
                        "CQ": [
                            "What distinguishes non-numeric unordered primitive datatypes from non-numeric ordered primitive datatypes in the ontology?",
                            "Can a primitive datatype be classified as both non-numeric unordered and non-numeric ordered simultaneously?",
                            "Which primitive datatypes are defined as disjoint with non-numeric ordered primitive datatypes?"
                        ]
                    },
                    {
                        "axiom": "non-numeric unordered primitive datatype propertyRestrictions [has_quality some non-ordered]",
                        "CQ": [
                            "Is every instance with property 'has_quality' required to have at least one value from the class 'non-ordered'?",
                            "Must the property 'has_quality' always relate to some individual classified as 'non-ordered'?",
                            "Does possessing the 'has_quality' property necessarily entail an association with a 'non-ordered' value?"
                        ]
                    }
                ]
            },
            "non-numeric ordered primitive datatype": {
                "axiom": {
                    "subClassOf": [
                        "non-numeric primitive datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_quality some ordered]"
                    ]
                },
                "description": "non-numeric ordered primitive datatype is a subclass of non-numeric primitive datatype. Members of this class are characterized by possessing the quality of being ordered, meaning their values can be arranged in a specific sequence or order. This formalization specifies that any non-numeric primitive datatype classified here must inherently support order among its instances.",
                "CQ": [
                    {
                        "axiom": "non-numeric ordered primitive datatype subClassOf non-numeric primitive datatype",
                        "CQ": [
                            "Is every non-numeric ordered primitive datatype encompassed within the category of non-numeric primitive datatype?",
                            "Which datatypes are classified as specializations under non-numeric primitive datatype, such as non-numeric ordered primitive datatype?",
                            "To which broader datatype categories does non-numeric ordered primitive datatype belong?"
                        ]
                    },
                    {
                        "axiom": "non-numeric ordered primitive datatype propertyRestrictions [has_quality some ordered]",
                        "CQ": [
                            "Is it necessary for non-numeric ordered primitive datatype property restrictions to possess the 'has_quality' relationship with at least one instance of 'ordered'?",
                            "Can non-numeric ordered primitive datatype property restrictions exist without exhibiting some type of 'ordered' quality?",
                            "Does the presence of the 'has_quality' property with 'ordered' define all instances of non-numeric ordered primitive datatype property restrictions?"
                        ]
                    }
                ]
            },
            "homogenous aggregate datatype": {
                "axiom": {
                    "subClassOf": [
                        "aggregate datatype"
                    ],
                    "disjointWith": [
                        "heterogenous aggregate datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_member some homogenous aggregate generator]"
                    ]
                },
                "description": "homogenous aggregate datatype is defined as a subclass of aggregate datatype, and is explicitly disjoint with heterogenous aggregate datatype, ensuring that no individual can belong to both classes simultaneously. Members of this class are characterized by the property that they must have at least one member that is a homogenous aggregate generator. This formalization captures collections whose elements are produced by uniform (homogeneous) mechanisms, distinguishing them from heterogeneous aggregates both in structure and membership requirements.",
                "CQ": [
                    {
                        "axiom": "homogenous aggregate datatype subClassOf aggregate datatype",
                        "CQ": [
                            "Is homogenous aggregate datatype categorized under aggregate datatype?",
                            "Which specific types are included as subclasses of aggregate datatype?",
                            "What broader categories encompass homogenous aggregate datatype?"
                        ]
                    },
                    {
                        "axiom": "homogenous aggregate datatype disjointWith heterogenous aggregate datatype",
                        "CQ": [
                            "How is the concept of homogenous aggregate datatype differentiated from heterogenous aggregate datatype within the ontology?",
                            "Could any datatype be classified simultaneously as both a homogenous aggregate and a heterogenous aggregate?",
                            "Which datatypes, in addition to heterogenous aggregate datatype, are specified as disjoint with homogenous aggregate datatype?"
                        ]
                    },
                    {
                        "axiom": "homogenous aggregate datatype propertyRestrictions [has_member some homogenous aggregate generator]",
                        "CQ": [
                            "Is every homogenous aggregate required to have at least one member that is a homogenous aggregate generator?",
                            "Does a homogenous aggregate necessarily possess the property 'has_member' with respect to a homogenous aggregate generator?",
                            "Can a homogenous aggregate exist without any association via 'has_member' to a homogenous aggregate generator?"
                        ]
                    }
                ]
            },
            "heterogenous aggregate datatype": {
                "axiom": {
                    "subClassOf": [
                        "aggregate datatype"
                    ],
                    "propertyRestrictions": [
                        "[has_member some heterogenous aggregate generator]"
                    ]
                },
                "description": "heterogenous aggregate datatype is defined as a subclass of aggregate datatype. Members of this class are characterized by the existence of at least one member (via the has_member property) that is a heterogenous aggregate generator. This axiom formalizes that any instance of heterogenous aggregate datatype must include, as part of its structure, a heterogenous aggregate generator, distinguishing it from other kinds of aggregate datatypes.",
                "CQ": [
                    {
                        "axiom": "heterogenous aggregate datatype subClassOf aggregate datatype",
                        "CQ": [
                            "Is aggregate datatype a more general classification that includes heterogenous aggregate datatype?",
                            "Which specific aggregate datatypes are categorized as heterogenous aggregate datatype?",
                            "To what broader datatype groups does heterogenous aggregate datatype belong?"
                        ]
                    },
                    {
                        "axiom": "heterogenous aggregate datatype propertyRestrictions [has_member some heterogenous aggregate generator]",
                        "CQ": [
                            "Is every heterogenous aggregate required to have at least one member that is a heterogenous aggregate generator?",
                            "Must the property 'has_member' for a heterogenous aggregate always include a heterogenous aggregate generator as a possible member?",
                            "Can a heterogenous aggregate exist without being associated, via 'has_member', to any heterogenous aggregate generator?"
                        ]
                    }
                ]
            },
            "direct access property": {
                "axiom": {
                    "subClassOf": [
                        "access type"
                    ],
                    "disjointWith": [
                        "indirect acess property"
                    ],
                    "equivalentClass": [
                        "(index access or key access)"
                    ]
                },
                "description": "direct access property is a subclass of access type and is disjoint with indirect access property, meaning no property can be both a direct access property and an indirect access property. It is formally defined as being equivalent to either index access or key access, specifying that any direct access property allows retrieval via a direct key or index rather than through intermediary steps.",
                "CQ": [
                    {
                        "axiom": "direct access property subClassOf access type",
                        "CQ": [
                            "Is direct access property classified as a specific form of access type?",
                            "Which access types have direct access property as a more specialized subtype?",
                            "What broader access type categories encompass direct access property?"
                        ]
                    },
                    {
                        "axiom": "direct access property disjointWith indirect acess property",
                        "CQ": [
                            "Is any property classified as both a direct access property and an indirect access property within the ontology?",
                            "Which properties are explicitly specified as disjoint with indirect access properties?",
                            "What is the ontological distinction between direct access property and indirect access property?"
                        ]
                    },
                    {
                        "axiom": "direct access property equivalentClass (index access or key access)",
                        "CQ": [
                            "Is every instance with direct access property necessarily equivalent to either index access or key access?",
                            "Is direct access property defined as the union of index access and key access in the ontology?",
                            "Can something possessing direct access property be anything other than index access or key access?"
                        ]
                    }
                ]
            },
            "indirect acess property": {
                "axiom": {
                    "subClassOf": [
                        "access type"
                    ],
                    "equivalentClass": [
                        "(access by value or implementation dependent access or position access)"
                    ]
                },
                "description": "indirect access property is a subclass of access type, and is formally equivalent to any access performed either by value, in an implementation dependent manner, or by position. This means any instance of indirect access property is characterized by one or more of these access forms, distinguishing it from other access type subclasses.",
                "CQ": [
                    {
                        "axiom": "indirect acess property subClassOf access type",
                        "CQ": [
                            "Does indirect acess property fall under the broader classification of access type?",
                            "Which categories are more specific than access type, including indirect acess property?",
                            "What overarching types does indirect acess property belong to?"
                        ]
                    },
                    {
                        "axiom": "indirect acess property equivalentClass (access by value or implementation dependent access or position access)",
                        "CQ": [
                            "Is an indirect access property necessarily either an access by value, an implementation dependent access, or a position access?",
                            "Is the class of indirect access property equivalent to the union of access by value, implementation dependent access, and position access?",
                            "Are there any types of access that are not covered by access by value, implementation dependent access, or position access when defining indirect access property?"
                        ]
                    }
                ]
            },
            "add operation": {
                "axiom": {
                    "subClassOf": [
                        "dyadic aritmetic operation"
                    ]
                },
                "description": "add operation is defined as a subclass of dyadic arithmetic operation, indicating that it is an arithmetic operation that takes exactly two arguments. This formalization positions add operation within the hierarchy of arithmetic functions involving pairs of inputs, such as addition in standard mathematics.",
                "CQ": [
                    {
                        "axiom": "add operation subClassOf dyadic aritmetic operation",
                        "CQ": [
                            "Does the add operation fall under the category of dyadic arithmetic operations?",
                            "Which operations are subclasses of dyadic arithmetic operation, such as add operation?",
                            "What broader classifications include add operation as a specific example?"
                        ]
                    }
                ]
            },
            "multiply operation": {
                "axiom": {
                    "subClassOf": [
                        "dyadic aritmetic operation"
                    ]
                },
                "description": "multiply operation is defined as a subclass of dyadic arithmetic operation, indicating that it is an arithmetic operation involving exactly two operands. Instances of this class perform multiplication, processing two input values to produce their product.",
                "CQ": [
                    {
                        "axiom": "multiply operation subClassOf dyadic aritmetic operation",
                        "CQ": [
                            "Is multiply operation categorized under dyadic arithmetic operation?",
                            "Which operations are defined as specializations of dyadic arithmetic operation, such as multiply operation?",
                            "What broader classes encompass multiply operation in the context of arithmetic operations?"
                        ]
                    }
                ]
            },
            "Divide:scaled": {
                "axiom": {
                    "subClassOf": [
                        "dyadic aritmetic operation"
                    ]
                },
                "description": "Divide:scaled is defined as a subclass of dyadic arithmetic operation. This indicates that it represents an arithmetic operation involving two inputs (operands). No further description or distinguishing constraints are specified by the current axioms, so its meaning is inherited from the broader category of dyadic arithmetic operations.",
                "CQ": [
                    {
                        "axiom": "Divide:scaled subClassOf dyadic aritmetic operation",
                        "CQ": [
                            "Is Divide:scaled categorized under dyadic arithmetic operation?",
                            "What specific operations are subclasses of dyadic arithmetic operation, and does Divide:scaled appear among them?",
                            "Which broader arithmetic operation classes include Divide:scaled as a specialized form?"
                        ]
                    }
                ]
            },
            "delete operation": {
                "axiom": {
                    "subClassOf": [
                        "dyadic updating operation"
                    ]
                },
                "description": "delete operation is a subclass of dyadic updating operation. This means that every delete operation is considered a specific type of updating operation that involves two entities (typically an object and context). The axiom establishes the hierarchical relationship, indicating that delete operation inherits all structural characteristics of dyadic updating operations.",
                "CQ": [
                    {
                        "axiom": "delete operation subClassOf dyadic updating operation",
                        "CQ": [
                            "Is every delete operation classified as a kind of dyadic updating operation?",
                            "What operations belong under the broader category of dyadic updating operation, specifically including delete operation?",
                            "Which higher-level operation types encompass delete operation in their hierarchy?"
                        ]
                    }
                ]
            },
            "insert operation": {
                "axiom": {
                    "subClassOf": [
                        "dyadic updating operation"
                    ]
                },
                "description": "insert operation is defined as a subclass of dyadic updating operation. This means that every insert operation is considered a specific type of dyadic updating operation, typically involving two entities and resulting in an update. No further distinguishing characteristics or property restrictions are specified.",
                "CQ": [
                    {
                        "axiom": "insert operation subClassOf dyadic updating operation",
                        "CQ": [
                            "Is insert operation classified as a kind of dyadic updating operation?",
                            "Which specific operations are recognized under the category of dyadic updating operation?",
                            "What broader operational categories does insert operation fall under?"
                        ]
                    }
                ]
            },
            "Append:sequence": {
                "axiom": {
                    "subClassOf": [
                        "dyadic updating operation"
                    ]
                },
                "description": "Append:sequence is defined as a subclass of dyadic updating operation, meaning it is a specific type of operation that updates data by taking two inputs. This class formalizes the concept of appending one sequence to another as an update, inheriting the general properties of dyadic updating operations.",
                "CQ": [
                    {
                        "axiom": "Append:sequence subClassOf dyadic updating operation",
                        "CQ": [
                            "Is Append:sequence classified as a specialized form of dyadic updating operation?",
                            "Which operations are categorized under dyadic updating operation, such as Append:sequence?",
                            "What are the broader classes that encompass Append:sequence?"
                        ]
                    }
                ]
            },
            "AttributeFunctionOverride:class": {
                "axiom": {
                    "subClassOf": [
                        "dyadic updating operation"
                    ]
                },
                "description": "AttributeFunctionOverride:class is defined as a subclass of dyadic updating operation. This indicates that any member of AttributeFunctionOverride:class represents a special kind of operation within the scope of dyadic updating, where typically two entities are involved in an updating process. Without further restriction or description, all instances of this class inherit the structural and semantic characteristics of dyadic updating operations.",
                "CQ": [
                    {
                        "axiom": "AttributeFunctionOverride:class subClassOf dyadic updating operation",
                        "CQ": [
                            "Does AttributeFunctionOverride:class fall under the broader category of dyadic updating operation?",
                            "Which types exhibit a more specific scope than dyadic updating operation, such as AttributeFunctionOverride:class?",
                            "What overarching types does AttributeFunctionOverride:class inherit from within the ontology?"
                        ]
                    }
                ]
            },
            "AttributeReplace:class": {
                "axiom": {
                    "subClassOf": [
                        "dyadic updating operation"
                    ]
                },
                "description": "AttributeReplace:class is defined as a subclass of dyadic updating operation. This means it represents a type of operation that updates data by replacing an attribute, and, as a dyadic operation, it involves two input entities. No further restrictions, disjointness, or property constraints are specified in the axiom, so its primary characterization is as a specialized updating action within the context of dyadic operations.",
                "CQ": [
                    {
                        "axiom": "AttributeReplace:class subClassOf dyadic updating operation",
                        "CQ": [
                            "Is AttributeReplace:class categorized under the broader group of dyadic updating operations?",
                            "Which concepts are more specific forms of dyadic updating operation, such as AttributeReplace:class?",
                            "What are the higher-level classes that encompass AttributeReplace:class?"
                        ]
                    }
                ]
            },
            "FieldReplace:record": {
                "axiom": {
                    "subClassOf": [
                        "dyadic updating operation"
                    ]
                },
                "description": "FieldReplace:record is defined as a subclass of dyadic updating operation. This means that it represents a specific type of updating operation involving two arguments or entities. As a subclass, FieldReplace:record inherits all the general characteristics of dyadic updating operations and is further specialized to represent operations where a field in a record is replaced or updated. No additional restrictions or disjointness axioms are specified.",
                "CQ": [
                    {
                        "axiom": "FieldReplace:record subClassOf dyadic updating operation",
                        "CQ": [
                            "Is FieldReplace:record categorized under the group of dyadic updating operations?",
                            "Which dyadic updating operation subclasses include FieldReplace:record?",
                            "What higher-level operation types encompass FieldReplace:record?"
                        ]
                    }
                ]
            },
            "difference operation": {
                "axiom": {
                    "subClassOf": [
                        "dyadic operation"
                    ]
                },
                "description": "difference operation is defined as a subclass of dyadic operation, indicating it is a mathematical operation that requires exactly two operands. As a specific type of dyadic operation, the difference operation computes the result by evaluating the \"difference\" between its two input elements, distinguishing it from other dyadic operations such as sum or product.",
                "CQ": [
                    {
                        "axiom": "difference operation subClassOf dyadic operation",
                        "CQ": [
                            "Does the class of difference operations fall within the broader group of dyadic operations?",
                            "Which operations are classified as more specific types under dyadic operations, including difference operations?",
                            "What broader operation categories encompass the difference operation?"
                        ]
                    }
                ]
            },
            "dyadic select operation": {
                "axiom": {
                    "subClassOf": [
                        "dyadic operation"
                    ]
                },
                "description": "dyadic select operation is defined as a subclass of dyadic operation, signifying that it is a binary operation acting on two operands. No additional constraints or distinguishing characteristics are specified beyond its membership in the broader class of dyadic operations.",
                "CQ": [
                    {
                        "axiom": "dyadic select operation subClassOf dyadic operation",
                        "CQ": [
                            "Is every dyadic select operation also classified as a dyadic operation?",
                            "Which specialized operations fall under the category of dyadic operation, including dyadic select operation?",
                            "To what broader classes does dyadic select operation belong within the operation hierarchy?"
                        ]
                    }
                ]
            },
            "dyadic aritmetic operation": {
                "axiom": {
                    "subClassOf": [
                        "dyadic operation"
                    ]
                },
                "description": "dyadic arithmetic operation is defined as a subclass of dyadic operation, indicating that every dyadic arithmetic operation involves exactly two inputs (operands). This class specifically focuses on operations in the arithmetic domain (such as addition, subtraction, multiplication, or division), extending the more general concept of dyadic operations by emphasizing their application to arithmetic computations.",
                "CQ": [
                    {
                        "axiom": "dyadic aritmetic operation subClassOf dyadic operation",
                        "CQ": [
                            "Is every dyadic arithmetic operation classified under dyadic operation?",
                            "What other subclasses fall under dyadic operation alongside dyadic arithmetic operation?",
                            "Which broader classes include dyadic arithmetic operation within their hierarchy?"
                        ]
                    }
                ]
            },
            "dyadic logical operation": {
                "axiom": {
                    "subClassOf": [
                        "dyadic operation"
                    ]
                },
                "description": "dyadic logical operation is defined as a subclass of dyadic operation, meaning it is an operation that takes exactly two inputs. This class specifically refers to logical operations (such as AND, OR, XOR) applied to two operands, distinguishing it from other kinds of dyadic operations that may not be logical in nature.",
                "CQ": [
                    {
                        "axiom": "dyadic logical operation subClassOf dyadic operation",
                        "CQ": [
                            "Does every dyadic logical operation fall under the category of dyadic operation?",
                            "Which specific operations are classified as subclasses of dyadic operation, including dyadic logical operation?",
                            "What are the broader categories that encompass dyadic logical operation?"
                        ]
                    }
                ]
            },
            "dyadic set operation": {
                "axiom": {
                    "subClassOf": [
                        "dyadic operation"
                    ]
                },
                "description": "dyadic set operation is defined as a subclass of dyadic operation. This class encompasses operations that act on two sets as inputs. Members of this class must satisfy all properties of dyadic operations, specifically within the context of set-theoretic functions or relations.",
                "CQ": [
                    {
                        "axiom": "dyadic set operation subClassOf dyadic operation",
                        "CQ": [
                            "Is every dyadic set operation also classified as a dyadic operation?",
                            "What categories are broader than dyadic set operation, including dyadic operation?",
                            "Which specific types fall under the class dyadic operation, such as dyadic set operation?"
                        ]
                    }
                ]
            },
            "dyadic updating operation": {
                "axiom": {
                    "subClassOf": [
                        "dyadic operation"
                    ]
                },
                "description": "dyadic updating operation is defined as a subclass of dyadic operation, indicating that it involves two operands. While specific characteristics are not provided, this class inherits all properties of dyadic operations, typically meaning it operates on pairs of entities or values.",
                "CQ": [
                    {
                        "axiom": "dyadic updating operation subClassOf dyadic operation",
                        "CQ": [
                            "Does dyadic updating operation represent a specialized form of dyadic operation?",
                            "Which operations are encompassed by the broader class of dyadic operation, including dyadic updating operation?",
                            "Under which more general operation classifications does dyadic updating operation fall?"
                        ]
                    }
                ]
            },
            "dyadic comparison operation": {
                "axiom": {
                    "subClassOf": [
                        "dyadic operation"
                    ]
                },
                "description": "dyadic comparison operation is a subclass of dyadic operation. This class encompasses operations that involve two arguments and perform a comparative evaluation between them. Members of this class, as dyadic operations, specifically relate to comparison tasks (such as \"greater than\", \"less than\", or \"equal to\") applied to pairs of inputs.",
                "CQ": [
                    {
                        "axiom": "dyadic comparison operation subClassOf dyadic operation",
                        "CQ": [
                            "Are all dyadic comparison operations types of dyadic operations?",
                            "What specific operations are classified under dyadic operation, including dyadic comparison operation?",
                            "Which broader categories encompass dyadic comparison operation?"
                        ]
                    }
                ]
            },
            "dyadic retrieve operation": {
                "axiom": {
                    "subClassOf": [
                        "dyadic operation"
                    ]
                },
                "description": "dyadic retrieve operation is defined as a subclass of dyadic operation, indicating it is an operation that acts on exactly two inputs or entities. No further distinguishing axioms or properties are specified, so its classification relies solely on this generalization.",
                "CQ": [
                    {
                        "axiom": "dyadic retrieve operation subClassOf dyadic operation",
                        "CQ": [
                            "Does every dyadic retrieve operation fall under the category of dyadic operation?",
                            "Which types of operations are more specific than dyadic operation, such as dyadic retrieve operation?",
                            "What broader classes does dyadic retrieve operation belong to within the operation hierarchy?"
                        ]
                    }
                ]
            },
            "equal operation": {
                "axiom": {
                    "subClassOf": [
                        "dyadic comparison operation"
                    ]
                },
                "description": "equal operation is defined as a subclass of dyadic comparison operation. This class represents operations that perform a comparison between two entities and evaluate whether they are equal. As a refinement of dyadic comparison operation, equal operation specifically focuses on checking and indicating equality between two operands or values.",
                "CQ": [
                    {
                        "axiom": "equal operation subClassOf dyadic comparison operation",
                        "CQ": [
                            "Is equal operation classified as a type of dyadic comparison operation?",
                            "What operations fall under the category of dyadic comparison operation, such as equal operation?",
                            "To which broader operational classes does equal operation belong?"
                        ]
                    }
                ]
            },
            "in order operation": {
                "axiom": {
                    "subClassOf": [
                        "dyadic comparison operation"
                    ]
                },
                "description": "in order operation is defined as a subclass of dyadic comparison operation, indicating that it represents a specific type of comparison involving two entities. As a specialized comparison operation, in order operation inherits all characteristics of dyadic comparison operations but further constrains its meaning to those operations that assess or evaluate entities with respect to their sequence or ordering.",
                "CQ": [
                    {
                        "axiom": "in order operation subClassOf dyadic comparison operation",
                        "CQ": [
                            "Does in order operation fall under the category of dyadic comparison operation?",
                            "Which operations are recognized as specializations of dyadic comparison operation, such as in order operation?",
                            "What broader operation types encompass in order operation?"
                        ]
                    }
                ]
            },
            "isEmpty operation": {
                "axiom": {
                    "subClassOf": [
                        "boolean operation"
                    ]
                },
                "description": "isEmpty operation is defined as a subclass of boolean operation. This indicates that it represents a type of boolean operation, specifically one that evaluates a condition and returns a boolean value. No further restrictions or characteristics are provided by the axiom, so its primary purpose within the ontology is to serve as a specialized form of boolean operation.",
                "CQ": [
                    {
                        "axiom": "isEmpty operation subClassOf boolean operation",
                        "CQ": [
                            "Are all isEmpty operations classified under the category of boolean operations?",
                            "Which operations are considered specializations of boolean operation, such as isEmpty operation?",
                            "What broader operation categories encompass isEmpty operation within the ontology?"
                        ]
                    }
                ]
            },
            "nonNegative operation": {
                "axiom": {
                    "subClassOf": [
                        "boolean operation"
                    ]
                },
                "description": "nonNegative operation is a subclass of boolean operation. Any instance of nonNegative operation is, by definition, a type of boolean operation, inheriting all related properties and constraints. This classification indicates that nonNegative operation participates in logical or truth-value manipulations typical of boolean operations, but may have additional distinguishing characteristics defined outside of the given axioms.",
                "CQ": [
                    {
                        "axiom": "nonNegative operation subClassOf boolean operation",
                        "CQ": [
                            "Is every nonNegative operation encompassed within the category of boolean operation?",
                            "Which operations are more specific instances of boolean operation, such as nonNegative operation?",
                            "To which broader operation types does nonNegative operation belong?"
                        ]
                    }
                ]
            },
            "SetOf:set": {
                "axiom": {
                    "subClassOf": [
                        "boolean operation"
                    ]
                },
                "description": "SetOf:set is defined as a subclass of boolean operation, indicating that it represents a form of operation consistent with the principles of Boolean logic. Members of this class inherit properties and constraints applicable to boolean operations. No further description is provided, so the class is formally understood as a type of boolean operation.",
                "CQ": [
                    {
                        "axiom": "SetOf:set subClassOf boolean operation",
                        "CQ": [
                            "Which boolean operations include SetOf:set as a more specific category?",
                            "What are the more general classes that SetOf:set belongs to?",
                            "Does SetOf:set represent a subclass within the domain of boolean operation?"
                        ]
                    }
                ]
            },
            "negate operation": {
                "axiom": {
                    "subClassOf": [
                        "monadic operation"
                    ]
                },
                "description": "negate operation is defined as a subclass of monadic operation, meaning it represents an operation that acts on a single operand. As a monadic operation, negate operation typically involves transforming or inverting the value of its sole input.",
                "CQ": [
                    {
                        "axiom": "negate operation subClassOf monadic operation",
                        "CQ": [
                            "Is every negate operation encompassed within the category of monadic operations?",
                            "Which types of operations are classified as specializations of monadic operation, including negate operation?",
                            "To which higher-level operation classes does negate operation pertain?"
                        ]
                    }
                ]
            },
            "promote operation": {
                "axiom": {
                    "subClassOf": [
                        "monadic operation"
                    ]
                },
                "description": "promote operation is classified as a subclass of monadic operation. This indicates that promote operation is an operation involving a single operand or argument, inheriting all characteristics associated with monadic operations. No further distinguishing features or constraints are specified beyond its classification within this hierarchy.",
                "CQ": [
                    {
                        "axiom": "promote operation subClassOf monadic operation",
                        "CQ": [
                            "Does promote operation fall under the general category of monadic operation?",
                            "What specific operations are subclasses of monadic operation, including promote operation?",
                            "Which broader categories encompass promote operation?"
                        ]
                    }
                ]
            },
            "serialize operation": {
                "axiom": {
                    "subClassOf": [
                        "monadic operation"
                    ]
                },
                "description": "serialize operation is defined as a subclass of monadic operation. This means every serialize operation is, by definition, a type of monadic operation, inheriting its general behaviors and properties. There are no additional restrictions or relationships specified.",
                "CQ": [
                    {
                        "axiom": "serialize operation subClassOf monadic operation",
                        "CQ": [
                            "Is serialize operation classified under the broader category of monadic operation?",
                            "What specific types of monadic operation include serialize operation as a subclass?",
                            "Which general operation categories encompass serialize operation?"
                        ]
                    }
                ]
            },
            "successor operation": {
                "axiom": {
                    "subClassOf": [
                        "monadic operation"
                    ]
                },
                "description": "successor operation is defined as a subclass of monadic operation. This means that every successor operation is a type of operation that acts on a single argument. No additional restrictions or characteristics are specified, so the class inherits all properties of monadic operations.",
                "CQ": [
                    {
                        "axiom": "successor operation subClassOf monadic operation",
                        "CQ": [
                            "Is successor operation included in the set of operations classified as monadic operation?",
                            "Which specific operations fall under the more general category of monadic operation, such as successor operation?",
                            "What higher-level operation categories does successor operation belong to?"
                        ]
                    }
                ]
            },
            "Cast:choice": {
                "axiom": {
                    "subClassOf": [
                        "monadic operation"
                    ]
                },
                "description": "Cast:choice is defined as a subclass of monadic operation, indicating that it inherits all characteristics of monadic operations. This classification ensures that any instance of Cast:choice is considered a specific type of monadic operation, although further distinguishing properties or restrictions are not specified in the given axioms or description.",
                "CQ": [
                    {
                        "axiom": "Cast:choice subClassOf monadic operation",
                        "CQ": [
                            "Does Cast:choice fall under the category of monadic operation?",
                            "Which operations are classified as specializations of monadic operation, such as Cast:choice?",
                            "To which more general operation classes does Cast:choice belong?"
                        ]
                    }
                ]
            },
            "Dereference:pointer": {
                "axiom": {
                    "subClassOf": [
                        "monadic operation"
                    ]
                },
                "description": "Dereference:pointer is defined as a subclass of monadic operation. This means it represents a specific kind of monadic operation, typically referring to an action that takes a single operand and retrieves the value or object being pointed to by a pointer. Individuals of this class inherently possess the characteristics and constraints of monadic operations.",
                "CQ": [
                    {
                        "axiom": "Dereference:pointer subClassOf monadic operation",
                        "CQ": [
                            "Is Dereference:pointer categorized as a type of monadic operation?",
                            "Which specific operations are subclasses of monadic operation, such as Dereference:pointer?",
                            "What general operation categories encompass Dereference:pointer?"
                        ]
                    }
                ]
            },
            "Discriminant:choice": {
                "axiom": {
                    "subClassOf": [
                        "monadic operation"
                    ]
                },
                "description": "Discriminant:choice is defined as a subclass of monadic operation, indicating that it represents a specific type of operation that acts upon a single operand or input. No further restrictions or disjointness axioms are specified, so it inherits all characteristics of monadic operation while introducing the notion of 'choice' as its distinguishing feature.",
                "CQ": [
                    {
                        "axiom": "Discriminant:choice subClassOf monadic operation",
                        "CQ": [
                            "Is Discriminant:choice categorized under the broader concept of monadic operation?",
                            "Which concepts are more specifically classified than monadic operation, for example, Discriminant:choice?",
                            "To what higher-level operational categories does Discriminant:choice belong?"
                        ]
                    }
                ]
            },
            "Extend:time&date": {
                "axiom": {
                    "subClassOf": [
                        "monadic operation"
                    ]
                },
                "description": "Extend:time&date is defined as a subclass of monadic operation, indicating that it represents a single-argument operation within the ontology. No further restrictions or characteristics are specified beyond its placement in the class hierarchy as a specialized form of monadic operation.",
                "CQ": [
                    {
                        "axiom": "Extend:time&date subClassOf monadic operation",
                        "CQ": [
                            "Is Extend:time&date a specific type of monadic operation?",
                            "Which operations are included as subclasses under monadic operation, such as Extend:time&date?",
                            "What broader category does Extend:time&date belong to within the classification of operations?"
                        ]
                    }
                ]
            },
            "Invoke:procedure": {
                "axiom": {
                    "subClassOf": [
                        "monadic operation"
                    ]
                },
                "description": "Invoke:procedure is defined as a subclass of monadic operation, indicating that it represents a specific type of operation with a single argument or operand. This classification situates Invoke:procedure within the hierarchy of operations, emphasizing its functionality as a specialized, unary process. No further restrictions or disjoint relationships are specified.",
                "CQ": [
                    {
                        "axiom": "Invoke:procedure subClassOf monadic operation",
                        "CQ": [
                            "Is Invoke:procedure categorized under the broader class of monadic operation?",
                            "What specific operations are included as subclasses of monadic operation, such as Invoke:procedure?",
                            "Which more general concepts is Invoke:procedure classified under within the ontology?"
                        ]
                    }
                ]
            },
            "Not:boolean": {
                "axiom": {
                    "subClassOf": [
                        "monadic operation"
                    ]
                },
                "description": "Not:boolean is defined as a subclass of monadic operation, indicating that it is a single-argument logical operation. Members of this class represent logical operations that act on one boolean input to produce a boolean output, specifically performing logical negation.",
                "CQ": [
                    {
                        "axiom": "Not:boolean subClassOf monadic operation",
                        "CQ": [
                            "Does Not:boolean fall under the category of monadic operation?",
                            "Which operations are classified as subclasses of monadic operation, including Not:boolean?",
                            "What are the more general operation types that encompass Not:boolean?"
                        ]
                    }
                ]
            },
            "monadic aritmetic operation": {
                "axiom": {
                    "subClassOf": [
                        "monadic operation"
                    ]
                },
                "description": "monadic arithmetic operation is defined as a subclass of monadic operation. This means any instance of this class is a monadic operation (an operation with a single operand) specifically within the domain of arithmetic. It inherits all characteristics of monadic operations, restricted to those that perform arithmetic functions. No additional distinguishing axioms or constraints are currently specified.",
                "CQ": [
                    {
                        "axiom": "monadic aritmetic operation subClassOf monadic operation",
                        "CQ": [
                            "Is monadic arithmetic operation a specific kind of monadic operation?",
                            "Which operations are direct specializations of monadic operation, such as monadic arithmetic operation?",
                            "To which broader categories does monadic arithmetic operation belong?"
                        ]
                    }
                ]
            },
            "monadic retrive operation": {
                "axiom": {
                    "subClassOf": [
                        "monadic operation"
                    ]
                },
                "description": "monadic retrieve operation is defined as a subclass of monadic operation. This means every monadic retrieve operation is a type of monadic operation, inheriting all its characteristics. No further property or restriction axioms are specified, so its definition is limited to this hierarchical relationship.",
                "CQ": [
                    {
                        "axiom": "monadic retrive operation subClassOf monadic operation",
                        "CQ": [
                            "Is monadic retrive operation classified within the broader group of monadic operation?",
                            "Which specific operations are encompassed by the category monadic operation, such as monadic retrive operation?",
                            "What more general types does monadic retrive operation fall under?"
                        ]
                    }
                ]
            },
            "map operation": {
                "axiom": {
                    "subClassOf": [
                        "monadic operation"
                    ]
                },
                "description": "map operation is defined as a subclass of monadic operation. This indicates that every map operation is itself a type of monadic operation, inheriting its general properties. The map operation typically represents an action that applies a given function to each element within a structure (such as a list, set, or collection), producing a new structure of the same form with the results. No additional constraints or disjointness axioms are specified.",
                "CQ": [
                    {
                        "axiom": "map operation subClassOf monadic operation",
                        "CQ": [
                            "Does map operation fall under the category of monadic operation?",
                            "Which operations are classified as specializations of monadic operation, such as map operation?",
                            "What more general types include map operation as a member within their hierarchy?"
                        ]
                    }
                ]
            },
            "boolean operation": {
                "axiom": {
                    "subClassOf": [
                        "monadic operation"
                    ]
                },
                "description": "boolean operation is defined as a subclass of monadic operation. This indicates that every boolean operation is a kind of monadic operation, typically involving a single argument and producing a boolean output (true or false). The class encompasses operations that act on one operand and yield a binary (boolean) result.",
                "CQ": [
                    {
                        "axiom": "boolean operation subClassOf monadic operation",
                        "CQ": [
                            "Is every boolean operation classified as a type of monadic operation?",
                            "Which operation types are defined as more specific forms within monadic operation, such as boolean operation?",
                            "Into which broader operation classes does boolean operation fall?"
                        ]
                    }
                ]
            },
            "reciprocial operation": {
                "axiom": {
                    "subClassOf": [
                        "monadic aritmetic operation"
                    ]
                },
                "description": "reciprocal operation is formally defined as a subclass of monadic arithmetic operation, meaning it is an arithmetic operation that acts on a single operand. This class captures operations whose primary purpose is to return the multiplicative inverse (reciprocal) of their input value.",
                "CQ": [
                    {
                        "axiom": "reciprocial operation subClassOf monadic aritmetic operation",
                        "CQ": [
                            "Is every reciprocial operation classified under monadic aritmetic operation?",
                            "What types of operations are subsumed by monadic aritmetic operation, specifically including reciprocial operation?",
                            "Which broader arithmetic operation categories encompass reciprocial operation?"
                        ]
                    }
                ]
            },
            "round operation": {
                "axiom": {
                    "subClassOf": [
                        "monadic aritmetic operation"
                    ]
                },
                "description": "round operation is defined as a subclass of monadic arithmetic operation. This means every round operation acts on a single numerical input to produce its output, characterizing it as a unary arithmetic process, such as rounding a number to the nearest integer.",
                "CQ": [
                    {
                        "axiom": "round operation subClassOf monadic aritmetic operation",
                        "CQ": [
                            "Is round operation categorized as a type of monadic aritmetic operation?",
                            "Which operations are classified under monadic aritmetic operation, including round operation?",
                            "To which broader operation classes does round operation conceptually relate?"
                        ]
                    }
                ]
            },
            "SquareRoot:complex": {
                "axiom": {
                    "subClassOf": [
                        "monadic aritmetic operation"
                    ]
                },
                "description": "SquareRoot:complex is defined as a subclass of monadic arithmetic operation, indicating that it represents an arithmetic operation involving only one operand (monadic) in the context of complex numbers. This class formalizes the concept of computing the square root specifically within the domain of complex arithmetic.",
                "CQ": [
                    {
                        "axiom": "SquareRoot:complex subClassOf monadic aritmetic operation",
                        "CQ": [
                            "Is SquareRoot:complex classified as a specific kind of monadic aritmetic operation?",
                            "Which operations are subclasses of monadic aritmetic operation, such as SquareRoot:complex?",
                            "What more general categories encompass SquareRoot:complex in the context of arithmetic operations?"
                        ]
                    }
                ]
            },
            "monadic select operation": {
                "axiom": {
                    "subClassOf": [
                        "monadic retrive operation"
                    ]
                },
                "description": "monadic select operation is defined as a subclass of monadic retrieve operation. This means every monadic select operation is a type of monadic retrieve operation, inheriting its essential characteristics. No additional property restrictions or disjointness constraints are specified; thus, its definition is strictly as a specialized form of monadic retrieve operation with no further distinguishing axioms.",
                "CQ": [
                    {
                        "axiom": "monadic select operation subClassOf monadic retrive operation",
                        "CQ": [
                            "Is monadic select operation categorized as a kind of monadic retrive operation?",
                            "Which operations fall under the specialization of monadic retrive operation, such as monadic select operation?",
                            "To which parent operation class does monadic select operation belong?"
                        ]
                    }
                ]
            },
            "AttributeFunctionInvocation:class": {
                "axiom": {
                    "subClassOf": [
                        "monadic retrive operation"
                    ]
                },
                "description": "AttributeFunctionInvocation:class is defined as a subclass of monadic retrieve operation. This indicates that any instance of AttributeFunctionInvocation:class inherits the characteristics of a monadic retrieve operation, meaning it represents an operation that retrieves a value based on a single operand or argument. The class is intended to capture invocations related to retrieving attributes in a functional, monadic manner.",
                "CQ": [
                    {
                        "axiom": "AttributeFunctionInvocation:class subClassOf monadic retrive operation",
                        "CQ": [
                            "Is AttributeFunctionInvocation:class classified under the general category of monadic retrieve operation?",
                            "Which specialized forms of monadic retrive operation exist, including AttributeFunctionInvocation:class?",
                            "What broader operation categories encompass AttributeFunctionInvocation:class?"
                        ]
                    }
                ]
            },
            "AttributeSelect:class": {
                "axiom": {
                    "subClassOf": [
                        "monadic retrive operation"
                    ]
                },
                "description": "AttributeSelect:class is defined as a subclass of monadic retrieve operation. This means that any instance of AttributeSelect:class represents a specific type of retrieval operation that acts on a single operand to extract or select an attribute. By inheriting from monadic retrieve operation, AttributeSelect:class is characterized by supporting retrieval actions that involve one input and are focused on obtaining attribute-level data.",
                "CQ": [
                    {
                        "axiom": "AttributeSelect:class subClassOf monadic retrive operation",
                        "CQ": [
                            "Is AttributeSelect:class classified under monadic retrieve operation?",
                            "Which operations encompass AttributeSelect:class as a specific type within monadic retrieve operations?",
                            "To what broader categories related to retrieval does AttributeSelect:class belong?"
                        ]
                    }
                ]
            },
            "FieldSelect:record": {
                "axiom": {
                    "subClassOf": [
                        "monadic retrive operation"
                    ]
                },
                "description": "FieldSelect:record is defined as a subclass of monadic retrieve operation, meaning it represents a specialized form of retrieval operation within a monadic (single-argument or single-result) context. No additional restrictions or properties are specified, so any instance of FieldSelect:record is also an instance of monadic retrieve operation, inheriting all its characteristics.",
                "CQ": [
                    {
                        "axiom": "FieldSelect:record subClassOf monadic retrive operation",
                        "CQ": [
                            "Is FieldSelect:record classified as a specialized form of monadic retrive operation?",
                            "Which monadic retrive operation subclasses encompass FieldSelect:record?",
                            "What more general operations does FieldSelect:record inherit properties from?"
                        ]
                    }
                ]
            },
            "Head:sequence": {
                "axiom": {
                    "subClassOf": [
                        "monadic retrive operation"
                    ]
                },
                "description": "Head:sequence is defined as a subclass of monadic retrieve operation. This means that every instance of Head:sequence is also considered a monadic retrieve operation, inheriting its fundamental characteristics and constraints. The class does not specify additional axioms or restrictions beyond this hierarchical relationship.",
                "CQ": [
                    {
                        "axiom": "Head:sequence subClassOf monadic retrive operation",
                        "CQ": [
                            "Does Head:sequence fall under the broader classification of monadic retrive operation?",
                            "Which operations are considered more specific variants of monadic retrive operation, such as Head:sequence?",
                            "To which general operational categories does Head:sequence belong?"
                        ]
                    }
                ]
            },
            "Tail:sequence": {
                "axiom": {
                    "subClassOf": [
                        "monadic retrive operation"
                    ]
                },
                "description": "Tail:sequence is defined as a subclass of monadic retrieve operation. This classification means that any individual instance of Tail:sequence is also a type of monadic retrieve operation, inheriting its foundational characteristics. In the absence of further description or additional axioms, Tail:sequence is interpreted as a specific kind of retrieval operation within a monadic context, implying it operates under the rules and structure of monads—commonly used in functional programming and computational logic for chaining operations.",
                "CQ": [
                    {
                        "axiom": "Tail:sequence subClassOf monadic retrive operation",
                        "CQ": [
                            "Does Tail:sequence fall under the category of monadic retrive operation?",
                            "Which operations are considered more specific forms of monadic retrive operation, such as Tail:sequence?",
                            "What broader operation categories include Tail:sequence?"
                        ]
                    }
                ]
            },
            "countable": {
                "axiom": {
                    "subClassOf": [
                        "cardinality"
                    ]
                },
                "description": "countable is defined as a subclass of cardinality, indicating that it represents a specific type of cardinality. Members of the countable class are characterized by having a cardinality that can be matched with the set of natural numbers, distinguishing them from other forms of cardinality.",
                "CQ": [
                    {
                        "axiom": "countable subClassOf cardinality",
                        "CQ": [
                            "Is every countable entity also classified under cardinality?",
                            "Which types are included under the broader category of cardinality, including countable?",
                            "To which general concepts does the class countable belong?"
                        ]
                    }
                ]
            },
            "finite": {
                "axiom": {
                    "subClassOf": [
                        "cardinality"
                    ]
                },
                "description": "finite is a subclass of cardinality, indicating that it represents the concept of cardinalities that are limited or bounded. Any individual classified as finite is, by definition, also a cardinality but with the additional constraint that its size is not infinite.",
                "CQ": [
                    {
                        "axiom": "finite subClassOf cardinality",
                        "CQ": [
                            "Is finite categorized under the broader concept of cardinality?",
                            "Which subtypes are encompassed by cardinality, including finite?",
                            "What are the more general classes associated with finite?"
                        ]
                    }
                ]
            },
            "uncountable": {
                "axiom": {
                    "subClassOf": [
                        "cardinality"
                    ]
                },
                "description": "uncountable is defined as a subclass of cardinality, indicating that it represents a specific type of cardinality. Members of the uncountable class are those cardinalities that cannot be placed into a one-to-one correspondence with the natural numbers, distinguishing them from countable cardinalities.",
                "CQ": [
                    {
                        "axiom": "uncountable subClassOf cardinality",
                        "CQ": [
                            "Does uncountable represent a more specific form under the general concept of cardinality?",
                            "What types of cardinality include uncountable as a subclass?",
                            "Into which broader classes does uncountable fall within the cardinality hierarchy?"
                        ]
                    }
                ]
            },
            "bounded above": {
                "axiom": {
                    "subClassOf": [
                        "bounded"
                    ],
                    "disjointWith": [
                        "bounded below"
                    ]
                },
                "description": "bounded above is defined as a subclass of bounded, representing objects or sets that possess an upper bound. It is explicitly disjoint with bounded below, ensuring no individual can simultaneously be both bounded above and bounded below. This means any member of this class is characterized by having an upper bound but not a lower bound within the context of the ontology.",
                "CQ": [
                    {
                        "axiom": "bounded above subClassOf bounded",
                        "CQ": [
                            "Is bounded above categorized as a specific type within the general class of bounded?",
                            "Which classes fall under the category of bounded, specifically including bounded above?",
                            "To which broader classes does bounded above belong in the class hierarchy?"
                        ]
                    },
                    {
                        "axiom": "bounded above disjointWith bounded below",
                        "CQ": [
                            "How does the ontology differentiate between entities that are bounded above and those that are bounded below?",
                            "Is an entity permitted to belong simultaneously to both the bounded above and bounded below categories?",
                            "Which classes, apart from bounded above, are specified as disjoint with bounded below within the ontology?"
                        ]
                    }
                ]
            },
            "bounded below": {
                "axiom": {
                    "subClassOf": [
                        "bounded"
                    ]
                },
                "description": "bounded below is a subclass of bounded, representing entities that possess the property of being bounded in a particular way—specifically, from below. Any member of bounded below is, by definition, also a member of bounded.",
                "CQ": [
                    {
                        "axiom": "bounded below subClassOf bounded",
                        "CQ": [
                            "Is every instance of bounded below also an instance of bounded?",
                            "Which concepts are more specific than bounded, such as bounded below?",
                            "What broader categories does bounded below belong to within the ontology?"
                        ]
                    }
                ]
            },
            "unbounded above": {
                "axiom": {
                    "subClassOf": [
                        "unbounded"
                    ],
                    "disjointWith": [
                        "unbounded below"
                    ]
                },
                "description": "unbounded above is defined as a subclass of unbounded, representing entities that do not have an upper bound. It is explicitly disjoint with unbounded below, ensuring that no individual can simultaneously be both unbounded above and unbounded below. This class characterizes those entities that lack an upper limit but may or may not have a lower bound.",
                "CQ": [
                    {
                        "axiom": "unbounded above subClassOf unbounded",
                        "CQ": [
                            "Does unbounded above fall within the broader class of unbounded?",
                            "Which subclasses are encompassed by the category unbounded, including unbounded above?",
                            "What is the direct superclass of unbounded above?"
                        ]
                    },
                    {
                        "axiom": "unbounded above disjointWith unbounded below",
                        "CQ": [
                            "How does the ontology establish separation between unbounded above and unbounded below?",
                            "Is any entity classified as both unbounded above and unbounded below within the ontology?",
                            "Which classes are defined as mutually exclusive with unbounded above?"
                        ]
                    }
                ]
            },
            "unbounded below": {
                "axiom": {
                    "subClassOf": [
                        "unbounded"
                    ]
                },
                "description": "unbounded below is defined as a subclass of unbounded, meaning every instance of unbounded below is also an instance of unbounded. This class represents entities that specifically possess the characteristic of being unbounded on their lower side or extent, while inheriting all properties and restrictions from the broader unbounded class.",
                "CQ": [
                    {
                        "axiom": "unbounded below subClassOf unbounded",
                        "CQ": [
                            "Is unbounded a broader class that encompasses unbounded below?",
                            "What specific concepts are considered subclasses of unbounded, such as unbounded below?",
                            "Which higher-level categories include unbounded below?"
                        ]
                    }
                ]
            },
            "bounded": {
                "axiom": {
                    "subClassOf": [
                        "boundedness"
                    ],
                    "disjointWith": [
                        "unbounded"
                    ]
                },
                "description": "bounded is defined as a subclass of boundedness, representing entities that possess the property of being bounded. It is explicitly disjoint with unbounded, ensuring that no individual can be simultaneously classified as both bounded and unbounded. This classification enforces a strict separation between bounded and unbounded entities within the ontology.",
                "CQ": [
                    {
                        "axiom": "bounded subClassOf boundedness",
                        "CQ": [
                            "Is boundedness an encompassing category for all instances of bounded?",
                            "Which subcategories are defined under boundedness, and does this include bounded?",
                            "To what higher-level classifications does bounded directly pertain?"
                        ]
                    },
                    {
                        "axiom": "bounded disjointWith unbounded",
                        "CQ": [
                            "What is the nature of the distinction between bounded and unbounded entities within the ontology?",
                            "Is it permissible for a concept to be classified as both bounded and unbounded simultaneously?",
                            "Which classes are formally specified as incompatible with the concept of bounded?"
                        ]
                    }
                ]
            },
            "unbounded": {
                "axiom": {
                    "subClassOf": [
                        "boundedness"
                    ]
                },
                "description": "unbounded is defined as a subclass of boundedness. This indicates that unbounded is a specific type or form of boundedness, and any instance of unbounded is also considered an instance of boundedness. No additional property restrictions or disjointness axioms are specified, so the class is distinguished solely by its hierarchical relation.",
                "CQ": [
                    {
                        "axiom": "unbounded subClassOf boundedness",
                        "CQ": [
                            "Is unbounded a specialized concept within the broader class of boundedness?",
                            "Which subclasses fall under the category of boundedness, including unbounded?",
                            "To which more general categories does unbounded belong?"
                        ]
                    }
                ]
            },
            "approximate": {
                "axiom": {
                    "subClassOf": [
                        "exactness"
                    ],
                    "disjointWith": [
                        "exact"
                    ]
                },
                "description": "approximate is defined as a subclass of exactness, meaning it represents a kind or degree of exactness. It is explicitly disjoint with exact, so no individual can simultaneously be both approximate and exact. This class formalizes the notion of approximation as distinct from strict exactness within the ontology.",
                "CQ": [
                    {
                        "axiom": "approximate subClassOf exactness",
                        "CQ": [
                            "How does approximate relate hierarchically to exactness?",
                            "Which categories are more specific than exactness, such as approximate?",
                            "In which broader classes is approximate included?"
                        ]
                    },
                    {
                        "axiom": "approximate disjointWith exact",
                        "CQ": [
                            "What logical separation is established between approximate and exact in the ontology?",
                            "Is it valid for an entity to be classified as both approximate and exact simultaneously?",
                            "Which classes are explicitly defined as incompatible with exact?"
                        ]
                    }
                ]
            },
            "exact": {
                "axiom": {
                    "subClassOf": [
                        "exactness"
                    ]
                },
                "description": "exact is defined as a subclass of exactness, indicating that any instance of exact exhibits all characteristics associated with exactness. No additional constraints or distinguishing axioms are specified for this class.",
                "CQ": [
                    {
                        "axiom": "exact subClassOf exactness",
                        "CQ": [
                            "What is the hierarchical connection between exact and exactness?",
                            "Which classes are subsumed by exactness, including exact?",
                            "Under which broader categories does exact fall within the ontology?"
                        ]
                    }
                ]
            },
            "numeric": {
                "axiom": {
                    "subClassOf": [
                        "numericalness"
                    ],
                    "disjointWith": [
                        "non-numeric"
                    ]
                },
                "description": "numeric is defined as a subclass of numericalness, representing entities characterized by having numerical properties. It is explicitly disjoint with non-numeric, ensuring that no individual can simultaneously belong to both numeric and non-numeric classes. This formalization distinguishes numeric entities, which possess quantifiable or number-based characteristics, from those lacking such numerical nature.",
                "CQ": [
                    {
                        "axiom": "numeric subClassOf numericalness",
                        "CQ": [
                            "Is numericalness a superordinate category that covers numeric?",
                            "Which specific subclasses fall under the category of numericalness, such as numeric?",
                            "To which upper classes does numeric belong in the ontology hierarchy?"
                        ]
                    },
                    {
                        "axiom": "numeric disjointWith non-numeric",
                        "CQ": [
                            "What differentiates numeric entities from non-numeric entities in the ontology?",
                            "Is there any instance that can simultaneously be classified as numeric and non-numeric?",
                            "Which classes have an explicit incompatibility declared with non-numeric?"
                        ]
                    }
                ]
            },
            "non-numeric": {
                "axiom": {
                    "subClassOf": [
                        "numericalness"
                    ]
                },
                "description": "non-numeric is defined as a subclass of numericalness, indicating that every instance of non-numeric falls under the broader concept of numericalness. This class is intended to capture entities that are related to numericalness but are explicitly characterized by the absence of numeric value or representation.",
                "CQ": [
                    {
                        "axiom": "non-numeric subClassOf numericalness",
                        "CQ": [
                            "Does non-numeric fall under the broader classification of numericalness?",
                            "Which subclasses does numericalness encompass, specifically including non-numeric?",
                            "What are the broader categories that non-numeric is a part of within this ontology?"
                        ]
                    }
                ]
            },
            "ordered": {
                "axiom": {
                    "subClassOf": [
                        "order"
                    ],
                    "disjointWith": [
                        "non-ordered"
                    ]
                },
                "description": "ordered is defined as a subclass of order, indicating that all instances of ordered are also considered orders according to the ontology. It is explicitly disjoint with non-ordered, meaning that no individual can be simultaneously classified as both ordered and non-ordered. This formalization distinguishes entities that possess or exhibit ordering from those that do not.",
                "CQ": [
                    {
                        "axiom": "ordered subClassOf order",
                        "CQ": [
                            "Is ordered classified as a specific type of order?",
                            "Which subclasses are defined under the class order, including ordered?",
                            "What general classes does ordered inherit from?"
                        ]
                    },
                    {
                        "axiom": "ordered disjointWith non-ordered",
                        "CQ": [
                            "What formal separation exists between ordered and non-ordered entities within the ontology?",
                            "Is any instance permitted to belong simultaneously to both ordered and non-ordered types?",
                            "Which classes are declared as disjoint with ordered in the ontology?"
                        ]
                    }
                ]
            },
            "non-ordered": {
                "axiom": {
                    "subClassOf": [
                        "order"
                    ]
                },
                "description": "non-ordered is defined as a subclass of order. This means that every instance of non-ordered is also an instance of order, but represents a specialized form or category within the broader concept of order. No additional property restrictions or disjointness axioms are specified, so the class is distinguished solely by its hierarchical position as a subclass.",
                "CQ": [
                    {
                        "axiom": "non-ordered subClassOf order",
                        "CQ": [
                            "Can non-ordered be classified under the concept of order?",
                            "What categories fall under order as subclasses, including non-ordered?",
                            "Which broader types encompass non-ordered within the ontology structure?"
                        ]
                    }
                ]
            },
            "Add:complex": {
                "axiom": {
                    "subClassOf": [
                        "add operation"
                    ]
                },
                "description": "Add:complex is defined as a subclass of add operation, indicating that it represents a specific form of addition within the broader category of add operations. This formalization establishes that every instance of add:complex is also inherently an add operation, possibly specialized for use with complex numbers or structures, depending on further specification.",
                "CQ": [
                    {
                        "axiom": "Add:complex subClassOf add operation",
                        "CQ": [
                            "Does Add:complex fall under the category of add operation?",
                            "Which types of add operation include Add:complex as a specialization?",
                            "What broader classes encompass Add:complex within the ontology?"
                        ]
                    }
                ]
            },
            "Add:integer": {
                "axiom": {
                    "subClassOf": [
                        "add operation"
                    ]
                },
                "description": "Add:integer is defined as a subclass of add operation, indicating that it specifically represents addition operations where the operands are integers. Any individual that is an instance of Add:integer is inherently an add operation, but specialized for use with integer values.",
                "CQ": [
                    {
                        "axiom": "Add:integer subClassOf add operation",
                        "CQ": [
                            "Is Add:integer categorized under add operation in the ontology?",
                            "What operations are more specific than add operation, including Add:integer?",
                            "Which broader groups encompass Add:integer within the classification hierarchy?"
                        ]
                    }
                ]
            },
            "Add:rational": {
                "axiom": {
                    "subClassOf": [
                        "add operation"
                    ]
                },
                "description": "Add:rational is defined as a subclass of add operation, indicating that it represents a specialized type of addition focused on rational numbers. This class inherits all characteristics of add operations and is formally distinguished as pertaining to the addition of rational values.",
                "CQ": [
                    {
                        "axiom": "Add:rational subClassOf add operation",
                        "CQ": [
                            "Is add operation a broader class encompassing Add:rational?",
                            "What kinds of add operation exist as subclasses, such as Add:rational?",
                            "Which general classification does Add:rational fall under in the context of operations?"
                        ]
                    }
                ]
            },
            "Add:real": {
                "axiom": {
                    "subClassOf": [
                        "add operation"
                    ]
                },
                "description": "Add:real is defined as a subclass of add operation. This means that every instance of Add:real is an add operation, specifically focused on real numbers. The class inherits all the characteristics of generic add operations, but may specify additional constraints or behaviors relevant to addition in the domain of real numbers. No further restrictions or disjointness axioms are asserted.",
                "CQ": [
                    {
                        "axiom": "Add:real subClassOf add operation",
                        "CQ": [
                            "Is Add:real categorized as a type of add operation?",
                            "What operations fall under the subclass Add:real within add operation?",
                            "Which parent concepts encompass Add:real?"
                        ]
                    }
                ]
            },
            "Add:scaled": {
                "axiom": {
                    "subClassOf": [
                        "add operation"
                    ]
                },
                "description": "scaled is defined as a subclass of add operation. This means that any scaled operation is recognized as a specific type of add operation, inheriting all characteristics of add operations while potentially introducing its own specialized behavior or constraints. No further disjointness or property restrictions are specified for this class.",
                "CQ": [
                    {
                        "axiom": "Add:scaled subClassOf add operation",
                        "CQ": [
                            "Is add:scaled categorized as a specialized form of add operation?",
                            "Which subtypes are encompassed by add operation, including add:scaled?",
                            "What broader operations include add:scaled as a member?"
                        ]
                    }
                ]
            },
            "Delete:bag": {
                "axiom": {
                    "subClassOf": [
                        "delete operation"
                    ],
                    "disjointWith": [
                        "Delete:table"
                    ]
                },
                "description": "Delete:bag is defined as a subclass of delete operation, indicating that it represents a specific type of deletion action. It is also explicitly disjoint with Delete:table, ensuring that no individual can be both a Delete:bag and a Delete:table operation. This formalization distinguishes Delete:bag as a unique deletion process within the ontology, separate from deletion operations targeting tables.",
                "CQ": [
                    {
                        "axiom": "Delete:bag subClassOf delete operation",
                        "CQ": [
                            "Does Delete:bag fall under the category of delete operation?",
                            "Which subclasses are specified within delete operation, including Delete:bag?",
                            "What broader operations encompass Delete:bag as a specific type?"
                        ]
                    },
                    {
                        "axiom": "Delete:bag disjointWith Delete:table",
                        "CQ": [
                            "What distinguishes instances of Delete:bag from those of Delete:table in terms of their classification?",
                            "Is there any entity in the ontology that can belong to both Delete:bag and Delete:table simultaneously?",
                            "Which classes are asserted to be disjoint with Delete:table?"
                        ]
                    }
                ]
            },
            "Delete:table": {
                "axiom": {
                    "subClassOf": [
                        "delete operation"
                    ]
                },
                "description": "Delete:table is defined as a subclass of delete operation. This means that every instance of Delete:table is a specific type of delete operation, inheriting all characteristics of delete operations, and representing deletion actions applied at the table level.",
                "CQ": [
                    {
                        "axiom": "Delete:table subClassOf delete operation",
                        "CQ": [
                            "Is Delete:table categorized under delete operation?",
                            "Which operations are classified as subtypes of delete operation, such as Delete:table?",
                            "What broader operation category encompasses Delete:table?"
                        ]
                    }
                ]
            },
            "Difference:set": {
                "axiom": {
                    "subClassOf": [
                        "difference operation"
                    ],
                    "disjointWith": [
                        "Difference:time&date"
                    ]
                },
                "description": "Difference:set is defined as a subclass of the difference operation, representing the set-theoretic difference between collections or sets. It is explicitly disjoint with Difference:time&date, so no instance can be both a set difference and a time/date difference. This class captures operations or results concerning the removal of elements from one set that exist in another, and is restricted to set-based contexts.",
                "CQ": [
                    {
                        "axiom": "Difference:set subClassOf difference operation",
                        "CQ": [
                            "Does the Difference:set concept fall under the broader category of difference operation?",
                            "Which specific types are classified as subclasses of difference operation, and does Difference:set belong among them?",
                            "What general operations encompass Difference:set as a specialized form?"
                        ]
                    },
                    {
                        "axiom": "Difference:set disjointWith Difference:time&date",
                        "CQ": [
                            "What entities are considered mutually exclusive between Difference:set and Difference:time&date in the ontology?",
                            "Is there any instance that could simultaneously belong to both Difference:set and Difference:time&date?",
                            "Which classes does the ontology specify as being disjoint with Difference:set?"
                        ]
                    }
                ]
            },
            "Difference:time&date": {
                "axiom": {
                    "subClassOf": [
                        "difference operation"
                    ]
                },
                "description": "Difference:time&date is defined as a subclass of difference operation. This class represents operations specifically focused on calculating the difference between temporal values such as times or dates, distinguishing it from other types of difference operations. Members of this class inherit all properties and constraints associated with difference operations, but are restricted to application within time and date contexts.",
                "CQ": [
                    {
                        "axiom": "Difference:time&date subClassOf difference operation",
                        "CQ": [
                            "Is Difference:time&date categorized as a type of difference operation?",
                            "What difference operations have Difference:time&date as a more specific subclass?",
                            "Which higher-level operations does Difference:time&date fall under within the ontology?"
                        ]
                    }
                ]
            },
            "Select:array": {
                "axiom": {
                    "subClassOf": [
                        "dyadic select operation"
                    ],
                    "disjointWith": [
                        "Select:table"
                    ]
                },
                "description": "Select:array is defined as a subclass of dyadic select operation, indicating it is a specific kind of select operation involving two operands. It is explicitly disjoint with Select:table, ensuring no individual can be both a Select:array and a Select:table. This class is used to represent select operations that specifically operate on array data structures, and not on tables.",
                "CQ": [
                    {
                        "axiom": "Select:array subClassOf dyadic select operation",
                        "CQ": [
                            "Is Select:array classified as a specific type of dyadic select operation?",
                            "Which operations fall under the classification of dyadic select operation, including Select:array?",
                            "To which broader operational categories does Select:array belong?"
                        ]
                    },
                    {
                        "axiom": "Select:array disjointWith Select:table",
                        "CQ": [
                            "What formal difference is established between Select:array and Select:table in the ontology?",
                            "Is there any entity that can simultaneously be an instance of both Select:array and Select:table?",
                            "Which classes in the ontology are asserted as mutually exclusive with Select:table?"
                        ]
                    }
                ]
            },
            "Select:table": {
                "axiom": {
                    "subClassOf": [
                        "dyadic select operation"
                    ]
                },
                "description": "Select:table is defined as a subclass of dyadic select operation, indicating that it represents a specific type of select operation involving two inputs or components. This class inherits all the characteristics and constraints of dyadic select operations, and any instance of Select:table is, by definition, also an instance of a dyadic select operation. No additional restrictions or disjointness axioms are specified.",
                "CQ": [
                    {
                        "axiom": "Select:table subClassOf dyadic select operation",
                        "CQ": [
                            "Is Select:table classified as a type of dyadic select operation?",
                            "What are the specific select operations categorized under dyadic select operation, such as Select:table?",
                            "Which higher-level categories does Select:table fall under within the ontology?"
                        ]
                    }
                ]
            },
            "Equal:array": {
                "axiom": {
                    "subClassOf": [
                        "equal operation"
                    ]
                },
                "description": "Equal:array is defined as a subclass of equal operation. This means Equal:array represents a specific type of equality operation, typically involving arrays, and inherits all the general characteristics of equal operations. No additional property restrictions or disjointness axioms are specified.",
                "CQ": [
                    {
                        "axiom": "Equal:array subClassOf equal operation",
                        "CQ": [
                            "Is Equal:array classified under equal operation in the ontology?",
                            "Which operations are specified as subclasses within equal operation?",
                            "What broader operation categories include Equal:array as a specialized form?"
                        ]
                    }
                ]
            },
            "Equal:bag": {
                "axiom": {
                    "subClassOf": [
                        "equal operation"
                    ]
                },
                "description": "Equal:bag is defined as a subclass of equal operation, indicating that it represents a specific type of equality evaluation or operation. Any instance of Equal:bag inherits all characteristics of equal operation, positioning it within the broader context of equality comparisons. There are currently no additional restrictions or disjointness axioms specified for this class.",
                "CQ": [
                    {
                        "axiom": "Equal:bag subClassOf equal operation",
                        "CQ": [
                            "Is Equal:bag classified under the category of equal operation?",
                            "What specific operations are subsumed by equal operation, including Equal:bag?",
                            "Which higher-level operation categories encompass Equal:bag?"
                        ]
                    }
                ]
            },
            "Equal:boolean": {
                "axiom": {
                    "subClassOf": [
                        "equal operation"
                    ]
                },
                "description": "Equal:boolean is a subclass of equal operation, representing operations that specifically check or enforce equality between two boolean values. Any individual of this class is an instance of an equal operation, with its domain restricted to boolean-type operands.",
                "CQ": [
                    {
                        "axiom": "Equal:boolean subClassOf equal operation",
                        "CQ": [
                            "Does Equal:boolean represent a specialized type of equal operation?",
                            "Which concepts are classified as more specific versions under equal operation, including Equal:boolean?",
                            "Into which broader categories can Equal:boolean be grouped?"
                        ]
                    }
                ]
            },
            "Equal:character": {
                "axiom": {
                    "subClassOf": [
                        "equal operation"
                    ]
                },
                "description": "Equal:character is defined as a subclass of equal operation. This means every instance of Equal:character represents a specific kind of equality operation, likely focused on comparing characters. Since it inherits all characteristics of equal operation, Equal:character is used where character equality checks are required.",
                "CQ": [
                    {
                        "axiom": "Equal:character subClassOf equal operation",
                        "CQ": [
                            "Is Equal:character classified as a kind of equal operation?",
                            "Which specific operations fall under the category of equal operation, such as Equal:character?",
                            "What are the parent classes for Equal:character within the ontology?"
                        ]
                    }
                ]
            },
            "Equal:choice": {
                "axiom": {
                    "subClassOf": [
                        "equal operation"
                    ]
                },
                "description": "Equal:choice is a subclass of equal operation, indicating that each instance of Equal:choice is a specialized form of equal operation. No additional restrictions, disjointness, or property constraints are defined for this class, so its characterization is derived solely from its position in the class hierarchy.",
                "CQ": [
                    {
                        "axiom": "Equal:choice subClassOf equal operation",
                        "CQ": [
                            "Is Equal:choice classified under the broader category of equal operation?",
                            "Which operations are considered specializations of equal operation, including Equal:choice?",
                            "What more general categories encompass Equal:choice within the ontology?"
                        ]
                    }
                ]
            },
            "Equal:class": {
                "axiom": {
                    "subClassOf": [
                        "equal operation"
                    ]
                },
                "description": "Equal:class is defined as a subclass of equal operation, indicating that every instance of Equal:class is a specific type of equal operation. This formalization ensures that any individual classified as Equal:class must also satisfy the properties and constraints of equal operations within the ontology.",
                "CQ": [
                    {
                        "axiom": "Equal:class subClassOf equal operation",
                        "CQ": [
                            "Is Equal:class categorized under equal operation?",
                            "What operations are broader in scope than Equal:class?",
                            "Which specific types are classified beneath equal operation, including Equal:class?"
                        ]
                    }
                ]
            },
            "Equal:complex": {
                "axiom": {
                    "subClassOf": [
                        "equal operation"
                    ]
                },
                "description": "Equal:complex is defined as a subclass of equal operation. This means that every instance classified as Equal:complex is, by definition, also an instance of equal operation. No further distinguishing axioms or restrictions are specified for this class beyond its hierarchical placement.",
                "CQ": [
                    {
                        "axiom": "Equal:complex subClassOf equal operation",
                        "CQ": [
                            "Is Equal:complex categorized under equal operation?",
                            "Which equal operations have more specific types such as Equal:complex?",
                            "What broader operation classes encapsulate Equal:complex?"
                        ]
                    }
                ]
            },
            "Equal:enumerated": {
                "axiom": {
                    "subClassOf": [
                        "equal operation"
                    ]
                },
                "description": "Equal:enumerated is defined as a subclass of equal operation. This indicates that every instance of Equal:enumerated represents a specific kind of equal operation, inheriting all characteristics of equal operation while potentially introducing further constraints or properties relevant to enumerated equality.",
                "CQ": [
                    {
                        "axiom": "Equal:enumerated subClassOf equal operation",
                        "CQ": [
                            "Does Equal:enumerated represent a specialized form of equal operation?",
                            "Which operations are classified as subtypes under equal operation, including Equal:enumerated?",
                            "To what more general operation classes does Equal:enumerated belong?"
                        ]
                    }
                ]
            },
            "Equal:integer": {
                "axiom": {
                    "subClassOf": [
                        "equal operation"
                    ]
                },
                "description": "Equal:integer is defined as a subclass of equal operation, indicating that it represents a specialized type of equality operation specifically applied to integers. Any instance of Equal:integer is inherently an equal operation, but it is characterized by its restriction to operands of the integer type.",
                "CQ": [
                    {
                        "axiom": "Equal:integer subClassOf equal operation",
                        "CQ": [
                            "Is Equal:integer categorized under the broader class of equal operation?",
                            "Which subclasses are encompassed by equal operation, such as Equal:integer?",
                            "What more general classes include Equal:integer within their hierarchy?"
                        ]
                    }
                ]
            },
            "Equal:ordinal": {
                "axiom": {
                    "subClassOf": [
                        "equal operation"
                    ]
                },
                "description": "Equal:ordinal is defined as a subclass of equal operation, indicating that it specifically represents equality operations within the context of ordinal numbers or positions. Instances of this class inherit all properties of equal operations but are semantically restricted to comparisons involving ordinality.",
                "CQ": [
                    {
                        "axiom": "Equal:ordinal subClassOf equal operation",
                        "CQ": [
                            "Does Equal:ordinal fall under the category of equal operation?",
                            "Which specific operations are specialized forms of equal operation, such as Equal:ordinal?",
                            "What parent operation categories does Equal:ordinal pertain to?"
                        ]
                    }
                ]
            },
            "Equal:pointer": {
                "axiom": {
                    "subClassOf": [
                        "equal operation"
                    ]
                },
                "description": "Equal:pointer is defined as a subclass of equal operation. This means it inherits all characteristics of an equal operation and represents a specific form or type of equality operation within the ontology. There are no further restrictions or differentiating axioms provided, so it can be broadly understood as any equality operation that is categorized or implemented as a \"pointer.\"",
                "CQ": [
                    {
                        "axiom": "Equal:pointer subClassOf equal operation",
                        "CQ": [
                            "Does Equal:pointer fall under the category of equal operation?",
                            "What specific operations are subclasses of equal operation, including Equal:pointer?",
                            "To which higher-level operation types does Equal:pointer belong?"
                        ]
                    }
                ]
            },
            "Equal:procedure": {
                "axiom": {
                    "subClassOf": [
                        "equal operation"
                    ]
                },
                "description": "Equal:procedure is defined as a subclass of equal operation, indicating that it represents a specific type of equal operation. All instances of Equal:procedure inherit the characteristics and constraints of equal operations. No additional restrictions or properties are specified beyond this subclass relationship.",
                "CQ": [
                    {
                        "axiom": "Equal:procedure subClassOf equal operation",
                        "CQ": [
                            "Does Equal:procedure represent a specific type of equal operation?",
                            "Which equal operations have more specific subclasses such as Equal:procedure?",
                            "What broader classes encompass Equal:procedure within the hierarchy?"
                        ]
                    }
                ]
            },
            "Equal:rational": {
                "axiom": {
                    "subClassOf": [
                        "equal operation"
                    ]
                },
                "description": "Equal:rational is defined as a subclass of equal operation. This means every instance of Equal:rational is also an instance of equal operation, inheriting its properties and characteristics. This class specifically represents the application of equality within the context of rational values, distinguishing it from other types of equal operations.",
                "CQ": [
                    {
                        "axiom": "Equal:rational subClassOf equal operation",
                        "CQ": [
                            "Does Equal:rational fall under the broader concept of equal operation?",
                            "Which operations are categorized as more specific types within equal operation, such as Equal:rational?",
                            "To which more general operation classes does Equal:rational belong?"
                        ]
                    }
                ]
            },
            "Equal:real": {
                "axiom": {
                    "subClassOf": [
                        "equal operation"
                    ]
                },
                "description": "Equal:real is defined as a subclass of equal operation, representing equality operations that specifically pertain to real numbers. Any instance of Equal:real is an equal operation, and this class captures the concept of evaluating or asserting equality within the domain of real numbers.",
                "CQ": [
                    {
                        "axiom": "Equal:real subClassOf equal operation",
                        "CQ": [
                            "Is Equal:real classified as a kind of equal operation?",
                            "Which specific equal operations include Equal:real as a subclass?",
                            "What are the broader categories under which Equal:real is organized?"
                        ]
                    }
                ]
            },
            "Equal:record": {
                "axiom": {
                    "subClassOf": [
                        "equal operation"
                    ]
                },
                "description": "Equal:record is defined as a subclass of equal operation, indicating that it represents a specialized form of comparison operation focused on evaluating equality. All instances of Equal:record inherit the characteristics and constraints associated with equal operations.",
                "CQ": [
                    {
                        "axiom": "Equal:record subClassOf equal operation",
                        "CQ": [
                            "Does Equal:record fall under the broader class of equal operation?",
                            "Which entities are direct specializations of equal operation, such as Equal:record?",
                            "What general concepts encompass Equal:record in the ontology?"
                        ]
                    }
                ]
            },
            "Equal:scaled": {
                "axiom": {
                    "subClassOf": [
                        "equal operation"
                    ]
                },
                "description": "Equal:scaled is defined as a subclass of equal operation, meaning it inherits all characteristics of equal operations. This class represents a specific type of equal operation, but is further specialized under the general category of equality operations. There are no additional restrictions or disjointness axioms specified.",
                "CQ": [
                    {
                        "axiom": "Equal:scaled subClassOf equal operation",
                        "CQ": [
                            "Is Equal:scaled categorized under equal operation in the ontology?",
                            "Which operations are included as subclasses within equal operation, such as Equal:scaled?",
                            "To what broader operation categories does Equal:scaled belong according to the ontology?"
                        ]
                    }
                ]
            },
            "Equal:sequence": {
                "axiom": {
                    "subClassOf": [
                        "equal operation"
                    ]
                },
                "description": "Equal:sequence is defined as a subclass of equal operation, indicating that it represents a specific type of equality operation. Any instance of Equal:sequence is thus an equal operation, inheriting its general characteristics and semantic constraints. No additional restrictions or disjointness axioms are specified, so its primary distinguishing feature is its specialization within the equal operation hierarchy.",
                "CQ": [
                    {
                        "axiom": "Equal:sequence subClassOf equal operation",
                        "CQ": [
                            "Does Equal:sequence fall under the category of equal operation?",
                            "Which specific operations are categorized as equal operations, such as Equal:sequence?",
                            "What broader categories include Equal:sequence as a more specific subclass?"
                        ]
                    }
                ]
            },
            "Equal:set": {
                "axiom": {
                    "subClassOf": [
                        "equal operation"
                    ]
                },
                "description": "Equal:set is defined as a subclass of equal operation. This means that every instance of Equal:set is a type of equal operation, inheriting all characteristics and properties of equal operations. No further constraints or disjointness are specified, so its primary ontological role is to represent a specific kind or subset of equal operations.",
                "CQ": [
                    {
                        "axiom": "Equal:set subClassOf equal operation",
                        "CQ": [
                            "Is Equal:set classified as a subclass within equal operation?",
                            "Which operations are broader in scope than Equal:set under equal operation?",
                            "What specific subcategories are encompassed by equal operation, including Equal:set?"
                        ]
                    }
                ]
            },
            "Equal:discrete": {
                "axiom": {
                    "subClassOf": [
                        "equal operation"
                    ]
                },
                "description": "Equal:discrete is a subclass of equal operation, representing a specific type of equality operation within the ontology. Any instance classified as Equal:discrete inherently possesses all characteristics of equal operation, but denotes a discrete (distinct and separate) form of equality as opposed to potentially other forms covered under the broader parent class.",
                "CQ": [
                    {
                        "axiom": "Equal:discrete subClassOf equal operation",
                        "CQ": [
                            "Is Equal:discrete classified under the general category of equal operation?",
                            "Which operations are considered specific types within equal operation, such as Equal:discrete?",
                            "What are the broader operation categories encompassing Equal:discrete?"
                        ]
                    }
                ]
            },
            "Equal:table": {
                "axiom": {
                    "subClassOf": [
                        "equal operation"
                    ]
                },
                "description": "Equal:table is defined as a subclass of equal operation, indicating that it represents a specific type of equal operation within the ontology. There are no further restrictions or disjointness axioms provided, so its characteristics are inherited entirely from equal operation. This formalization ensures that every instance of Equal:table is also considered an instance of equal operation.",
                "CQ": [
                    {
                        "axiom": "Equal:table subClassOf equal operation",
                        "CQ": [
                            "Does Equal:table fall under the category of equal operation?",
                            "Which operations are subcategories of equal operation, specifically including Equal:table?",
                            "What overarching categories does Equal:table belong to within the ontology?"
                        ]
                    }
                ]
            },
            "Equal:time&date": {
                "axiom": {
                    "subClassOf": [
                        "equal operation"
                    ]
                },
                "description": "Equal:time&date is defined as a subclass of equal operation. This class represents equality operations specifically applied to time and date values, inheriting all characteristics of general equal operations while restricting its domain to temporal data. There are no additional property restrictions or disjointness axioms specified.",
                "CQ": [
                    {
                        "axiom": "Equal:time&date subClassOf equal operation",
                        "CQ": [
                            "Is equal:time&date classified as a type of equal operation?",
                            "Which specific operations are categorized under equal operation, such as equal:time&date?",
                            "What broader operational categories encompass equal:time&date?"
                        ]
                    }
                ]
            },
            "Equal:void": {
                "axiom": {
                    "subClassOf": [
                        "equal operation"
                    ]
                },
                "description": "Equal:void is defined as a subclass of equal operation, indicating that it represents a specific type of equality operation within the ontology. Instances of Equal:void inherit all characteristics of equal operation but are further specialized to reflect this subclass distinction. No additional constraints or property restrictions are present.",
                "CQ": [
                    {
                        "axiom": "Equal:void subClassOf equal operation",
                        "CQ": [
                            "Does Equal:void represent a specialized form of equal operation?",
                            "Which concepts are included as narrower types under equal operation, such as Equal:void?",
                            "Of which broader categories is Equal:void a member in relation to equal operation?"
                        ]
                    }
                ]
            },
            "InOrder:enumerated": {
                "axiom": {
                    "subClassOf": [
                        "in order operation"
                    ]
                },
                "description": "InOrder:enumerated is defined as a subclass of in order operation. This indicates that it inherits all characteristics of in order operations, and further restricts its members to those specifically classified as InOrder:enumerated. No additional disjointness or property restrictions are specified.",
                "CQ": [
                    {
                        "axiom": "InOrder:enumerated subClassOf in order operation",
                        "CQ": [
                            "Does InOrder:enumerated fall under the category of in order operation?",
                            "Which specialized operations are classified as in order operation, including InOrder:enumerated?",
                            "What broader operational classifications include InOrder:enumerated as a subtype?"
                        ]
                    }
                ]
            },
            "InOrder:interger": {
                "axiom": {
                    "subClassOf": [
                        "in order operation"
                    ]
                },
                "description": "InOrder:integer is defined as a subclass of in order operation. This means every instance of InOrder:integer is also an instance of in order operation, inheriting its properties and characteristics. No additional restrictions or properties are specified.",
                "CQ": [
                    {
                        "axiom": "InOrder:interger subClassOf in order operation",
                        "CQ": [
                            "Does InOrder:integer represent a specific kind of in order operation?",
                            "Which in order operation subclasses include InOrder:integer?",
                            "What broader categories does InOrder:integer fall under within in order operation?"
                        ]
                    }
                ]
            },
            "InOrder:ordinal": {
                "axiom": {
                    "subClassOf": [
                        "in order operation"
                    ]
                },
                "description": "InOrder:ordinal is defined as a subclass of in order operation, meaning every instance of InOrder:ordinal is also an instance of in order operation. This class captures operations that are performed in a specific, sequential order, consistent with the broader concept of ordered computational procedures.",
                "CQ": [
                    {
                        "axiom": "InOrder:ordinal subClassOf in order operation",
                        "CQ": [
                            "Is in order operation a broader category that includes InOrder:ordinal as a specific type?",
                            "What are all the subclasses under in order operation, and does that list include InOrder:ordinal?",
                            "Which general operations is InOrder:ordinal classified under?"
                        ]
                    }
                ]
            },
            "InOrder:rational": {
                "axiom": {
                    "subClassOf": [
                        "in order operation"
                    ]
                },
                "description": "InOrder:rational is defined as a subclass of in order operation. This means every instance of InOrder:rational is also an instance of in order operation, inheriting its essential properties and behavioral constraints. There are currently no additional property restrictions or disjointness axioms specified for this class, so its definition is primarily characterized by its position within the hierarchy of ordered operations.",
                "CQ": [
                    {
                        "axiom": "InOrder:rational subClassOf in order operation",
                        "CQ": [
                            "Is InOrder:rational categorized as a type of in order operation?",
                            "What in order operations have InOrder:rational as a more specific instance?",
                            "Which general operations encompass InOrder:rational as a subclass?"
                        ]
                    }
                ]
            },
            "InOrder:real": {
                "axiom": {
                    "subClassOf": [
                        "in order operation"
                    ]
                },
                "description": "InOrder:real is defined as a subclass of in order operation. This means that every instance of InOrder:real is necessarily an in order operation, inheriting all characteristics and constraints of its parent class. No further distinguishing features or restrictions are specified in the current axiom.",
                "CQ": [
                    {
                        "axiom": "InOrder:real subClassOf in order operation",
                        "CQ": [
                            "Is InOrder:real classified under in order operation?",
                            "What specific types are encompassed by in order operation, including InOrder:real?",
                            "Which broader categories subsume InOrder:real in the ontology?"
                        ]
                    }
                ]
            },
            "InOrder:scaled": {
                "axiom": {
                    "subClassOf": [
                        "in order operation"
                    ]
                },
                "description": "InOrder:scaled is defined as a subclass of in order operation, indicating that it represents a specialized type of in order operation. No additional property restrictions or disjointness axioms are specified for this class.",
                "CQ": [
                    {
                        "axiom": "InOrder:scaled subClassOf in order operation",
                        "CQ": [
                            "Does InOrder:scaled fall under the category of in order operation?",
                            "What are the specific subtypes classified under in order operation, such as InOrder:scaled?",
                            "Which upper-level operations encompass InOrder:scaled?"
                        ]
                    }
                ]
            },
            "InOrder:time&date": {
                "axiom": {
                    "subClassOf": [
                        "in order operation"
                    ]
                },
                "description": "InOrder:time&date is defined as a subclass of in order operation. This means that every instance of InOrder:time&date is also an instance of in order operation, inheriting all its characteristics and constraints. The class represents a specific type of in order operation that is distinguished within the ontology for handling operations related to time and date.",
                "CQ": [
                    {
                        "axiom": "InOrder:time&date subClassOf in order operation",
                        "CQ": [
                            "Is InOrder:time&date recognized as a specific form of in order operation?",
                            "Which in order operations include more specialized types such as InOrder:time&date?",
                            "To what higher-level categories does InOrder:time&date belong within the hierarchy of in order operation?"
                        ]
                    }
                ]
            },
            "Insert:bag": {
                "axiom": {
                    "subClassOf": [
                        "insert operation"
                    ],
                    "disjointWith": [
                        "Insert:table"
                    ]
                },
                "description": "Insert:bag is defined as a subclass of insert operation, signifying that it represents a specific type of insertion action. It is declared disjoint with Insert:table, which means that an instance of Insert:bag cannot simultaneously belong to the Insert:table class. This distinction enforces mutual exclusivity between these two types of insertion operations.",
                "CQ": [
                    {
                        "axiom": "Insert:bag subClassOf insert operation",
                        "CQ": [
                            "Is Insert:bag classified as a subtype of insert operation?",
                            "Which operations are subsumed under insert operation, such as Insert:bag?",
                            "To what broader operational classes does Insert:bag belong?"
                        ]
                    },
                    {
                        "axiom": "Insert:bag disjointWith Insert:table",
                        "CQ": [
                            "What is the ontological distinction between Insert:bag and Insert:table?",
                            "Can an individual simultaneously be classified as both Insert:bag and Insert:table?",
                            "Which classes are explicitly declared as disjoint with Insert:bag?"
                        ]
                    }
                ]
            },
            "Insert:table": {
                "axiom": {
                    "subClassOf": [
                        "insert operation"
                    ]
                },
                "description": "Insert:table is defined as a subclass of insert operation, representing a specialized form of data insertion that specifically targets tables. Any individual of Insert:table is by definition an insert operation, but this class serves to distinguish insert actions that are restricted to table-type data structures.",
                "CQ": [
                    {
                        "axiom": "Insert:table subClassOf insert operation",
                        "CQ": [
                            "Is Insert:table classified as a specific form of insert operation?",
                            "Which operations are categorized as specializations of insert operation, including Insert:table?",
                            "What broader categories encompass Insert:table as a member?"
                        ]
                    }
                ]
            },
            "Multiply:complex": {
                "axiom": {
                    "subClassOf": [
                        "multiply operation"
                    ]
                },
                "description": "Multiply:complex is defined as a subclass of multiply operation, indicating that it represents a specialized form of multiplication specifically applicable to certain contexts (such as complex numbers or more advanced multiplicative structures). As a subclass, all characteristics and constraints of multiply operation apply, while distinguishing multiply:complex as a distinct category within the overall multiplication framework. No additional property restrictions or disjointness axioms are specified.",
                "CQ": [
                    {
                        "axiom": "Multiply:complex subClassOf multiply operation",
                        "CQ": [
                            "Is multiply:complex classified under multiply operation types?",
                            "What operations are considered subclasses of multiply operation?",
                            "Which higher-level operation categories encompass multiply:complex?"
                        ]
                    }
                ]
            },
            "Multiply:integer": {
                "axiom": {
                    "subClassOf": [
                        "multiply operation"
                    ]
                },
                "description": "Multiply:integer is defined as a subclass of multiply operation. This class represents multiplication operations specifically involving integer values, inheriting all properties and constraints of general multiplication operations but restricted to the integer domain.",
                "CQ": [
                    {
                        "axiom": "Multiply:integer subClassOf multiply operation",
                        "CQ": [
                            "Is Multiply:integer classified under the broader category of multiply operation?",
                            "Which specialized operations are considered subclasses of multiply operation, such as Multiply:integer?",
                            "Within what more general operation types is Multiply:integer included?"
                        ]
                    }
                ]
            },
            "Multiply:rational": {
                "axiom": {
                    "subClassOf": [
                        "multiply operation"
                    ]
                },
                "description": "Multiply:rational is a subclass of multiply operation. This class represents multiplication operations where the operands are specifically rational numbers, distinguishing it from multiply operations over other numeric domains.",
                "CQ": [
                    {
                        "axiom": "Multiply:rational subClassOf multiply operation",
                        "CQ": [
                            "Is multiply:rational included among the operations classified as multiply operation?",
                            "What multiply operations encompass multiply:rational as a more specific subcategory?",
                            "To which general operation types does multiply:rational belong?"
                        ]
                    }
                ]
            },
            "Multiply:real": {
                "axiom": {
                    "subClassOf": [
                        "multiply operation"
                    ]
                },
                "description": "Multiply:real is defined as a subclass of multiply operation, indicating that it represents multiplication specifically within the domain of real numbers. Any instance of Multiply:real inherits the characteristics and constraints of the general multiply operation, but is restricted in application to real-valued operands.",
                "CQ": [
                    {
                        "axiom": "Multiply:real subClassOf multiply operation",
                        "CQ": [
                            "Is Multiply:real categorized as a multiply operation?",
                            "Which multiply operations encompass Multiply:real as a specialized form?",
                            "Into what broader classes is Multiply:real hierarchically organized?"
                        ]
                    }
                ]
            },
            "Multiply:scaled": {
                "axiom": {
                    "subClassOf": [
                        "multiply operation"
                    ]
                },
                "description": "Multiply:scaled is defined as a subclass of multiply operation. This indicates that it inherits all characteristics of multiply operations while representing a more specific variant or context of multiplication. No additional restrictions or disjointness axioms are specified. Without a current description, its identity is determined solely by its position in the class hierarchy, denoting a specialized type of multiplication operation.",
                "CQ": [
                    {
                        "axiom": "Multiply:scaled subClassOf multiply operation",
                        "CQ": [
                            "Is Multiply:scaled categorized as a type of multiply operation?",
                            "Which specific multiply operations include Multiply:scaled as a subclass?",
                            "What general multiply operation categories encompass Multiply:scaled?"
                        ]
                    }
                ]
            },
            "And:boolean": {
                "axiom": {
                    "subClassOf": [
                        "dyadic logical operation"
                    ]
                },
                "description": "And:boolean is defined as a subclass of dyadic logical operation, indicating that it is a logical operation involving two operands. This class represents the AND operation, commonly used in logic to yield true only when both input values are true.",
                "CQ": [
                    {
                        "axiom": "And:boolean subClassOf dyadic logical operation",
                        "CQ": [
                            "Does And:boolean fall under the classification of dyadic logical operation?",
                            "Which logical operations exist as subclasses of dyadic logical operation, And:boolean among them?",
                            "What general categories encompass And:boolean within logical operations?"
                        ]
                    }
                ]
            },
            "Or:boolean": {
                "axiom": {
                    "subClassOf": [
                        "dyadic logical operation"
                    ]
                },
                "description": "Or:boolean is defined as a subclass of dyadic logical operation, representing a logical operation that takes two inputs. It corresponds to the Boolean \"or\" operation, where the result is true if at least one of the inputs is true. Members of this class are restricted to binary (dyadic) logic functions operating under the inclusive disjunction principle.",
                "CQ": [
                    {
                        "axiom": "Or:boolean subClassOf dyadic logical operation",
                        "CQ": [
                            "Does Or:boolean fall under the general category of dyadic logical operation?",
                            "What dyadic logical operations include Or:boolean as a specific type?",
                            "Which more general logical operation classes encompass Or:boolean?"
                        ]
                    }
                ]
            },
            "Fetch:table": {
                "axiom": {
                    "subClassOf": [
                        "dyadic retrieve operation"
                    ]
                },
                "description": "Fetch:table is defined as a subclass of dyadic retrieve operation, indicating that it represents a specific type of retrieve action that involves two entities. As a specialized dyadic retrieve operation, Fetch:table inherits all the relevant characteristics of such operations within the ontology, distinguishing it from other forms of retrieval actions.",
                "CQ": [
                    {
                        "axiom": "Fetch:table subClassOf dyadic retrieve operation",
                        "CQ": [
                            "Is Fetch:table recognized as a specific type of dyadic retrieve operation?",
                            "What operations are classified under dyadic retrieve operation, including Fetch:table?",
                            "Which broader categories encompass Fetch:table as a member?"
                        ]
                    }
                ]
            },
            "Tag:choice": {
                "axiom": {
                    "subClassOf": [
                        "dyadic retrieve operation"
                    ]
                },
                "description": "Tag:choice is defined as a subclass of dyadic retrieve operation, indicating that it represents a specific retrieval action involving two inputs or arguments. This class is thus characterized by its relation to operations that retrieve or select information based on two distinct pieces of input, inheriting all properties and restrictions applicable to dyadic retrieve operations.",
                "CQ": [
                    {
                        "axiom": "Tag:choice subClassOf dyadic retrieve operation",
                        "CQ": [
                            "Is Tag:choice categorized under dyadic retrieve operation?",
                            "Which operations fall under the dyadic retrieve operation class?",
                            "To which broader operational category does Tag:choice belong?"
                        ]
                    }
                ]
            },
            "Intersection:set": {
                "axiom": {
                    "subClassOf": [
                        "dyadic set operation"
                    ]
                },
                "description": "Intersection:set is defined as a subclass of dyadic set operation, signifying that it operates on two sets. This class represents the set operation that yields a set containing all elements that are common to both input sets. As a dyadic set operation, it explicitly requires two sets as operands and produces a new set consisting only of elements present in both.",
                "CQ": [
                    {
                        "axiom": "Intersection:set subClassOf dyadic set operation",
                        "CQ": [
                            "Is Intersection:set classified as a type of dyadic set operation?",
                            "Which set operations fall under the category of dyadic set operation, including Intersection:set?",
                            "What broader categories encompass Intersection:set within the hierarchy of set operations?"
                        ]
                    }
                ]
            },
            "Lsln:set": {
                "axiom": {
                    "subClassOf": [
                        "dyadic set operation"
                    ]
                },
                "description": "Lsln:set is formally defined as a subclass of dyadic set operation, indicating that it represents a type of operation involving two sets. No additional constraints or distinguishing characteristics are specified beyond its categorization under dyadic set operations.",
                "CQ": [
                    {
                        "axiom": "Lsln:set subClassOf dyadic set operation",
                        "CQ": [
                            "Is Lsln:set categorized as a type of dyadic set operation?",
                            "What specific set operations are subclasses of dyadic set operation, Lsln:set included?",
                            "To which higher-level set operation categories does Lsln:set belong?"
                        ]
                    }
                ]
            },
            "Subset:set": {
                "axiom": {
                    "subClassOf": [
                        "dyadic set operation"
                    ]
                },
                "description": "Subset:set is defined as a subclass of dyadic set operation, which means it represents a specific type of set operation that involves two sets. Members of this class pertain to operations that determine whether one set is a subset of another, inheriting all formal properties of dyadic set operations.",
                "CQ": [
                    {
                        "axiom": "Subset:set subClassOf dyadic set operation",
                        "CQ": [
                            "Is Subset:set categorized under the broader class of dyadic set operation?",
                            "Which specialized operations are contained within the class dyadic set operation?",
                            "Into which higher-level set operation categories does Subset:set fall?"
                        ]
                    }
                ]
            },
            "Union:set": {
                "axiom": {
                    "subClassOf": [
                        "dyadic set operation"
                    ]
                },
                "description": "Union:set is defined as a subclass of dyadic set operation, indicating that it represents a type of set operation involving two sets. Members of this class perform the union operation, which combines all distinct elements from both input sets into a single set. This classification situates Union:set within the broader context of binary operations on sets.",
                "CQ": [
                    {
                        "axiom": "Union:set subClassOf dyadic set operation",
                        "CQ": [
                            "Is Union:set classified as a kind of dyadic set operation?",
                            "Which set operations are categorized under dyadic set operation, including Union:set?",
                            "To which upper-level operation types does Union:set belong?"
                        ]
                    }
                ]
            },
            "IsEmpty:bag": {
                "axiom": {
                    "subClassOf": [
                        "isEmpty operation"
                    ]
                },
                "description": "IsEmpty:bag is defined as a subclass of isEmpty operation. This indicates that IsEmpty:bag represents a specific type of isEmpty operation applied to bags, distinguishing it from other isEmpty operations that may apply to different data structures. Any instance of IsEmpty:bag is necessarily an isEmpty operation, constrained in scope to the context of bags.",
                "CQ": [
                    {
                        "axiom": "IsEmpty:bag subClassOf isEmpty operation",
                        "CQ": [
                            "Does IsEmpty:bag fall under the broader classification of isEmpty operation?",
                            "What operations are more specific variants of isEmpty operation, such as IsEmpty:bag?",
                            "To which upper-level operation categories does IsEmpty:bag pertain?"
                        ]
                    }
                ]
            },
            "IsEmpty:sequence": {
                "axiom": {
                    "subClassOf": [
                        "isEmpty operation"
                    ]
                },
                "description": "IsEmpty:sequence is defined as a subclass of the isEmpty operation. This class represents operations that are specific forms of isEmpty, likely indicating procedures to determine whether a sequence is empty. By subclassing isEmpty operation, IsEmpty:sequence inherits all properties and constraints associated with isEmpty operations, but is further specialized to apply specifically to sequences.",
                "CQ": [
                    {
                        "axiom": "IsEmpty:sequence subClassOf isEmpty operation",
                        "CQ": [
                            "Is IsEmpty:sequence categorized as a specialization of the isEmpty operation?",
                            "Which operations encompass IsEmpty:sequence as a more specific form?",
                            "What broader operation classes does IsEmpty:sequence fall under?"
                        ]
                    }
                ]
            },
            "IsEmpty:table": {
                "axiom": {
                    "subClassOf": [
                        "isEmpty operation"
                    ]
                },
                "description": "IsEmpty:table is defined as a subclass of the isEmpty operation. This means that it represents a specific isEmpty operation applied to tables, inheriting all general properties of isEmpty operations and specializing them for table data structures. Any instance of IsEmpty:table can be understood as an operation that checks or determines whether a table is empty.",
                "CQ": [
                    {
                        "axiom": "IsEmpty:table subClassOf isEmpty operation",
                        "CQ": [
                            "Does IsEmpty:table fall under the broader concept of isEmpty operation?",
                            "Which operations are classified as subtypes of isEmpty operation, including IsEmpty:table?",
                            "What higher-level operations encompass IsEmpty:table?"
                        ]
                    }
                ]
            },
            "Select:bag": {
                "axiom": {
                    "subClassOf": [
                        "monadic select operation"
                    ],
                    "disjointWith": [
                        "Select:set"
                    ]
                },
                "description": "Select:bag is defined as a subclass of monadic select operation, indicating that it represents a form of selection operation that applies to a single argument within a computational or logical context. It is explicitly disjoint with Select:set, ensuring that no instance can simultaneously be both a Select:bag and a Select:set. This conceptual separation enforces that Select:bag and Select:set represent fundamentally distinct kinds of select operations.",
                "CQ": [
                    {
                        "axiom": "Select:bag subClassOf monadic select operation",
                        "CQ": [
                            "Does Select:bag fall under the broader classification of monadic select operation?",
                            "Which monadic select operation subclasses encompass Select:bag?",
                            "What are the higher-level categories for Select:bag within select operations?"
                        ]
                    },
                    {
                        "axiom": "Select:bag disjointWith Select:set",
                        "CQ": [
                            "How does the ontology distinguish between Select:bag and Select:set?",
                            "Is there any instance that can be classified as both Select:bag and Select:set?",
                            "Which classes are explicitly specified as disjoint with Select:set?"
                        ]
                    }
                ]
            },
            "Select:set": {
                "axiom": {
                    "subClassOf": [
                        "monadic select operation"
                    ]
                },
                "description": "Select:set is defined as a subclass of monadic select operation, indicating that it represents a specific type of selection operation that acts on a single input or operand. This formalization ensures that any instance of Select:set inherits the properties and constraints associated with monadic select operations. No further distinguishing characteristics or disjointness conditions are specified.",
                "CQ": [
                    {
                        "axiom": "Select:set subClassOf monadic select operation",
                        "CQ": [
                            "Does Select:set represent a specific type of monadic select operation?",
                            "What kinds of operations fall under the category of monadic select operation, including Select:set?",
                            "Which higher-level classes encompass Select:set in the ontology?"
                        ]
                    }
                ]
            },
            "Negate:complex": {
                "axiom": {
                    "subClassOf": [
                        "negate operation"
                    ]
                },
                "description": "Negate:complex is formally defined as a subclass of negate operation. This indicates that every instance of Negate:complex is a specific type of negate operation, inheriting all properties and constraints associated with negate operations. No additional distinguishing characteristics or property restrictions are specified at this level.",
                "CQ": [
                    {
                        "axiom": "Negate:complex subClassOf negate operation",
                        "CQ": [
                            "Is Negate:complex categorized as a subtype of negate operation?",
                            "Within the domain of negate operation, which subordinate classes exist aside from Negate:complex?",
                            "What higher-level concepts encompass Negate:complex in this ontology?"
                        ]
                    }
                ]
            },
            "Negate:integer": {
                "axiom": {
                    "subClassOf": [
                        "negate operation"
                    ]
                },
                "description": "Negate:integer is defined as a subclass of negate operation. This class represents the operation of taking an integer and producing its additive inverse (negation). Any instance of Negate:integer is a specific case of a negate operation, restricted to the integer domain.",
                "CQ": [
                    {
                        "axiom": "Negate:integer subClassOf negate operation",
                        "CQ": [
                            "Is Negate:integer a type of negate operation?",
                            "Which operations are categorized under negate operation, specifically including Negate:integer?",
                            "What broader classes does Negate:integer belong to?"
                        ]
                    }
                ]
            },
            "Negate:rational": {
                "axiom": {
                    "subClassOf": [
                        "negate operation"
                    ]
                },
                "description": "Negate:rational is defined as a subclass of negate operation. This class represents operations that perform negation specifically within the domain of rational numbers. Any instance of this class is considered a type of negate operation, formally representing the mathematical action of producing the additive inverse of a rational value.",
                "CQ": [
                    {
                        "axiom": "Negate:rational subClassOf negate operation",
                        "CQ": [
                            "Does Negate:rational fall under the classification of negate operation?",
                            "Which specific operations are categorized beneath negate operation, such as Negate:rational?",
                            "What are the broader classes that encompass Negate:rational?"
                        ]
                    }
                ]
            },
            "Negate:real": {
                "axiom": {
                    "subClassOf": [
                        "negate operation"
                    ]
                },
                "description": "Negate:real is defined as a subclass of the negate operation. This class represents the negation operation as specifically applied to real numbers, inheriting all constraints and characteristics of the more general negate operation category.",
                "CQ": [
                    {
                        "axiom": "Negate:real subClassOf negate operation",
                        "CQ": [
                            "Does Negate:real fall under the general class of negate operation?",
                            "Which operations are classified as specific types of negate operation, including Negate:real?",
                            "Under which hierarchical categories can Negate:real be grouped?"
                        ]
                    }
                ]
            },
            "Negate:scaled": {
                "axiom": {
                    "subClassOf": [
                        "negate operation"
                    ]
                },
                "description": "Negate:scaled is defined as a subclass of negate operation. This means that every instance of Negate:scaled is a specific type of negate operation, inheriting all properties and restrictions associated with negate operations. The class is intended to represent a specialized negation process, although additional characteristics would depend on further axioms or descriptions.",
                "CQ": [
                    {
                        "axiom": "Negate:scaled subClassOf negate operation",
                        "CQ": [
                            "Does Negate:scaled fall under the broader classification of negate operation?",
                            "Which specific operations are categorized as variants of negate operation, such as Negate:scaled?",
                            "What are the general operation types to which Negate:scaled is related?"
                        ]
                    }
                ]
            },
            "NonNegative:integer": {
                "axiom": {
                    "subClassOf": [
                        "nonNegative operation"
                    ],
                    "disjointWith": [
                        "NonNegative:rational"
                    ]
                },
                "description": "NonNegative:integer is defined as a subclass of nonNegative operation, representing integers that are greater than or equal to zero. It is formally disjoint with NonNegative:rational, ensuring that no individual can be both a NonNegative:integer and a NonNegative:rational. This class captures the concept of all non-negative integer values, distinguishing them from non-negative rational numbers.",
                "CQ": [
                    {
                        "axiom": "NonNegative:integer subClassOf nonNegative operation",
                        "CQ": [
                            "Is NonNegative:integer categorized under nonNegative operation?",
                            "Which subclasses are specified beneath nonNegative operation, such as NonNegative:integer?",
                            "To what higher-level groups does NonNegative:integer correspond within the ontology?"
                        ]
                    },
                    {
                        "axiom": "NonNegative:integer disjointWith NonNegative:rational",
                        "CQ": [
                            "What logical separation is asserted between NonNegative:integer and NonNegative:rational within the ontology?",
                            "Is there any instance that could simultaneously belong to both NonNegative:integer and NonNegative:rational classes?",
                            "Which classes are declared as disjoint with NonNegative:rational in the ontology?"
                        ]
                    }
                ]
            },
            "NonNegative:rational": {
                "axiom": {
                    "subClassOf": [
                        "nonNegative operation"
                    ]
                },
                "description": "NonNegative:rational is defined as a subclass of nonNegative operation. This means every instance of NonNegative:rational is also an instance of nonNegative operation, specifically representing rational values or operations constrained to non-negative results. The class formalizes the distinction between all nonNegative operations and those that pertain strictly to rational (i.e., fractional or whole number) non-negative values.",
                "CQ": [
                    {
                        "axiom": "NonNegative:rational subClassOf nonNegative operation",
                        "CQ": [
                            "Is NonNegative:rational categorized as a type of nonNegative operation?",
                            "What specific operations are subclasses under nonNegative operation, such as NonNegative:rational?",
                            "Which broader operation classes include NonNegative:rational as a member?"
                        ]
                    }
                ]
            },
            "Promote:complex": {
                "axiom": {
                    "subClassOf": [
                        "promote operation"
                    ]
                },
                "description": "Promote:complex is defined as a subclass of promote operation, indicating that every instance of Promote:complex is also an instance of promote operation. This class inherits all the properties and characteristics of promote operation, while potentially introducing additional specificity or constraints unique to Promote:complex.",
                "CQ": [
                    {
                        "axiom": "Promote:complex subClassOf promote operation",
                        "CQ": [
                            "Is Promote:complex an instance within the promote operation hierarchy?",
                            "Which promote operations have more specific subclasses, such as Promote:complex?",
                            "Under which categories of promote operation does Promote:complex fall?"
                        ]
                    }
                ]
            },
            "Promote:rational": {
                "axiom": {
                    "subClassOf": [
                        "promote operation"
                    ]
                },
                "description": "Promote:rational is defined as a subclass of the promote operation class. This indicates that every instance of Promote:rational is a specific type of promote operation, inheriting all general characteristics of promote operations. No further restrictions, disjointness, or additional axioms are specified for this class.",
                "CQ": [
                    {
                        "axiom": "Promote:rational subClassOf promote operation",
                        "CQ": [
                            "Is Promote:rational categorized as a subtype of promote operation?",
                            "What promote operations have Promote:rational as a specific instance or subclass?",
                            "Under which broader operation classes does Promote:rational fall?"
                        ]
                    }
                ]
            },
            "Promote:real": {
                "axiom": {
                    "subClassOf": [
                        "promote operation"
                    ]
                },
                "description": "Promote:real is a subclass of promote operation, indicating that it represents a specialized form of promote operation within the ontology. Any individual classified as Promote:real inherits all characteristics and constraints associated with promote operation. No additional distinguishing axioms or restrictions are currently specified for this class.",
                "CQ": [
                    {
                        "axiom": "Promote:real subClassOf promote operation",
                        "CQ": [
                            "Is Promote:real classified under the category of promote operation?",
                            "Which promote operations encompass subtypes such as Promote:real?",
                            "What higher-level classes does Promote:real fall under in the promote operation hierarchy?"
                        ]
                    }
                ]
            },
            "Reciprocal:rational": {
                "axiom": {
                    "subClassOf": [
                        "reciprocial operation"
                    ]
                },
                "description": "Reciprocal:rational is defined as a subclass of reciprocal operation. This means every instance of Reciprocal:rational is a specific type of reciprocal operation, typically involving rational numbers. No additional property restrictions or disjointness axioms are specified, so members of this class inherit all general properties of reciprocal operations.",
                "CQ": [
                    {
                        "axiom": "Reciprocal:rational subClassOf reciprocial operation",
                        "CQ": [
                            "Is reciprocal:rational classified under the broader category of reciprocial operation?",
                            "Which specific operations are categorized as subtypes of reciprocial operation, and does this include reciprocal:rational?",
                            "What are the more general operation classes to which reciprocal:rational belongs?"
                        ]
                    }
                ]
            },
            "Reciprocal:real": {
                "axiom": {
                    "subClassOf": [
                        "reciprocial operation"
                    ]
                },
                "description": "Reciprocal:real is defined as a subclass of reciprocal operation. This class represents the operation of finding the reciprocal specifically within the domain of real numbers. Any instance of Reciprocal:real is a kind of reciprocal operation applied to real numbers.",
                "CQ": [
                    {
                        "axiom": "Reciprocal:real subClassOf reciprocial operation",
                        "CQ": [
                            "Is Reciprocal:real classified under the broader category of reciprocial operation?",
                            "Which operations are encompassed as more specific types of reciprocial operation, such as Reciprocal:real?",
                            "What are the direct parent categories for Reciprocal:real?"
                        ]
                    }
                ]
            },
            "Reciprocal:complex": {
                "axiom": {
                    "subClassOf": [
                        "reciprocial operation"
                    ]
                },
                "description": "Reciprocal:complex is defined as a subclass of reciprocal operation. This means every instance of Reciprocal:complex is also a reciprocal operation. The class is characterized by operations that involve computing the reciprocal (multiplicative inverse) specifically within the context of complex numbers.",
                "CQ": [
                    {
                        "axiom": "Reciprocal:complex subClassOf reciprocial operation",
                        "CQ": [
                            "Is Reciprocal:complex classified as a subtype of reciprocial operation?",
                            "What specific operations fall under the category of reciprocial operation, including Reciprocal:complex?",
                            "Which broader operation classes does Reciprocal:complex belong to within the ontology?"
                        ]
                    }
                ]
            },
            "Round:scaled": {
                "axiom": {
                    "subClassOf": [
                        "round operation"
                    ],
                    "disjointWith": [
                        "Round:time&date"
                    ]
                },
                "description": "Round:scaled is defined as a subclass of round operation, and it is explicitly disjoint with Round:time&date, meaning no entity can be an instance of both classes simultaneously. Members of the Round:scaled class represent rounding operations that are specifically not applicable to time or date values, but instead pertain to other types of values handled in scaled or quantitative contexts.",
                "CQ": [
                    {
                        "axiom": "Round:scaled subClassOf round operation",
                        "CQ": [
                            "Is round operation a broader classification that includes Round:scaled as a specific type?",
                            "Which operations are specialized forms of round operation, such as Round:scaled?",
                            "What higher-level operation categories encompass Round:scaled?"
                        ]
                    },
                    {
                        "axiom": "Round:scaled disjointWith Round:time&date",
                        "CQ": [
                            "How are Round:scaled and Round:time&date conceptually separated within the ontology?",
                            "Is any entity allowed to belong simultaneously to both Round:scaled and Round:time&date categories?",
                            "Which classes in the ontology are specified as disjoint with Round:time&date?"
                        ]
                    }
                ]
            },
            "Round:time&date": {
                "axiom": {
                    "subClassOf": [
                        "round operation"
                    ]
                },
                "description": "Round:time&date is defined as a subclass of round operation. This means that all instances of Round:time&date are specific types of rounding operations that pertain to time and date values. The class captures rounding processes as applied to temporal data, inheriting all general properties of round operations.",
                "CQ": [
                    {
                        "axiom": "Round:time&date subClassOf round operation",
                        "CQ": [
                            "Does Round:time&date fall under the category of round operation?",
                            "What specific types are classified as round operation, and does Round:time&date belong to this group?",
                            "Which broader operations encompass Round:time&date as a subtype?"
                        ]
                    }
                ]
            },
            "Serialize:bag": {
                "axiom": {
                    "subClassOf": [
                        "serialize operation"
                    ],
                    "disjointWith": [
                        "Serialize:table"
                    ]
                },
                "description": "Serialize:bag is defined as a subclass of serialize operation, representing a specific type of serialization process. It is explicitly disjoint with Serialize:table, ensuring that no instance can be classified as both Serialize:bag and Serialize:table. This distinction enforces separation between bag-based and table-based serialization methods.",
                "CQ": [
                    {
                        "axiom": "Serialize:bag subClassOf serialize operation",
                        "CQ": [
                            "Does Serialize:bag represent a specific type of serialize operation?",
                            "Which operations fall under the more general category of serialize operation, such as Serialize:bag?",
                            "What broader operational categories include Serialize:bag as a specialized form?"
                        ]
                    },
                    {
                        "axiom": "Serialize:bag disjointWith Serialize:table",
                        "CQ": [
                            "What distinguishes the classes Serialize:bag and Serialize:table within the ontology?",
                            "Is it allowed for an instance to be both a Serialize:bag and a Serialize:table?",
                            "Which classes are defined to be disjoint with Serialize:table?"
                        ]
                    }
                ]
            },
            "Serialize:table": {
                "axiom": {
                    "subClassOf": [
                        "serialize operation"
                    ]
                },
                "description": "Serialize:table is defined as a subclass of serialize operation. This indicates that it represents a specific type of serialization process, inheriting all characteristics of a serialize operation but further specializing to handle table data structures. Any individual of Serialize:table is, by axiom, a serialize operation specifically concerned with tables.",
                "CQ": [
                    {
                        "axiom": "Serialize:table subClassOf serialize operation",
                        "CQ": [
                            "Is Serialize:table categorized as a type of serialize operation?",
                            "What kinds of operations fall under the category of serialize operation, specifically including Serialize:table?",
                            "Which more general operation types encompass Serialize:table?"
                        ]
                    }
                ]
            },
            "Successor:enumerated": {
                "axiom": {
                    "subClassOf": [
                        "successor operation"
                    ],
                    "disjointWith": [
                        "Successor:ordinal"
                    ]
                },
                "description": "Successor:enumerated is defined as a subclass of the successor operation, indicating it represents a specific type or aspect of the successor process. It is explicitly disjoint with Successor:ordinal, which formally ensures that no individual can be both a member of Successor:enumerated and Successor:ordinal simultaneously. This separation captures distinct interpretations or instances of successor within the relevant domain.",
                "CQ": [
                    {
                        "axiom": "Successor:enumerated subClassOf successor operation",
                        "CQ": [
                            "Is Successor:enumerated classified as a kind of successor operation?",
                            "Which concepts fall under the category of successor operation, including enumerated successors?",
                            "What higher-level categories encompass Successor:enumerated within the ontology?"
                        ]
                    },
                    {
                        "axiom": "Successor:enumerated disjointWith Successor:ordinal",
                        "CQ": [
                            "How is the conceptual separation represented between enumerated and ordinal successors in the ontology?",
                            "Is it allowable for an entity to be classified as both an enumerated and an ordinal successor?",
                            "What are the defined disjoint classes for ordinal successors within the ontology?"
                        ]
                    }
                ]
            },
            "Successor:ordinal": {
                "axiom": {
                    "subClassOf": [
                        "successor operation"
                    ]
                },
                "description": "Successor:ordinal is a subclass of successor operation, representing those operations specifically associated with generating the next ordinal in a well-ordered sequence. Members of this class perform the function of yielding the immediate successor ordinal, as formalized within the framework of ordinal arithmetic.",
                "CQ": [
                    {
                        "axiom": "Successor:ordinal subClassOf successor operation",
                        "CQ": [
                            "Is Successor:ordinal classified as a specific type of successor operation?",
                            "Which subclasses are encompassed within the category of successor operation, including Successor:ordinal?",
                            "To what broader parent classes does Successor:ordinal belong in the ontology?"
                        ]
                    }
                ]
            },
            "MapToBag:table": {
                "axiom": {
                    "subClassOf": [
                        "map operation"
                    ]
                },
                "description": "MapToBag:table is a subclass of map operation, representing a specific type of mapping operation. This class inherits all characteristics of map operations and specifies entities that perform mapping tasks in a tabular context.",
                "CQ": [
                    {
                        "axiom": "MapToBag:table subClassOf map operation",
                        "CQ": [
                            "Is MapToBag:table classified under map operation in the ontology?",
                            "Which specific operations are included as subclasses of map operation, such as MapToBag:table?",
                            "What broader operations is MapToBag:table categorized under according to the ontology?"
                        ]
                    }
                ]
            },
            "MapToTable:table": {
                "axiom": {
                    "subClassOf": [
                        "map operation"
                    ]
                },
                "description": "MapToTable:table is defined as a subclass of map operation, indicating that it inherits all characteristics of map operations. This class represents a specific type of mapping process with the intended outcome or function directly associated with tables. Individuals of this class are specialized map operations that result in or involve tables as part of their output or transformation.",
                "CQ": [
                    {
                        "axiom": "MapToTable:table subClassOf map operation",
                        "CQ": [
                            "Is MapToTable:table classified as a kind of map operation?",
                            "Which operations fall under the category of map operation, including MapToTable:table?",
                            "What broader concepts does MapToTable:table relate to in this context?"
                        ]
                    }
                ]
            },
            "Replace:array": {
                "axiom": {
                    "subClassOf": [
                        "n-adic operation"
                    ]
                },
                "description": "Replace:array is defined as a subclass of n-adic operation, signifying that it represents an operation which can take an arbitrary number of arguments. Individuals of this class inherit all properties and constraints associated with n-adic operations, and the class serves to specify operations that involve the replacement of elements within arrays or similar data structures. No further characteristics or constraints are specified beyond its position in the class hierarchy.",
                "CQ": [
                    {
                        "axiom": "Replace:array subClassOf n-adic operation",
                        "CQ": [
                            "Is Replace:array classified as a type of n-adic operation?",
                            "What are the specific subtypes of n-adic operation, including Replace:array?",
                            "Which broader categories encompass Replace:array?"
                        ]
                    }
                ]
            },
            "Empty:bag": {
                "axiom": {
                    "subClassOf": [
                        "niladic operation"
                    ]
                },
                "description": "Empty:bag is defined as a subclass of niladic operation, indicating that it represents an operation which does not require any arguments or inputs. This class models entities or operations that, by their formal definition, do not take parameters.",
                "CQ": [
                    {
                        "axiom": "Empty:bag subClassOf niladic operation",
                        "CQ": [
                            "Is Empty:bag classified under niladic operation?",
                            "Which operations fall under the category of niladic operation, including Empty:bag?",
                            "What higher-level operation categories does Empty:bag belong to?"
                        ]
                    }
                ]
            },
            "Empty:sequence": {
                "axiom": {
                    "subClassOf": [
                        "niladic operation"
                    ]
                },
                "description": "Empty:sequence is defined as a subclass of niladic operation, indicating that it represents a special operation that does not take any arguments or inputs. This class characterizes sequences that are inherently empty and do not exhibit any elements or content, consistent with the semantics of niladic operations in formal systems.",
                "CQ": [
                    {
                        "axiom": "Empty:sequence subClassOf niladic operation",
                        "CQ": [
                            "Is Empty:sequence classified under the category of niladic operation?",
                            "Which operations are subclasses of niladic operation, including Empty:sequence?",
                            "Which more general operation categories encompass Empty:sequence?"
                        ]
                    }
                ]
            },
            "Empty:set": {
                "axiom": {
                    "subClassOf": [
                        "niladic operation"
                    ]
                },
                "description": "Empty:set is defined as a subclass of niladic operation. This means that an empty set inherits all characteristics of niladic operations, which are operations that do not require any operands. The classification suggests that empty:set is conceptualized in an operational framework where no input or elements are involved.",
                "CQ": [
                    {
                        "axiom": "Empty:set subClassOf niladic operation",
                        "CQ": [
                            "Is Empty:set categorized as a type of niladic operation?",
                            "Which specific niladic operations include Empty:set as a subclass?",
                            "What broader classes encompass Empty:set within the hierarchy of niladic operations?"
                        ]
                    }
                ]
            },
            "Empty:table": {
                "axiom": {
                    "subClassOf": [
                        "niladic operation"
                    ]
                },
                "description": "Empty:table is defined as a subclass of niladic operation, indicating that it represents an operation or entity that does not take any input arguments. As a specific type of niladic operation, Empty:table is characterized by being an operation without operands, typically used to denote or construct an empty table structure within its context.",
                "CQ": [
                    {
                        "axiom": "Empty:table subClassOf niladic operation",
                        "CQ": [
                            "Does Empty:table fall under the category of niladic operations?",
                            "Which niladic operations have Empty:table as a more specific type?",
                            "What broader operation categories encompass Empty:table?"
                        ]
                    }
                ]
            },
            "index access": {
                "axiom": {
                    "subClassOf": [
                        "direct access property"
                    ],
                    "disjointWith": [
                        "key access"
                    ]
                },
                "description": "index access is defined as a subclass of direct access property and is explicitly disjoint with key access, meaning an individual cannot be both an index access and a key access. This class represents mechanisms or operations that permit direct access to elements based on their positional index within a collection, distinctly separating it from access methods based on explicit keys.",
                "CQ": [
                    {
                        "axiom": "index access subClassOf direct access property",
                        "CQ": [
                            "Is direct access property a generalization of index access?",
                            "Which specific access properties are classified under direct access property, including index access?",
                            "To which parent property categories does index access belong?"
                        ]
                    },
                    {
                        "axiom": "index access disjointWith key access",
                        "CQ": [
                            "How does the ontology differentiate index access from key access?",
                            "Is there an entity that can be classified simultaneously as supporting both index access and key access?",
                            "Which access types are explicitly defined as incompatible with key access?"
                        ]
                    }
                ]
            },
            "key access": {
                "axiom": {
                    "subClassOf": [
                        "direct access property"
                    ]
                },
                "description": "key access is defined as a subclass of direct access property, meaning it inherits all characteristics of direct access property while representing a more specific type. Members of the key access class pertain to properties or relationships that enable or characterize direct forms of access, distinguished from other access mechanisms by their explicit subclass designation.",
                "CQ": [
                    {
                        "axiom": "key access subClassOf direct access property",
                        "CQ": [
                            "Is key access classified as a direct access property?",
                            "Which access properties fall under the category of direct access property, including key access?",
                            "What are the more general property types that encompass key access?"
                        ]
                    }
                ]
            },
            "access by value": {
                "axiom": {
                    "subClassOf": [
                        "indirect acess property"
                    ]
                },
                "description": "access by value is defined as a subclass of indirect access property, indicating that it represents a specific type of indirect access. Any individual classified as access by value inherits all the characteristics of indirect access property, typically referring to situations where access is achieved through the value rather than the reference or pointer itself.",
                "CQ": [
                    {
                        "axiom": "access by value subClassOf indirect acess property",
                        "CQ": [
                            "Is access by value categorized under indirect access property?",
                            "Which types of properties fall within the scope of indirect access property?",
                            "What more general properties include access by value as a specialization?"
                        ]
                    }
                ]
            },
            "implementation dependent access": {
                "axiom": {
                    "subClassOf": [
                        "indirect acess property"
                    ]
                },
                "description": "implementation dependent access is defined as a subclass of indirect access property, indicating that it inherits all characteristics of indirect access property. This means any instance of implementation dependent access is also considered an indirect access property, but with specific details or constraints determined by the particular implementation. There is no further specification beyond its placement in the class hierarchy.",
                "CQ": [
                    {
                        "axiom": "implementation dependent access subClassOf indirect acess property",
                        "CQ": [
                            "Does implementation dependent access fall within the category of indirect access property?",
                            "Which access properties are more specific than indirect access property, such as implementation dependent access?",
                            "To which broader types does implementation dependent access conceptually relate?"
                        ]
                    }
                ]
            },
            "position access": {
                "axiom": {
                    "subClassOf": [
                        "indirect acess property"
                    ]
                },
                "description": "position access is defined as a subclass of indirect access property, indicating that it represents a type of access property that is not direct but mediated through some intermediary or reference. All instances of position access therefore inherit the characteristics and constraints associated with indirect access property.",
                "CQ": [
                    {
                        "axiom": "position access subClassOf indirect acess property",
                        "CQ": [
                            "Is position access a type of indirect access property?",
                            "Which properties are subclasses under the indirect access property category?",
                            "What more general property categories does position access belong to?"
                        ]
                    }
                ]
            },
            "ordered aggregate": {
                "axiom": {
                    "subClassOf": [
                        "aggregate imposed ordering"
                    ],
                    "disjointWith": [
                        "unordered aggregate"
                    ]
                },
                "description": "ordered aggregate is defined as a subclass of aggregate imposed ordering, meaning it inherits all properties of aggregates that have a specific ordering structure. It is explicitly disjoint with unordered aggregate, indicating that no individual can simultaneously be both an ordered and an unordered aggregate. This formalization captures the distinction between collections with an inherent order and those without, ensuring that ordered aggregates maintain a structured sequence among their elements.",
                "CQ": [
                    {
                        "axiom": "ordered aggregate subClassOf aggregate imposed ordering",
                        "CQ": [
                            "Does ordered aggregate belong to the broader class of aggregate imposed ordering?",
                            "What kinds of aggregates have an imposed ordering, specifically including ordered aggregates?",
                            "Which higher-level categories encompass ordered aggregate?"
                        ]
                    },
                    {
                        "axiom": "ordered aggregate disjointWith unordered aggregate",
                        "CQ": [
                            "How does the ontology distinguish between ordered aggregates and unordered aggregates?",
                            "Is there any entity that can simultaneously be classified as both an ordered aggregate and an unordered aggregate?",
                            "Which classes are specified as incompatible with unordered aggregate in the ontology structure?"
                        ]
                    }
                ]
            },
            "unordered aggregate": {
                "axiom": {
                    "subClassOf": [
                        "aggregate imposed ordering"
                    ]
                },
                "description": "unordered aggregate is a subclass of aggregate imposed ordering. This means every unordered aggregate is an aggregate where some ordering has been considered, but specifically, unordered aggregate refers to those aggregates where the order of the constituents is irrelevant or not specified. No additional disjointness or property restrictions are defined.",
                "CQ": [
                    {
                        "axiom": "unordered aggregate subClassOf aggregate imposed ordering",
                        "CQ": [
                            "Is aggregate imposed ordering a superclass of unordered aggregate?",
                            "Which specific types of aggregate imposed ordering include unordered aggregate as a subclass?",
                            "To which broader aggregation categories does unordered aggregate belong?"
                        ]
                    }
                ]
            },
            "identifier not unique": {
                "axiom": {
                    "subClassOf": [
                        "aggregate-imposed identifier uniqueness"
                    ],
                    "disjointWith": [
                        "identifier unique"
                    ]
                },
                "description": "identifier not unique is a subclass of aggregate-imposed identifier uniqueness and is disjoint with identifier unique, meaning no individual can simultaneously be both identifier not unique and identifier unique. This class represents identifiers within an aggregate context that are not required to be unique, distinguishing them from identifiers that have enforced uniqueness at the aggregate level.",
                "CQ": [
                    {
                        "axiom": "identifier not unique subClassOf aggregate-imposed identifier uniqueness",
                        "CQ": [
                            "Is aggregate-imposed identifier uniqueness a generalization of identifier not unique?",
                            "Which identifier uniqueness constraints include identifier not unique as a special case?",
                            "What broader identifier uniqueness categories encompass identifier not unique?"
                        ]
                    },
                    {
                        "axiom": "identifier not unique disjointWith identifier unique",
                        "CQ": [
                            "How does the ontology distinguish between 'identifier not unique' and 'identifier unique'?",
                            "Is any instance allowed to have both 'identifier not unique' and 'identifier unique' classifications?",
                            "Which classes are specified as mutually exclusive with 'identifier unique'?"
                        ]
                    }
                ]
            },
            "identifier unique": {
                "axiom": {
                    "subClassOf": [
                        "aggregate-imposed identifier uniqueness"
                    ]
                },
                "description": "identifier unique is defined as a subclass of aggregate-imposed identifier uniqueness. This indicates that any individual or instance of identifier unique inherits all properties and constraints of aggregate-imposed identifier uniqueness, implying that the uniqueness of identifiers is imposed at the aggregate level. Without additional description, this class specifically represents entities for which unique identification is ensured by aggregate-imposed mechanisms.",
                "CQ": [
                    {
                        "axiom": "identifier unique subClassOf aggregate-imposed identifier uniqueness",
                        "CQ": [
                            "Does identifier unique fall under the broader classification of aggregate-imposed identifier uniqueness?",
                            "Which kinds of identifier uniqueness are specified as subclasses of aggregate-imposed identifier uniqueness?",
                            "What more general categories encompass identifier unique within the ontology?"
                        ]
                    }
                ]
            },
            "fixed size": {
                "axiom": {
                    "subClassOf": [
                        "agregate size"
                    ],
                    "disjointWith": [
                        "variable size"
                    ]
                },
                "description": "fixed size is defined as a subclass of aggregate size, representing a type of size where the measurement remains constant. It is explicitly disjoint with variable size, indicating that no entity can simultaneously be considered both fixed size and variable size. This ensures that fixed size aggregates maintain a consistent value and cannot change over time or context.",
                "CQ": [
                    {
                        "axiom": "fixed size subClassOf agregate size",
                        "CQ": [
                            "Is fixed size an instance under the more general category of aggregate size?",
                            "Which size classifications fall within the aggregate size category, including fixed size?",
                            "What are the hierarchical parent classes of fixed size within the ontology?"
                        ]
                    },
                    {
                        "axiom": "fixed size disjointWith variable size",
                        "CQ": [
                            "How does the ontology distinguish between fixed size and variable size entities?",
                            "Is it permitted for an entity to be classified as both fixed size and variable size?",
                            "Which classes within the ontology are defined as mutually exclusive with variable size?"
                        ]
                    }
                ]
            },
            "variable size": {
                "axiom": {
                    "subClassOf": [
                        "agregate size"
                    ]
                },
                "description": "variable size is defined as a subclass of aggregate size. This specifies that any instance of variable size is also an instance of aggregate size, inheriting all its properties and restrictions. No further distinguishing characteristics or disjointness constraints are specified for variable size beyond its hierarchical relationship.",
                "CQ": [
                    {
                        "axiom": "variable size subClassOf agregate size",
                        "CQ": [
                            "Does variable size fall under the broader classification of aggregate size?",
                            "Which specific types are encompassed by aggregate size, such as variable size?",
                            "To what higher-level groups does variable size belong according to the ontology?"
                        ]
                    }
                ]
            },
            "component mandatory": {
                "axiom": {
                    "subClassOf": [
                        "component mandatoriness"
                    ],
                    "disjointWith": [
                        "component non-mandatory"
                    ]
                },
                "description": "component mandatory is defined as a subclass of component mandatoriness and is explicitly disjoint with component non-mandatory, ensuring that no individual can simultaneously be both a component mandatory and component non-mandatory. This class characterizes components that are required or obligatory within a given context, distinguishing them from non-mandatory components.",
                "CQ": [
                    {
                        "axiom": "component mandatory subClassOf component mandatoriness",
                        "CQ": [
                            "Is component mandatoriness a more general category than component mandatory?",
                            "Which concepts are classified as specializations of component mandatoriness, such as component mandatory?",
                            "What broader classes include component mandatory as a specific instance?"
                        ]
                    },
                    {
                        "axiom": "component mandatory disjointWith component non-mandatory",
                        "CQ": [
                            "What is the formal separation between component mandatory and component non-mandatory in the ontology?",
                            "Can an entity be classified as both a mandatory and a non-mandatory component simultaneously?",
                            "Which components are explicitly stated as disjoint with component non-mandatory?"
                        ]
                    }
                ]
            },
            "component non-mandatory": {
                "axiom": {
                    "subClassOf": [
                        "component mandatoriness"
                    ]
                },
                "description": "component non-mandatory is defined as a subclass of component mandatoriness. This classification indicates that component non-mandatory represents components characterized by a specific mandatoriness status, distinguishing them from other types of component mandatoriness. No further restrictions or disjointness axioms are specified for this class.",
                "CQ": [
                    {
                        "axiom": "component non-mandatory subClassOf component mandatoriness",
                        "CQ": [
                            "What broader mandatoriness categories encompass component non-mandatory?",
                            "Which types are more specific than component mandatoriness, including component non-mandatory?",
                            "To which general mandatoriness classifications does component non-mandatory belong?"
                        ]
                    }
                ]
            },
            "one dimensional": {
                "axiom": {
                    "subClassOf": [
                        "dimensionality"
                    ]
                },
                "description": "one dimensional is defined as a subclass of dimensionality. This class represents entities or concepts that possess exactly one dimension, distinguishing them from higher-dimensional counterparts. Any individual classified as one dimensional must inherently exhibit characteristics specific to single-dimensionality.",
                "CQ": [
                    {
                        "axiom": "one dimensional subClassOf dimensionality",
                        "CQ": [
                            "Is one dimensional classified as a specialized form under dimensionality?",
                            "Which concepts are encompassed under dimensionality, such as one dimensional?",
                            "What broader type does one dimensional inherit from in the dimensional hierarchy?"
                        ]
                    }
                ]
            },
            "two dimensional": {
                "axiom": {
                    "subClassOf": [
                        "dimensionality"
                    ]
                },
                "description": "two dimensional is defined as a subclass of dimensionality. This class represents entities or concepts characterized specifically by having two dimensions (such as length and width), distinguishing them within the broader category of dimensionality.",
                "CQ": [
                    {
                        "axiom": "two dimensional subClassOf dimensionality",
                        "CQ": [
                            "Is two dimensional a more specific type of dimensionality?",
                            "What are the subclasses categorized under dimensionality, such as two dimensional?",
                            "Which general category encompasses two dimensional in the ontology?"
                        ]
                    }
                ]
            },
            "multi dimensional": {
                "axiom": {
                    "subClassOf": [
                        "dimensionality"
                    ]
                },
                "description": "multi dimensional is defined as a subclass of dimensionality, meaning it represents a specific type or instance within the broader concept of dimensionality. Any entity classified as multi dimensional inherently possesses the quality of having multiple dimensions, as specified by its placement under the dimensionality hierarchy.",
                "CQ": [
                    {
                        "axiom": "multi dimensional subClassOf dimensionality",
                        "CQ": [
                            "Is multi dimensional categorized under the broader concept of dimensionality?",
                            "Which subclasses are encompassed by dimensionality, such as multi dimensional?",
                            "To which higher-level classes does multi dimensional belong in the context of dimensionality?"
                        ]
                    }
                ]
            },
            "homogenous": {
                "axiom": {
                    "subClassOf": [
                        "homogenity"
                    ],
                    "disjointWith": [
                        "heterogenous"
                    ]
                },
                "description": "homogenous is defined as a subclass of homogenity, indicating that all instances of this class exhibit uniformity in composition or character. It is explicitly disjoint with heterogenous—no individual can be both homogenous and heterogenous—ensuring a clear distinction between classes characterized by uniformity and those characterized by diversity.",
                "CQ": [
                    {
                        "axiom": "homogenous subClassOf homogenity",
                        "CQ": [
                            "Is homogeneity a broader classification that encompasses homogenous?",
                            "Which specific categories fall under the general concept of homogeneity, such as homogenous?",
                            "What overarching classes include homogenous as a more specific type?"
                        ]
                    },
                    {
                        "axiom": "homogenous disjointWith heterogenous",
                        "CQ": [
                            "How does the ontology differentiate between homogenous and heterogenous entities?",
                            "Is there any entity that can simultaneously belong to both homogenous and heterogenous categories?",
                            "Which classes are explicitly specified as mutually exclusive with homogenous?"
                        ]
                    }
                ]
            },
            "heterogenous": {
                "axiom": {
                    "subClassOf": [
                        "homogenity"
                    ]
                },
                "description": "heterogenous is defined as a subclass of homogenity. This means every heterogenous entity is considered a type of homogenity, establishing a hierarchical relationship in which heterogenous inherits all characteristics of homogenity; however, further distinctions or defining properties are not specified by the current axioms or descriptions.",
                "CQ": [
                    {
                        "axiom": "heterogenous subClassOf homogenity",
                        "CQ": [
                            "Is heterogenous included as a specific type under homogenity?",
                            "Which subclasses fall under the concept of homogenity, such as heterogenous?",
                            "What broader classes is heterogenous associated with in the ontology?"
                        ]
                    }
                ]
            },
            "recursive": {
                "axiom": {
                    "subClassOf": [
                        "recursiveness"
                    ],
                    "disjointWith": [
                        "non-recursive"
                    ]
                },
                "description": "recursive is defined as a subclass of recursiveness, signifying that every instance of recursive inherits properties from recursiveness. It is explicitly disjoint with non-recursive, ensuring that no individual can simultaneously belong to both recursive and non-recursive classes. This formalization distinguishes all recursive instances from those that are non-recursive.",
                "CQ": [
                    {
                        "axiom": "recursive subClassOf recursiveness",
                        "CQ": [
                            "Does recursive belong to the broader category of recursiveness?",
                            "Which specific concepts are categorized under recursiveness, including recursive?",
                            "What are the more general categories that encompass the recursive concept?"
                        ]
                    },
                    {
                        "axiom": "recursive disjointWith non-recursive",
                        "CQ": [
                            "How does the ontology distinguish between recursive and non-recursive classes?",
                            "Is any entity classified as both recursive and non-recursive in the ontology?",
                            "Which classes are formally specified as disjoint with non-recursive?"
                        ]
                    }
                ]
            },
            "non-recursive": {
                "axiom": {
                    "subClassOf": [
                        "recursiveness"
                    ]
                },
                "description": "non-recursive is defined as a subclass of recursiveness, meaning every non-recursive entity is a specific type of recursiveness. This class represents elements that, while related to the broader concept of recursiveness, possess characteristics that distinguish them as non-recursive within that context.",
                "CQ": [
                    {
                        "axiom": "non-recursive subClassOf recursiveness",
                        "CQ": [
                            "Is non-recursive categorized under recursiveness as a more specific classification?",
                            "What categories are directly encompassed by recursiveness, including non-recursive?",
                            "Which higher-order classes does non-recursive fall under?"
                        ]
                    }
                ]
            },
            "structured": {
                "axiom": {
                    "subClassOf": [
                        "structurness"
                    ]
                },
                "description": "structured is defined as a subclass of structurness. This indicates that every instance of structured also inherits all characteristics and constraints of structurness. No further properties or restrictions are specified for this class.",
                "CQ": [
                    {
                        "axiom": "structured subClassOf structurness",
                        "CQ": [
                            "Is structurness a direct superclass of structured?",
                            "What more specific classes fall under structurness, such as structured?",
                            "Which higher-level categories encompass the concept of structured?"
                        ]
                    }
                ]
            },
            "unstructured": {
                "axiom": {
                    "subClassOf": [
                        "structurness"
                    ]
                },
                "description": "unstructured is defined as a subclass of structurness. This means that every instance of unstructured is also an instance of structurness, inheriting all properties and constraints applicable to structurness. There are no additional property restrictions or disjointness axioms specified for this class.",
                "CQ": [
                    {
                        "axiom": "unstructured subClassOf structurness",
                        "CQ": [
                            "Does unstructured fall under the category of structurness?",
                            "Which types are categorized more specifically than structurness, such as unstructured?",
                            "To what higher-level groupings does unstructured pertain?"
                        ]
                    }
                ]
            },
            "semi-structured": {
                "axiom": {
                    "subClassOf": [
                        "structurness"
                    ]
                },
                "description": "semi-structured is defined as a subclass of structurness. This means that every instance of semi-structured is also an instance of structurness, inheriting its general properties while specializing or refining its concept. No additional property restrictions or disjointness axioms are specified, so the class is characterized primarily by its placement within the structurness hierarchy.",
                "CQ": [
                    {
                        "axiom": "semi-structured subClassOf structurness",
                        "CQ": [
                            "Is semi-structured classified as a type of structurness?",
                            "Which subclasses of structurness include semi-structured?",
                            "What broader categories encompass semi-structured within the ontology?"
                        ]
                    }
                ]
            },
            "non-unique values": {
                "axiom": {
                    "subClassOf": [
                        "uniqueness"
                    ],
                    "disjointWith": [
                        "unique values"
                    ]
                },
                "description": "non-unique values is defined as a subclass of uniqueness, but is explicitly disjoint with unique values, meaning no instance can be both a non-unique value and a unique value. This class captures those values that do not fulfill the criteria for uniqueness within a given context, thereby representing data elements that may have duplicates or repeated entries within a dataset or collection.",
                "CQ": [
                    {
                        "axiom": "non-unique values subClassOf uniqueness",
                        "CQ": [
                            "Are non-unique values encompassed within the broader concept of uniqueness?",
                            "What concepts are considered subclasses under uniqueness, such as non-unique values?",
                            "To what higher-level categories does non-unique values belong according to the ontology?"
                        ]
                    },
                    {
                        "axiom": "non-unique values disjointWith unique values",
                        "CQ": [
                            "How does the ontology distinguish between non-unique values and unique values?",
                            "Is it allowed for a value to be classified as both non-unique and unique simultaneously?",
                            "What other types of values, if any, are defined as disjoint with unique values?"
                        ]
                    }
                ]
            },
            "unique values": {
                "axiom": {
                    "subClassOf": [
                        "uniqueness"
                    ]
                },
                "description": "unique values is defined as a subclass of uniqueness, indicating that every instance of unique values is also an instance of uniqueness. This classification implies that members of this class represent values that are distinguished by not being duplicated within a given context, enforcing a guarantee of singularity for each value.",
                "CQ": [
                    {
                        "axiom": "unique values subClassOf uniqueness",
                        "CQ": [
                            "Are unique values considered a specific type of uniqueness?",
                            "Which subclasses fall under the category of uniqueness, including unique values?",
                            "What are the broader classes that unique values are classified under?"
                        ]
                    }
                ]
            },
            "descriptive field identifier": {
                "axiom": {
                    "subClassOf": [
                        "field identifier"
                    ],
                    "disjointWith": [
                        "target field identifier"
                    ]
                },
                "description": "descriptive field identifier is a subclass of field identifier, and is explicitly disjoint with target field identifier, meaning that no individual can simultaneously be both a descriptive field identifier and a target field identifier. This class represents identifiers that have descriptive purposes, distinguishing them from identifiers that serve as targets. The disjointness axiom enforces a clear conceptual separation between descriptive and target field identifiers within the ontology.",
                "CQ": [
                    {
                        "axiom": "descriptive field identifier subClassOf field identifier",
                        "CQ": [
                            "Does descriptive field identifier fall under the category of field identifier?",
                            "Which field identifier subclasses include descriptive field identifier?",
                            "What are the hierarchical parents of descriptive field identifier in relation to field identifier?"
                        ]
                    },
                    {
                        "axiom": "descriptive field identifier disjointWith target field identifier",
                        "CQ": [
                            "Are there any instances that can belong to both descriptive field identifier and target field identifier?",
                            "Which classes are asserted to be mutually exclusive with target field identifier?",
                            "What formal constraint distinguishes descriptive field identifier from target field identifier in the ontology?"
                        ]
                    }
                ]
            },
            "target field identifier": {
                "axiom": {
                    "subClassOf": [
                        "field identifier"
                    ]
                },
                "description": "target field identifier is defined as a subclass of field identifier. This means that every target field identifier is a specialized form of field identifier and inherits all its properties and constraints. No additional axioms or distinguishing properties are specified for this class.",
                "CQ": [
                    {
                        "axiom": "target field identifier subClassOf field identifier",
                        "CQ": [
                            "Does target field identifier belong to the broader group defined by field identifier?",
                            "Which field identifier subtypes encompass target field identifier as a member?",
                            "What higher-level field identifiers categorize target field identifier?"
                        ]
                    }
                ]
            },
            "target primitive field component": {
                "axiom": {
                    "subClassOf": [
                        "labeled dataset target field component"
                    ],
                    "propertyRestrictions": [
                        "[role_of some (real datatype or discrete datatype or boolean datatype)]"
                    ]
                },
                "description": "target primitive field component is defined as a subclass of labeled dataset target field component, specializing the notion of dataset fields that serve as targets in labeled datasets. Individuals in this class must play the role of some real, discrete, or boolean datatype, meaning the value types associated with these components are restricted to basic primitive datatypes (real numbers, discrete values, or boolean values). This specification clarifies that target primitive field components are intended for use where target variables are representable by primitive datatypes.",
                "CQ": [
                    {
                        "axiom": "target primitive field component subClassOf labeled dataset target field component",
                        "CQ": [
                            "Is every target primitive field component also classified as a labeled dataset target field component?",
                            "Which components are categorized as subclasses under labeled dataset target field component?",
                            "What broader categories encompass target primitive field component?"
                        ]
                    },
                    {
                        "axiom": "target primitive field component propertyRestrictions [role_of some (real datatype or discrete datatype or boolean datatype)]",
                        "CQ": [
                            "Is every target primitive field component required to participate in the role_of relationship with a real, discrete, or boolean datatype?",
                            "Can a target primitive field component have a role_of property with something that is not a real, discrete, or boolean datatype?",
                            "Are real datatype, discrete datatype, and boolean datatype the only types permitted in the role_of property for target primitive field components?"
                        ]
                    }
                ]
            },
            "target boolean field component": {
                "axiom": {
                    "subClassOf": [
                        "labeled dataset target field component"
                    ],
                    "propertyRestrictions": [
                        "[role_of some boolean datatype]"
                    ]
                },
                "description": "target boolean field component is defined as a subclass of labeled dataset target field component. It is further characterized by the restriction that it must play the role of some boolean datatype, meaning instances of this class are components within a labeled dataset that represent target fields specifically associated with boolean data types. This ensures that the target values handled by this component are strictly boolean (i.e., true or false).",
                "CQ": [
                    {
                        "axiom": "target boolean field component subClassOf labeled dataset target field component",
                        "CQ": [
                            "Does every target boolean field component fall under the category of labeled dataset target field component?",
                            "Which components are subclasses of labeled dataset target field component, such as target boolean field component?",
                            "What broader classes is target boolean field component a member of?"
                        ]
                    },
                    {
                        "axiom": "target boolean field component propertyRestrictions [role_of some boolean datatype]",
                        "CQ": [
                            "Is every instance of 'target' required to have the 'component' property with at least one value linked to the role_of property associated with a boolean datatype?",
                            "Can 'target' possess the 'component' property only if there is a related role_of property with values of boolean type?",
                            "Does the definition of 'target' entail that the 'component' property must always reference some boolean value through the role_of property?"
                        ]
                    }
                ]
            },
            "target discrete field component": {
                "axiom": {
                    "subClassOf": [
                        "labeled dataset target field component"
                    ],
                    "propertyRestrictions": [
                        "[role_of some discrete datatype]"
                    ]
                },
                "description": "target discrete field component is defined as a subclass of labeled dataset target field component. It is characterized by having a role that is associated with some discrete datatype, meaning the data values it represents are distinct and separate (e.g., categories or integers) rather than continuous. This ensures that every target discrete field component specifically involves target fields where the underlying data type is discrete.",
                "CQ": [
                    {
                        "axiom": "target discrete field component subClassOf labeled dataset target field component",
                        "CQ": [
                            "Is every target discrete field component included within the category of labeled dataset target field components?",
                            "Which component types are specialized forms of labeled dataset target field component, such as target discrete field component?",
                            "To what higher-level component categories does target discrete field component belong?"
                        ]
                    },
                    {
                        "axiom": "target discrete field component propertyRestrictions [role_of some discrete datatype]",
                        "CQ": [
                            "Is it required that every target discrete field component is associated with some role_of discrete datatype?",
                            "Can a target discrete field component exist without having the role_of property with a discrete datatype?",
                            "Does having the role_of property with at least one discrete datatype qualify an entity as a target discrete field component?"
                        ]
                    }
                ]
            },
            "target real field component": {
                "axiom": {
                    "subClassOf": [
                        "labeled dataset target field component"
                    ],
                    "propertyRestrictions": [
                        "[role_of some real datatype]"
                    ]
                },
                "description": "target real field component is a subclass of labeled dataset target field component. Individuals of this class are characterized by the restriction that they must play the role of some real datatype. This means that any target real field component represents a field component used as a target in labeled datasets, specifically associated with or representing real-valued data.",
                "CQ": [
                    {
                        "axiom": "target real field component subClassOf labeled dataset target field component",
                        "CQ": [
                            "Is every target real field component included under the category of labeled dataset target field component?",
                            "What components are specified as subclasses of labeled dataset target field component, such as target real field component?",
                            "Which broader categories encompass the target real field component?"
                        ]
                    },
                    {
                        "axiom": "target real field component propertyRestrictions [role_of some real datatype]",
                        "CQ": [
                            "Is every target real field component required to play the role_of property with at least one real datatype?",
                            "Can a target real field component exist without having a role_of relationship to any real datatype?",
                            "Does the ontology restrict target real field components to only have role_of relationships with real datatypes?"
                        ]
                    }
                ]
            },
            "target sequence of real field component": {
                "axiom": {
                    "subClassOf": [
                        "labeled dataset target field component"
                    ],
                    "propertyRestrictions": [
                        "[role_of some sequence of real datatype]"
                    ]
                },
                "description": "target sequence of real field component is a subclass of labeled dataset target field component. Members of this class are characterized by having the role_of some sequence of real datatype, meaning that each instance serves as a target field in a labeled dataset and fills a role associated with a sequence of real numbers (e.g., real-valued vectors or time series). This formalization restricts class membership to those dataset components whose target data are structured as sequences of real numbers.",
                "CQ": [
                    {
                        "axiom": "target sequence of real field component subClassOf labeled dataset target field component",
                        "CQ": [
                            "Is every target sequence of real field component classified under labeled dataset target field component?",
                            "Which components are specified as subclasses of labeled dataset target field component, such as target sequence of real field component?",
                            "To which broader category does target sequence of real field component belong?"
                        ]
                    },
                    {
                        "axiom": "target sequence of real field component propertyRestrictions [role_of some sequence of real datatype]",
                        "CQ": [
                            "Is every target sequence of real field component required to be associated by the role_of property with at least one value of the real datatype?",
                            "Can a target sequence of real field component exist without possessing the role_of relation to elements of the real type?",
                            "Does the class target sequence of real field component necessarily have a role_of property restricted only to instances of the real datatype?"
                        ]
                    }
                ]
            },
            "target hierarchical field component": {
                "axiom": {
                    "subClassOf": [
                        "labeled dataset target field component"
                    ],
                    "propertyRestrictions": [
                        "[role_of some (tree datatype or DAG datatype)]"
                    ]
                },
                "description": "target hierarchical field component is defined as a subclass of labeled dataset target field component. Members of this class are further characterized by the axiom that they fulfill the role_of relationship with some instance of either a tree datatype or a directed acyclic graph (DAG) datatype. This indicates that such components specifically serve as target fields in labeled datasets, where the targets are drawn from hierarchical data structures represented as either trees or DAGs.",
                "CQ": [
                    {
                        "axiom": "target hierarchical field component subClassOf labeled dataset target field component",
                        "CQ": [
                            "Does target hierarchical field component fall under the category of labeled dataset target field component?",
                            "Which components are defined as specializations of labeled dataset target field component, including target hierarchical field component?",
                            "What broader categories encompass target hierarchical field component in the ontology?"
                        ]
                    },
                    {
                        "axiom": "target hierarchical field component propertyRestrictions [role_of some (tree datatype or DAG datatype)]",
                        "CQ": [
                            "Is every target hierarchical field component necessarily associated through the 'role_of' property with either a tree datatype or a DAG datatype?",
                            "Can a target hierarchical field component have the 'role_of' property linked to both a tree datatype and a DAG datatype?",
                            "Does the presence of a 'role_of' relationship to any datatype other than tree or DAG preclude the entity from being classified as a target hierarchical field component?"
                        ]
                    }
                ]
            },
            "target DAG field component": {
                "axiom": {
                    "subClassOf": [
                        "labeled dataset target field component"
                    ],
                    "propertyRestrictions": [
                        "[role_of some DAG datatype]"
                    ]
                },
                "description": "target DAG field component is defined as a subclass of labeled dataset target field component and is further characterized by the property restriction that it must serve in the role_of some DAG datatype. This means that any instance of target DAG field component is specifically related to Directed Acyclic Graph (DAG) datatypes, describing target fields in labeled datasets that are intended to represent or interact with DAG structures.",
                "CQ": [
                    {
                        "axiom": "target DAG field component subClassOf labeled dataset target field component",
                        "CQ": [
                            "Is every target DAG field component a specific instance of a labeled dataset target field component?",
                            "Which types of components fall under the more general class of labeled dataset target field component?",
                            "What broader component classifications include target DAG field component?"
                        ]
                    },
                    {
                        "axiom": "target DAG field component propertyRestrictions [role_of some DAG datatype]",
                        "CQ": [
                            "Is every target DAG field component required to have at least one property that fulfills the role_of some DAG datatype condition?",
                            "Can a target DAG field component lack the role_of relationship to any DAG datatype?",
                            "Does the existence of a role_of connection to a DAG datatype define the target DAG field component?"
                        ]
                    }
                ]
            },
            "target tree field component": {
                "axiom": {
                    "subClassOf": [
                        "labeled dataset target field component"
                    ],
                    "propertyRestrictions": [
                        "[role_of some tree datatype]"
                    ]
                },
                "description": "target tree field component is defined as a subclass of labeled dataset target field component. Members of this class are characterized by the restriction that they must play the role of some tree datatype. This formalization specifies that any target tree field component is associated with a structure fundamentally based on tree datatypes, differentiating it from other target field components by its reliance on hierarchical or tree-structured data.",
                "CQ": [
                    {
                        "axiom": "target tree field component subClassOf labeled dataset target field component",
                        "CQ": [
                            "Is target tree field component a specific type of labeled dataset target field component?",
                            "Which field components are classified under labeled dataset target field component, including target tree field component?",
                            "What broader classifications does target tree field component fall under in the dataset context?"
                        ]
                    },
                    {
                        "axiom": "target tree field component propertyRestrictions [role_of some tree datatype]",
                        "CQ": [
                            "Is every target tree field component required to have at least one property that serves the role of some tree datatype?",
                            "Can a target tree field component exist without a property that plays the role of a tree datatype?",
                            "Does the target tree field component necessarily involve a property that is in the role_of relationship with a tree datatype?"
                        ]
                    }
                ]
            },
            "target set of discrete field component": {
                "axiom": {
                    "subClassOf": [
                        "labeled dataset target field component"
                    ],
                    "propertyRestrictions": [
                        "[role_of some set of discrete datatype]"
                    ]
                },
                "description": "target set of discrete field component is defined as a subclass of labeled dataset target field component. Every individual in this class must play the role of some set of discrete datatype, meaning each component serves as a target field in a labeled dataset whose values are constrained to a discrete set. This ensures that the target values for this component are not continuous but instead belong to a well-defined set, aligning with tasks such as multi-class classification in machine learning.",
                "CQ": [
                    {
                        "axiom": "target set of discrete field component subClassOf labeled dataset target field component",
                        "CQ": [
                            "Is target set of discrete field component a specialized type of labeled dataset target field component?",
                            "Which components are recognized as more specific instances under labeled dataset target field component, such as target set of discrete field component?",
                            "What higher-level group encompasses target set of discrete field component within the ontology?"
                        ]
                    },
                    {
                        "axiom": "target set of discrete field component propertyRestrictions [role_of some set of discrete datatype]",
                        "CQ": [
                            "Must every target set of discrete field component have at least one role_of relation to a set of discrete datatype?",
                            "Is it required for the target set of discrete field component to be connected, through the role_of property, to a set of discrete datatype?",
                            "Does the existence of a target set of discrete field component imply that it plays the role_of with some set of discrete datatype?"
                        ]
                    }
                ]
            },
            "target record of primitives field component": {
                "axiom": {
                    "subClassOf": [
                        "labeled dataset target field component"
                    ],
                    "propertyRestrictions": [
                        "[role_of some record of primitives datatype]"
                    ]
                },
                "description": "target record of primitives field component is defined as a subclass of labeled dataset target field component. Every instance of this class has the property that it plays the role_of at least one record of primitives datatype. This formalization ensures that any target record of primitives field component is associated, through the role_of relationship, with data characterized as a record of primitives datatype, linking target fields within labeled datasets to primitive data representations.",
                "CQ": [
                    {
                        "axiom": "target record of primitives field component subClassOf labeled dataset target field component",
                        "CQ": [
                            "Is every target record of primitives field component categorized under labeled dataset target field component?",
                            "Which specialized components fall under labeled dataset target field component, such as target record of primitives field component?",
                            "What are the parent classes of target record of primitives field component within the dataset ontology?"
                        ]
                    },
                    {
                        "axiom": "target record of primitives field component propertyRestrictions [role_of some record of primitives datatype]",
                        "CQ": [
                            "Does the target record of primitives require the component property 'role_of' to be associated with at least one individual of type record of primitives datatype?",
                            "Is it necessary for each target record of primitives to have the 'role_of' property filled by some record of primitives datatype?",
                            "Can a target record of primitives exist without any 'role_of' relationship to a record of primitives datatype?"
                        ]
                    }
                ]
            },
            "target record of boolean field component": {
                "axiom": {
                    "subClassOf": [
                        "labeled dataset target field component"
                    ],
                    "propertyRestrictions": [
                        "[role_of some record of boolean datatype]"
                    ]
                },
                "description": "target record of boolean field component is defined as a subclass of labeled dataset target field component. Members of this class are characterized by the property that they play the role_of some record of boolean datatype, indicating that these components specifically serve as targets in datasets where the associated data is restricted to boolean (true/false) values. This formalization ensures that any instance of this class must be linked to records containing only boolean-typed data, supporting clear distinction in data modeling for boolean-labeled target fields.",
                "CQ": [
                    {
                        "axiom": "target record of boolean field component subClassOf labeled dataset target field component",
                        "CQ": [
                            "Is target record of boolean field component categorized under labeled dataset target field component?",
                            "Which components fall under the category of labeled dataset target field component, such as target record of boolean field component?",
                            "To which broader component types does target record of boolean field component belong?"
                        ]
                    },
                    {
                        "axiom": "target record of boolean field component propertyRestrictions [role_of some record of boolean datatype]",
                        "CQ": [
                            "Is every target record required to have at least one property restriction where the role_of property relates to a record with a boolean datatype?",
                            "Can a target record exist without having any role_of property pointing to a record with a boolean value?",
                            "Does the ontology allow a target record to have role_of relationships only with records of non-boolean datatypes?"
                        ]
                    }
                ]
            },
            "target record of discrete field component": {
                "axiom": {
                    "subClassOf": [
                        "labeled dataset target field component"
                    ],
                    "propertyRestrictions": [
                        "[role_of some record of discrete datatype]"
                    ]
                },
                "description": "target record of discrete field component is a subclass of labeled dataset target field component, and is characterized by a property restriction indicating it must play the role of some record of discrete datatype. This means that any instance of this class represents a target field component within a labeled dataset, specifically one that is associated with a record whose datatype is discrete.",
                "CQ": [
                    {
                        "axiom": "target record of discrete field component subClassOf labeled dataset target field component",
                        "CQ": [
                            "Is every target record of discrete field component classified under labeled dataset target field component?",
                            "What are the more specific concepts included within labeled dataset target field component, such as target record of discrete field component?",
                            "To which overarching categories does target record of discrete field component belong?"
                        ]
                    },
                    {
                        "axiom": "target record of discrete field component propertyRestrictions [role_of some record of discrete datatype]",
                        "CQ": [
                            "Does every target record of a discrete field component necessarily relate via 'propertyRestrictions' to at least one record of a discrete datatype through the role_of property?",
                            "Is it required that for each target record of a discrete field component, there exists a property restriction involving role_of some record of a discrete datatype?",
                            "Can a target record of a discrete field component exist without being associated, via propertyRestrictions, through role_of, to any record of a discrete datatype?"
                        ]
                    }
                ]
            },
            "target record of reals field component": {
                "axiom": {
                    "subClassOf": [
                        "labeled dataset target field component"
                    ],
                    "propertyRestrictions": [
                        "[role_of some record of real datatype]"
                    ]
                },
                "description": "target record of reals field component is defined as a subclass of labeled dataset target field component. Each member of this class must fulfill the property restriction of being the role_of some record of real datatype, ensuring that instances of this class represent components associated with labeled dataset targets, specifically those that play a role in or are linked to data records typed as real values (real numbers).",
                "CQ": [
                    {
                        "axiom": "target record of reals field component subClassOf labeled dataset target field component",
                        "CQ": [
                            "Is target record of reals field component classified under labeled dataset target field component?",
                            "Which field components are considered more specific than labeled dataset target field component, such as target record of reals field component?",
                            "To which broader categories does target record of reals field component belong?"
                        ]
                    },
                    {
                        "axiom": "target record of reals field component propertyRestrictions [role_of some record of real datatype]",
                        "CQ": [
                            "Must every target record of reals field component have the role_of property relating it to at least one record of real datatype?",
                            "Is it mandatory for each target record of reals field component to participate in a role_of relationship with some instance classified as a record of real datatype?",
                            "Can a target record of reals field component exist without having the role_of property to any record of real datatype?"
                        ]
                    }
                ]
            },
            "target structured field component": {
                "axiom": {
                    "subClassOf": [
                        "labeled dataset target field component"
                    ],
                    "propertyRestrictions": [
                        "[role_of some (table datatype or array datatype or class datatype or sequence datatype or bag datatype or set datatype)]"
                    ]
                },
                "description": "target structured field component is a subclass of labeled dataset target field component. Members of this class are further characterized by the requirement that they play some role in relation to a structured data type; specifically, they must be associated with one or more of the following datatypes: table, array, class, sequence, bag, or set. This definition ensures that any target structured field component is a labeled field designated for structured or collection-type datatypes within the context of a dataset.",
                "CQ": [
                    {
                        "axiom": "target structured field component subClassOf labeled dataset target field component",
                        "CQ": [
                            "Is every target structured field component categorized under labeled dataset target field component?",
                            "Which kinds of labeled dataset target field component encompass target structured field component as a specific type?",
                            "To what broader field component categories does target structured field component belong?"
                        ]
                    },
                    {
                        "axiom": "target structured field component propertyRestrictions [role_of some (table datatype or array datatype or class datatype or sequence datatype or bag datatype or set datatype)]",
                        "CQ": [
                            "Is every target structured field component required to have a role_of relationship with at least one of the following datatypes: table, array, class, sequence, bag, or set?",
                            "Does the definition of target structured field component necessitate that its role_of property is fulfilled by at least one datatype among table, array, class, sequence, bag, or set?",
                            "Can a target structured field component possess a role_of relation to any datatype beyond table, array, class, sequence, bag, or set?"
                        ]
                    }
                ]
            },
            "descriptive record of primitives field component": {
                "axiom": {
                    "subClassOf": [
                        "labeled dataset descriptive field component"
                    ],
                    "propertyRestrictions": [
                        "[role_of some record of primitives datatype]"
                    ]
                },
                "description": "descriptive record of primitives field component is a subclass of labeled dataset descriptive field component. Every instance of this class must be associated, via the property role_of, with at least one record of primitives datatype. This formalization indicates that members play a specific role in describing labeled datasets by being directly linked to data representations consisting of primitive types.",
                "CQ": [
                    {
                        "axiom": "descriptive record of primitives field component subClassOf labeled dataset descriptive field component",
                        "CQ": [
                            "Is every descriptive record of primitives field component included within labeled dataset descriptive field component?",
                            "Which field components fall under the category of labeled dataset descriptive field component?",
                            "What broader classification encompasses descriptive record of primitives field component?"
                        ]
                    },
                    {
                        "axiom": "descriptive record of primitives field component propertyRestrictions [role_of some record of primitives datatype]",
                        "CQ": [
                            "Does every descriptive record of primitives field component necessarily have a role_of relation with some record of primitives datatype?",
                            "Are all instances of descriptive record of primitives field component required to participate in at least one role_of relation with a record of primitives datatype?",
                            "Is it possible for a descriptive record of primitives field component not to be related via role_of to any record of primitives datatype?"
                        ]
                    }
                ]
            },
            "descriptive record of reals field component": {
                "axiom": {
                    "subClassOf": [
                        "labeled dataset descriptive field component"
                    ],
                    "propertyRestrictions": [
                        "[role_of some record of real datatype]"
                    ]
                },
                "description": "descriptive record of reals field component is defined as a subclass of labeled dataset descriptive field component. Members of this class are characterized by having the property role_of, which must relate them to some record of real datatype. This formalization ensures that any individual of this class functions specifically to describe or annotate dataset fields that are based on real-number values.",
                "CQ": [
                    {
                        "axiom": "descriptive record of reals field component subClassOf labeled dataset descriptive field component",
                        "CQ": [
                            "Is descriptive record of reals field component classified under labeled dataset descriptive field component?",
                            "Which field components are specialized forms of labeled dataset descriptive field component, such as descriptive record of reals field component?",
                            "What broader field component categories encompass descriptive record of reals field component?"
                        ]
                    },
                    {
                        "axiom": "descriptive record of reals field component propertyRestrictions [role_of some record of real datatype]",
                        "CQ": [
                            "Is every descriptive record of a reals field component required to have at least one 'role_of' relationship with a record of real datatype?",
                            "Can a descriptive record of a reals field component exist without being related via 'role_of' to any record of real datatype?",
                            "Does the ontology ensure that the presence of the 'role_of' property in a descriptive record of a reals field component necessarily points to an individual of type record of real datatype?"
                        ]
                    }
                ]
            },
            "descriptive record of boolean field component": {
                "axiom": {
                    "subClassOf": [
                        "labeled dataset descriptive field component"
                    ],
                    "propertyRestrictions": [
                        "[role_of some record of boolean datatype]"
                    ]
                },
                "description": "A descriptive record of boolean field component is defined as a subclass of labeled dataset descriptive field component. Any instance of this class must play the role of some record associated with a boolean datatype, signifying that its descriptive information pertains specifically to data fields that store boolean values.",
                "CQ": [
                    {
                        "axiom": "descriptive record of boolean field component subClassOf labeled dataset descriptive field component",
                        "CQ": [
                            "Is descriptive record of boolean field component classified as a type of labeled dataset descriptive field component?",
                            "Which components are encompassed under labeled dataset descriptive field component, including descriptive record of boolean field component?",
                            "To what broader field categories does descriptive record of boolean field component pertain?"
                        ]
                    },
                    {
                        "axiom": "descriptive record of boolean field component propertyRestrictions [role_of some record of boolean datatype]",
                        "CQ": [
                            "Must every descriptive record of a boolean field component have at least one 'role_of' relation to a record of boolean datatype?",
                            "Is it required that any descriptive record of a boolean field component be linked by 'role_of' only to records of boolean datatype?",
                            "Are there descriptive records of boolean field components that lack any 'role_of' connection with a record of boolean datatype?"
                        ]
                    }
                ]
            },
            "descriptive record of discrete field component": {
                "axiom": {
                    "subClassOf": [
                        "labeled dataset descriptive field component"
                    ],
                    "propertyRestrictions": [
                        "[role_of some record of discrete datatype]"
                    ]
                },
                "description": "descriptive record of discrete field component is a subclass of labeled dataset descriptive field component. It is characterized by the property that it plays some role in relation to a record of discrete datatype, indicating its involvement in describing or annotating fields within a labeled dataset that take on discrete values. This class ensures that its instances are specifically linked to descriptive information about discrete data fields.",
                "CQ": [
                    {
                        "axiom": "descriptive record of discrete field component subClassOf labeled dataset descriptive field component",
                        "CQ": [
                            "Is every descriptive record of discrete field component classified under labeled dataset descriptive field component?",
                            "Which entities fall under the labeled dataset descriptive field component category, such as descriptive record of discrete field component?",
                            "What broader categories include descriptive record of discrete field component as a member?"
                        ]
                    },
                    {
                        "axiom": "descriptive record of discrete field component propertyRestrictions [role_of some record of discrete datatype]",
                        "CQ": [
                            "Is it required that a descriptive record of a discrete field component has a property 'role_of' that relates only to a record of a discrete datatype?",
                            "Can a descriptive record of a discrete field component possess the 'role_of' property exclusively with instances of a record of discrete datatype?",
                            "Does every record representing a discrete field component utilize 'role_of' solely in reference to records classified as discrete datatypes?"
                        ]
                    }
                ]
            },
            "descriptive set of integer field component": {
                "axiom": {
                    "subClassOf": [
                        "labeled dataset descriptive field component"
                    ],
                    "propertyRestrictions": [
                        "[role_of some set of integer datatype]"
                    ]
                },
                "description": "descriptive set of integer field component is a subclass of labeled dataset descriptive field component. Members of this class are characterized by having a role that involves some association with a set of integer datatype. This formalization ensures that any individual belonging to this class serves as a descriptive field within a labeled dataset, specifically representing or relating to a set of integer values.",
                "CQ": [
                    {
                        "axiom": "descriptive set of integer field component subClassOf labeled dataset descriptive field component",
                        "CQ": [
                            "Does descriptive set of integer field component fall under the category of labeled dataset descriptive field component?",
                            "Which components qualify as more specific instances of labeled dataset descriptive field component, such as descriptive set of integer field component?",
                            "What general types encompass descriptive set of integer field component within labeled dataset descriptive field component?"
                        ]
                    },
                    {
                        "axiom": "descriptive set of integer field component propertyRestrictions [role_of some set of integer datatype]",
                        "CQ": [
                            "Is every descriptive set of integer field component required to have at least one role_of relationship to a set of integer datatype?",
                            "Must all descriptive sets of integer field components be assigned some role_of that connects them with a set of integer datatype?",
                            "Does the presence of a role_of link to a set of integer datatype necessarily characterize every descriptive set of integer field component?"
                        ]
                    }
                ]
            },
            "descriptive strucured field component": {
                "axiom": {
                    "subClassOf": [
                        "labeled dataset descriptive field component"
                    ],
                    "propertyRestrictions": [
                        "[role_of some (array datatype or class datatype or sequence datatype or bag datatype or set datatype)]"
                    ]
                },
                "description": "descriptive structured field component is defined as a subclass of labeled dataset descriptive field component. It is characterized by having a role that must be associated with at least one of the following datatypes: array datatype, class datatype, sequence datatype, bag datatype, or set datatype. This ensures that instances of descriptive structured field component function specifically in contexts involving structured data representations such as arrays, classes, sequences, bags, or sets.",
                "CQ": [
                    {
                        "axiom": "descriptive strucured field component subClassOf labeled dataset descriptive field component",
                        "CQ": [
                            "Is descriptive structured field component categorized as a subset of labeled dataset descriptive field component?",
                            "Which field components are included under labeled dataset descriptive field component, such as descriptive structured field component?",
                            "Into which more general component groups does descriptive structured field component fall?"
                        ]
                    },
                    {
                        "axiom": "descriptive strucured field component propertyRestrictions [role_of some (array datatype or class datatype or sequence datatype or bag datatype or set datatype)]",
                        "CQ": [
                            "Must every descriptive structured field component play a role in at least one array, class, sequence, bag, or set datatype?",
                            "Is it required that a descriptive structured field component serves in a role involving only array, class, sequence, bag, or set datatypes?",
                            "Can a descriptive structured field component have the role_of property with any datatype type other than array, class, sequence, bag, or set?"
                        ]
                    }
                ]
            },
            "positive integer": {
                "axiom": {
                    "subClassOf": [
                        "extended datatype"
                    ]
                },
                "description": "positive integer is defined as a subclass of extended datatype, indicating that it is a specialized numerical datatype representing integers greater than zero within the broader category of extended datatypes. No additional constraints or properties are specified beyond this hierarchical relationship.",
                "CQ": [
                    {
                        "axiom": "positive integer subClassOf extended datatype",
                        "CQ": [
                            "Is positive integer classified as a more specific type under extended datatype?",
                            "Which datatypes fall within the category of extended datatype, encompassing positive integer?",
                            "What broader datatype groups does positive integer inherit from?"
                        ]
                    }
                ]
            },
            "positive integer range generator": {
                "axiom": {
                    "subClassOf": [
                        "range subtype generator"
                    ]
                },
                "description": "positive integer range generator is defined as a subclass of range subtype generator. This class represents generators specifically designed to produce ranges consisting only of positive integers, inheriting all characteristics of range subtype generator while specializing in handling positive integer values.",
                "CQ": [
                    {
                        "axiom": "positive integer range generator subClassOf range subtype generator",
                        "CQ": [
                            "Is every positive integer range generator categorized under range subtype generator?",
                            "Which specialized generators are classified beneath range subtype generator, including positive integer range generator?",
                            "Under which broader generator types does positive integer range generator fall?"
                        ]
                    }
                ]
            }
        },
        "properties": {
            "has_identifier": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "has_attribute"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"has_identifier\" is defined as a sub-property of \"has_attribute\" and does not have explicitly stated characteristics, domain, or range restrictions. It represents an attribute relationship, likely used to associate an entity with a unique identifier, though no inverse property is specified.",
                "CQ": [
                    {
                        "axiom": "has_identifier domain None",
                        "CQ": [
                            "What entities can serve as the domain of the 'has_identifier' property?",
                            "Is it correct that 'has_identifier' does not have a defined domain?",
                            "Can 'has_identifier' relate to subjects of any type, or is its use restricted to specific classes?"
                        ]
                    },
                    {
                        "axiom": "has_identifier range None",
                        "CQ": [
                            "What entities can be assigned as the range for the property 'has_identifier'?",
                            "Is it correct that the property 'has_identifier' does not specify any range?",
                            "Can the property 'has_identifier' be associated with values of any type as its range?"
                        ]
                    },
                    {
                        "axiom": "has_identifier subPropertyOf has_attribute",
                        "CQ": [
                            "Which properties are considered subproperties under has_attribute?",
                            "Is has_identifier categorized as a subproperty of has_attribute?",
                            "Does assigning a has_identifier property inherently assign a has_attribute property as well?"
                        ]
                    }
                ]
            },
            "is-about": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "owl:topObjectProperty"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"is-about\" does not have explicitly defined characteristics, domain, or range constraints. It is specified as a sub-property of the top-level object property (owl:topObjectProperty), indicating broad applicability for relating entities without restriction. No inverse property is defined. This property can be used to associate any two individuals to indicate that one is about the other.",
                "CQ": [
                    {
                        "axiom": "is-about domain None",
                        "CQ": [
                            "What types of entities can serve as the domain for the property 'is-about'?",
                            "Should the property 'is-about' be restricted to a specific domain, or is it intended to have no domain?",
                            "Is it correct that 'is-about' does not specify any domain?"
                        ]
                    },
                    {
                        "axiom": "is-about range None",
                        "CQ": [
                            "What entities can be the range of the property 'is-about'?",
                            "Is it valid for the property 'is-about' to have no specified range?",
                            "Can 'is-about' have a range other than the currently undefined range?"
                        ]
                    },
                    {
                        "axiom": "is-about subPropertyOf owl:topObjectProperty",
                        "CQ": [
                            "Is is-about classified as a subproperty of owl:topObjectProperty?",
                            "Which superproperties are associated with is-about in the ontology?",
                            "What subproperties, if any, are defined under owl:topObjectProperty?"
                        ]
                    }
                ]
            },
            "is_member_of": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "attribute_of"
                    ],
                    "inverseOf": [
                        "has_member"
                    ]
                },
                "description": "The property \"is_member_of\" does not have specified domain or range restrictions and has no special characteristics defined. It is a sub-property of \"attribute_of\" and has \"has_member\" as its inverse property. This property is used to relate an entity to a group or collection to which it belongs.",
                "CQ": [
                    {
                        "axiom": "is_member_of domain None",
                        "CQ": [
                            "What entities can be the subject for the 'is_member_of' property?",
                            "Is it correct that 'is_member_of' has no specified domain?",
                            "Can 'is_member_of' be applied to anything, or should its domain be restricted?"
                        ]
                    },
                    {
                        "axiom": "is_member_of range None",
                        "CQ": [
                            "What can be the range of the property 'is_member_of'?",
                            "Is it correct that the 'is_member_of' property does not have a defined range?",
                            "Can 'is_member_of' relate to any type of object as its value?"
                        ]
                    },
                    {
                        "axiom": "is_member_of subPropertyOf attribute_of",
                        "CQ": [
                            "Is is_member_of included as a subproperty within attribute_of?",
                            "What superproperties does is_member_of possess in the ontology?",
                            "Which subproperties are defined under attribute_of?"
                        ]
                    },
                    {
                        "axiom": "is_member_of inverseOf has_member",
                        "CQ": [
                            "What is the logical connection between ‘is_member_of’ and ‘has_member’ in the ontology?",
                            "If entity A is a member of entity B, does that entail that B has member A according to the ontology?",
                            "Which property is declared as the inverse of ‘is_member_of’?"
                        ]
                    }
                ]
            },
            "is_quality_of": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": [
                        "has_quality"
                    ]
                },
                "description": "The property \"is_quality_of\" has no explicitly defined characteristics, domain, or range restrictions, and is not specified as a sub-property of any other property. It is defined as the inverse of the property \"has_quality,\" indicating that it relates a quality to the entity it qualifies.",
                "CQ": [
                    {
                        "axiom": "is_quality_of domain None",
                        "CQ": [
                            "What entities can serve as the domain of the property 'is_quality_of'?",
                            "Is it accurate that the property 'is_quality_of' has no specified domain?",
                            "Are there any classes that are explicitly defined as subjects of 'is_quality_of'?"
                        ]
                    },
                    {
                        "axiom": "is_quality_of range None",
                        "CQ": [
                            "What kinds of entities can be the range of the property 'is_quality_of'?",
                            "Is it correct that the property 'is_quality_of' does not have a defined range?",
                            "Can 'is_quality_of' relate to entities of any type as its object?"
                        ]
                    },
                    {
                        "axiom": "is_quality_of inverseOf has_quality",
                        "CQ": [
                            "What is the logical connection between ‘is_quality_of’ and ‘has_quality’ as defined in the ontology?",
                            "If entity A is related to entity B via ‘is_quality_of’, does this entail that B is related to A via ‘has_quality’?",
                            "Which object property is specified as the inverse of ‘is_quality_of’ in the ontology?"
                        ]
                    }
                ]
            },
            "has_operation": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "has_attribute"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"has_operation\" does not have explicitly defined characteristics, domain, or range restrictions. It is declared as a sub-property of \"has_attribute,\" indicating that it inherits the general meaning of associating an attribute with an entity, with a more specific focus on operations. No inverse property is specified.",
                "CQ": [
                    {
                        "axiom": "has_operation domain None",
                        "CQ": [
                            "What entities can be the subject (domain) of the property 'has_operation'?",
                            "Is it correct that the property 'has_operation' does not have a specified domain?",
                            "Can 'has_operation' relate any type of entity as its subject?"
                        ]
                    },
                    {
                        "axiom": "has_operation range None",
                        "CQ": [
                            "What entities can be the range of the property 'has_operation'?",
                            "Is it correct that 'has_operation' does not specify any range?",
                            "Could any type of value be assigned as the range of 'has_operation'?"
                        ]
                    },
                    {
                        "axiom": "has_operation subPropertyOf has_attribute",
                        "CQ": [
                            "Is every instance of has_operation necessarily an instance of has_attribute?",
                            "Which properties are defined as subproperties under has_attribute?",
                            "What superproperties are associated with has_operation in the ontology?"
                        ]
                    }
                ]
            },
            "has-value": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"has-value\" does not have explicitly defined characteristics, domain, range, super-properties, or inverse properties. This indicates a general-purpose property whose usage and constraints are not restricted by axioms in the current ontology specification.",
                "CQ": [
                    {
                        "axiom": "has-value domain None",
                        "CQ": [
                            "Is it correct that the property 'has-value' does not have a specified domain?",
                            "What types of entities, if any, can act as subjects for the 'has-value' property?",
                            "Can anything be the domain of the 'has-value' property, or is its domain truly undefined?"
                        ]
                    },
                    {
                        "axiom": "has-value range None",
                        "CQ": [
                            "What can be the range of the property 'has-value'?",
                            "Is it correct that the property 'has-value' does not specify a range?",
                            "Can 'has-value' relate to objects other than those with a specified range?"
                        ]
                    }
                ]
            },
            "identifier_for": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "attribute_of"
                    ],
                    "inverseOf": [
                        "has_identifier"
                    ]
                },
                "description": "The property \"identifier_for\" does not specify explicit domain or range restrictions and has no defined characteristics. It is a sub-property of \"attribute_of\" and serves as the inverse of the property \"has_identifier.\" This property is used to relate an identifier to the entity it identifies, reflecting an attribute relationship between the identifier and the entity.",
                "CQ": [
                    {
                        "axiom": "identifier_for domain None",
                        "CQ": [
                            "What entities can serve as the domain for the property 'identifier_for'?",
                            "Is it correct that the property 'identifier_for' lacks a specified domain?",
                            "Are there any recommended domain classes for the 'identifier_for' property?"
                        ]
                    },
                    {
                        "axiom": "identifier_for range None",
                        "CQ": [
                            "What types of entities can serve as the range for the property 'identifier_for'?",
                            "Is it correct that the property 'identifier_for' has no specified range?",
                            "Could any value be used as the range of 'identifier_for' or are there constraints?"
                        ]
                    },
                    {
                        "axiom": "identifier_for subPropertyOf attribute_of",
                        "CQ": [
                            "Does the property identifier_for qualify as a more specific type of attribute_of within the ontology?",
                            "Which properties are considered subproperties of attribute_of in the current ontology scope?",
                            "Is attribute_of defined as a direct superproperty of identifier_for?"
                        ]
                    },
                    {
                        "axiom": "identifier_for inverseOf has_identifier",
                        "CQ": [
                            "What is the logical correspondence between the properties ‘identifier_for’ and ‘has_identifier’ in the ontology?",
                            "If entity A is identified by B using ‘identifier_for’, does it follow that B has A as an identifier via ‘has_identifier’?",
                            "Which property operates as the inverse of ‘identifier_for’ in this ontology?"
                        ]
                    }
                ]
            },
            "has_role": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "owl:topObjectProperty"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"has_role\" has no explicitly defined domain, range, or characteristics. It is a direct subproperty of owl:topObjectProperty, indicating broad applicability between individuals. No inverse property is specified. This property can be used to associate entities with their assigned roles without additional restrictions.",
                "CQ": [
                    {
                        "axiom": "has_role domain None",
                        "CQ": [
                            "What types of entities can be the subject of the 'has_role' property?",
                            "Is it accurate that the property 'has_role' does not specify a domain?",
                            "Can 'has_role' link from any class, or should there be a defined domain?"
                        ]
                    },
                    {
                        "axiom": "has_role range None",
                        "CQ": [
                            "What types of entities can be the range of the property 'has_role'?",
                            "Is it correct that 'has_role' does not specify any range for its values?",
                            "Are there any restrictions on what can be assigned as the value of 'has_role'?"
                        ]
                    },
                    {
                        "axiom": "has_role subPropertyOf owl:topObjectProperty",
                        "CQ": [
                            "Is has_role a specialization of owl:topObjectProperty?",
                            "Which properties are classified as subproperties under owl:topObjectProperty?",
                            "Does the assertion of has_role between entities entail a more general relationship as defined by owl:topObjectProperty?"
                        ]
                    }
                ]
            },
            "has_quality": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "owl:topObjectProperty"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"has_quality\" has no explicitly defined domain, range, characteristics, or inverse properties. It is declared as a subproperty of \"owl:topObjectProperty,\" indicating it is a general object property that can relate any two individuals. This property is typically used to associate an entity with a quality or characteristic, but no additional restrictions are imposed by its current axioms.",
                "CQ": [
                    {
                        "axiom": "has_quality domain None",
                        "CQ": [
                            "What kinds of entities can act as the subject for the property 'has_quality'?",
                            "Is it correct that 'has_quality' does not have a specified domain in the ontology?",
                            "Are there potential classes that should be recognized as the domain for 'has_quality'?"
                        ]
                    },
                    {
                        "axiom": "has_quality range None",
                        "CQ": [
                            "Is it correct that the property 'has_quality' does not have a specified range?",
                            "What classifications are allowed to be the range for the property 'has_quality'?",
                            "Can any type of entity serve as the range for the 'has_quality' property?"
                        ]
                    },
                    {
                        "axiom": "has_quality subPropertyOf owl:topObjectProperty",
                        "CQ": [
                            "Is has_quality a subproperty of owl:topObjectProperty?",
                            "Which properties are subproperties of owl:topObjectProperty?",
                            "What superproperties does has_quality have within the property hierarchy?"
                        ]
                    }
                ]
            },
            "represents": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "owl:topObjectProperty"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"represents\" has no explicitly defined domain, range, or characteristics, and does not specify an inverse property. It is a sub-property of owl:topObjectProperty, indicating it is a very general object property that can relate any two individuals in the ontology. No further semantic constraints are provided.",
                "CQ": [
                    {
                        "axiom": "represents domain None",
                        "CQ": [
                            "What types of entities can serve as the domain for the property 'represents'?",
                            "Is it appropriate for the property 'represents' to have no specified domain?",
                            "Could the property 'represents' be used with any subject, or should its domain be restricted?"
                        ]
                    },
                    {
                        "axiom": "represents range None",
                        "CQ": [
                            "What are the possible range classes for the property 'represents'?",
                            "Is it correct that the property 'represents' does not have a specified range?",
                            "Can 'represents' relate a subject to any type of object without restriction?"
                        ]
                    },
                    {
                        "axiom": "represents subPropertyOf owl:topObjectProperty",
                        "CQ": [
                            "Is represents a subproperty of any top-level object property in the ontology?",
                            "Which properties are classified as superproperties of represents?",
                            "Does every use of the represents property imply a relationship defined by the most general object property?"
                        ]
                    }
                ]
            },
            "has_attribute": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "owl:topObjectProperty"
                    ],
                    "inverseOf": [
                        "has_attribute"
                    ]
                },
                "description": "The property \"has_attribute\" has no explicitly defined characteristics, domain, or range restrictions. It is a sub-property of owl:topObjectProperty and is defined as being its own inverse property, indicating a symmetric relationship. No additional description is currently provided.",
                "CQ": [
                    {
                        "axiom": "has_attribute domain None",
                        "CQ": [
                            "Is it correct that the property 'has_attribute' has no specified domain?",
                            "What possible domains could be associated with the property 'has_attribute'?",
                            "Can 'has_attribute' be used with any type of subject without domain restrictions?"
                        ]
                    },
                    {
                        "axiom": "has_attribute range None",
                        "CQ": [
                            "What can be the range of the property 'has_attribute'?",
                            "Is it correct that 'has_attribute' has no defined range?",
                            "Can values associated with 'has_attribute' be of any type?"
                        ]
                    },
                    {
                        "axiom": "has_attribute subPropertyOf owl:topObjectProperty",
                        "CQ": [
                            "Is has_attribute considered a specialized form of owl:topObjectProperty?",
                            "What superproperties are associated with has_attribute in the ontology?",
                            "Which subproperties does owl:topObjectProperty encompass, including has_attribute?"
                        ]
                    },
                    {
                        "axiom": "has_attribute inverseOf has_attribute",
                        "CQ": [
                            "What is the inverse property associated with ‘has_attribute’ defined in the ontology?",
                            "If entity A has an attribute B, can we infer that B has an attribute A within the ontology’s structure?",
                            "How does the ontology specify the logical connection between ‘has_attribute’ and its inverse?"
                        ]
                    }
                ]
            },
            "has_member": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "has_attribute"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"has_member\" has no explicit domain or range restrictions and is not defined with characteristics such as functional or transitive. It is declared as a sub-property of \"has_attribute,\" indicating that it inherits the general semantics of attributive relations. No inverse property is specified. This property is used to relate a group or collection to its members in a manner consistent with general attribute relations.",
                "CQ": [
                    {
                        "axiom": "has_member domain None",
                        "CQ": [
                            "What can be the domain of the property 'has_member'?",
                            "Is it correct that the property 'has_member' has no specified domain?",
                            "Which types of entities can act as the subject for the property 'has_member'?"
                        ]
                    },
                    {
                        "axiom": "has_member range None",
                        "CQ": [
                            "What types of values are permitted as the range of the property 'has_member'?",
                            "Is it correct that the property 'has_member' does not specify a range?",
                            "Can 'has_member' relate to any kind of entity as its object, or should there be a defined range?"
                        ]
                    },
                    {
                        "axiom": "has_member subPropertyOf has_attribute",
                        "CQ": [
                            "Is has_member considered a specific type of has_attribute property?",
                            "Which properties are categorized as subproperties of has_attribute?",
                            "What are the direct superproperties of has_member?"
                        ]
                    }
                ]
            },
            "role_of": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "owl:topObjectProperty"
                    ],
                    "inverseOf": [
                        "has_role"
                    ]
                },
                "description": "The property \"role_of\" does not have explicitly specified domain or range restrictions and lacks defining characteristics. It is a sub-property of \"owl:topObjectProperty\" and has \"has_role\" as its inverse property. This property is typically used to relate a role to an entity, indicating that the entity plays or fulfills a particular role.",
                "CQ": [
                    {
                        "axiom": "role_of domain None",
                        "CQ": [
                            "What types of entities can be the subject of the property 'role_of'?",
                            "Is there a specific class that should be considered as the domain of 'role_of'?",
                            "Is it valid that the property 'role_of' currently does not specify a domain?"
                        ]
                    },
                    {
                        "axiom": "role_of range None",
                        "CQ": [
                            "What types of entities can serve as the range for the property 'role_of'?",
                            "Is it correct that the property 'role_of' does not have a defined range?",
                            "Can 'role_of' be associated with any specific type as its range?"
                        ]
                    },
                    {
                        "axiom": "role_of subPropertyOf owl:topObjectProperty",
                        "CQ": [
                            "Does the role_of property inherit all characteristics and constraints from owl:topObjectProperty?",
                            "Is owl:topObjectProperty a generalization (superproperty) of role_of in the ontology's property structure?",
                            "Which subproperties are defined under owl:topObjectProperty, specifically including role_of?"
                        ]
                    },
                    {
                        "axiom": "role_of inverseOf has_role",
                        "CQ": [
                            "How are 'role_of' and 'has_role' semantically connected as inverse properties in the ontology?",
                            "If entity E is linked to F via 'role_of', does the ontology entail that F is connected to E via 'has_role'?",
                            "Which property is defined as the inverse of 'role_of' in the ontology?"
                        ]
                    }
                ]
            },
            "attribute_of": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"attribute_of\" has no explicitly defined characteristics, domain, or range restrictions. It is not specified as a sub-property of any other property and does not have an inverse property. This property can be used generally to relate an attribute to any entity without further ontological constraints.",
                "CQ": [
                    {
                        "axiom": "attribute_of domain None",
                        "CQ": [
                            "What are the possible domains for the property 'attribute_of'?",
                            "Is it correct that the property 'attribute_of' does not have a specified domain?",
                            "Can 'attribute_of' relate to any type of subject, or is there a restriction on its domain?"
                        ]
                    },
                    {
                        "axiom": "attribute_of range None",
                        "CQ": [
                            "What kinds of entities can be the range of the property 'attribute_of'?",
                            "Is it correct that the property 'attribute_of' does not have a specified range?",
                            "Can 'attribute_of' be associated with values of any type as its object?"
                        ]
                    }
                ]
            },
            "denotes": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "is-about"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"denotes\" has no explicitly defined domain, range, or characteristics. It is a sub-property of \"is-about\", indicating a more specific form of reference or relationship to a subject. No inverse property is specified. This property is typically used to express that one entity represents or refers to another in a symbolic or informational context.",
                "CQ": [
                    {
                        "axiom": "denotes domain None",
                        "CQ": [
                            "What can be the domain of the property 'denotes'?",
                            "Is it correct that the property 'denotes' does not specify a domain?",
                            "Are there any entities that should not be used as the subject of the property 'denotes'?"
                        ]
                    },
                    {
                        "axiom": "denotes range None",
                        "CQ": [
                            "Is it correct that the property 'denotes' does not specify a range?",
                            "What kinds of entities can 'denotes' refer to, given its unspecified range?",
                            "Can 'denotes' relate to an object of any type as its target?"
                        ]
                    },
                    {
                        "axiom": "denotes subPropertyOf is-about",
                        "CQ": [
                            "Which properties are defined as subproperties under is-about, such as denotes?",
                            "Does an assertion using denotes also satisfy constraints requiring is-about?",
                            "What superproperties are associated with denotes in the ontology hierarchy?"
                        ]
                    }
                ]
            },
            "is_operation_of": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "attribute_of"
                    ],
                    "inverseOf": [
                        "has_operation"
                    ]
                },
                "description": "The property \"is_operation_of\" has no explicitly defined domain or range restrictions and does not possess any special logical characteristics. It is defined as a sub-property of \"attribute_of,\" indicating that it represents a specific kind of attributions between entities. Additionally, it has an inverse property \"has_operation,\" establishing a bidirectional relationship between related entities.",
                "CQ": [
                    {
                        "axiom": "is_operation_of domain None",
                        "CQ": [
                            "What can be the domain of 'is_operation_of'?",
                            "Is it correct that the property 'is_operation_of' has no domain?",
                            "Are there any entities that can be the subject of 'is_operation_of'?"
                        ]
                    },
                    {
                        "axiom": "is_operation_of range None",
                        "CQ": [
                            "What entities can be in the range of the property 'is_operation_of'?",
                            "Is it correct that the property 'is_operation_of' does not specify a range?",
                            "Are there any restrictions on what can appear in the range position for 'is_operation_of'?"
                        ]
                    },
                    {
                        "axiom": "is_operation_of subPropertyOf attribute_of",
                        "CQ": [
                            "Which properties are defined as subproperties of attribute_of?",
                            "Is attribute_of a direct superproperty of is_operation_of within the ontology?",
                            "Does assigning the is_operation_of property to a relationship ensure it is also an instance of attribute_of?"
                        ]
                    },
                    {
                        "axiom": "is_operation_of inverseOf has_operation",
                        "CQ": [
                            "How are the properties ‘is_operation_of’ and ‘has_operation’ interconnected in the ontology?",
                            "If an entity X is an operation of Y, does it follow that Y has operation X under the ontology’s semantics?",
                            "Which property is designated as the inverse of ‘is_operation_of’ in this ontology?"
                        ]
                    }
                ]
            },
            "owl:topObjectProperty": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"owl:topObjectProperty\" has no specified domain, range, characteristics, super-properties, or inverse property. It is the most general object property in OWL ontologies, capable of relating any pair of individuals without restriction.",
                "CQ": [
                    {
                        "axiom": "owl:topObjectProperty domain None",
                        "CQ": [
                            "Is it valid for owl:topObjectProperty to lack a specified domain?",
                            "What entities can serve as the domain for owl:topObjectProperty?",
                            "Are there restrictions on the types of subjects that owl:topObjectProperty can be used with?"
                        ]
                    },
                    {
                        "axiom": "owl:topObjectProperty range None",
                        "CQ": [
                            "What can be the range of the property 'owl:topObjectProperty'?",
                            "Is it correct that 'owl:topObjectProperty' has no specified range?",
                            "Can 'owl:topObjectProperty' relate to any type of object as its range?"
                        ]
                    }
                ]
            }
        }
    },
    "lab": {
        "classes": {
            "AbilityToOrganiseAssessment": {
                "axiom": {
                    "subClassOf": [
                        "ExperimentalAssessment"
                    ]
                },
                "description": "AbilityToOrganiseAssessment is defined as a subclass of ExperimentalAssessment. This means that every AbilityToOrganiseAssessment is an instance of ExperimentalAssessment, inheriting all its general characteristics. This class specifically represents assessments focusing on the capacity to organise or structure experimental tasks or processes. No further property restrictions or disjointness axioms are specified.",
                "CQ": [
                    {
                        "axiom": "AbilityToOrganiseAssessment subClassOf ExperimentalAssessment",
                        "CQ": [
                            "Is AbilityToOrganiseAssessment classified as a kind of ExperimentalAssessment?",
                            "Which categories of ExperimentalAssessment encompass AbilityToOrganiseAssessment as a specific type?",
                            "What are the more specific assessment abilities that fall under ExperimentalAssessment?"
                        ]
                    }
                ]
            },
            "ApathyAssessment": {
                "axiom": {
                    "subClassOf": [
                        "ExperimentalAssessment"
                    ]
                },
                "description": "ApathyAssessment is defined as a subclass of ExperimentalAssessment. This means that every ApathyAssessment is a specific type of ExperimentalAssessment, inheriting all characteristics of the latter. It is used to systematically evaluate or measure apathy within an experimental or research context.",
                "CQ": [
                    {
                        "axiom": "ApathyAssessment subClassOf ExperimentalAssessment",
                        "CQ": [
                            "Is ApathyAssessment categorized as a form of ExperimentalAssessment?",
                            "What are the types of assessments classified under ExperimentalAssessment, including ApathyAssessment?",
                            "Which broader assessment classes does ApathyAssessment fall under?"
                        ]
                    }
                ]
            },
            "CognitiveLoadAssessment": {
                "axiom": {
                    "subClassOf": [
                        "ExperimentalAssessment"
                    ],
                    "propertyRestrictions": [
                        "[hasDualTaskScore exactly 1]",
                        "[hasMonoTaskScore exactly 1]",
                        "[hasMonoTaskScore only rdfs:Literal]",
                        "[hasDualTaskScore only rdfs:Literal]"
                    ]
                },
                "description": "CognitiveLoadAssessment is defined as a subclass of ExperimentalAssessment, representing a specific type of assessment dedicated to measuring cognitive load in experimental contexts. Members of this class are characterized by having exactly one dual task score and exactly one mono task score, with both scores required to be data literals. This formalization ensures that each instance of CognitiveLoadAssessment includes precisely one measurable outcome for both mono-task and dual-task conditions, facilitating standardized evaluation and comparison of cognitive load across assessments.",
                "CQ": [
                    {
                        "axiom": "CognitiveLoadAssessment subClassOf ExperimentalAssessment",
                        "CQ": [
                            "Is CognitiveLoadAssessment categorized under the broader class of ExperimentalAssessment?",
                            "Which assessment types fall under ExperimentalAssessment, specifically including CognitiveLoadAssessment?",
                            "What are the immediate parent categories of CognitiveLoadAssessment in the ontology?"
                        ]
                    },
                    {
                        "axiom": "CognitiveLoadAssessment propertyRestrictions [hasDualTaskScore exactly 1]",
                        "CQ": [
                            "Must every CognitiveLoadAssessment instance have exactly one value for the hasDualTaskScore property?",
                            "Is it allowed for a CognitiveLoadAssessment to possess more or less than one hasDualTaskScore value?",
                            "Does the ontology require that a CognitiveLoadAssessment cannot be associated with multiple or zero hasDualTaskScore measurements?"
                        ]
                    },
                    {
                        "axiom": "CognitiveLoadAssessment propertyRestrictions [hasMonoTaskScore exactly 1]",
                        "CQ": [
                            "Is it required that a CognitiveLoadAssessment is associated with exactly one mono task score?",
                            "Can a CognitiveLoadAssessment have more than one value for the hasMonoTaskScore property?",
                            "Does every CognitiveLoadAssessment instance have one and only one hasMonoTaskScore assigned?"
                        ]
                    },
                    {
                        "axiom": "CognitiveLoadAssessment propertyRestrictions [hasMonoTaskScore only rdfs:Literal]",
                        "CQ": [
                            "Is every value of the hasMonoTaskScore property for a CognitiveLoadAssessment necessarily of type rdfs:Literal?",
                            "Can a CognitiveLoadAssessment have a hasMonoTaskScore that is not a literal datatype?",
                            "Are all hasMonoTaskScore properties associated with CognitiveLoadAssessment restricted exclusively to literal values?"
                        ]
                    },
                    {
                        "axiom": "CognitiveLoadAssessment propertyRestrictions [hasDualTaskScore only rdfs:Literal]",
                        "CQ": [
                            "Does every Dual Task Score in a Cognitive Load Assessment have to be an rdfs:Literal?",
                            "Is it permitted for a Cognitive Load Assessment to have a Dual Task Score of a type other than rdfs:Literal?",
                            "Are all values assigned via hasDualTaskScore in Cognitive Load Assessment instances necessarily restricted to rdfs:Literal?"
                        ]
                    }
                ]
            },
            "ExperimentalDiagnosisAssessment": {
                "axiom": {
                    "subClassOf": [
                        "ExperimentalAssessment"
                    ],
                    "propertyRestrictions": [
                        "[hasExperimentalDiagnosis only DiagnosisType]"
                    ]
                },
                "description": "ExperimentalDiagnosisAssessment is a subclass of ExperimentalAssessment, specialized to capture assessments in experimental settings that specifically involve a diagnosis process. Individuals belonging to this class are constrained to have only hasExperimentalDiagnosis relationships pointing to instances of DiagnosisType, ensuring that each ExperimentalDiagnosisAssessment is exclusively associated with recognized types of diagnoses. This formalization establishes the role of ExperimentalDiagnosisAssessment in linking experimental assessments with diagnostic outcomes in a controlled, ontology-driven manner.",
                "CQ": [
                    {
                        "axiom": "ExperimentalDiagnosisAssessment subClassOf ExperimentalAssessment",
                        "CQ": [
                            "Is ExperimentalDiagnosisAssessment recognized as a specialization of ExperimentalAssessment?",
                            "Which assessments fall under the broader classification of ExperimentalAssessment, such as ExperimentalDiagnosisAssessment?",
                            "What higher-level categories encompass ExperimentalDiagnosisAssessment?"
                        ]
                    },
                    {
                        "axiom": "ExperimentalDiagnosisAssessment propertyRestrictions [hasExperimentalDiagnosis only DiagnosisType]",
                        "CQ": [
                            "Does ExperimentalDiagnosisAssessment assign hasExperimentalDiagnosis exclusively to instances of DiagnosisType?",
                            "Is it true that all values of hasExperimentalDiagnosis for ExperimentalDiagnosisAssessment must belong to DiagnosisType?",
                            "Can ExperimentalDiagnosisAssessment have hasExperimentalDiagnosis related to anything other than DiagnosisType?"
                        ]
                    }
                ]
            },
            "FunctionalAbilityAssessment": {
                "axiom": {
                    "subClassOf": [
                        "ExperimentalAssessment"
                    ]
                },
                "description": "FunctionalAbilityAssessment is defined as a subclass of ExperimentalAssessment. This means every FunctionalAbilityAssessment is also an ExperimentalAssessment, inheriting its characteristics. No further restrictions or disjointness axioms are specified, so FunctionalAbilityAssessment can be understood as a specialized form of ExperimentalAssessment focused on evaluating functional abilities.",
                "CQ": [
                    {
                        "axiom": "FunctionalAbilityAssessment subClassOf ExperimentalAssessment",
                        "CQ": [
                            "Is FunctionalAbilityAssessment categorized under ExperimentalAssessment?",
                            "What types of assessments fall within ExperimentalAssessment, including FunctionalAbilityAssessment?",
                            "Which parent classes encompass FunctionalAbilityAssessment?"
                        ]
                    }
                ]
            },
            "GaitAssessment": {
                "axiom": {
                    "subClassOf": [
                        "ExperimentalAssessment"
                    ],
                    "propertyRestrictions": [
                        "[hasMonoTaskScore exactly 1]",
                        "[hasMonoTaskScore only rdfs:Literal]",
                        "[hasDualTaskScore only rdfs:Literal]",
                        "[hasDualTaskScore exactly 1]"
                    ]
                },
                "description": "GaitAssessment is defined as a subclass of ExperimentalAssessment. Individuals in this class are required to have exactly one MonoTaskScore and exactly one DualTaskScore, both of which must be literals (i.e., data values such as numbers or strings). This formalization ensures that each GaitAssessment precisely records a single score for both mono-task and dual-task conditions using literal values.",
                "CQ": [
                    {
                        "axiom": "GaitAssessment subClassOf ExperimentalAssessment",
                        "CQ": [
                            "Does GaitAssessment fall under the category of ExperimentalAssessment?",
                            "Which types are more specialized than ExperimentalAssessment and include GaitAssessment?",
                            "What broader assessment classes encompass GaitAssessment?"
                        ]
                    },
                    {
                        "axiom": "GaitAssessment propertyRestrictions [hasMonoTaskScore exactly 1]",
                        "CQ": [
                            "Is every instance of GaitAssessment required to have exactly one value for hasMonoTaskScore?",
                            "Can a GaitAssessment ever have more or less than one hasMonoTaskScore assigned?",
                            "Does the definition of GaitAssessment restrict it to possessing one and only one hasMonoTaskScore property?"
                        ]
                    },
                    {
                        "axiom": "GaitAssessment propertyRestrictions [hasMonoTaskScore only rdfs:Literal]",
                        "CQ": [
                            "Is every value associated with 'hasMonoTaskScore' for a GaitAssessment required to be a literal?",
                            "Can a GaitAssessment record only accept rdfs:Literal values for the hasMonoTaskScore property?",
                            "Does the hasMonoTaskScore property in GaitAssessment exclude any value types other than rdfs:Literal?"
                        ]
                    },
                    {
                        "axiom": "GaitAssessment propertyRestrictions [hasDualTaskScore only rdfs:Literal]",
                        "CQ": [
                            "Is it mandatory that a GaitAssessment’s hasDualTaskScore property can only relate to rdfs:Literal values?",
                            "Can a GaitAssessment ever have a hasDualTaskScore value that is not an rdfs:Literal?",
                            "Are the hasDualTaskScore values for GaitAssessment instances exclusively constrained to rdfs:Literal types?"
                        ]
                    },
                    {
                        "axiom": "GaitAssessment propertyRestrictions [hasDualTaskScore exactly 1]",
                        "CQ": [
                            "Must every GaitAssessment have one and only one value for its hasDualTaskScore property?",
                            "Is it possible for a GaitAssessment to have either no hasDualTaskScore or more than one hasDualTaskScore recorded?",
                            "Does the definition of GaitAssessment require exactly one associated hasDualTaskScore?"
                        ]
                    }
                ]
            },
            "MemorySelfAppraisalAssessment": {
                "axiom": {
                    "subClassOf": [
                        "ExperimentalAssessment"
                    ]
                },
                "description": "MemorySelfAppraisalAssessment is defined as a subclass of ExperimentalAssessment. This means it represents a specific type of assessment conducted in an experimental context, which focuses on evaluating an individual's own appraisal or judgement of their memory abilities. Members of this class inherit all characteristics of ExperimentalAssessment, while emphasizing the self-evaluation of memory performance.",
                "CQ": [
                    {
                        "axiom": "MemorySelfAppraisalAssessment subClassOf ExperimentalAssessment",
                        "CQ": [
                            "Is MemorySelfAppraisalAssessment classified under the broader category of ExperimentalAssessment?",
                            "What specific types of ExperimentalAssessment does MemorySelfAppraisalAssessment represent?",
                            "Which overarching assessment categories include MemorySelfAppraisalAssessment as a member?"
                        ]
                    }
                ]
            },
            "StressAssessment": {
                "axiom": {
                    "subClassOf": [
                        "ExperimentalAssessment"
                    ]
                },
                "description": "StressAssessment is defined as a subclass of ExperimentalAssessment, indicating it inherits all properties of ExperimentalAssessment. This class represents assessments specifically designed to evaluate stress within an experimental context. No additional property restrictions or disjointness axioms are specified, so it can encompass any form of assessment fitting this criterion.",
                "CQ": [
                    {
                        "axiom": "StressAssessment subClassOf ExperimentalAssessment",
                        "CQ": [
                            "Is StressAssessment classified under the broader type of ExperimentalAssessment?",
                            "Which types of assessments are categorized as subkinds of ExperimentalAssessment, such as StressAssessment?",
                            "To what higher-level assessment classes does StressAssessment belong?"
                        ]
                    }
                ]
            },
            "ActivityStatusType": {
                "axiom": {
                    "subClassOf": [
                        "Type"
                    ],
                    "equivalentClass": [
                        "{omitted, completed, incomplete}"
                    ]
                },
                "description": "ActivityStatusType is defined as a subclass of Type and is equivalent to the set containing the statuses: omitted, completed, and incomplete. This means that any instance of ActivityStatusType must be one of these three specific statuses, providing a controlled vocabulary for representing the status of an activity.",
                "CQ": [
                    {
                        "axiom": "ActivityStatusType subClassOf Type",
                        "CQ": [
                            "Is ActivityStatusType classified under the broader category of Type?",
                            "Which types encompass ActivityStatusType as a more specific subtype?",
                            "What specific categories fall within the scope of Type, including ActivityStatusType?"
                        ]
                    },
                    {
                        "axiom": "ActivityStatusType equivalentClass {omitted, completed, incomplete}",
                        "CQ": [
                            "Is ActivityStatusType logically defined as the set containing omitted, completed, and incomplete?",
                            "Does ActivityStatusType exclusively include the concepts omitted, completed, and incomplete, with no others?",
                            "Are all members of omitted, completed, and incomplete necessarily part of ActivityStatusType?"
                        ]
                    }
                ]
            },
            "CountingType": {
                "axiom": {
                    "subClassOf": [
                        "Type"
                    ],
                    "equivalentClass": [
                        "{_20_0, _305_285}"
                    ]
                },
                "description": "CountingType is a subclass of Type and is defined as being equivalent to the set containing exactly the individuals _20_0 and _305_285. This means that any instance of CountingType must be one of these two specified individuals, and no others.",
                "CQ": [
                    {
                        "axiom": "CountingType subClassOf Type",
                        "CQ": [
                            "Can CountingType be classified as a kind of Type?",
                            "What categories does CountingType inherit from within the ontology?",
                            "Which types encompass CountingType as a more specific instance?"
                        ]
                    },
                    {
                        "axiom": "CountingType equivalentClass {_20_0, _305_285}",
                        "CQ": [
                            "Is CountingType equivalent to the intersection of _20_0 and _305_285?",
                            "Are all instances of CountingType necessarily members of both _20_0 and _305_285?",
                            "Does CountingType exclude any concepts outside the overlap of _20_0 and _305_285?"
                        ]
                    }
                ]
            },
            "DiagnosisType": {
                "axiom": {
                    "subClassOf": [
                        "Type"
                    ],
                    "equivalentClass": [
                        "{predementia, dementia, healthy}"
                    ]
                },
                "description": "DiagnosisType is defined as a subclass of Type, and is equivalent to the set containing exactly three classes: predementia, dementia, and healthy. This means that any individual classified as a DiagnosisType must be either predementia, dementia, or healthy—no other categories are permitted. This formalization ensures a closed, mutually-exclusive categorization of diagnostic statuses within the ontology.",
                "CQ": [
                    {
                        "axiom": "DiagnosisType subClassOf Type",
                        "CQ": [
                            "Is DiagnosisType categorized under the broader class of Type?",
                            "Which subclasses are defined within Type, specifically including DiagnosisType?",
                            "What higher-level categories does DiagnosisType fall under within the ontology?"
                        ]
                    },
                    {
                        "axiom": "DiagnosisType equivalentClass {predementia, dementia, healthy}",
                        "CQ": [
                            "Is every DiagnosisType necessarily either predementia, dementia, or healthy?",
                            "Is DiagnosisType defined as the union of predementia, dementia, and healthy categories?",
                            "Can any instance exist in DiagnosisType that is not classified as predementia, dementia, or healthy?"
                        ]
                    }
                ]
            },
            "GenderType": {
                "axiom": {
                    "subClassOf": [
                        "Type"
                    ],
                    "equivalentClass": [
                        "{male, female}"
                    ]
                },
                "description": "GenderType is a subclass of Type and is formally defined as exactly the set containing only ‘male’ and ‘female’. This means every instance of GenderType must be either male or female, and nothing outside this set can be an instance of GenderType. This definition ensures a closed list of exactly two possible gender types within the ontology.",
                "CQ": [
                    {
                        "axiom": "GenderType subClassOf Type",
                        "CQ": [
                            "Is GenderType included as part of the broader group Type?",
                            "What specific subcategories exist under Type, such as GenderType?",
                            "Which overarching classification categories encompass GenderType?"
                        ]
                    },
                    {
                        "axiom": "GenderType equivalentClass {male, female}",
                        "CQ": [
                            "Is GenderType equivalent to the set containing only the individuals male and female?",
                            "Does GenderType include any individuals other than male or female?",
                            "Is every instance of GenderType necessarily identified as either male or female?"
                        ]
                    }
                ]
            },
            "HandTrajectoryType": {
                "axiom": {
                    "subClassOf": [
                        "Type"
                    ]
                },
                "description": "HandTrajectoryType is defined as a subclass of Type. This class represents a specific categorization or kind of type that pertains to hand trajectory, inheriting all characteristics of Type. No additional axioms or restrictions are specified.",
                "CQ": [
                    {
                        "axiom": "HandTrajectoryType subClassOf Type",
                        "CQ": [
                            "Is HandTrajectoryType classified as a more specific concept under Type?",
                            "What categories encompass HandTrajectoryType as a member, given its position under Type?",
                            "Which concepts are directly organized under the class Type, including HandTrajectoryType?"
                        ]
                    }
                ]
            },
            "LateralityType": {
                "axiom": {
                    "subClassOf": [
                        "Type"
                    ],
                    "equivalentClass": [
                        "{left_handed, right_handed}"
                    ]
                },
                "description": "LateralityType is a subclass of Type, characterized as an enumerated class consisting exclusively of the instances 'left_handed' and 'right_handed'. Any instance of LateralityType must be either 'left_handed' or 'right_handed', capturing the concept of handedness in individuals.",
                "CQ": [
                    {
                        "axiom": "LateralityType subClassOf Type",
                        "CQ": [
                            "Is LateralityType categorized under the broader class of Type?",
                            "Which entities are more specific types within Type, such as LateralityType?",
                            "What higher-level classes encompass LateralityType?"
                        ]
                    },
                    {
                        "axiom": "LateralityType equivalentClass {left_handed, right_handed}",
                        "CQ": [
                            "Is every instance of LateralityType restricted to being either left_handed or right_handed?",
                            "Is LateralityType equivalent to the set containing only left_handed and right_handed individuals?",
                            "Are there any LateralityType entities besides left_handed and right_handed?"
                        ]
                    }
                ]
            },
            "AnswerPhoneTask": {
                "axiom": {
                    "subClassOf": [
                        "SemiDirectedTask"
                    ]
                },
                "description": "AnswerPhoneTask is defined as a subclass of SemiDirectedTask, indicating that it inherits all characteristics of semi-directed tasks but is specialized for the context of answering phone calls. This classification asserts that every instance of AnswerPhoneTask is also an instance of SemiDirectedTask, typically involving user interaction with some degree of guidance but not complete direction. No additional property or disjointness axioms are specified.",
                "CQ": [
                    {
                        "axiom": "AnswerPhoneTask subClassOf SemiDirectedTask",
                        "CQ": [
                            "Does AnswerPhoneTask fall under the broader classification of SemiDirectedTask?",
                            "What specific tasks are encompassed by the category SemiDirectedTask, such as AnswerPhoneTask?",
                            "Which higher-level task types include AnswerPhoneTask as a specialization?"
                        ]
                    }
                ]
            },
            "CallPsychologistTask": {
                "axiom": {
                    "subClassOf": [
                        "SemiDirectedTask"
                    ]
                },
                "description": "CallPsychologistTask is defined as a subclass of SemiDirectedTask. This classification indicates that any instance of CallPsychologistTask inherits all properties of SemiDirectedTask, representing a specific type of task that involves some level of pre-defined guidance or structure. No additional distinguishing properties or constraints are specified beyond its membership in the SemiDirectedTask category.",
                "CQ": [
                    {
                        "axiom": "CallPsychologistTask subClassOf SemiDirectedTask",
                        "CQ": [
                            "Is CallPsychologistTask classified as a kind of SemiDirectedTask?",
                            "Which specific tasks are categorized under SemiDirectedTask, including CallPsychologistTask?",
                            "What broader task types encompass CallPsychologistTask?"
                        ]
                    }
                ]
            },
            "EstablishAccountBalanceTask": {
                "axiom": {
                    "subClassOf": [
                        "SemiDirectedTask"
                    ]
                },
                "description": "EstablishAccountBalanceTask is defined as a subclass of SemiDirectedTask, indicating that it inherits all properties and constraints of SemiDirectedTask. This class represents tasks specifically related to establishing or determining an account balance, and it is semantically positioned within the ontology as a type of semi-directed task. No further restrictions or differentiators are specified in the current axioms.",
                "CQ": [
                    {
                        "axiom": "EstablishAccountBalanceTask subClassOf SemiDirectedTask",
                        "CQ": [
                            "Is EstablishAccountBalanceTask a specialized form of SemiDirectedTask?",
                            "Which tasks are defined as more specific than SemiDirectedTask, including EstablishAccountBalanceTask?",
                            "What broader task categories include EstablishAccountBalanceTask?"
                        ]
                    }
                ]
            },
            "FindBusLineOnMapTask": {
                "axiom": {
                    "subClassOf": [
                        "SemiDirectedTask"
                    ]
                },
                "description": "FindBusLineOnMapTask is defined as a subclass of SemiDirectedTask. This indicates that any instance of FindBusLineOnMapTask inherits the characteristics of a semi-directed task, which typically involves guidance but allows for a degree of user autonomy. The class is intended to represent tasks in which the objective is to locate a specific bus line on a map interface.",
                "CQ": [
                    {
                        "axiom": "FindBusLineOnMapTask subClassOf SemiDirectedTask",
                        "CQ": [
                            "Does FindBusLineOnMapTask fall under the broader classification of SemiDirectedTask?",
                            "Which tasks are categorized as specialized forms of SemiDirectedTask, specifically including FindBusLineOnMapTask?",
                            "What are the general task categories that FindBusLineOnMapTask is associated with?"
                        ]
                    }
                ]
            },
            "LeaveRoomTask": {
                "axiom": {
                    "subClassOf": [
                        "SemiDirectedTask"
                    ]
                },
                "description": "LeaveRoomTask is defined as a subclass of SemiDirectedTask. This means that every LeaveRoomTask must fulfill all the characteristics of a SemiDirectedTask, but it represents a more specific type of task centered on the activity of leaving a room. No additional restrictions or disjointness axioms are specified.",
                "CQ": [
                    {
                        "axiom": "LeaveRoomTask subClassOf SemiDirectedTask",
                        "CQ": [
                            "Is LeaveRoomTask categorized as a type of SemiDirectedTask?",
                            "Which specific tasks fall under the broader classification of SemiDirectedTask, including LeaveRoomTask?",
                            "What higher-level task categories include LeaveRoomTask as a member?"
                        ]
                    }
                ]
            },
            "PayBillTask": {
                "axiom": {
                    "subClassOf": [
                        "SemiDirectedTask"
                    ]
                },
                "description": "PayBillTask is defined as a subclass of SemiDirectedTask, indicating it represents a specific type of task that involves partial direction or guidance in execution. No additional axioms are specified, so PayBillTask inherits all the general properties and constraints associated with SemiDirectedTask, and further characterizes tasks that involve the process of paying a bill.",
                "CQ": [
                    {
                        "axiom": "PayBillTask subClassOf SemiDirectedTask",
                        "CQ": [
                            "Is PayBillTask classified as a more specific type under the umbrella of SemiDirectedTask?",
                            "What are all the tasks that fall under the SemiDirectedTask category, including PayBillTask?",
                            "To which higher-level task categories is PayBillTask hierarchically connected?"
                        ]
                    }
                ]
            },
            "PrepareDrugBoxTask": {
                "axiom": {
                    "subClassOf": [
                        "SemiDirectedTask"
                    ]
                },
                "description": "PrepareDrugBoxTask is defined as a subclass of SemiDirectedTask, indicating that it inherits all characteristics of semi-directed tasks. Individuals classified under PrepareDrugBoxTask represent tasks involving the preparation of drug boxes, and these tasks exhibit the general properties and constraints established for semi-directed tasks within the ontology. No additional restrictions or properties are specified beyond its subclass relationship.",
                "CQ": [
                    {
                        "axiom": "PrepareDrugBoxTask subClassOf SemiDirectedTask",
                        "CQ": [
                            "Is PrepareDrugBoxTask categorized as a form of SemiDirectedTask?",
                            "What tasks are classified under SemiDirectedTask, including PrepareDrugBoxTask?",
                            "Which higher-level task categories does PrepareDrugBoxTask belong to?"
                        ]
                    }
                ]
            },
            "PrepareHotTeaTask": {
                "axiom": {
                    "subClassOf": [
                        "SemiDirectedTask"
                    ]
                },
                "description": "PrepareHotTeaTask is defined as a subclass of SemiDirectedTask, indicating that it inherits all characteristics of semi-directed tasks. This class represents activities or processes specifically related to the preparation of hot tea, encompassing all steps that are partially guided yet allow for some flexibility in execution. There are currently no additional restrictions or disjointness axioms specified for this class.",
                "CQ": [
                    {
                        "axiom": "PrepareHotTeaTask subClassOf SemiDirectedTask",
                        "CQ": [
                            "Is PrepareHotTeaTask recognized as a specialized form of SemiDirectedTask?",
                            "Which tasks fall under the category of SemiDirectedTask, such as PrepareHotTeaTask?",
                            "What are the broader categories encompassing PrepareHotTeaTask?"
                        ]
                    }
                ]
            },
            "ReadArticleTask": {
                "axiom": {
                    "subClassOf": [
                        "SemiDirectedTask"
                    ]
                },
                "description": "ReadArticleTask is defined as a subclass of SemiDirectedTask. This means that any instance of ReadArticleTask is also an instance of SemiDirectedTask, inheriting its characteristics and constraints. The class represents tasks that involve reading articles and fall within the category of semi-directed activities, which typically allow for some guidance or structure while retaining a degree of autonomy for the task performer.",
                "CQ": [
                    {
                        "axiom": "ReadArticleTask subClassOf SemiDirectedTask",
                        "CQ": [
                            "Does the concept of ReadArticleTask fall within the broader class of SemiDirectedTask?",
                            "Which tasks are classified under SemiDirectedTask, such as ReadArticleTask?",
                            "What general task categories encompass ReadArticleTask?"
                        ]
                    }
                ]
            },
            "TurnOnTVTask": {
                "axiom": {
                    "subClassOf": [
                        "SemiDirectedTask"
                    ]
                },
                "description": "TurnOnTVTask is defined as a subclass of SemiDirectedTask. This means that every TurnOnTVTask is a type of semi-directed task, typically characterized by having some predefined structure or guidance but allowing for some user input or variation. There are no additional property restrictions or disjointness axioms specified, so TurnOnTVTask is generally understood to represent any task that involves turning on a TV, within the broader category of semi-directed tasks.",
                "CQ": [
                    {
                        "axiom": "TurnOnTVTask subClassOf SemiDirectedTask",
                        "CQ": [
                            "Is TurnOnTVTask categorized as a type of SemiDirectedTask?",
                            "Which tasks are considered to be specializations of SemiDirectedTask, for example TurnOnTVTask?",
                            "What hierarchy of broader task categories does TurnOnTVTask fall under?"
                        ]
                    }
                ]
            },
            "WaterPlantTask": {
                "axiom": {
                    "subClassOf": [
                        "SemiDirectedTask"
                    ]
                },
                "description": "WaterPlantTask is defined as a subclass of SemiDirectedTask, indicating that it inherits all the characteristics of semi-directed tasks. Members of this class represent tasks specifically concerned with watering plants, and they share any constraints or properties specified for semi-directed tasks.",
                "CQ": [
                    {
                        "axiom": "WaterPlantTask subClassOf SemiDirectedTask",
                        "CQ": [
                            "Is WaterPlantTask encompassed by the broader class of SemiDirectedTask?",
                            "Which tasks are classified as specializations under SemiDirectedTask, such as WaterPlantTask?",
                            "To which overarching task groups does WaterPlantTask belong within the hierarchy?"
                        ]
                    }
                ]
            },
            "AutonomyAssessment": {
                "axiom": {
                    "subClassOf": [
                        "ClinicalAssessment"
                    ],
                    "propertyRestrictions": [
                        "[iadl_e only xsd:int]",
                        "[iadl_e exactly 1 xsd:int]"
                    ]
                },
                "description": "AutonomyAssessment is a subclass of ClinicalAssessment designed specifically to evaluate an individual's level of autonomy. Every instance of AutonomyAssessment is required to have exactly one value for the property iadl_e, which must be of type xsd:int. This ensures that each AutonomyAssessment provides a singular, integer-based measurement relevant to the assessed individual's instrumental activities of daily living.",
                "CQ": [
                    {
                        "axiom": "AutonomyAssessment subClassOf ClinicalAssessment",
                        "CQ": [
                            "Is AutonomyAssessment a narrower type compared to ClinicalAssessment?",
                            "Which forms of assessment fall under the category of ClinicalAssessment, including AutonomyAssessment?",
                            "What broader assessment categories does AutonomyAssessment fall under?"
                        ]
                    },
                    {
                        "axiom": "AutonomyAssessment propertyRestrictions [iadl_e only xsd:int]",
                        "CQ": [
                            "Is it required that AutonomyAssessment instances only have the 'iadl_e' property with values of type integer?",
                            "Must every 'iadl_e' property associated with AutonomyAssessment be restricted to integer values?",
                            "Are there any properties other than 'iadl_e' with integer values permitted for AutonomyAssessment?"
                        ]
                    },
                    {
                        "axiom": "AutonomyAssessment propertyRestrictions [iadl_e exactly 1 xsd:int]",
                        "CQ": [
                            "Is it required for an AutonomyAssessment to have exactly one value for the property iadl_e?",
                            "Can an AutonomyAssessment include more than one or fewer than one iadl_e property value?",
                            "Does every AutonomyAssessment instance restrict the iid_e property to be associated with a single integer value?"
                        ]
                    }
                ]
            },
            "CognitiveAbilitiesAssessment": {
                "axiom": {
                    "subClassOf": [
                        "ClinicalAssessment"
                    ],
                    "propertyRestrictions": [
                        "[fabScore exactly 1 xsd:int]",
                        "[freeAndCuedRemindingAssessment exactly 1 xsd:string]",
                        "[hasMMSEScore exactly 1 xsd:int]",
                        "[trailMakingTest only xsd:string]",
                        "[trailMakingTest exactly 1 xsd:string]",
                        "[shortCognitiveBatteryAssessment only xsd:string]",
                        "[freeAndCuedRemindingAssessment only xsd:string]",
                        "[hasMMSEScore only xsd:int]",
                        "[shortCognitiveBatteryAssessment exactly 1 xsd:string]",
                        "[fabScore only xsd:int]"
                    ]
                },
                "description": "CognitiveAbilitiesAssessment is defined as a subclass of ClinicalAssessment, representing evaluations specifically focused on measuring cognitive functions. Instances of this class must have exactly one FAB score (an integer), one MMSE score (an integer), one Trail Making Test result (a string), one Free and Cued Reminding Assessment result (a string), and one Short Cognitive Battery Assessment result (a string). Property restrictions further specify that each of these assessments and scores must be unique and of the stated data type, ensuring a comprehensive and structured representation of cognitive assessment results for each individual.",
                "CQ": [
                    {
                        "axiom": "CognitiveAbilitiesAssessment subClassOf ClinicalAssessment",
                        "CQ": [
                            "Does CognitiveAbilitiesAssessment fall under the broader class of ClinicalAssessment?",
                            "Which specific assessments are categorized as subclasses of ClinicalAssessment, including CognitiveAbilitiesAssessment?",
                            "What more general categories is CognitiveAbilitiesAssessment associated with in the ontology?"
                        ]
                    },
                    {
                        "axiom": "CognitiveAbilitiesAssessment propertyRestrictions [fabScore exactly 1 xsd:int]",
                        "CQ": [
                            "Is it required that every CognitiveAbilitiesAssessment has exactly one fabScore value assigned?",
                            "Can a CognitiveAbilitiesAssessment have multiple fabScore values, or is it strictly limited to one?",
                            "Does a CognitiveAbilitiesAssessment instance necessarily possess one and only one fabScore property of type integer?"
                        ]
                    },
                    {
                        "axiom": "CognitiveAbilitiesAssessment propertyRestrictions [freeAndCuedRemindingAssessment exactly 1 xsd:string]",
                        "CQ": [
                            "Does a CognitiveAbilitiesAssessment always include exactly one freeAndCuedRemindingAssessment?",
                            "Is it required for every CognitiveAbilitiesAssessment to specify one and only one value for freeAndCuedRemindingAssessment?",
                            "Can a CognitiveAbilitiesAssessment have more than one or fewer than one freeAndCuedRemindingAssessment assigned to it?"
                        ]
                    },
                    {
                        "axiom": "CognitiveAbilitiesAssessment propertyRestrictions [hasMMSEScore exactly 1 xsd:int]",
                        "CQ": [
                            "Is every CognitiveAbilitiesAssessment required to have exactly one MMSE score value assigned?",
                            "Can a CognitiveAbilitiesAssessment record include more than one MMSE score?",
                            "Does the assessment of cognitive abilities always specify a single MMSE score per evaluation?"
                        ]
                    },
                    {
                        "axiom": "CognitiveAbilitiesAssessment propertyRestrictions [trailMakingTest only xsd:string]",
                        "CQ": [
                            "Is it required that CognitiveAbilitiesAssessment has the property 'trailMakingTest' only with values of type string?",
                            "Can a CognitiveAbilitiesAssessment use any data type besides string for the 'trailMakingTest' property?",
                            "Does 'trailMakingTest' in CognitiveAbilitiesAssessment exclude all value types except for string?"
                        ]
                    },
                    {
                        "axiom": "CognitiveAbilitiesAssessment propertyRestrictions [trailMakingTest exactly 1 xsd:string]",
                        "CQ": [
                            "Is it required that a CognitiveAbilitiesAssessment has exactly one value assigned to the property 'trailMakingTest'?",
                            "Can a CognitiveAbilitiesAssessment include more than one or fewer than one value for the 'trailMakingTest' property?",
                            "Does every instance of CognitiveAbilitiesAssessment always possess exactly one 'trailMakingTest' entry, with no exceptions?"
                        ]
                    },
                    {
                        "axiom": "CognitiveAbilitiesAssessment propertyRestrictions [shortCognitiveBatteryAssessment only xsd:string]",
                        "CQ": [
                            "Is it required that a CognitiveAbilitiesAssessment only have the shortCognitiveBatteryAssessment property with values of type xsd:string?",
                            "Are all shortCognitiveBatteryAssessment values associated with CognitiveAbilitiesAssessment instances strings?",
                            "Can a CognitiveAbilitiesAssessment have a shortCognitiveBatteryAssessment property with any value other than a string?"
                        ]
                    },
                    {
                        "axiom": "CognitiveAbilitiesAssessment propertyRestrictions [freeAndCuedRemindingAssessment only xsd:string]",
                        "CQ": [
                            "Is a CognitiveAbilitiesAssessment restricted to having the property 'freeAndCuedRemindingAssessment' only with values of type string?",
                            "Does every instance of 'freeAndCuedRemindingAssessment' associated with a CognitiveAbilitiesAssessment require a string as its value?",
                            "Are values for 'freeAndCuedRemindingAssessment' in a CognitiveAbilitiesAssessment limited exclusively to data typed as xsd:string?"
                        ]
                    },
                    {
                        "axiom": "CognitiveAbilitiesAssessment propertyRestrictions [hasMMSEScore only xsd:int]",
                        "CQ": [
                            "Are all MMSE scores associated with CognitiveAbilitiesAssessment instances required to be integers?",
                            "Is it possible for a CognitiveAbilitiesAssessment to have a hasMMSEScore value that is not of type xsd:int?",
                            "Must every hasMMSEScore property for CognitiveAbilitiesAssessment conform exclusively to the integer data type?"
                        ]
                    },
                    {
                        "axiom": "CognitiveAbilitiesAssessment propertyRestrictions [shortCognitiveBatteryAssessment exactly 1 xsd:string]",
                        "CQ": [
                            "Is it required that a CognitiveAbilitiesAssessment must include exactly one short cognitive battery assessment represented as a string?",
                            "Can a CognitiveAbilitiesAssessment have more than one or less than one shortCognitiveBatteryAssessment assigned?",
                            "Does every CognitiveAbilitiesAssessment necessarily associate with a single and only one value for the shortCognitiveBatteryAssessment property?"
                        ]
                    },
                    {
                        "axiom": "CognitiveAbilitiesAssessment propertyRestrictions [fabScore only xsd:int]",
                        "CQ": [
                            "Is the fabScore property for CognitiveAbilitiesAssessment always restricted to integer values?",
                            "Can CognitiveAbilitiesAssessment have a fabScore value outside the integer datatype?",
                            "Does CognitiveAbilitiesAssessment exclusively use integer values for the fabScore property?"
                        ]
                    }
                ]
            },
            "DiagnosisAssessment": {
                "axiom": {
                    "subClassOf": [
                        "ClinicalAssessment"
                    ],
                    "propertyRestrictions": [
                        "[hasClinicalDiagnosis only DiagnosisType]",
                        "[hasClinicalDiagnosis exactly 1 DiagnosisType]"
                    ]
                },
                "description": "DiagnosisAssessment is defined as a subclass of ClinicalAssessment, indicating that it inherits properties common to all clinical assessments. It is characterized by having exactly one value for the property hasClinicalDiagnosis, and this value must be of type DiagnosisType. This ensures that every instance of DiagnosisAssessment is linked to precisely one clinical diagnosis, providing a specific and unambiguous diagnosis outcome for each assessment.",
                "CQ": [
                    {
                        "axiom": "DiagnosisAssessment subClassOf ClinicalAssessment",
                        "CQ": [
                            "Is DiagnosisAssessment categorized under ClinicalAssessment in the ontology?",
                            "Which assessment types are more specific than ClinicalAssessment, including DiagnosisAssessment?",
                            "To what higher-level categories is DiagnosisAssessment assigned within the assessment hierarchy?"
                        ]
                    },
                    {
                        "axiom": "DiagnosisAssessment propertyRestrictions [hasClinicalDiagnosis only DiagnosisType]",
                        "CQ": [
                            "Can a DiagnosisAssessment have a hasClinicalDiagnosis relationship with anything other than DiagnosisType?",
                            "Is it required that all clinical diagnoses assigned by a DiagnosisAssessment are instances of DiagnosisType?",
                            "Are diagnoses outside of the DiagnosisType class excluded from the possible values for hasClinicalDiagnosis in a DiagnosisAssessment?"
                        ]
                    },
                    {
                        "axiom": "DiagnosisAssessment propertyRestrictions [hasClinicalDiagnosis exactly 1 DiagnosisType]",
                        "CQ": [
                            "Is each DiagnosisAssessment instance required to have exactly one value for the hasClinicalDiagnosis property assigned from DiagnosisType?",
                            "Can a DiagnosisAssessment be valid if it has either none or more than one hasClinicalDiagnosis relationship?",
                            "Does the ontology prevent DiagnosisAssessment from being linked to more than one instance of DiagnosisType through hasClinicalDiagnosis?"
                        ]
                    }
                ]
            },
            "MotricityAbilitiesAssessment": {
                "axiom": {
                    "subClassOf": [
                        "ClinicalAssessment"
                    ],
                    "propertyRestrictions": [
                        "[hasUPDRSScore exactly 1 xsd:int]",
                        "[hasUPDRSScore only xsd:int]"
                    ]
                },
                "description": "MotricityAbilitiesAssessment is defined as a subclass of ClinicalAssessment, representing assessments that evaluate motor abilities. Every instance of this class is required to have exactly one UPDRS score, and this score must be an integer value (xsd:int). This ensures that each motricity abilities assessment is uniquely and quantitatively characterized by a single UPDRS score, aligning with the clinical need for standardized motor evaluation.",
                "CQ": [
                    {
                        "axiom": "MotricityAbilitiesAssessment subClassOf ClinicalAssessment",
                        "CQ": [
                            "Is MotricityAbilitiesAssessment categorized under the broader class of ClinicalAssessment?",
                            "What specific assessments are recognized as subclasses of ClinicalAssessment, such as MotricityAbilitiesAssessment?",
                            "Which general assessment categories encompass MotricityAbilitiesAssessment?"
                        ]
                    },
                    {
                        "axiom": "MotricityAbilitiesAssessment propertyRestrictions [hasUPDRSScore exactly 1 xsd:int]",
                        "CQ": [
                            "Does every MotricityAbilitiesAssessment necessarily have exactly one value for the property 'hasUPDRSScore'?",
                            "Is it possible for a MotricityAbilitiesAssessment to be associated with more than one UPDRS Score?",
                            "Can a MotricityAbilitiesAssessment exist without any value assigned to 'hasUPDRSScore'?"
                        ]
                    },
                    {
                        "axiom": "MotricityAbilitiesAssessment propertyRestrictions [hasUPDRSScore only xsd:int]",
                        "CQ": [
                            "Are UPDRS scores for MotricityAbilitiesAssessment always restricted to integer values?",
                            "Can MotricityAbilitiesAssessment have any hasUPDRSScore value other than an integer?",
                            "Is it required that MotricityAbilitiesAssessment only uses hasUPDRSScore with values of type integer?"
                        ]
                    }
                ]
            },
            "NeuropsychiatricAndMoodAssessment": {
                "axiom": {
                    "subClassOf": [
                        "ClinicalAssessment"
                    ],
                    "propertyRestrictions": [
                        "[npi only xsd:string]",
                        "[npi exactly 1 xsd:string]",
                        "[dsm_ivDepressionCriteria exactly 1 xsd:string]",
                        "[apathyInventory exactly 1 xsd:string]",
                        "[dsm_ivDepressionCriteria only xsd:string]",
                        "[apathyInventory only xsd:string]"
                    ]
                },
                "description": "NeuropsychiatricAndMoodAssessment is defined as a subclass of ClinicalAssessment. Members of this class are characterized by the mandatory presence of exactly one value for each of the following properties: npi (Neuropsychiatric Inventory), dsm_ivDepressionCriteria, and apathyInventory, each being of type xsd:string. Furthermore, these properties cannot have values outside the string datatype. This formalization ensures that any individual instance of NeuropsychiatricAndMoodAssessment contains exactly and only one string value for each of these assessment criteria, supporting precise and consistent neuropsychiatric and mood evaluation.",
                "CQ": [
                    {
                        "axiom": "NeuropsychiatricAndMoodAssessment subClassOf ClinicalAssessment",
                        "CQ": [
                            "Is NeuropsychiatricAndMoodAssessment classified as a type of ClinicalAssessment?",
                            "Which assessments are specified as subclasses under ClinicalAssessment, with NeuropsychiatricAndMoodAssessment included?",
                            "What broader classes encompass NeuropsychiatricAndMoodAssessment?"
                        ]
                    },
                    {
                        "axiom": "NeuropsychiatricAndMoodAssessment propertyRestrictions [npi only xsd:string]",
                        "CQ": [
                            "Are all values of the 'npi' property for NeuropsychiatricAndMoodAssessment instances required to be of type xsd:string?",
                            "Can a NeuropsychiatricAndMoodAssessment have an 'npi' property value that is not a string?",
                            "Is it necessary that every 'npi' property associated with NeuropsychiatricAndMoodAssessment belong exclusively to the xsd:string datatype?"
                        ]
                    },
                    {
                        "axiom": "NeuropsychiatricAndMoodAssessment propertyRestrictions [npi exactly 1 xsd:string]",
                        "CQ": [
                            "Is it required that every NeuropsychiatricAndMoodAssessment must have exactly one value for the property 'npi'?",
                            "Can a NeuropsychiatricAndMoodAssessment have more than one or no values associated with 'npi'?",
                            "Does the ontology restrict the 'npi' property of NeuropsychiatricAndMoodAssessment instances to a single string value?"
                        ]
                    },
                    {
                        "axiom": "NeuropsychiatricAndMoodAssessment propertyRestrictions [dsm_ivDepressionCriteria exactly 1 xsd:string]",
                        "CQ": [
                            "Is it required that a NeuropsychiatricAndMoodAssessment has exactly one value for dsm_ivDepressionCriteria?",
                            "Can a NeuropsychiatricAndMoodAssessment have more than one dsm_ivDepressionCriteria assigned?",
                            "Must every NeuropsychiatricAndMoodAssessment instance be associated with one and only one dsm_ivDepressionCriteria expressed as a string?"
                        ]
                    },
                    {
                        "axiom": "NeuropsychiatricAndMoodAssessment propertyRestrictions [apathyInventory exactly 1 xsd:string]",
                        "CQ": [
                            "Is it required that a NeuropsychiatricAndMoodAssessment has exactly one value for the apathyInventory property?",
                            "Can a NeuropsychiatricAndMoodAssessment include more than one apathyInventory, or none at all?",
                            "Does the axiom restrict NeuropsychiatricAndMoodAssessment to having a single apathyInventory entry represented as a string?"
                        ]
                    },
                    {
                        "axiom": "NeuropsychiatricAndMoodAssessment propertyRestrictions [dsm_ivDepressionCriteria only xsd:string]",
                        "CQ": [
                            "Are values associated with 'dsm_ivDepressionCriteria' in NeuropsychiatricAndMoodAssessment exclusively of type string?",
                            "Is it required that all 'dsm_ivDepressionCriteria' properties in NeuropsychiatricAndMoodAssessment instances use string data?",
                            "Can NeuropsychiatricAndMoodAssessment ever have 'dsm_ivDepressionCriteria' values that are not strings?"
                        ]
                    },
                    {
                        "axiom": "NeuropsychiatricAndMoodAssessment propertyRestrictions [apathyInventory only xsd:string]",
                        "CQ": [
                            "Is it required that the property 'apathyInventory' for NeuropsychiatricAndMoodAssessment can only have values of the xsd:string datatype?",
                            "Does the NeuropsychiatricAndMoodAssessment class restrict its 'apathyInventory' property exclusively to string values?",
                            "Are any values for 'apathyInventory' allowed in NeuropsychiatricAndMoodAssessment except those of the xsd:string type?"
                        ]
                    }
                ]
            },
            "CognitiveAbilitiesData": {
                "axiom": {
                    "subClassOf": [
                        "MeasuredData"
                    ],
                    "propertyRestrictions": [
                        "[status exactly 1 ActivityStatusType]",
                        "[repetitions exactly 1]",
                        "[repetitions only rdfs:Literal]",
                        "[compliantInstructionsOrder only xsd:boolean]",
                        "[compliantInstructionsOrder exactly 1 xsd:boolean]",
                        "[taskDuration only time:DurationDescription]",
                        "[taskDuration exactly 1 time:DurationDescription]",
                        "[status only ActivityStatusType]"
                    ]
                },
                "description": "CognitiveAbilitiesData is defined as a subclass of MeasuredData, representing data specifically related to the measurement of cognitive abilities. Each instance of this class is constrained to have exactly one status, which must be of type ActivityStatusType. Additionally, it must have exactly one value for repetitions, which is restricted to rdfs:Literal, and exactly one value for compliantInstructionsOrder, restricted to xsd:boolean. The taskDuration property is also required, with exactly one value of type time:DurationDescription. These property restrictions ensure that any CognitiveAbilitiesData instance is fully specified with respect to status, number of repetitions, compliance with instruction order, and duration of the cognitive task.",
                "CQ": [
                    {
                        "axiom": "CognitiveAbilitiesData subClassOf MeasuredData",
                        "CQ": [
                            "Does CognitiveAbilitiesData fall under the broader group of MeasuredData?",
                            "What types of data are classified as subcategories of MeasuredData, including CognitiveAbilitiesData?",
                            "Which overarching classes encompass CognitiveAbilitiesData within their hierarchy?"
                        ]
                    },
                    {
                        "axiom": "CognitiveAbilitiesData propertyRestrictions [status exactly 1 ActivityStatusType]",
                        "CQ": [
                            "Is each CognitiveAbilitiesData instance required to have exactly one value for the status property that is of type ActivityStatusType?",
                            "Can CognitiveAbilitiesData have more than one status value associated with ActivityStatusType?",
                            "Is it possible for CognitiveAbilitiesData to lack a status of type ActivityStatusType or have more than one of such status?"
                        ]
                    },
                    {
                        "axiom": "CognitiveAbilitiesData propertyRestrictions [repetitions exactly 1]",
                        "CQ": [
                            "Is each CognitiveAbilitiesData instance required to have exactly one value for the repetitions property?",
                            "Can a CognitiveAbilitiesData record ever be associated with more than one repetitions value?",
                            "Does the ontology prevent CognitiveAbilitiesData from having zero values for the repetitions property?"
                        ]
                    },
                    {
                        "axiom": "CognitiveAbilitiesData propertyRestrictions [repetitions only rdfs:Literal]",
                        "CQ": [
                            "Is it required that repetitions in CognitiveAbilitiesData are always represented as rdfs:Literal values?",
                            "Can CognitiveAbilitiesData have repetitions with any type other than rdfs:Literal?",
                            "Are values associated with the repetitions property in CognitiveAbilitiesData restricted exclusively to rdfs:Literal instances?"
                        ]
                    },
                    {
                        "axiom": "CognitiveAbilitiesData propertyRestrictions [compliantInstructionsOrder only xsd:boolean]",
                        "CQ": [
                            "Are all values of the compliantInstructionsOrder property for CognitiveAbilitiesData instances required to be of type xsd:boolean?",
                            "Can CognitiveAbilitiesData have compliantInstructionsOrder values that are not booleans?",
                            "Is it true that only boolean values are permitted for the compliantInstructionsOrder property in CognitiveAbilitiesData?"
                        ]
                    },
                    {
                        "axiom": "CognitiveAbilitiesData propertyRestrictions [compliantInstructionsOrder exactly 1 xsd:boolean]",
                        "CQ": [
                            "Is it required that each instance of CognitiveAbilitiesData is associated with exactly one value for the compliantInstructionsOrder property?",
                            "Can a CognitiveAbilitiesData entity have multiple or no compliantInstructionsOrder boolean values assigned?",
                            "Does the ontology constrain CognitiveAbilitiesData such that compliantInstructionsOrder must be present once and only once?"
                        ]
                    },
                    {
                        "axiom": "CognitiveAbilitiesData propertyRestrictions [taskDuration only time:DurationDescription]",
                        "CQ": [
                            "Is every 'taskDuration' property of CognitiveAbilitiesData restricted exclusively to instances of time:DurationDescription?",
                            "Must all values of the 'taskDuration' attribute for CognitiveAbilitiesData be descriptions of duration as defined by time:DurationDescription?",
                            "Can CognitiveAbilitiesData have any 'taskDuration' that is not categorized under time:DurationDescription?"
                        ]
                    },
                    {
                        "axiom": "CognitiveAbilitiesData propertyRestrictions [taskDuration exactly 1 time:DurationDescription]",
                        "CQ": [
                            "Is every instance in CognitiveAbilitiesData required to have exactly one taskDuration associated with a time:DurationDescription?",
                            "Can CognitiveAbilitiesData include multiple or zero values for taskDuration, or is it restricted to a single time:DurationDescription per instance?",
                            "Are there constraints in CognitiveAbilitiesData preventing more than one or missing taskDuration linked to time:DurationDescription?"
                        ]
                    },
                    {
                        "axiom": "CognitiveAbilitiesData propertyRestrictions [status only ActivityStatusType]",
                        "CQ": [
                            "Are statuses associated with CognitiveAbilitiesData instances limited exclusively to ActivityStatusType?",
                            "Is it possible for CognitiveAbilitiesData to have a status outside of ActivityStatusType?",
                            "Does every status value for CognitiveAbilitiesData necessarily belong to ActivityStatusType?"
                        ]
                    }
                ]
            },
            "DiscussionInvolvementData": {
                "axiom": {
                    "subClassOf": [
                        "MeasuredData"
                    ],
                    "propertyRestrictions": [
                        "[verbalReactionSpontaneity exactly 1]",
                        "[verbalReactionSpontaneity only rdfs:Literal]"
                    ]
                },
                "description": "DiscussionInvolvementData is defined as a subclass of MeasuredData. Every instance of this class is required to have exactly one value for the property verbalReactionSpontaneity, and this property must take a value of type rdfs:Literal. This formalizes that each DiscussionInvolvementData entry captures a single, literal-valued measure of verbal reaction spontaneity as part of its involvement data.",
                "CQ": [
                    {
                        "axiom": "DiscussionInvolvementData subClassOf MeasuredData",
                        "CQ": [
                            "Does DiscussionInvolvementData represent a more specific form of MeasuredData?",
                            "Which subclasses are encompassed by MeasuredData, and does this include DiscussionInvolvementData?",
                            "What broader data classifications include DiscussionInvolvementData as an instance?"
                        ]
                    },
                    {
                        "axiom": "DiscussionInvolvementData propertyRestrictions [verbalReactionSpontaneity exactly 1]",
                        "CQ": [
                            "Must each DiscussionInvolvementData instance have exactly one value for the property verbalReactionSpontaneity?",
                            "Is it required that a DiscussionInvolvementData cannot have more or fewer than one verbalReactionSpontaneity assigned?",
                            "Can a DiscussionInvolvementData ever possess either zero or more than one verbalReactionSpontaneity property?"
                        ]
                    },
                    {
                        "axiom": "DiscussionInvolvementData propertyRestrictions [verbalReactionSpontaneity only rdfs:Literal]",
                        "CQ": [
                            "Are all values of the 'verbalReactionSpontaneity' property in DiscussionInvolvementData instances restricted exclusively to literals?",
                            "Is it possible for 'verbalReactionSpontaneity' in DiscussionInvolvementData to take any value type other than rdfs:Literal?",
                            "Does DiscussionInvolvementData ensure that only rdfs:Literal values are used for the 'verbalReactionSpontaneity' property for every instance?"
                        ]
                    }
                ]
            },
            "FunctionalAbilitiesData": {
                "axiom": {
                    "subClassOf": [
                        "MeasuredData"
                    ],
                    "propertyRestrictions": [
                        "[handTrajectory exactly 1 HandTrajectoryType]",
                        "[handTrajectory only HandTrajectoryType]"
                    ]
                },
                "description": "FunctionalAbilitiesData is a subclass of MeasuredData, characterized by having exactly one handTrajectory property, which must be of type HandTrajectoryType. All values for handTrajectory in instances of this class are restricted to HandTrajectoryType, ensuring that each FunctionalAbilitiesData instance is associated with a single, specific hand trajectory measurement.",
                "CQ": [
                    {
                        "axiom": "FunctionalAbilitiesData subClassOf MeasuredData",
                        "CQ": [
                            "Is FunctionalAbilitiesData classified as a type within the overarching category of MeasuredData?",
                            "Which specific data types are encompassed by MeasuredData, including FunctionalAbilitiesData?",
                            "What broader classes does FunctionalAbilitiesData fall under in the ontology hierarchy?"
                        ]
                    },
                    {
                        "axiom": "FunctionalAbilitiesData propertyRestrictions [handTrajectory exactly 1 HandTrajectoryType]",
                        "CQ": [
                            "Is each FunctionalAbilitiesData instance required to have exactly one value for the property 'handTrajectory' of type HandTrajectoryType?",
                            "Can a FunctionalAbilitiesData entity be associated with more than one HandTrajectoryType through the 'handTrajectory' property?",
                            "Does the ontology permit a FunctionalAbilitiesData instance to have no assigned value for 'handTrajectory'?"
                        ]
                    },
                    {
                        "axiom": "FunctionalAbilitiesData propertyRestrictions [handTrajectory only HandTrajectoryType]",
                        "CQ": [
                            "Are instances of FunctionalAbilitiesData limited to having handTrajectory property values belonging exclusively to HandTrajectoryType?",
                            "Is it required that all handTrajectory properties of FunctionalAbilitiesData refer solely to individuals of HandTrajectoryType?",
                            "Can FunctionalAbilitiesData possess a handTrajectory property linking to entities outside the HandTrajectoryType class?"
                        ]
                    }
                ]
            },
            "GaitData": {
                "axiom": {
                    "subClassOf": [
                        "MeasuredData"
                    ],
                    "propertyRestrictions": [
                        "[walkingSpeedInstantaneous only rdfs:Literal]",
                        "[walkingSpeed only rdfs:Literal]",
                        "[stepLength only rdfs:Literal]",
                        "[dynamicBalance exactly 1]",
                        "[walkingSpeedInstantaneous exactly 1]",
                        "[walkingSpeed exactly 1]",
                        "[stoppingDisplacement exactly 1 xsd:boolean]",
                        "[stepLength exactly 1]",
                        "[dynamicBalance only rdfs:Literal]",
                        "[stoppingDisplacement only xsd:boolean]"
                    ]
                },
                "description": "GaitData is defined as a subclass of MeasuredData, representing data specifically related to gait characteristics. Each instance of GaitData is required to have exactly one value for each of the following properties: walkingSpeedInstantaneous, walkingSpeed, stepLength, dynamicBalance, and stoppingDisplacement. The properties walkingSpeedInstantaneous, walkingSpeed, stepLength, and dynamicBalance are restricted to values of type rdfs:Literal, while stoppingDisplacement is restricted to a value of type xsd:boolean. This formalization ensures that any GaitData instance will precisely contain a complete set of objectively measured gait parameters.",
                "CQ": [
                    {
                        "axiom": "GaitData subClassOf MeasuredData",
                        "CQ": [
                            "Is GaitData categorized under the broader class of MeasuredData?",
                            "What subclasses fall under MeasuredData, and does GaitData appear among them?",
                            "Which parent classes encompass GaitData within the ontology?"
                        ]
                    },
                    {
                        "axiom": "GaitData propertyRestrictions [walkingSpeedInstantaneous only rdfs:Literal]",
                        "CQ": [
                            "Is the property 'walkingSpeedInstantaneous' for GaitData restricted solely to values of type rdfs:Literal?",
                            "Must every instance of GaitData have the 'walkingSpeedInstantaneous' property assigned only rdfs:Literal values?",
                            "Can any non-literal value ever be assigned to the 'walkingSpeedInstantaneous' property of GaitData?"
                        ]
                    },
                    {
                        "axiom": "GaitData propertyRestrictions [walkingSpeed only rdfs:Literal]",
                        "CQ": [
                            "Are all values of 'walkingSpeed' for GaitData instances restricted to literals?",
                            "Is it possible for a GaitData instance to have a 'walkingSpeed' property assigned any value type other than rdfs:Literal?",
                            "Does GaitData require that every 'walkingSpeed' property must be an rdfs:Literal?"
                        ]
                    },
                    {
                        "axiom": "GaitData propertyRestrictions [stepLength only rdfs:Literal]",
                        "CQ": [
                            "Is it required that GaitData's stepLength property values are exclusively of type rdfs:Literal?",
                            "Can GaitData have stepLength properties with values other than those classified as rdfs:Literal?",
                            "Does GaitData ensure stepLength is restricted solely to rdfs:Literal values for all instances?"
                        ]
                    },
                    {
                        "axiom": "GaitData propertyRestrictions [dynamicBalance exactly 1]",
                        "CQ": [
                            "Must every instance of GaitData be associated with exactly one value for dynamicBalance?",
                            "Is it necessary for GaitData to have one and only one dynamicBalance attribute?",
                            "Does the definition of GaitData preclude it from having more or fewer than a single dynamicBalance property?"
                        ]
                    },
                    {
                        "axiom": "GaitData propertyRestrictions [walkingSpeedInstantaneous exactly 1]",
                        "CQ": [
                            "Is it required that every instance of GaitData has exactly one value for the walkingSpeedInstantaneous property?",
                            "Can a GaitData record possess multiple or no walkingSpeedInstantaneous values, or must it always have precisely one?",
                            "Is the cardinality of the walkingSpeedInstantaneous property for GaitData instances limited to one and only one occurrence?"
                        ]
                    },
                    {
                        "axiom": "GaitData propertyRestrictions [walkingSpeed exactly 1]",
                        "CQ": [
                            "Is it required that GaitData instances record exactly one value for walking speed?",
                            "Can a GaitData instance have multiple or no values assigned to the walkingSpeed property?",
                            "Does every GaitData instance associate with one and only one measure for walkingSpeed?"
                        ]
                    },
                    {
                        "axiom": "GaitData propertyRestrictions [stoppingDisplacement exactly 1 xsd:boolean]",
                        "CQ": [
                            "Does every instance of GaitData have exactly one value for the property 'stoppingDisplacement', and must it be a boolean?",
                            "Is it required that GaitData contains one and only one stoppingDisplacement value that is a boolean?",
                            "Can GaitData ever have more than one or no values for stoppingDisplacement, or a value that is not a boolean?"
                        ]
                    },
                    {
                        "axiom": "GaitData propertyRestrictions [stepLength exactly 1]",
                        "CQ": [
                            "Is it required that each instance of GaitData is associated with exactly one stepLength value?",
                            "Can GaitData possess more than one or fewer than one stepLength attribute?",
                            "Does the definition of GaitData ensure a unique stepLength per occurrence?"
                        ]
                    },
                    {
                        "axiom": "GaitData propertyRestrictions [dynamicBalance only rdfs:Literal]",
                        "CQ": [
                            "Are all dynamicBalance properties associated with GaitData exclusively required to have values of type rdfs:Literal?",
                            "Is it necessary that in GaitData, the property dynamicBalance cannot reference anything other than instances of rdfs:Literal?",
                            "Does the ontology restrict GaitData so that dynamicBalance never refers to a value outside the rdfs:Literal datatype?"
                        ]
                    },
                    {
                        "axiom": "GaitData propertyRestrictions [stoppingDisplacement only xsd:boolean]",
                        "CQ": [
                            "Is GaitData required to have the stoppingDisplacement property only with values of type boolean?",
                            "Does GaitData prohibit the stoppingDisplacement property from being associated with values of any datatype other than boolean?",
                            "Can the stoppingDisplacement property of GaitData ever have a value that is not of type boolean?"
                        ]
                    }
                ]
            },
            "LatencyData": {
                "axiom": {
                    "subClassOf": [
                        "MeasuredData"
                    ],
                    "propertyRestrictions": [
                        "[latency exactly 1]",
                        "[latency only rdfs:Literal]"
                    ]
                },
                "description": "LatencyData is a subclass of MeasuredData. Each instance of LatencyData must have exactly one latency value, and this value must be a literal (rdfs:Literal). This class formally represents measured data where the primary attribute is a singular latency value stored as a literal, ensuring uniformity and precision in latency representation.",
                "CQ": [
                    {
                        "axiom": "LatencyData subClassOf MeasuredData",
                        "CQ": [
                            "Is LatencyData classified under the broader category of MeasuredData?",
                            "Which types of MeasuredData include LatencyData as a more specific instance?",
                            "What overarching categories does LatencyData fall into within the ontology?"
                        ]
                    },
                    {
                        "axiom": "LatencyData propertyRestrictions [latency exactly 1]",
                        "CQ": [
                            "Must every LatencyData instance have exactly one value for the latency property?",
                            "Is it possible for LatencyData to be associated with either no latency or more than one latency value?",
                            "Are LatencyData individuals restricted to a single latency property assertion?"
                        ]
                    },
                    {
                        "axiom": "LatencyData propertyRestrictions [latency only rdfs:Literal]",
                        "CQ": [
                            "Are all latency values associated with LatencyData instances required to be of type rdfs:Literal?",
                            "Does LatencyData exclude any latency property values that are not rdfs:Literal?",
                            "Is it necessary that every latency property of LatencyData is expressed solely as an rdfs:Literal?"
                        ]
                    }
                ]
            },
            "MoodVoiceData": {
                "axiom": {
                    "subClassOf": [
                        "MeasuredData"
                    ]
                },
                "description": "MoodVoiceData is a subclass of MeasuredData, indicating that it represents a specific type of measured information. Members of the MoodVoiceData class are characterized by being data entities whose primary function is to capture or represent aspects related to mood as conveyed through voice. This classification ensures that any instance of MoodVoiceData inherits all properties and characteristics of MeasuredData, with a particular focus on mood-related voice data.",
                "CQ": [
                    {
                        "axiom": "MoodVoiceData subClassOf MeasuredData",
                        "CQ": [
                            "Is MoodVoiceData classified under the category of MeasuredData?",
                            "Which specialized types are encompassed by MeasuredData, such as MoodVoiceData?",
                            "Of what general categories is MoodVoiceData a specific instance?"
                        ]
                    }
                ]
            },
            "OrganisationEfficiencyData": {
                "axiom": {
                    "subClassOf": [
                        "MeasuredData"
                    ],
                    "propertyRestrictions": [
                        "[distanceWalked only rdfs:Literal]",
                        "[areasOfInterestExplored only rdfs:Literal]",
                        "[areasOfNoInterestExplored only rdfs:Literal]",
                        "[areasOfNoInterestExplored exactly 1]",
                        "[areasOfInterestExplored exactly 1]",
                        "[distanceWalked exactly 1]"
                    ]
                },
                "description": "OrganisationEfficiencyData is a subclass of MeasuredData representing measured values related to organizational efficiency. Every instance of this class must have exactly one value each for distanceWalked, areasOfInterestExplored, and areasOfNoInterestExplored, and all of these values must be literals. This class structurally enforces that the data captured is precisely quantified for these three efficiency-related attributes.",
                "CQ": [
                    {
                        "axiom": "OrganisationEfficiencyData subClassOf MeasuredData",
                        "CQ": [
                            "Does OrganisationEfficiencyData fall under the broader category of MeasuredData?",
                            "Which types of MeasuredData specifically include OrganisationEfficiencyData as a subclass?",
                            "What are the overarching categories that OrganisationEfficiencyData is classified beneath?"
                        ]
                    },
                    {
                        "axiom": "OrganisationEfficiencyData propertyRestrictions [distanceWalked only rdfs:Literal]",
                        "CQ": [
                            "Is OrganisationEfficiencyData restricted to having the property distanceWalked only with instances of rdfs:Literal?",
                            "Can OrganisationEfficiencyData possess a distanceWalked value that is not an rdfs:Literal?",
                            "Are all distanceWalked properties of OrganisationEfficiencyData necessarily of type rdfs:Literal?"
                        ]
                    },
                    {
                        "axiom": "OrganisationEfficiencyData propertyRestrictions [areasOfInterestExplored only rdfs:Literal]",
                        "CQ": [
                            "Is it required that OrganisationEfficiencyData only explores areas of interest represented as literals?",
                            "Can OrganisationEfficiencyData have areas of interest explored that are not typed as rdfs:Literal?",
                            "Does OrganisationEfficiencyData restrict all explored areas of interest exclusively to instances of rdfs:Literal?"
                        ]
                    },
                    {
                        "axiom": "OrganisationEfficiencyData propertyRestrictions [areasOfNoInterestExplored only rdfs:Literal]",
                        "CQ": [
                            "Is OrganisationEfficiencyData required to associate areasOfNoInterestExplored exclusively with rdfs:Literal values?",
                            "Can OrganisationEfficiencyData link its areasOfNoInterestExplored property to any type other than rdfs:Literal?",
                            "Does OrganisationEfficiencyData ever specify areasOfNoInterestExplored with entities that are not rdfs:Literal?"
                        ]
                    },
                    {
                        "axiom": "OrganisationEfficiencyData propertyRestrictions [areasOfNoInterestExplored exactly 1]",
                        "CQ": [
                            "Is it required that OrganisationEfficiencyData is associated with exactly one instance of areasOfNoInterestExplored?",
                            "Can OrganisationEfficiencyData relate to more than one or fewer than one areasOfNoInterestExplored?",
                            "Does the definition of OrganisationEfficiencyData prohibit having zero or multiple areasOfNoInterestExplored linked to it?"
                        ]
                    },
                    {
                        "axiom": "OrganisationEfficiencyData propertyRestrictions [areasOfInterestExplored exactly 1]",
                        "CQ": [
                            "Is it required that each OrganisationEfficiencyData instance be associated with exactly one value for the property areasOfInterestExplored?",
                            "Can an OrganisationEfficiencyData have more or fewer than one areasOfInterestExplored linked to it?",
                            "Does OrganisationEfficiencyData restrict the number of areasOfInterestExplored values to precisely one for every instance?"
                        ]
                    },
                    {
                        "axiom": "OrganisationEfficiencyData propertyRestrictions [distanceWalked exactly 1]",
                        "CQ": [
                            "Is it required that OrganisationEfficiencyData possesses exactly one instance of the distanceWalked property?",
                            "Can OrganisationEfficiencyData ever have more than or fewer than one value for the distanceWalked property?",
                            "Does OrganisationEfficiencyData restrict the cardinality of distanceWalked to precisely one per instance?"
                        ]
                    }
                ]
            },
            "StressData": {
                "axiom": {
                    "subClassOf": [
                        "MeasuredData"
                    ],
                    "propertyRestrictions": [
                        "[stressLevel exactly 1]",
                        "[stressLevel only rdfs:Literal]"
                    ]
                },
                "description": "StressData is defined as a subclass of MeasuredData. Each instance of StressData is required to have exactly one stressLevel property, and the value assigned to stressLevel must be of type rdfs:Literal. This characterizes StressData as a specific type of measured information where exactly one literal value represents the stress level for each data instance.",
                "CQ": [
                    {
                        "axiom": "StressData subClassOf MeasuredData",
                        "CQ": [
                            "Is StressData classified as a specific kind of MeasuredData?",
                            "What are the more specialized forms of MeasuredData, such as StressData?",
                            "Under which broader data categories can StressData be grouped?"
                        ]
                    },
                    {
                        "axiom": "StressData propertyRestrictions [stressLevel exactly 1]",
                        "CQ": [
                            "Does every instance of StressData necessarily have exactly one value specified for the stressLevel property?",
                            "Can StressData ever have more or fewer than one stressLevel assigned?",
                            "Is it possible for StressData to be valid if the stressLevel property is not set to a single unique value?"
                        ]
                    },
                    {
                        "axiom": "StressData propertyRestrictions [stressLevel only rdfs:Literal]",
                        "CQ": [
                            "Is the stressLevel property for StressData instances limited exclusively to values of type rdfs:Literal?",
                            "Does every value assigned to the stressLevel property in StressData have to be an rdfs:Literal?",
                            "Can StressData have stressLevel values of any type other than rdfs:Literal?"
                        ]
                    }
                ]
            },
            "DirectedDiscussionTask": {
                "axiom": {
                    "subClassOf": [
                        "DiscussionTask"
                    ]
                },
                "description": "DirectedDiscussionTask is defined as a subclass of DiscussionTask. This means every DirectedDiscussionTask is a type of DiscussionTask, inheriting its general characteristics. There are no additional restrictions, property constraints, or disjointness axioms specified for this class. Its primary distinguishing feature lies in its hierarchical placement within the ontology.",
                "CQ": [
                    {
                        "axiom": "DirectedDiscussionTask subClassOf DiscussionTask",
                        "CQ": [
                            "Is DirectedDiscussionTask classified as a more specific form of DiscussionTask?",
                            "Which task types are encompassed by DiscussionTask, specifically including DirectedDiscussionTask?",
                            "To which broader categories does DirectedDiscussionTask belong within the task hierarchy?"
                        ]
                    }
                ]
            },
            "FreeDiscussionTask": {
                "axiom": {
                    "subClassOf": [
                        "DiscussionTask"
                    ]
                },
                "description": "FreeDiscussionTask is defined as a subclass of DiscussionTask. This means that every FreeDiscussionTask inherits all properties and characteristics of DiscussionTask, while potentially introducing further specializations specific to free-form or open-ended discussions. No additional constraints or distinguishing features are specified in the current axiom.",
                "CQ": [
                    {
                        "axiom": "FreeDiscussionTask subClassOf DiscussionTask",
                        "CQ": [
                            "Is FreeDiscussionTask categorized as a kind of DiscussionTask?",
                            "Which task types are direct specializations of DiscussionTask, such as FreeDiscussionTask?",
                            "Within which broader categories is FreeDiscussionTask classified?"
                        ]
                    }
                ]
            },
            "DirectedTask": {
                "axiom": {
                    "subClassOf": [
                        "Task"
                    ]
                },
                "description": "DirectedTask is defined as a subclass of Task. This means that every DirectedTask is a type of Task, inheriting all general characteristics of Task, but is further specialized to represent a more specific kind or instance within that broader category. No additional restrictions or differentiating axioms are specified beyond its hierarchical position in relation to Task.",
                "CQ": [
                    {
                        "axiom": "DirectedTask subClassOf Task",
                        "CQ": [
                            "Is DirectedTask categorized under the broader class of Task?",
                            "Which subclasses fall under Task, including DirectedTask?",
                            "What are the direct superclasses associated with DirectedTask?"
                        ]
                    }
                ]
            },
            "DiscussionTask": {
                "axiom": {
                    "subClassOf": [
                        "Task"
                    ],
                    "propertyRestrictions": [
                        "[measuredData some StressData]",
                        "[measuredData some MoodVoiceData]",
                        "[measuredData only (MoodVoiceData or StressData)]"
                    ]
                },
                "description": "DiscussionTask is defined as a subclass of Task. Every instance of DiscussionTask is required to have at least some measured data of type StressData and some measured data of type MoodVoiceData. Additionally, all measured data associated with DiscussionTask must be exclusively of type StressData or MoodVoiceData, meaning no other types of measured data are permitted. This ensures that the assessment of a DiscussionTask is strictly based on stress and mood-related voice data.",
                "CQ": [
                    {
                        "axiom": "DiscussionTask subClassOf Task",
                        "CQ": [
                            "Is DiscussionTask classified under the broader category of Task?",
                            "Which specific types fall under the category of Task, including DiscussionTask?",
                            "What are the higher-level categories encompassing DiscussionTask?"
                        ]
                    },
                    {
                        "axiom": "DiscussionTask propertyRestrictions [measuredData some StressData]",
                        "CQ": [
                            "Must every DiscussionTask include at least one instance of measuredData linking to StressData?",
                            "Is it required that a DiscussionTask is associated with measuredData that captures StressData?",
                            "Can a DiscussionTask exist without being connected to any measuredData of type StressData?"
                        ]
                    },
                    {
                        "axiom": "DiscussionTask propertyRestrictions [measuredData some MoodVoiceData]",
                        "CQ": [
                            "Does every DiscussionTask necessarily involve measuredData related to MoodVoiceData?",
                            "Is it required that a DiscussionTask has at least one measuredData instance corresponding to MoodVoiceData?",
                            "Can a DiscussionTask exist without possessing measuredData of the type MoodVoiceData?"
                        ]
                    },
                    {
                        "axiom": "DiscussionTask propertyRestrictions [measuredData only (MoodVoiceData or StressData)]",
                        "CQ": [
                            "Is DiscussionTask restricted to having measuredData properties only of type MoodVoiceData or StressData?",
                            "Can any measuredData associated with a DiscussionTask be a type other than MoodVoiceData or StressData?",
                            "Does the ontology prohibit DiscussionTask from being linked via measuredData to data types outside of MoodVoiceData and StressData?"
                        ]
                    }
                ]
            },
            "SemiDirectedTask": {
                "axiom": {
                    "subClassOf": [
                        "Task"
                    ],
                    "propertyRestrictions": [
                        "[measuredData some FunctionalAbilitiesData]",
                        "[measuredData some CognitiveAbilitiesData]",
                        "[measuredData only (CognitiveAbilitiesData or FunctionalAbilitiesData or StressData)]"
                    ]
                },
                "description": "SemiDirectedTask is a subclass of Task characterized by the measurement of at least some FunctionalAbilitiesData and some CognitiveAbilitiesData. Additionally, any measuredData associated with a SemiDirectedTask must be exclusively of types CognitiveAbilitiesData, FunctionalAbilitiesData, or StressData—no other data types are permitted. This formalization ensures that tasks within this class are specifically designed to evaluate both cognitive and functional abilities, potentially including stress indicators, thereby aligning with their defined assessment scope.",
                "CQ": [
                    {
                        "axiom": "SemiDirectedTask subClassOf Task",
                        "CQ": [
                            "Is Task the direct supercategory of SemiDirectedTask?",
                            "Which specific types are classified under Task, such as SemiDirectedTask?",
                            "What broader classes encompass SemiDirectedTask?"
                        ]
                    },
                    {
                        "axiom": "SemiDirectedTask propertyRestrictions [measuredData some FunctionalAbilitiesData]",
                        "CQ": [
                            "Does every SemiDirectedTask require the presence of at least one measuredData instance of type FunctionalAbilitiesData?",
                            "Is it obligatory for a SemiDirectedTask to be associated with FunctionalAbilitiesData via the measuredData property?",
                            "Can a SemiDirectedTask exist without having any measuredData that qualify as FunctionalAbilitiesData?"
                        ]
                    },
                    {
                        "axiom": "SemiDirectedTask propertyRestrictions [measuredData some CognitiveAbilitiesData]",
                        "CQ": [
                            "Is it required that a SemiDirectedTask includes at least one measuredData of type CognitiveAbilitiesData?",
                            "Does every SemiDirectedTask necessarily possess measuredData that pertains to CognitiveAbilitiesData?",
                            "Can a SemiDirectedTask exist without having any measuredData associated with CognitiveAbilitiesData?"
                        ]
                    },
                    {
                        "axiom": "SemiDirectedTask propertyRestrictions [measuredData only (CognitiveAbilitiesData or FunctionalAbilitiesData or StressData)]",
                        "CQ": [
                            "Is it required that a SemiDirectedTask only utilizes measuredData originating from CognitiveAbilitiesData, FunctionalAbilitiesData, or StressData?",
                            "Can a SemiDirectedTask have measuredData associated with any type of data other than CognitiveAbilitiesData, FunctionalAbilitiesData, or StressData?",
                            "Does the definition of SemiDirectedTask prohibit the use of measuredData types beyond CognitiveAbilitiesData, FunctionalAbilitiesData, and StressData?"
                        ]
                    }
                ]
            },
            "HealthyControlParticipant": {
                "axiom": {
                    "subClassOf": [
                        "Person"
                    ],
                    "equivalentClass": [
                        "[hasRecord some (ClinicalRecord and [containsAssessment some (DiagnosisAssessment and [hasClinicalDiagnosis some {healthy}])])]"
                    ]
                },
                "description": "HealthyControlParticipant is defined as a subclass of Person, and is equivalent to individuals who have at least one clinical record containing an assessment where the clinical diagnosis is \"healthy.\" This class formalizes the concept of a participant who, according to their clinical assessments, has no diagnosed health issues, ensuring that all HealthyControlParticipant instances are characterized by clinically verified healthy status.",
                "CQ": [
                    {
                        "axiom": "HealthyControlParticipant subClassOf Person",
                        "CQ": [
                            "Is HealthyControlParticipant classified as a subset of Person?",
                            "Which categories encompass HealthyControlParticipant as a type of Person?",
                            "What are the direct types under Person that include HealthyControlParticipant?"
                        ]
                    },
                    {
                        "axiom": "HealthyControlParticipant equivalentClass [hasRecord some (ClinicalRecord and [containsAssessment some (DiagnosisAssessment and [hasClinicalDiagnosis some {healthy}])])]",
                        "CQ": [
                            "Is every HealthyControlParticipant necessarily associated with a record that includes a clinical assessment confirming a 'healthy' diagnosis?",
                            "Does the class HealthyControlParticipant represent exactly those individuals who have at least one clinical record containing a diagnosis assessment marked as 'healthy'?",
                            "Is HealthyControlParticipant logically equivalent to entities with some clinical record where the assessment includes a clinical diagnosis of 'healthy'?"
                        ]
                    }
                ]
            },
            "PersonWithDementia": {
                "axiom": {
                    "subClassOf": [
                        "Person"
                    ],
                    "equivalentClass": [
                        "[hasRecord some (ClinicalRecord and [containsAssessment some (DiagnosisAssessment and [hasClinicalDiagnosis some {dementia}])])]"
                    ]
                },
                "description": "PersonWithDementia is defined as a subclass of Person, and is equivalent to any person who has an associated clinical record that contains at least one assessment in which a clinical diagnosis of dementia is present. This formalization ensures that all individuals in the PersonWithDementia class are explicitly linked to the confirmed clinical diagnosis of dementia via assessment records.",
                "CQ": [
                    {
                        "axiom": "PersonWithDementia subClassOf Person",
                        "CQ": [
                            "Does PersonWithDementia represent a specific category nested under Person?",
                            "Which subclasses fall under the broader classification of Person, such as PersonWithDementia?",
                            "What are the general classes that encompass PersonWithDementia?"
                        ]
                    },
                    {
                        "axiom": "PersonWithDementia equivalentClass [hasRecord some (ClinicalRecord and [containsAssessment some (DiagnosisAssessment and [hasClinicalDiagnosis some {dementia}])])]",
                        "CQ": [
                            "Must every PersonWithDementia have at least one record containing a diagnosis assessment indicating dementia?",
                            "Is a PersonWithDementia equivalent to someone with a clinical record that includes an assessment with a clinical diagnosis of dementia?",
                            "Does the definition of PersonWithDementia require the intersection of having a clinical record and an assessment diagnosing dementia?"
                        ]
                    }
                ]
            },
            "PersonWithPredementia": {
                "axiom": {
                    "subClassOf": [
                        "Person"
                    ],
                    "equivalentClass": [
                        "[hasRecord some (ClinicalRecord and [containsAssessment some (DiagnosisAssessment and [hasClinicalDiagnosis some {predementia}])])]"
                    ]
                },
                "description": "PersonWithPredementia is defined as a subclass of Person and is equivalent to those individuals who have at least one clinical record containing an assessment that diagnoses predementia. This formalization ensures that any member of the PersonWithPredementia class must be associated with a clinical record documenting a diagnosis assessment explicitly identifying predementia, thus providing a clear ontological basis for representing individuals in early stages of cognitive decline.",
                "CQ": [
                    {
                        "axiom": "PersonWithPredementia subClassOf Person",
                        "CQ": [
                            "Is Person a parent class of PersonWithPredementia?",
                            "Which categories encapsulate PersonWithPredementia in the classification hierarchy?",
                            "What specific types of Person include PersonWithPredementia?"
                        ]
                    },
                    {
                        "axiom": "PersonWithPredementia equivalentClass [hasRecord some (ClinicalRecord and [containsAssessment some (DiagnosisAssessment and [hasClinicalDiagnosis some {predementia}])])]",
                        "CQ": [
                            "Does every PersonWithPredementia necessarily have at least one record that contains a diagnosis assessment for predementia?",
                            "Is PersonWithPredementia logically equivalent to having a clinical record that includes an assessment component with a predementia diagnosis?",
                            "Can PersonWithPredementia be fully defined as someone with a clinical record documenting an assessment that diagnoses predementia?"
                        ]
                    }
                ]
            },
            "Person": {
                "axiom": {
                    "subClassOf": [
                        "ns1:Person"
                    ],
                    "propertyRestrictions": [
                        "[participates some Protocol]",
                        "[hasRecord some ClinicalRecord]",
                        "[hasRecord only (ClinicalRecord or DemographicCharacteristicsRecord or ExperimentalRecord)]",
                        "[hasRecord some ExperimentalRecord]",
                        "[hasRecord some DemographicCharacteristicsRecord]",
                        "[participates only Protocol]"
                    ]
                },
                "description": "Person is defined as a subclass of ns1:Person, representing human individuals who are participants in one or more Protocols. Each Person is required to participate in at least one Protocol and is not permitted to participate in anything other than a Protocol. Additionally, every Person must have at least one ClinicalRecord, at least one ExperimentalRecord, and at least one DemographicCharacteristicsRecord associated with them. The hasRecord property is strictly limited to linking only to ClinicalRecord, DemographicCharacteristicsRecord, or ExperimentalRecord, ensuring no other types of records are associated with a Person.",
                "CQ": [
                    {
                        "axiom": "Person subClassOf ns1:Person",
                        "CQ": [
                            "Is every instance of Person included within ns1:Person?",
                            "What hierarchy exists between Person and ns1:Person categories?",
                            "Which broader classes encompass the Person category?"
                        ]
                    },
                    {
                        "axiom": "Person propertyRestrictions [participates some Protocol]",
                        "CQ": [
                            "Is every Person required to participate in at least one Protocol?",
                            "Can a Person exist in the ontology without having the participates relationship to a Protocol?",
                            "Does the definition of Person ensure that participation in a Protocol is a necessary property?"
                        ]
                    },
                    {
                        "axiom": "Person propertyRestrictions [hasRecord some ClinicalRecord]",
                        "CQ": [
                            "Is it required for every Person to have at least one 'hasRecord' relationship with a ClinicalRecord?",
                            "Does a Person necessarily possess some ClinicalRecord via the 'hasRecord' property?",
                            "Can an individual be categorized as a Person if they lack any 'hasRecord' link to a ClinicalRecord?"
                        ]
                    },
                    {
                        "axiom": "Person propertyRestrictions [hasRecord only (ClinicalRecord or DemographicCharacteristicsRecord or ExperimentalRecord)]",
                        "CQ": [
                            "Is every record associated with a Person required to be either a ClinicalRecord, DemographicCharacteristicsRecord, or ExperimentalRecord?",
                            "Can a Person have a record that is not classified as a ClinicalRecord, DemographicCharacteristicsRecord, or ExperimentalRecord?",
                            "Are the records linked to a Person exclusively limited to ClinicalRecord, DemographicCharacteristicsRecord, and ExperimentalRecord categories?"
                        ]
                    },
                    {
                        "axiom": "Person propertyRestrictions [hasRecord some ExperimentalRecord]",
                        "CQ": [
                            "Is it required for every Person to have at least one ExperimentalRecord associated via the hasRecord property?",
                            "Does the ontology permit a Person instance to exist without any linked ExperimentalRecord through hasRecord?",
                            "Are there any Persons defined where hasRecord does not point to an ExperimentalRecord?"
                        ]
                    },
                    {
                        "axiom": "Person propertyRestrictions [hasRecord some DemographicCharacteristicsRecord]",
                        "CQ": [
                            "Is it required for every Person to have at least one hasRecord relationship to a DemographicCharacteristicsRecord?",
                            "Can a Person exist in the ontology without any association via hasRecord to a DemographicCharacteristicsRecord?",
                            "Does the ontology entail that all instances of Person must be linked to one or more DemographicCharacteristicsRecord through the hasRecord property?"
                        ]
                    },
                    {
                        "axiom": "Person propertyRestrictions [participates only Protocol]",
                        "CQ": [
                            "Is a Person permitted to participate exclusively in activities that are instances of Protocol?",
                            "Can a Person participate in any activity that is not classified as a Protocol?",
                            "Are all participations of a Person necessarily limited to the class Protocol?"
                        ]
                    }
                ]
            },
            "S1_DirectedActivitiesStep": {
                "axiom": {
                    "subClassOf": [
                        "ProtocolStep"
                    ],
                    "propertyRestrictions": [
                        "[involvesTask exactly 1 S1_P11_WalkingTask]",
                        "[involvesTask exactly 1 S1_P13_WalkingCountingBackwardsTask]",
                        "[involvesTask exactly 1 S1_P21_SentenceRepeatingTask]",
                        "[involvesTask only (S1_P11_WalkingTask or S1_P12_CountingBackwardsTask or S1_P13_WalkingCountingBackwardsTask or S1_P21_SentenceRepeatingTask or S1_P22_ArticulationControlTask or Task)]",
                        "[involvesTask exactly 1 S1_P22_ArticulationControlTask]",
                        "[involvesTask exactly 1 S1_P12_CountingBackwardsTask]"
                    ]
                },
                "description": "S1_DirectedActivitiesStep is defined as a subclass of ProtocolStep. Each instance of this class is required to involve exactly one S1_P11_WalkingTask, one S1_P12_CountingBackwardsTask, one S1_P13_WalkingCountingBackwardsTask, one S1_P21_SentenceRepeatingTask, and one S1_P22_ArticulationControlTask. Additionally, the only tasks permitted to be involved are S1_P11_WalkingTask, S1_P12_CountingBackwardsTask, S1_P13_WalkingCountingBackwardsTask, S1_P21_SentenceRepeatingTask, S1_P22_ArticulationControlTask, or other general Task instances. This formalization ensures that each S1_DirectedActivitiesStep is composed of these five specific tasks, and does not include any other types of tasks.",
                "CQ": [
                    {
                        "axiom": "S1_DirectedActivitiesStep subClassOf ProtocolStep",
                        "CQ": [
                            "Is S1_DirectedActivitiesStep an instance within the broader classification of ProtocolStep?",
                            "Which steps are categorized more specifically under ProtocolStep, including S1_DirectedActivitiesStep?",
                            "What are the immediate parent categories to which S1_DirectedActivitiesStep belongs?"
                        ]
                    },
                    {
                        "axiom": "S1_DirectedActivitiesStep propertyRestrictions [involvesTask exactly 1 S1_P11_WalkingTask]",
                        "CQ": [
                            "Is every instance of S1_DirectedActivitiesStep required to involve exactly one S1_P11_WalkingTask through the involvesTask property?",
                            "Can an S1_DirectedActivitiesStep be valid if it involves more or fewer than one S1_P11_WalkingTask?",
                            "Does the ontology ensure that S1_DirectedActivitiesStep cannot involve multiple or zero S1_P11_WalkingTasks via the involvesTask relation?"
                        ]
                    },
                    {
                        "axiom": "S1_DirectedActivitiesStep propertyRestrictions [involvesTask exactly 1 S1_P13_WalkingCountingBackwardsTask]",
                        "CQ": [
                            "Is every S1_DirectedActivitiesStep required to involve exactly one occurrence of the S1_P13_WalkingCountingBackwardsTask as its task?",
                            "Can there be more than one or less than one S1_P13_WalkingCountingBackwardsTask involved in a single S1_DirectedActivitiesStep?",
                            "Does the property restriction entail that S1_DirectedActivitiesStep cannot involve any other type of task besides one instance of S1_P13_WalkingCountingBackwardsTask?"
                        ]
                    },
                    {
                        "axiom": "S1_DirectedActivitiesStep propertyRestrictions [involvesTask exactly 1 S1_P21_SentenceRepeatingTask]",
                        "CQ": [
                            "Is each S1_DirectedActivitiesStep required to involve exactly one S1_P21_SentenceRepeatingTask as its task?",
                            "Can an S1_DirectedActivitiesStep include more than one or fewer than one S1_P21_SentenceRepeatingTask through the involvesTask property?",
                            "Does an S1_DirectedActivitiesStep necessarily have the involvesTask property filled by precisely one S1_P21_SentenceRepeatingTask and not by any other number or type of task?"
                        ]
                    },
                    {
                        "axiom": "S1_DirectedActivitiesStep propertyRestrictions [involvesTask only (S1_P11_WalkingTask or S1_P12_CountingBackwardsTask or S1_P13_WalkingCountingBackwardsTask or S1_P21_SentenceRepeatingTask or S1_P22_ArticulationControlTask or Task)]",
                        "CQ": [
                            "Must every S1_DirectedActivitiesStep solely involve tasks that are either S1_P11_WalkingTask, S1_P12_CountingBackwardsTask, S1_P13_WalkingCountingBackwardsTask, S1_P21_SentenceRepeatingTask, S1_P22_ArticulationControlTask, or Task?",
                            "Is it possible for an S1_DirectedActivitiesStep to involve a task that is not among S1_P11_WalkingTask, S1_P12_CountingBackwardsTask, S1_P13_WalkingCountingBackwardsTask, S1_P21_SentenceRepeatingTask, S1_P22_ArticulationControlTask, or Task?",
                            "Are activities classified as S1_DirectedActivitiesStep permitted to involve only tasks from the specified set of six task categories?"
                        ]
                    },
                    {
                        "axiom": "S1_DirectedActivitiesStep propertyRestrictions [involvesTask exactly 1 S1_P22_ArticulationControlTask]",
                        "CQ": [
                            "Is every instance of S1_DirectedActivitiesStep required to involve exactly one S1_P22_ArticulationControlTask as its task?",
                            "Can an S1_DirectedActivitiesStep have more or fewer than one involvesTask relation to S1_P22_ArticulationControlTask?",
                            "Does S1_DirectedActivitiesStep allow for multiple or no S1_P22_ArticulationControlTask tasks to be involved?"
                        ]
                    },
                    {
                        "axiom": "S1_DirectedActivitiesStep propertyRestrictions [involvesTask exactly 1 S1_P12_CountingBackwardsTask]",
                        "CQ": [
                            "Is every S1_DirectedActivitiesStep required to involve exactly one S1_P12_CountingBackwardsTask as a task?",
                            "Can an S1_DirectedActivitiesStep include more than one S1_P12_CountingBackwardsTask?",
                            "Is it permitted for an S1_DirectedActivitiesStep to exclude the S1_P12_CountingBackwardsTask from its tasks?"
                        ]
                    }
                ]
            },
            "S2_SemiDirectedActivitiesStep": {
                "axiom": {
                    "subClassOf": [
                        "ProtocolStep"
                    ],
                    "propertyRestrictions": [
                        "[involvesTask exactly 1 TurnOnTVTask]",
                        "[involvesTask exactly 1 WaterPlantTask]",
                        "[involvesTask exactly 1 PrepareHotTeaTask]",
                        "[involvesTask exactly 1 CallPsychologistTask]",
                        "[involvesTask exactly 1 AnswerPhoneTask]",
                        "[involvesTask exactly 1 FindBusLineOnMapTask]",
                        "[involvesTask only (AnswerPhoneTask or CallPsychologistTask or EstablishAccountBalanceTask or FindBusLineOnMapTask or LeaveRoomTask or PayBillTask or PrepareDrugBoxTask or PrepareHotTeaTask or Task or TurnOnTVTask or WaterPlantTask)]",
                        "[involvesTask exactly 1 PayBillTask]",
                        "[involvesTask exactly 1 EstablishAccountBalanceTask]",
                        "[involvesTask exactly 1 LeaveRoomTask]",
                        "[involvesTask exactly 1 PrepareDrugBoxTask]"
                    ]
                },
                "description": "S2_SemiDirectedActivitiesStep is defined as a subclass of ProtocolStep. Any instance of this class must involve exactly one of each of the following tasks: TurnOnTVTask, WaterPlantTask, PrepareHotTeaTask, CallPsychologistTask, AnswerPhoneTask, FindBusLineOnMapTask, PayBillTask, EstablishAccountBalanceTask, LeaveRoomTask, and PrepareDrugBoxTask. Furthermore, the tasks involved are restricted to the following types: AnswerPhoneTask, CallPsychologistTask, EstablishAccountBalanceTask, FindBusLineOnMapTask, LeaveRoomTask, PayBillTask, PrepareDrugBoxTask, PrepareHotTeaTask, Task, TurnOnTVTask, or WaterPlantTask. This formalization ensures that any S2_SemiDirectedActivitiesStep is a uniquely structured protocol step composed of this specific set of semi-directed activities.",
                "CQ": [
                    {
                        "axiom": "S2_SemiDirectedActivitiesStep subClassOf ProtocolStep",
                        "CQ": [
                            "Does S2_SemiDirectedActivitiesStep fall under the general category of ProtocolStep?",
                            "What are the distinct subtypes of ProtocolStep, including S2_SemiDirectedActivitiesStep?",
                            "Which broader step classifications encompass S2_SemiDirectedActivitiesStep?"
                        ]
                    },
                    {
                        "axiom": "S2_SemiDirectedActivitiesStep propertyRestrictions [involvesTask exactly 1 TurnOnTVTask]",
                        "CQ": [
                            "Must every instance of S2_SemiDirectedActivitiesStep involve exactly one TurnOnTVTask?",
                            "Can an S2_SemiDirectedActivitiesStep include more than one or fewer than one TurnOnTVTask in its involvesTask property?",
                            "Is it possible for an S2_SemiDirectedActivitiesStep to be valid without involving precisely one TurnOnTVTask?"
                        ]
                    },
                    {
                        "axiom": "S2_SemiDirectedActivitiesStep propertyRestrictions [involvesTask exactly 1 WaterPlantTask]",
                        "CQ": [
                            "Is it required that an S2_SemiDirectedActivitiesStep involves exactly one WaterPlantTask?",
                            "Can an S2_SemiDirectedActivitiesStep include more or less than one WaterPlantTask through the involvesTask property?",
                            "Does the cardinality restriction on involvesTask for S2_SemiDirectedActivitiesStep exclude the possibility of multiple or zero WaterPlantTask instances?"
                        ]
                    },
                    {
                        "axiom": "S2_SemiDirectedActivitiesStep propertyRestrictions [involvesTask exactly 1 PrepareHotTeaTask]",
                        "CQ": [
                            "Is each instance of S2_SemiDirectedActivitiesStep required to involve exactly one PrepareHotTeaTask as its task?",
                            "Can an S2_SemiDirectedActivitiesStep have more than one or fewer than one PrepareHotTeaTask involved through the involvesTask property?",
                            "Does being an S2_SemiDirectedActivitiesStep exclude the involvement of any task other than a single PrepareHotTeaTask via the involvesTask relationship?"
                        ]
                    },
                    {
                        "axiom": "S2_SemiDirectedActivitiesStep propertyRestrictions [involvesTask exactly 1 CallPsychologistTask]",
                        "CQ": [
                            "Is it required that an S2_SemiDirectedActivitiesStep involves exactly one CallPsychologistTask?",
                            "Can an S2_SemiDirectedActivitiesStep ever involve more or fewer than one CallPsychologistTask?",
                            "Does the definition of S2_SemiDirectedActivitiesStep exclude the possibility of involving either multiple or no CallPsychologistTask?"
                        ]
                    },
                    {
                        "axiom": "S2_SemiDirectedActivitiesStep propertyRestrictions [involvesTask exactly 1 AnswerPhoneTask]",
                        "CQ": [
                            "Is every instance of S2_SemiDirectedActivitiesStep required to involve exactly one AnswerPhoneTask as a task?",
                            "Can S2_SemiDirectedActivitiesStep include more than one AnswerPhoneTask or omit it entirely?",
                            "Does the cardinality restriction on involvesTask for S2_SemiDirectedActivitiesStep exclude the possibility of multiple or zero AnswerPhoneTask associations?"
                        ]
                    },
                    {
                        "axiom": "S2_SemiDirectedActivitiesStep propertyRestrictions [involvesTask exactly 1 FindBusLineOnMapTask]",
                        "CQ": [
                            "Is every instance of S2_SemiDirectedActivitiesStep required to involve exactly one FindBusLineOnMapTask as its task?",
                            "Can an S2_SemiDirectedActivitiesStep ever involve more than one or fewer than one FindBusLineOnMapTask?",
                            "Are there any S2_SemiDirectedActivitiesStep entities that do not have precisely one associated FindBusLineOnMapTask?"
                        ]
                    },
                    {
                        "axiom": "S2_SemiDirectedActivitiesStep propertyRestrictions [involvesTask only (AnswerPhoneTask or CallPsychologistTask or EstablishAccountBalanceTask or FindBusLineOnMapTask or LeaveRoomTask or PayBillTask or PrepareDrugBoxTask or PrepareHotTeaTask or Task or TurnOnTVTask or WaterPlantTask)]",
                        "CQ": [
                            "Are S2_SemiDirectedActivitiesSteps allowed to involve only those tasks specified as AnswerPhoneTask, CallPsychologistTask, EstablishAccountBalanceTask, FindBusLineOnMapTask, LeaveRoomTask, PayBillTask, PrepareDrugBoxTask, PrepareHotTeaTask, Task, TurnOnTVTask, or WaterPlantTask?",
                            "Can an S2_SemiDirectedActivitiesStep ever involve a task that is not included among the listed twelve task types?",
                            "Is every task associated with S2_SemiDirectedActivitiesStep necessarily one of AnswerPhoneTask, CallPsychologistTask, EstablishAccountBalanceTask, FindBusLineOnMapTask, LeaveRoomTask, PayBillTask, PrepareDrugBoxTask, PrepareHotTeaTask, Task, TurnOnTVTask, or WaterPlantTask?"
                        ]
                    },
                    {
                        "axiom": "S2_SemiDirectedActivitiesStep propertyRestrictions [involvesTask exactly 1 PayBillTask]",
                        "CQ": [
                            "Does every instance of S2_SemiDirectedActivitiesStep necessarily involve exactly one PayBillTask as the task?",
                            "Is it permissible for S2_SemiDirectedActivitiesStep to have more than one or no PayBillTask associated via involvesTask property?",
                            "Can S2_SemiDirectedActivitiesStep involve any task other than a single PayBillTask through the involvesTask relationship?"
                        ]
                    },
                    {
                        "axiom": "S2_SemiDirectedActivitiesStep propertyRestrictions [involvesTask exactly 1 EstablishAccountBalanceTask]",
                        "CQ": [
                            "Is every S2_SemiDirectedActivitiesStep instance required to involve exactly one EstablishAccountBalanceTask as its task?",
                            "Can an S2_SemiDirectedActivitiesStep be valid if it involves more than one or fewer than one EstablishAccountBalanceTask?",
                            "Does the involvement of an EstablishAccountBalanceTask in S2_SemiDirectedActivitiesStep exclude the possibility of involving any other number of such tasks?"
                        ]
                    },
                    {
                        "axiom": "S2_SemiDirectedActivitiesStep propertyRestrictions [involvesTask exactly 1 LeaveRoomTask]",
                        "CQ": [
                            "Must every S2_SemiDirectedActivitiesStep involve exactly one LeaveRoomTask via the involvesTask property?",
                            "Is it possible for an S2_SemiDirectedActivitiesStep to involve more than one or no LeaveRoomTask?",
                            "Does the property restriction require that S2_SemiDirectedActivitiesStep activities are characterized solely by a single associated LeaveRoomTask?"
                        ]
                    },
                    {
                        "axiom": "S2_SemiDirectedActivitiesStep propertyRestrictions [involvesTask exactly 1 PrepareDrugBoxTask]",
                        "CQ": [
                            "Is S2_SemiDirectedActivitiesStep required to involve exactly one PrepareDrugBoxTask through the involvesTask property?",
                            "Can an S2_SemiDirectedActivitiesStep have more or fewer than one PrepareDrugBoxTask associated via involvesTask?",
                            "Does every S2_SemiDirectedActivitiesStep entail a unique instance of PrepareDrugBoxTask as defined by the involvesTask property?"
                        ]
                    }
                ]
            },
            "S3_DiscussionWithClinicianStep": {
                "axiom": {
                    "subClassOf": [
                        "ProtocolStep"
                    ],
                    "propertyRestrictions": [
                        "[involvesTask only (S3_P1_DirectedExpressionTask or S3_P21_PictureDescriptionTask or Task)]",
                        "[involvesTask exactly 1 S3_P1_DirectedExpressionTask]",
                        "[involvesTask exactly 1 S3_P21_PictureDescriptionTask]"
                    ]
                },
                "description": "S3_DiscussionWithClinicianStep is a subclass of ProtocolStep, representing a specific stage within a protocol that involves engagement with a clinician. This class is formally defined to involve exactly one S3_P1_DirectedExpressionTask and exactly one S3_P21_PictureDescriptionTask, with all associated tasks being limited exclusively to S3_P1_DirectedExpressionTask, S3_P21_PictureDescriptionTask, or their subclasses. This ensures the step comprises a focused discussion component, structured by these particular task types.",
                "CQ": [
                    {
                        "axiom": "S3_DiscussionWithClinicianStep subClassOf ProtocolStep",
                        "CQ": [
                            "Is S3_DiscussionWithClinicianStep categorized under the broader group of ProtocolStep?",
                            "Which protocol steps encompass S3_DiscussionWithClinicianStep as a more specific step?",
                            "What higher-level process groupings include S3_DiscussionWithClinicianStep within their hierarchy?"
                        ]
                    },
                    {
                        "axiom": "S3_DiscussionWithClinicianStep propertyRestrictions [involvesTask only (S3_P1_DirectedExpressionTask or S3_P21_PictureDescriptionTask or Task)]",
                        "CQ": [
                            "Must every S3_DiscussionWithClinicianStep involve only tasks classified as S3_P1_DirectedExpressionTask, S3_P21_PictureDescriptionTask, or Task?",
                            "Is it permissible for S3_DiscussionWithClinicianStep to involve any task outside of S3_P1_DirectedExpressionTask, S3_P21_PictureDescriptionTask, or Task?",
                            "Are the tasks associated with S3_DiscussionWithClinicianStep strictly limited to S3_P1_DirectedExpressionTask, S3_P21_PictureDescriptionTask, or Task categories?"
                        ]
                    },
                    {
                        "axiom": "S3_DiscussionWithClinicianStep propertyRestrictions [involvesTask exactly 1 S3_P1_DirectedExpressionTask]",
                        "CQ": [
                            "Must every instance of S3_DiscussionWithClinicianStep involve exactly one S3_P1_DirectedExpressionTask?",
                            "Is it possible for S3_DiscussionWithClinicianStep to include more than one or fewer than one S3_P1_DirectedExpressionTask?",
                            "Does the occurrence of S3_DiscussionWithClinicianStep require that it is associated with no more and no less than one S3_P1_DirectedExpressionTask through the involvesTask property?"
                        ]
                    },
                    {
                        "axiom": "S3_DiscussionWithClinicianStep propertyRestrictions [involvesTask exactly 1 S3_P21_PictureDescriptionTask]",
                        "CQ": [
                            "Must every S3_DiscussionWithClinicianStep involve exactly one S3_P21_PictureDescriptionTask task?",
                            "Can an S3_DiscussionWithClinicianStep include more than one or no S3_P21_PictureDescriptionTask via involvesTask?",
                            "Is the involvement of precisely one S3_P21_PictureDescriptionTask by each S3_DiscussionWithClinicianStep mandatory according to the ontology?"
                        ]
                    }
                ]
            },
            "S1_P11_WalkingTask": {
                "axiom": {
                    "subClassOf": [
                        "DirectedTask"
                    ],
                    "propertyRestrictions": [
                        "[measuredData some LatencyData]",
                        "[measuredData only (GaitData or LatencyData or StressData)]",
                        "[measuredData some GaitData]"
                    ]
                },
                "description": "S1_P11_WalkingTask is a subclass of DirectedTask, representing a specific type of directed task that involves walking. Every instance of this class is required to have at least some measuredData of type GaitData as well as some LatencyData, and the measuredData associated with any instance may only be of types GaitData, LatencyData, or StressData. This ensures that S1_P11_WalkingTask is characterized by the collection and analysis of gait and latency information, with the potential inclusion of stress-related data during walking activities.",
                "CQ": [
                    {
                        "axiom": "S1_P11_WalkingTask subClassOf DirectedTask",
                        "CQ": [
                            "Is every S1_P11_WalkingTask instance a specific form of DirectedTask?",
                            "Which task types are classified under DirectedTask along with S1_P11_WalkingTask?",
                            "To which overarching task categories does S1_P11_WalkingTask pertain?"
                        ]
                    },
                    {
                        "axiom": "S1_P11_WalkingTask propertyRestrictions [measuredData some LatencyData]",
                        "CQ": [
                            "Is it required that every S1_P11_WalkingTask instance has at least one measuredData property linking to LatencyData?",
                            "Can an S1_P11_WalkingTask exist without having any measuredData related to LatencyData?",
                            "Does the presence of LatencyData as measuredData define S1_P11_WalkingTask instances in the ontology?"
                        ]
                    },
                    {
                        "axiom": "S1_P11_WalkingTask propertyRestrictions [measuredData only (GaitData or LatencyData or StressData)]",
                        "CQ": [
                            "Is it required that S1_P11_WalkingTask has measuredData exclusively of type GaitData, LatencyData, or StressData?",
                            "May S1_P11_WalkingTask ever have measuredData relating to any data type aside from GaitData, LatencyData, or StressData?",
                            "Does the ontology prohibit S1_P11_WalkingTask from being associated with measuredData outside the categories of GaitData, LatencyData, or StressData?"
                        ]
                    },
                    {
                        "axiom": "S1_P11_WalkingTask propertyRestrictions [measuredData some GaitData]",
                        "CQ": [
                            "Does every instance of S1_P11_WalkingTask require the existence of at least one measuredData property linked to GaitData?",
                            "Is it necessary that S1_P11_WalkingTask is associated with measuredData that includes GaitData?",
                            "Can an S1_P11_WalkingTask exist without any measuredData of the type GaitData?"
                        ]
                    }
                ]
            },
            "S1_P12_CountingBackwardsTask": {
                "axiom": {
                    "subClassOf": [
                        "DirectedTask"
                    ],
                    "propertyRestrictions": [
                        "[measuredData some LatencyData]",
                        "[measuredData only (LatencyData or MoodVoiceData or StressData)]",
                        "[countingType only {_20_0, _305_285}]",
                        "[measuredData some MoodVoiceData]"
                    ]
                },
                "description": "S1_P12_CountingBackwardsTask is a subclass of DirectedTask characterized by specific measurement and property constraints. Every instance of this class must have measured data that includes some LatencyData and some MoodVoiceData. Additionally, measured data associated with this task may only be of the types LatencyData, MoodVoiceData, or StressData. The countingType property for individuals in this class is restricted to either _20_0 or _305_285. These axioms ensure that S1_P12_CountingBackwardsTask is a directed task that involves recording response latency, mood/voice indicators, and potentially stress, with a clearly defined range of permissible counting types.",
                "CQ": [
                    {
                        "axiom": "S1_P12_CountingBackwardsTask subClassOf DirectedTask",
                        "CQ": [
                            "Is S1_P12_CountingBackwardsTask classified as a subtype under DirectedTask?",
                            "What specific task types are encompassed by the DirectedTask category?",
                            "Which broader tasks include S1_P12_CountingBackwardsTask as a specialization?"
                        ]
                    },
                    {
                        "axiom": "S1_P12_CountingBackwardsTask propertyRestrictions [measuredData some LatencyData]",
                        "CQ": [
                            "Is it required that the S1_P12_CountingBackwardsTask has at least one measuredData property associated with LatencyData?",
                            "Must every instance of S1_P12_CountingBackwardsTask involve measuredData relating specifically to LatencyData?",
                            "Can S1_P12_CountingBackwardsTask exist without any measuredData property referring to LatencyData?"
                        ]
                    },
                    {
                        "axiom": "S1_P12_CountingBackwardsTask propertyRestrictions [measuredData only (LatencyData or MoodVoiceData or StressData)]",
                        "CQ": [
                            "Is S1_P12_CountingBackwardsTask measured exclusively by LatencyData, MoodVoiceData, or StressData, excluding all other data types?",
                            "Can S1_P12_CountingBackwardsTask have measuredData of any kind other than LatencyData, MoodVoiceData, or StressData?",
                            "Does every instance of measuredData associated with S1_P12_CountingBackwardsTask necessarily fall under LatencyData, MoodVoiceData, or StressData?"
                        ]
                    },
                    {
                        "axiom": "S1_P12_CountingBackwardsTask propertyRestrictions [countingType only {_20_0, _305_285}]",
                        "CQ": [
                            "Is S1_P12_CountingBackwardsTask restricted to only the counting types _20_0 and _305_285?",
                            "Can S1_P12_CountingBackwardsTask involve a counting type other than _20_0 or _305_285?",
                            "Must every instance of S1_P12_CountingBackwardsTask have its countingType property assigned exclusively from the set {_20_0, _305_285}?"
                        ]
                    },
                    {
                        "axiom": "S1_P12_CountingBackwardsTask propertyRestrictions [measuredData some MoodVoiceData]",
                        "CQ": [
                            "Does every instance of S1_P12_CountingBackwardsTask necessarily have at least one measuredData property linking to MoodVoiceData?",
                            "Is it required that S1_P12_CountingBackwardsTask includes measuredData that contains MoodVoiceData?",
                            "Can an S1_P12_CountingBackwardsTask exist without being associated with any MoodVoiceData via the measuredData property?"
                        ]
                    }
                ]
            },
            "S1_P13_WalkingCountingBackwardsTask": {
                "axiom": {
                    "subClassOf": [
                        "DirectedTask"
                    ],
                    "propertyRestrictions": [
                        "[measuredData some MoodVoiceData]",
                        "[countingType only CountingType]",
                        "[measuredData some LatencyData]",
                        "[measuredData some GaitData]",
                        "[countingType some CountingType]",
                        "[measuredData only (GaitData or LatencyData or MoodVoiceData or StressData)]"
                    ]
                },
                "description": "S1_P13_WalkingCountingBackwardsTask is a subclass of DirectedTask, representing a directed activity involving walking and counting backwards. Members of this class are characterized by being associated with measured data pertaining to gait, latency, and mood/voice, with the option to also include stress-related data. The task requires the presence of countingType information, restricted solely to instances of CountingType. Only data of types GaitData, LatencyData, MoodVoiceData, or StressData are permitted as measured data for this task.",
                "CQ": [
                    {
                        "axiom": "S1_P13_WalkingCountingBackwardsTask subClassOf DirectedTask",
                        "CQ": [
                            "Is S1_P13_WalkingCountingBackwardsTask classified as a kind of DirectedTask?",
                            "Which tasks are recognized as specializations of DirectedTask, including S1_P13_WalkingCountingBackwardsTask?",
                            "To which overarching categories is S1_P13_WalkingCountingBackwardsTask assigned?"
                        ]
                    },
                    {
                        "axiom": "S1_P13_WalkingCountingBackwardsTask propertyRestrictions [measuredData some MoodVoiceData]",
                        "CQ": [
                            "Must every instance of S1_P13_WalkingCountingBackwardsTask include at least one measuredData property relating to MoodVoiceData?",
                            "Is it possible for S1_P13_WalkingCountingBackwardsTask to have measuredData exclusively associated with MoodVoiceData?",
                            "Does the presence of measuredData of type MoodVoiceData necessarily imply the existence of an S1_P13_WalkingCountingBackwardsTask?"
                        ]
                    },
                    {
                        "axiom": "S1_P13_WalkingCountingBackwardsTask propertyRestrictions [countingType only CountingType]",
                        "CQ": [
                            "Is it required that S1_P13_WalkingCountingBackwardsTask involves only activities of type CountingType?",
                            "Can S1_P13_WalkingCountingBackwardsTask be associated with any countingType that is not a CountingType?",
                            "Does S1_P13_WalkingCountingBackwardsTask exclusively restrict its countingType property to CountingType instances?"
                        ]
                    },
                    {
                        "axiom": "S1_P13_WalkingCountingBackwardsTask propertyRestrictions [measuredData some LatencyData]",
                        "CQ": [
                            "Does every instance of S1_P13_WalkingCountingBackwardsTask necessarily have measuredData associated with some LatencyData?",
                            "Is it required that S1_P13_WalkingCountingBackwardsTask includes at least one measuredData property pointing to LatencyData?",
                            "Can S1_P13_WalkingCountingBackwardsTask exist without any measuredData related to LatencyData?"
                        ]
                    },
                    {
                        "axiom": "S1_P13_WalkingCountingBackwardsTask propertyRestrictions [measuredData some GaitData]",
                        "CQ": [
                            "Does the S1_P13_WalkingCountingBackwardsTask always require the recording of some GaitData as measured data?",
                            "Is it necessary that every instance of S1_P13_WalkingCountingBackwardsTask is associated with at least one measuredData value of type GaitData?",
                            "Can an instance of S1_P13_WalkingCountingBackwardsTask exist without having measuredData that is GaitData?"
                        ]
                    },
                    {
                        "axiom": "S1_P13_WalkingCountingBackwardsTask propertyRestrictions [countingType some CountingType]",
                        "CQ": [
                            "Is it necessary for S1_P13_WalkingCountingBackwardsTask to involve at least one countingType?",
                            "Must every instance of S1_P13_WalkingCountingBackwardsTask be associated with some form of CountingType via countingType?",
                            "Are there any S1_P13_WalkingCountingBackwardsTask tasks that do not have a countingType relation to a CountingType?"
                        ]
                    },
                    {
                        "axiom": "S1_P13_WalkingCountingBackwardsTask propertyRestrictions [measuredData only (GaitData or LatencyData or MoodVoiceData or StressData)]",
                        "CQ": [
                            "Are measurements related to S1_P13_WalkingCountingBackwardsTask limited exclusively to GaitData, LatencyData, MoodVoiceData, or StressData?",
                            "If the S1_P13_WalkingCountingBackwardsTask produces measured data outside of GaitData, LatencyData, MoodVoiceData, or StressData, is it a violation of the property restriction?",
                            "Does S1_P13_WalkingCountingBackwardsTask ensure that all data obtained via measuredData is included in the set comprising only GaitData, LatencyData, MoodVoiceData, and StressData?"
                        ]
                    }
                ]
            },
            "S1_P21_SentenceRepeatingTask": {
                "axiom": {
                    "subClassOf": [
                        "DirectedTask"
                    ],
                    "propertyRestrictions": [
                        "[measuredData some MoodVoiceData]",
                        "[measuredData only (LatencyData or MoodVoiceData or StressData)]",
                        "[measuredData some LatencyData]"
                    ]
                },
                "description": "S1_P21_SentenceRepeatingTask is a subclass of DirectedTask characterized by measuredData properties. Every instance must have at least one measuredData value of type MoodVoiceData and at least one of type LatencyData. The measuredData property for this class can only be filled with LatencyData, MoodVoiceData, or StressData, and no other types. This structure ensures the task consistently collects both mood/voice and latency data, restricting measured data types to those specifically listed.",
                "CQ": [
                    {
                        "axiom": "S1_P21_SentenceRepeatingTask subClassOf DirectedTask",
                        "CQ": [
                            "Is S1_P21_SentenceRepeatingTask categorized as a kind of DirectedTask?",
                            "Which specialized tasks fall under the category of DirectedTask, such as S1_P21_SentenceRepeatingTask?",
                            "What broader task categories encompass S1_P21_SentenceRepeatingTask?"
                        ]
                    },
                    {
                        "axiom": "S1_P21_SentenceRepeatingTask propertyRestrictions [measuredData some MoodVoiceData]",
                        "CQ": [
                            "Does every S1_P21_SentenceRepeatingTask require the presence of measuredData that relates to MoodVoiceData?",
                            "Is MoodVoiceData a necessary component of measuredData for an S1_P21_SentenceRepeatingTask?",
                            "Does the execution of S1_P21_SentenceRepeatingTask entail at least one measuredData instance that is classified as MoodVoiceData?"
                        ]
                    },
                    {
                        "axiom": "S1_P21_SentenceRepeatingTask propertyRestrictions [measuredData only (LatencyData or MoodVoiceData or StressData)]",
                        "CQ": [
                            "Is S1_P21_SentenceRepeatingTask allowed to have measuredData that belongs only to LatencyData, MoodVoiceData, or StressData categories?",
                            "Can any measuredData associated with S1_P21_SentenceRepeatingTask be something other than LatencyData, MoodVoiceData, or StressData?",
                            "Does S1_P21_SentenceRepeatingTask necessarily exclude measuredData types outside of LatencyData, MoodVoiceData, and StressData?"
                        ]
                    },
                    {
                        "axiom": "S1_P21_SentenceRepeatingTask propertyRestrictions [measuredData some LatencyData]",
                        "CQ": [
                            "Does every S1_P21_SentenceRepeatingTask require at least one measuredData relating to LatencyData?",
                            "Is the presence of LatencyData under the measuredData property necessary for all S1_P21_SentenceRepeatingTask instances?",
                            "Can an S1_P21_SentenceRepeatingTask exist without any measuredData that is of type LatencyData?"
                        ]
                    }
                ]
            },
            "S1_P22_ArticulationControlTask": {
                "axiom": {
                    "subClassOf": [
                        "DirectedTask"
                    ],
                    "propertyRestrictions": [
                        "[measuredData some LatencyData]",
                        "[measuredData only (LatencyData or StressData)]"
                    ]
                },
                "description": "S1_P22_ArticulationControlTask is defined as a subclass of DirectedTask. Members of this class are required to have at least one measuredData property linked to LatencyData, and all measuredData properties must be restricted to either LatencyData or StressData. This ensures that any instance of S1_P22_ArticulationControlTask is characterized by the measurement of latency and/or stress data, with no other data types permitted for the measuredData property.",
                "CQ": [
                    {
                        "axiom": "S1_P22_ArticulationControlTask subClassOf DirectedTask",
                        "CQ": [
                            "Does S1_P22_ArticulationControlTask fall under the category of DirectedTask?",
                            "What specific types are encompassed within DirectedTask, including S1_P22_ArticulationControlTask?",
                            "Which broader task categories does S1_P22_ArticulationControlTask belong to?"
                        ]
                    },
                    {
                        "axiom": "S1_P22_ArticulationControlTask propertyRestrictions [measuredData some LatencyData]",
                        "CQ": [
                            "Is it required that an instance of S1_P22_ArticulationControlTask has at least one measuredData property relating to LatencyData?",
                            "Does every S1_P22_ArticulationControlTask involve measuredData that includes LatencyData?",
                            "Can a S1_P22_ArticulationControlTask exist without any measuredData associated with LatencyData?"
                        ]
                    },
                    {
                        "axiom": "S1_P22_ArticulationControlTask propertyRestrictions [measuredData only (LatencyData or StressData)]",
                        "CQ": [
                            "Is it the case that an S1_P22_ArticulationControlTask can only have measuredData of type LatencyData or StressData?",
                            "Can measuredData associated with S1_P22_ArticulationControlTask ever include anything other than LatencyData or StressData?",
                            "Are LatencyData and StressData the exclusive kinds of measuredData permitted for S1_P22_ArticulationControlTask?"
                        ]
                    }
                ]
            },
            "S3_P1_DirectedExpressionTask": {
                "axiom": {
                    "subClassOf": [
                        "DirectedDiscussionTask"
                    ],
                    "propertyRestrictions": [
                        "[measuredData some MoodVoiceData]",
                        "[measuredData only (MoodVoiceData or StressData)]"
                    ]
                },
                "description": "S3_P1_DirectedExpressionTask is defined as a subclass of DirectedDiscussionTask. Every instance of this class is required to be associated with at least some measuredData of type MoodVoiceData, while all measuredData linked to the class must exclusively be either MoodVoiceData or StressData. This specification ensures that the measurable outcomes for this task are strictly limited to mood or stress-related voice data, reflecting its design for directed expression activities with a focus on mood and stress recording.",
                "CQ": [
                    {
                        "axiom": "S3_P1_DirectedExpressionTask subClassOf DirectedDiscussionTask",
                        "CQ": [
                            "Does S3_P1_DirectedExpressionTask fall under the category of DirectedDiscussionTask?",
                            "Which types of DirectedDiscussionTask include S3_P1_DirectedExpressionTask as a more specific instance?",
                            "What broader task classifications encompass S3_P1_DirectedExpressionTask?"
                        ]
                    },
                    {
                        "axiom": "S3_P1_DirectedExpressionTask propertyRestrictions [measuredData some MoodVoiceData]",
                        "CQ": [
                            "Is it necessary for an S3_P1_DirectedExpressionTask to have at least one measuredData property with a value of type MoodVoiceData?",
                            "Does every instance of S3_P1_DirectedExpressionTask include measured data that pertains specifically to MoodVoiceData?",
                            "Can an S3_P1_DirectedExpressionTask exist without having any measuredData linked to MoodVoiceData?"
                        ]
                    },
                    {
                        "axiom": "S3_P1_DirectedExpressionTask propertyRestrictions [measuredData only (MoodVoiceData or StressData)]",
                        "CQ": [
                            "Are S3_P1_DirectedExpressionTasks required to have measuredData properties exclusively involving MoodVoiceData or StressData?",
                            "Could an S3_P1_DirectedExpressionTask possess measuredData that is neither MoodVoiceData nor StressData?",
                            "Do the measuredData property values for S3_P1_DirectedExpressionTask necessarily only include concepts from MoodVoiceData or StressData?"
                        ]
                    }
                ]
            },
            "S3_P21_PictureDescriptionTask": {
                "axiom": {
                    "subClassOf": [
                        "FreeDiscussionTask"
                    ]
                },
                "description": "S3_P21_PictureDescriptionTask is defined as a subclass of FreeDiscussionTask. This means that every instance of S3_P21_PictureDescriptionTask is also an instance of FreeDiscussionTask, inheriting all the properties and constraints applicable to free discussion tasks. No additional restrictions or differentiating features beyond this specialization are specified by the axioms.",
                "CQ": [
                    {
                        "axiom": "S3_P21_PictureDescriptionTask subClassOf FreeDiscussionTask",
                        "CQ": [
                            "Is S3_P21_PictureDescriptionTask recognized as a specialized form of FreeDiscussionTask?",
                            "Which task types fall under the broader class of FreeDiscussionTask, such as S3_P21_PictureDescriptionTask?",
                            "What higher-level categories encompass S3_P21_PictureDescriptionTask within the task taxonomy?"
                        ]
                    }
                ]
            },
            "S3_P22_PictureDiscussionTask": {
                "axiom": {
                    "subClassOf": [
                        "FreeDiscussionTask"
                    ]
                },
                "description": "S3_P22_PictureDiscussionTask is defined as a subclass of FreeDiscussionTask. This means that every instance of S3_P22_PictureDiscussionTask is also considered a FreeDiscussionTask, inheriting all characteristics and constraints of FreeDiscussionTask, while potentially introducing additional specificity relevant to picture discussion activities.",
                "CQ": [
                    {
                        "axiom": "S3_P22_PictureDiscussionTask subClassOf FreeDiscussionTask",
                        "CQ": [
                            "Is S3_P22_PictureDiscussionTask classified as a more specific type of FreeDiscussionTask?",
                            "What discussion tasks are specialized forms of FreeDiscussionTask, such as S3_P22_PictureDiscussionTask?",
                            "Which general discussion task categories encompass S3_P22_PictureDiscussionTask?"
                        ]
                    }
                ]
            },
            "ClinicalRecord": {
                "axiom": {
                    "propertyRestrictions": [
                        "[containsAssessment exactly 1 AutonomyAssessment]",
                        "[containsAssessment exactly 1 MotricityAbilitiesAssessment]",
                        "[containsAssessment exactly 1 CognitiveAbilitiesAssessment]",
                        "[containsAssessment only (AutonomyAssessment or CognitiveAbilitiesAssessment or DiagnosisAssessment or MotricityAbilitiesAssessment or NeuropsychiatricAndMoodAssessment)]",
                        "[containsAssessment exactly 1 DiagnosisAssessment]"
                    ]
                },
                "description": "ClinicalRecord is defined as a class that must contain exactly one instance each of AutonomyAssessment, MotricityAbilitiesAssessment, CognitiveAbilitiesAssessment, and DiagnosisAssessment. Furthermore, the containsAssessment property for any ClinicalRecord instance is restricted to only those assessments that are of type AutonomyAssessment, CognitiveAbilitiesAssessment, DiagnosisAssessment, MotricityAbilitiesAssessment, or NeuropsychiatricAndMoodAssessment. This ensures that every ClinicalRecord is a structured record of clinical assessments, each holding exactly one specific assessment of autonomy, motricity abilities, cognitive abilities, and diagnosis, with assessments strictly limited to the defined set.",
                "CQ": [
                    {
                        "axiom": "ClinicalRecord propertyRestrictions [containsAssessment exactly 1 AutonomyAssessment]",
                        "CQ": [
                            "Must every ClinicalRecord contain exactly one AutonomyAssessment as an assessment?",
                            "Is it permissible for a ClinicalRecord to include more than one AutonomyAssessment via the containsAssessment property?",
                            "Does a ClinicalRecord that lacks an AutonomyAssessment, or that contains multiple AutonomyAssessments, violate the defined property restriction?"
                        ]
                    },
                    {
                        "axiom": "ClinicalRecord propertyRestrictions [containsAssessment exactly 1 MotricityAbilitiesAssessment]",
                        "CQ": [
                            "Is a ClinicalRecord required to have exactly one MotricityAbilitiesAssessment via the containsAssessment property?",
                            "Can a ClinicalRecord include more than one MotricityAbilitiesAssessment through containsAssessment?",
                            "Does the presence of zero or multiple MotricityAbilitiesAssessments in a ClinicalRecord violate its property restriction on containsAssessment?"
                        ]
                    },
                    {
                        "axiom": "ClinicalRecord propertyRestrictions [containsAssessment exactly 1 CognitiveAbilitiesAssessment]",
                        "CQ": [
                            "Must every ClinicalRecord contain exactly one CognitiveAbilitiesAssessment as an assessment component?",
                            "Is it possible for a ClinicalRecord to include more or fewer than one CognitiveAbilitiesAssessment via the containsAssessment property?",
                            "Does the ClinicalRecord definition require that containsAssessment is present and refers only to a single CognitiveAbilitiesAssessment?"
                        ]
                    },
                    {
                        "axiom": "ClinicalRecord propertyRestrictions [containsAssessment only (AutonomyAssessment or CognitiveAbilitiesAssessment or DiagnosisAssessment or MotricityAbilitiesAssessment or NeuropsychiatricAndMoodAssessment)]",
                        "CQ": [
                            "Is a ClinicalRecord permitted to contain any assessment type apart from AutonomyAssessment, CognitiveAbilitiesAssessment, DiagnosisAssessment, MotricityAbilitiesAssessment, or NeuropsychiatricAndMoodAssessment?",
                            "Must every assessment included in a ClinicalRecord be either an AutonomyAssessment, CognitiveAbilitiesAssessment, DiagnosisAssessment, MotricityAbilitiesAssessment, or NeuropsychiatricAndMoodAssessment?",
                            "Does the ontology prevent ClinicalRecord from containing assessments outside the set of AutonomyAssessment, CognitiveAbilitiesAssessment, DiagnosisAssessment, MotricityAbilitiesAssessment, or NeuropsychiatricAndMoodAssessment?"
                        ]
                    },
                    {
                        "axiom": "ClinicalRecord propertyRestrictions [containsAssessment exactly 1 DiagnosisAssessment]",
                        "CQ": [
                            "Is every ClinicalRecord required to contain exactly one DiagnosisAssessment via the containsAssessment property?",
                            "Can a ClinicalRecord have more or fewer than one DiagnosisAssessment linked through containsAssessment?",
                            "Does the ontology prohibit a ClinicalRecord from containing multiple or zero DiagnosisAssessments through containsAssessment?"
                        ]
                    }
                ]
            },
            "DemographicCharacteristicsRecord": {
                "axiom": {
                    "propertyRestrictions": [
                        "[dateOfBirth only xsd:dateTime]",
                        "[gender only GenderType]",
                        "[laterality only LateralityType]",
                        "[size exactly 1]",
                        "[educationLevel only rdfs:Literal]",
                        "[educationLevel exactly 1]",
                        "[gender exactly 1 GenderType]",
                        "[size only rdfs:Literal]",
                        "[dateOfBirth exactly 1 xsd:dateTime]"
                    ]
                },
                "description": "DemographicCharacteristicsRecord is a class characterized by strict property constraints to ensure comprehensive demographic data representation. Each instance must have exactly one dateOfBirth value of type xsd:dateTime, exactly one gender value of type GenderType, and exactly one educationLevel value of type rdfs:Literal. Additionally, each record must specify exactly one size (as a rdfs:Literal), and may optionally include laterality, restricted to values defined by LateralityType. These axioms ensure that every record is complete with respect to core demographic attributes while maintaining precise data types and cardinality for each property.",
                "CQ": [
                    {
                        "axiom": "DemographicCharacteristicsRecord propertyRestrictions [dateOfBirth only xsd:dateTime]",
                        "CQ": [
                            "Are all dateOfBirth values associated with DemographicCharacteristicsRecord instances required to be of type xsd:dateTime?",
                            "Is it allowed for a DemographicCharacteristicsRecord to record a dateOfBirth using a datatype other than xsd:dateTime?",
                            "Must every dateOfBirth property in DemographicCharacteristicsRecord reference exclusively xsd:dateTime values?"
                        ]
                    },
                    {
                        "axiom": "DemographicCharacteristicsRecord propertyRestrictions [gender only GenderType]",
                        "CQ": [
                            "Is it required that DemographicCharacteristicsRecord instances have the 'gender' property only classified by types from GenderType?",
                            "Can a DemographicCharacteristicsRecord contain any 'gender' values other than those defined in GenderType?",
                            "Does the ontology exclude any non-GenderType classifications for the 'gender' property in DemographicCharacteristicsRecord?"
                        ]
                    },
                    {
                        "axiom": "DemographicCharacteristicsRecord propertyRestrictions [laterality only LateralityType]",
                        "CQ": [
                            "Is every instance of DemographicCharacteristicsRecord required to have the 'laterality' property assigned exclusively to values of type LateralityType?",
                            "Can a DemographicCharacteristicsRecord have any 'laterality' property value that is not classified as LateralityType?",
                            "Does the ontology limit the range of the 'laterality' property in DemographicCharacteristicsRecord strictly to LateralityType?"
                        ]
                    },
                    {
                        "axiom": "DemographicCharacteristicsRecord propertyRestrictions [size exactly 1]",
                        "CQ": [
                            "Is it required that a DemographicCharacteristicsRecord has exactly one propertyRestrictions relation?",
                            "Can a DemographicCharacteristicsRecord have more or fewer than one propertyRestrictions associated with it?",
                            "Does the ontology prevent DemographicCharacteristicsRecord from being linked to multiple propertyRestrictions?"
                        ]
                    },
                    {
                        "axiom": "DemographicCharacteristicsRecord propertyRestrictions [educationLevel only rdfs:Literal]",
                        "CQ": [
                            "Is every value of the educationLevel property in a DemographicCharacteristicsRecord necessarily a literal?",
                            "Can a DemographicCharacteristicsRecord have its educationLevel property assigned to anything other than an rdfs:Literal?",
                            "Are all educationLevel property values for DemographicCharacteristicsRecord instances exclusively of type rdfs:Literal?"
                        ]
                    },
                    {
                        "axiom": "DemographicCharacteristicsRecord propertyRestrictions [educationLevel exactly 1]",
                        "CQ": [
                            "Must each DemographicCharacteristicsRecord specify exactly one education level?",
                            "Is it possible for a DemographicCharacteristicsRecord to have more than one associated education level?",
                            "Can a DemographicCharacteristicsRecord exist without any specified education level?"
                        ]
                    },
                    {
                        "axiom": "DemographicCharacteristicsRecord propertyRestrictions [gender exactly 1 GenderType]",
                        "CQ": [
                            "Is every DemographicCharacteristicsRecord required to have exactly one value for the 'gender' property?",
                            "Can a DemographicCharacteristicsRecord contain more than one associated gender value?",
                            "Must the 'gender' property of a DemographicCharacteristicsRecord always be specified with a single GenderType?"
                        ]
                    },
                    {
                        "axiom": "DemographicCharacteristicsRecord propertyRestrictions [size only rdfs:Literal]",
                        "CQ": [
                            "Are all values of the 'size' property in a DemographicCharacteristicsRecord restricted to rdfs:Literal types?",
                            "Is it allowed for a DemographicCharacteristicsRecord to have a 'size' property with a type other than rdfs:Literal?",
                            "Does every 'size' property for DemographicCharacteristicsRecord necessarily correspond to an rdfs:Literal?"
                        ]
                    },
                    {
                        "axiom": "DemographicCharacteristicsRecord propertyRestrictions [dateOfBirth exactly 1 xsd:dateTime]",
                        "CQ": [
                            "Must a DemographicCharacteristicsRecord always include exactly one dateOfBirth value?",
                            "Is it valid for a DemographicCharacteristicsRecord to have more than one dateOfBirth associated?",
                            "Can a DemographicCharacteristicsRecord exist without specifying the dateOfBirth property?"
                        ]
                    }
                ]
            },
            "ExperimentalAssessment": {
                "axiom": {
                    "propertyRestrictions": [
                        "[hasScore only rdfs:Literal]",
                        "[hasScore exactly 1]"
                    ]
                },
                "description": "ExperimentalAssessment is a class characterized by the restriction that each of its instances must have exactly one value for the property hasScore, and this value must be an rdfs:Literal. This formalization enforces that every ExperimentalAssessment is associated with a single, literal score value, supporting precise and unambiguous assessment results.",
                "CQ": [
                    {
                        "axiom": "ExperimentalAssessment propertyRestrictions [hasScore only rdfs:Literal]",
                        "CQ": [
                            "Is it true that an ExperimentalAssessment can only have 'hasScore' values that are rdfs:Literal?",
                            "Does the 'hasScore' property of ExperimentalAssessment restrict its values exclusively to instances of rdfs:Literal?",
                            "Can an ExperimentalAssessment ever have a 'hasScore' that is not an rdfs:Literal?"
                        ]
                    },
                    {
                        "axiom": "ExperimentalAssessment propertyRestrictions [hasScore exactly 1]",
                        "CQ": [
                            "Is every ExperimentalAssessment required to have exactly one hasScore property assigned?",
                            "Can an ExperimentalAssessment possess more than one or fewer than one value for the hasScore property?",
                            "Does the ontology restrict ExperimentalAssessment instances to a single value for the hasScore property and not allow zero or multiple values?"
                        ]
                    }
                ]
            },
            "ExperimentalRecord": {
                "axiom": {
                    "propertyRestrictions": [
                        "[containsAssessment exactly 1 ExperimentalDiagnosisAssessment]",
                        "[containsAssessment exactly 1 CognitiveLoadAssessment]",
                        "[containsAssessment only (AbilityToOrganiseAssessment or ApathyAssessment or CognitiveLoadAssessment or ExperimentalDiagnosisAssessment or FunctionalAbilityAssessment or GaitAssessment or MemorySelfAppraisalAssessment or StressAssessment)]",
                        "[containsAssessment exactly 1 AbilityToOrganiseAssessment]",
                        "[containsAssessment exactly 1 FunctionalAbilityAssessment]",
                        "[containsAssessment exactly 1 MemorySelfAppraisalAssessment]",
                        "[containsAssessment exactly 1 GaitAssessment]",
                        "[containsAssessment exactly 1 ApathyAssessment]",
                        "[containsAssessment exactly 1 StressAssessment]"
                    ]
                },
                "description": "ExperimentalRecord represents a record comprised of exactly one assessment of each of the following types: ExperimentalDiagnosisAssessment, CognitiveLoadAssessment, AbilityToOrganiseAssessment, FunctionalAbilityAssessment, MemorySelfAppraisalAssessment, GaitAssessment, ApathyAssessment, and StressAssessment. The class restricts its containsAssessment property so that only these eight specific assessment types are included—no additional or alternative types are permitted. Each ExperimentalRecord must contain exactly one instance of each assessment type, ensuring comprehensive and standardized coverage within each record.",
                "CQ": [
                    {
                        "axiom": "ExperimentalRecord propertyRestrictions [containsAssessment exactly 1 ExperimentalDiagnosisAssessment]",
                        "CQ": [
                            "Must every ExperimentalRecord contain exactly one ExperimentalDiagnosisAssessment as its assessment?",
                            "Can an ExperimentalRecord have more or fewer than one containsAssessment relationship to ExperimentalDiagnosisAssessment?",
                            "Is it required that the containsAssessment property of ExperimentalRecord is limited to a single ExperimentalDiagnosisAssessment instance?"
                        ]
                    },
                    {
                        "axiom": "ExperimentalRecord propertyRestrictions [containsAssessment exactly 1 CognitiveLoadAssessment]",
                        "CQ": [
                            "Is it required that an ExperimentalRecord contains exactly one CognitiveLoadAssessment as an assessment?",
                            "Can an ExperimentalRecord have either no CognitiveLoadAssessment or more than one CognitiveLoadAssessment through the containsAssessment property?",
                            "Does the definition of ExperimentalRecord enforce that the containsAssessment property is limited to a single CognitiveLoadAssessment instance?"
                        ]
                    },
                    {
                        "axiom": "ExperimentalRecord propertyRestrictions [containsAssessment only (AbilityToOrganiseAssessment or ApathyAssessment or CognitiveLoadAssessment or ExperimentalDiagnosisAssessment or FunctionalAbilityAssessment or GaitAssessment or MemorySelfAppraisalAssessment or StressAssessment)]",
                        "CQ": [
                            "Is every assessment contained in an ExperimentalRecord restricted to AbilityToOrganiseAssessment, ApathyAssessment, CognitiveLoadAssessment, ExperimentalDiagnosisAssessment, FunctionalAbilityAssessment, GaitAssessment, MemorySelfAppraisalAssessment, or StressAssessment?",
                            "Can an ExperimentalRecord include any assessment type outside the specified set of eight assessment categories?",
                            "Does an ExperimentalRecord necessarily exclude all assessments other than the listed types under containsAssessment?"
                        ]
                    },
                    {
                        "axiom": "ExperimentalRecord propertyRestrictions [containsAssessment exactly 1 AbilityToOrganiseAssessment]",
                        "CQ": [
                            "Is every ExperimentalRecord required to include exactly one containsAssessment that is an AbilityToOrganiseAssessment?",
                            "Can an ExperimentalRecord be valid if it has more or fewer than one containsAssessment of type AbilityToOrganiseAssessment?",
                            "Does the specification prevent an ExperimentalRecord from having multiple or no containsAssessment relationships with AbilityToOrganiseAssessment?"
                        ]
                    },
                    {
                        "axiom": "ExperimentalRecord propertyRestrictions [containsAssessment exactly 1 FunctionalAbilityAssessment]",
                        "CQ": [
                            "Is every ExperimentalRecord required to contain exactly one FunctionalAbilityAssessment as an assessment?",
                            "Can an ExperimentalRecord include more than one FunctionalAbilityAssessment?",
                            "Is it possible for an ExperimentalRecord to be valid without containing a FunctionalAbilityAssessment?"
                        ]
                    },
                    {
                        "axiom": "ExperimentalRecord propertyRestrictions [containsAssessment exactly 1 MemorySelfAppraisalAssessment]",
                        "CQ": [
                            "Is every ExperimentalRecord required to contain exactly one MemorySelfAppraisalAssessment as an assessment?",
                            "Can an ExperimentalRecord have more than one or no MemorySelfAppraisalAssessment in its assessment content?",
                            "Are there any circumstances in which an ExperimentalRecord contains a different number of MemorySelfAppraisalAssessment assessments than one?"
                        ]
                    },
                    {
                        "axiom": "ExperimentalRecord propertyRestrictions [containsAssessment exactly 1 GaitAssessment]",
                        "CQ": [
                            "Is every ExperimentalRecord required to contain exactly one GaitAssessment as its assessment component?",
                            "Can an ExperimentalRecord have more than one GaitAssessment associated through the containsAssessment property?",
                            "Does the presence of exactly one GaitAssessment via containsAssessment fully satisfy the property restriction for ExperimentalRecord?"
                        ]
                    },
                    {
                        "axiom": "ExperimentalRecord propertyRestrictions [containsAssessment exactly 1 ApathyAssessment]",
                        "CQ": [
                            "Is every ExperimentalRecord required to include exactly one ApathyAssessment as its containsAssessment?",
                            "Can an ExperimentalRecord have more than one or none containsAssessment relations with ApathyAssessment?",
                            "Does the property restriction on ExperimentalRecord exclude the possibility of containsAssessment linking to assessments other than one ApathyAssessment?"
                        ]
                    },
                    {
                        "axiom": "ExperimentalRecord propertyRestrictions [containsAssessment exactly 1 StressAssessment]",
                        "CQ": [
                            "Is every ExperimentalRecord required to contain exactly one StressAssessment as its assessment?",
                            "Can an ExperimentalRecord contain more than one StressAssessment in its assessments?",
                            "If an ExperimentalRecord does not have any StressAssessment, can it still satisfy the property restrictions?"
                        ]
                    }
                ]
            },
            "Protocol": {
                "axiom": {
                    "propertyRestrictions": [
                        "[protocolStep some ProtocolStep]",
                        "[protocolStep only ProtocolStep]",
                        "[date exactly 1 xsd:dateTime]",
                        "[hasParticipant exactly 1 Person]",
                        "[hasParticipant only Person]",
                        "[date only xsd:dateTime]"
                    ]
                },
                "description": "Protocol is a class that represents a structured set of actions or procedures, characterized by a well-defined workflow. Each instance of Protocol must have at least one protocol step and all protocol steps associated with a protocol must be instances of ProtocolStep. Additionally, every protocol is required to specify exactly one date, which must be an instance of xsd:dateTime, and exactly one participant, who must be an instance of Person. The axioms ensure strict adherence to these requirements, supporting precise modeling of procedural activities involving a single documented participant, a single date, and one or more procedural steps.",
                "CQ": [
                    {
                        "axiom": "Protocol propertyRestrictions [protocolStep some ProtocolStep]",
                        "CQ": [
                            "Does every Protocol necessarily include at least one protocolStep that is an instance of ProtocolStep?",
                            "Is it a requirement for a Protocol to possess the property protocolStep relating to some ProtocolStep?",
                            "Can a Protocol exist without involving any protocolStep of type ProtocolStep?"
                        ]
                    },
                    {
                        "axiom": "Protocol propertyRestrictions [protocolStep only ProtocolStep]",
                        "CQ": [
                            "Is it required that a protocol has only protocolStep properties relating to instances of ProtocolStep?",
                            "Can a protocol possess any protocolStep value not belonging to the class ProtocolStep?",
                            "Does the protocolStep property of a protocol necessarily reference exclusively elements categorized as ProtocolStep?"
                        ]
                    },
                    {
                        "axiom": "Protocol propertyRestrictions [date exactly 1 xsd:dateTime]",
                        "CQ": [
                            "Is it required that every Protocol instance is associated with exactly one value for the property 'date'?",
                            "Can a Protocol possess more than one date property at any time?",
                            "Would a Protocol instance lacking a value for the 'date' property violate the restriction?"
                        ]
                    },
                    {
                        "axiom": "Protocol propertyRestrictions [hasParticipant exactly 1 Person]",
                        "CQ": [
                            "Is every instance of Protocol required to have exactly one Person as a participant?",
                            "Can a Protocol ever involve more or fewer than one Person as its participant?",
                            "Does the participation in a Protocol necessarily exclude the possibility of having no Person or multiple Persons involved?"
                        ]
                    },
                    {
                        "axiom": "Protocol propertyRestrictions [hasParticipant only Person]",
                        "CQ": [
                            "Is every participant in a Protocol required to be a Person?",
                            "Does the Protocol class restrict its 'hasParticipant' property exclusively to individuals of type Person?",
                            "Can a Protocol involve any participant that is not classified as a Person?"
                        ]
                    },
                    {
                        "axiom": "Protocol propertyRestrictions [date only xsd:dateTime]",
                        "CQ": [
                            "Is the date property of a Protocol instance restricted exclusively to values of type xsd:dateTime?",
                            "Can a Protocol have the date property with any value that is not an xsd:dateTime?",
                            "Are all instances of Protocol required to use only xsd:dateTime typed values for their date property?"
                        ]
                    }
                ]
            },
            "ProtocolStep": {
                "axiom": {
                    "propertyRestrictions": [
                        "[involvesTask some Task]",
                        "[endTime only time:Instant]",
                        "[startTime exactly 1 time:Instant]",
                        "[startTime only time:Instant]",
                        "[endTime exactly 1 time:Instant]",
                        "[involvesTask only Task]"
                    ]
                },
                "description": "ProtocolStep represents a process component that is associated with exactly one start time and exactly one end time, both of which must be of type time:Instant. Each ProtocolStep must involve at least one Task, and may involve only entities that are instances of Task. The class’s axioms enforce precise temporal boundaries and ensure strict task involvement, supporting detailed modeling of procedural workflows.",
                "CQ": [
                    {
                        "axiom": "ProtocolStep propertyRestrictions [involvesTask some Task]",
                        "CQ": [
                            "Is it required that every ProtocolStep involves at least one Task?",
                            "Can a ProtocolStep exist without being associated with any Task through the involvesTask property?",
                            "Does the presence of a Task fulfill the condition for a ProtocolStep to satisfy its involvesTask property restriction?"
                        ]
                    },
                    {
                        "axiom": "ProtocolStep propertyRestrictions [endTime only time:Instant]",
                        "CQ": [
                            "Is every endTime value associated with a ProtocolStep required to be an instance of time:Instant?",
                            "Can a ProtocolStep have an endTime property pointing to anything other than a time:Instant?",
                            "Does ProtocolStep restrict all usages of endTime exclusively to the time:Instant class?"
                        ]
                    },
                    {
                        "axiom": "ProtocolStep propertyRestrictions [startTime exactly 1 time:Instant]",
                        "CQ": [
                            "Is each ProtocolStep required to have exactly one startTime specified as a time:Instant?",
                            "Does the ontology restrict a ProtocolStep from having multiple or zero startTime values of type time:Instant?",
                            "Can a ProtocolStep have more than one or less than one startTime associated with it?"
                        ]
                    },
                    {
                        "axiom": "ProtocolStep propertyRestrictions [startTime only time:Instant]",
                        "CQ": [
                            "Is every startTime associated with a ProtocolStep necessarily restricted to being an instance of time:Instant?",
                            "Can a ProtocolStep have a startTime that is not of type time:Instant?",
                            "Does the property startTime, when used with ProtocolStep, exclude any value other than time:Instant?"
                        ]
                    },
                    {
                        "axiom": "ProtocolStep propertyRestrictions [endTime exactly 1 time:Instant]",
                        "CQ": [
                            "Is each ProtocolStep required to have exactly one value for endTime?",
                            "Can a ProtocolStep have more than one endTime assigned to it?",
                            "Does the definition of ProtocolStep allow for having no endTime specified?"
                        ]
                    },
                    {
                        "axiom": "ProtocolStep propertyRestrictions [involvesTask only Task]",
                        "CQ": [
                            "Is ProtocolStep required to involve only instances of Task when fulfilling its involvesTask property?",
                            "Does the involvesTask relationship for any ProtocolStep exclude entities other than those classified as Task?",
                            "Can a ProtocolStep have an involvesTask property pointing to anything other than a Task?"
                        ]
                    }
                ]
            },
            "Task": {
                "axiom": {
                    "propertyRestrictions": [
                        "[startTime exactly 1 time:Instant]",
                        "[measuredData some StressData]",
                        "[startTime only time:Instant]",
                        "[endTime exactly 1 time:Instant]",
                        "[endTime only time:Instant]",
                        "[measuredData only StressData]"
                    ]
                },
                "description": "Task is defined as a class whose members are associated with exactly one start time and exactly one end time, each of which must be an instance of time:Instant. Additionally, every Task must have some measuredData, and all such measuredData must be of type StressData. These property restrictions ensure that every Task is temporally bounded and is characterized by stress-related measurements.",
                "CQ": [
                    {
                        "axiom": "Task propertyRestrictions [startTime exactly 1 time:Instant]",
                        "CQ": [
                            "Is every Task required to have exactly one startTime that is an instance of time:Instant?",
                            "Can a Task possess multiple startTime values associated with time:Instant, or is it limited to just one?",
                            "Does the ontology restrict each Task to a single occurrence of the startTime property with time:Instant as its value?"
                        ]
                    },
                    {
                        "axiom": "Task propertyRestrictions [measuredData some StressData]",
                        "CQ": [
                            "Is it required that every Task has at least one measuredData relationship to StressData?",
                            "Does the presence of measuredData linking to StressData define a Task instance?",
                            "Can a Task exist in the ontology without being associated through measuredData to StressData?"
                        ]
                    },
                    {
                        "axiom": "Task propertyRestrictions [startTime only time:Instant]",
                        "CQ": [
                            "Is every startTime associated with a Task necessarily an instance of time:Instant?",
                            "Can a Task have a startTime that is not categorized as time:Instant?",
                            "Are all values for the startTime property of Task limited exclusively to the type time:Instant?"
                        ]
                    },
                    {
                        "axiom": "Task propertyRestrictions [endTime exactly 1 time:Instant]",
                        "CQ": [
                            "Is every Task required to have exactly one endTime specified as a time:Instant?",
                            "Can a Task have more than one endTime assigned?",
                            "Is it permissible for a Task to not have any endTime at all?"
                        ]
                    },
                    {
                        "axiom": "Task propertyRestrictions [endTime only time:Instant]",
                        "CQ": [
                            "Is it required that every endTime associated with a Task is an instance of time:Instant?",
                            "Does the Task entity permit only time:Instant values for its endTime property?",
                            "Is the endTime of a Task restricted to be solely of type time:Instant without exceptions?"
                        ]
                    },
                    {
                        "axiom": "Task propertyRestrictions [measuredData only StressData]",
                        "CQ": [
                            "Is it necessary for every measuredData of a Task to be of type StressData?",
                            "Can a Task have measuredData that is not classified as StressData?",
                            "Does the property measuredData for Task restrict data types strictly to StressData and no other types?"
                        ]
                    }
                ]
            }
        },
        "properties": {
            "verbalReactionSpontaneity": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"verbalReactionSpontaneity\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. No current textual description is provided. Its use should be interpreted in context, as there are no formal restrictions or relations specified in its axioms.",
                "CQ": [
                    {
                        "axiom": "verbalReactionSpontaneity domain None",
                        "CQ": [
                            "What can be the domain of the property 'verbalReactionSpontaneity'?",
                            "Is it correct that 'verbalReactionSpontaneity' does not have a defined domain?",
                            "Can 'verbalReactionSpontaneity' relate to subjects of any type, given its domain is unspecified?"
                        ]
                    },
                    {
                        "axiom": "verbalReactionSpontaneity range None",
                        "CQ": [
                            "Can 'verbalReactionSpontaneity' be associated with any type of value as its range?",
                            "Is it correct that the property 'verbalReactionSpontaneity' does not have a specified range?",
                            "What types of entities can be the range for the property 'verbalReactionSpontaneity'?"
                        ]
                    }
                ]
            },
            "containedInContext": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"containedInContext\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. It is a generic property with no specified constraints, indicating its use and applicability are context-dependent and unconstrained by the current ontology axioms.",
                "CQ": [
                    {
                        "axiom": "containedInContext domain None",
                        "CQ": [
                            "What types of entities can be the domain of the property 'containedInContext'?",
                            "Is it correct that 'containedInContext' has no specified domain?",
                            "Are there any classes that should not be used as subjects for the 'containedInContext' property?"
                        ]
                    },
                    {
                        "axiom": "containedInContext range None",
                        "CQ": [
                            "Is it valid for the 'containedInContext' property to have no specified range?",
                            "What types of entities can serve as the range for the property 'containedInContext'?",
                            "Are there any restrictions on what can act as the range for 'containedInContext'?"
                        ]
                    }
                ]
            },
            "status": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"status\" has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. This suggests flexibility in its use, allowing it to relate any types of entities without restriction.",
                "CQ": [
                    {
                        "axiom": "status domain None",
                        "CQ": [
                            "Is there a defined domain for the property 'status', or can it link to any type of entity?",
                            "What types of resources can be subjects of the 'status' property?",
                            "Is it appropriate for the 'status' property to have no specified domain?"
                        ]
                    },
                    {
                        "axiom": "status range None",
                        "CQ": [
                            "Is it correct that the property 'status' does not have a specified range?",
                            "What entities can appear as the range for the property 'status'?",
                            "Can 'status' be assigned a particular type as its range?"
                        ]
                    }
                ]
            },
            "areasOfNoInterestExplored": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "rdfs:Literal"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"areasOfNoInterestExplored\" has no explicitly defined characteristics, domain restrictions, or super-properties. Its range is specified as rdfs:Literal, meaning it relates subjects to literal values such as strings or numbers. No inverse property is specified. This property is intended to capture information about areas that have been explored but are considered of no interest.",
                "CQ": [
                    {
                        "axiom": "areasOfNoInterestExplored domain None",
                        "CQ": [
                            "What types of entities can act as the subject of the property 'areasOfNoInterestExplored'?",
                            "Is it appropriate that the property 'areasOfNoInterestExplored' has no explicitly defined domain?",
                            "Can entities other than a defined class be subjects of the property 'areasOfNoInterestExplored'?"
                        ]
                    },
                    {
                        "axiom": "areasOfNoInterestExplored range rdfs:Literal",
                        "CQ": [
                            "Can the property 'areasOfNoInterestExplored' have a range other than rdfs:Literal?",
                            "Is every value associated with 'areasOfNoInterestExplored' necessarily an rdfs:Literal?",
                            "What types of entities can be used as the value for the property 'areasOfNoInterestExplored'?"
                        ]
                    }
                ]
            },
            "participates": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "owl:topObjectProperty"
                    ],
                    "inverseOf": [
                        "hasParticipant"
                    ]
                },
                "description": "The property \"participates\" has no explicit domain or range restrictions and is a sub-property of \"owl:topObjectProperty.\" It does not have any characteristics such as functionality or symmetry. The property is the inverse of \"hasParticipant,\" meaning if an entity participates in something, that thing has the entity as a participant.",
                "CQ": [
                    {
                        "axiom": "participates domain None",
                        "CQ": [
                            "What kinds of entities can participate as the subject of the 'participates' property?",
                            "Is it correct that the property 'participates' does not have a specified domain?",
                            "Can the domain of the property 'participates' be something other than unspecified?"
                        ]
                    },
                    {
                        "axiom": "participates range None",
                        "CQ": [
                            "What entities can appear as the range of the 'participates' property?",
                            "Is it correct that the property 'participates' does not have a defined range?",
                            "Can the 'participates' property be used with objects of any type as its range?"
                        ]
                    },
                    {
                        "axiom": "participates subPropertyOf owl:topObjectProperty",
                        "CQ": [
                            "Is every occurrence of participates also an occurrence of owl:topObjectProperty?",
                            "What are the superproperties of participates?",
                            "Which properties are considered subproperties of owl:topObjectProperty within the ontology?"
                        ]
                    },
                    {
                        "axiom": "participates inverseOf hasParticipant",
                        "CQ": [
                            "How are the properties 'participates' and 'hasParticipant' related within the ontology?",
                            "If individual X participates in event Y, does it follow that Y has participant X?",
                            "Which property in the ontology is specified as the inverse of 'participates'?"
                        ]
                    }
                ]
            },
            "measuredData": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"measuredData\" has no specified domain, range, characteristics, super-properties, or inverse properties. It can be used to relate any two entities without restriction, as no additional constraints or descriptive information are provided.",
                "CQ": [
                    {
                        "axiom": "measuredData domain None",
                        "CQ": [
                            "What kinds of entities can be the domain of the 'measuredData' property?",
                            "Is it correct that the property 'measuredData' has no specified domain?",
                            "Are there any restrictions on what can be the subject of 'measuredData'?"
                        ]
                    },
                    {
                        "axiom": "measuredData range None",
                        "CQ": [
                            "Can the property 'measuredData' have a range other than the currently unspecified value?",
                            "What can be the range of the property 'measuredData'?",
                            "Is it correct that the property 'measuredData' does not have a defined range?"
                        ]
                    }
                ]
            },
            "containsAssessment": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"containsAssessment\" has no specified characteristics, domain, range, super-properties, or inverse properties. It is likely intended to associate an entity with an assessment, but its usage is not formally restricted by axioms. Additional details or constraints may be needed to clarify its precise application within the ontology.",
                "CQ": [
                    {
                        "axiom": "containsAssessment domain None",
                        "CQ": [
                            "What kinds of entities can be subjects of the property 'containsAssessment'?",
                            "Is it accurate that 'containsAssessment' does not specify a domain?",
                            "Can 'containsAssessment' be linked from any type of resource, or should a domain be defined?"
                        ]
                    },
                    {
                        "axiom": "containsAssessment range None",
                        "CQ": [
                            "Is it correct that the property 'containsAssessment' does not have a specified range?",
                            "What types of values are permitted as the object when using the 'containsAssessment' property?",
                            "Can the range of the 'containsAssessment' property be explicitly defined or restricted?"
                        ]
                    }
                ]
            },
            "hasDiagnosis": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"hasDiagnosis\" has no explicitly defined characteristics, no specified domain or range restrictions, and is not declared as a sub-property of any other property. No inverse property is specified. This suggests that \"hasDiagnosis\" serves as a general relation, potentially linking individuals to their diagnoses without further formal constraints.",
                "CQ": [
                    {
                        "axiom": "hasDiagnosis domain None",
                        "CQ": [
                            "What are the possible domains of the property 'hasDiagnosis'?",
                            "Is it correct that 'hasDiagnosis' does not have a specified domain?",
                            "Can entities outside any domain be linked using the property 'hasDiagnosis'?"
                        ]
                    },
                    {
                        "axiom": "hasDiagnosis range None",
                        "CQ": [
                            "What kinds of entities can serve as the range for the property 'hasDiagnosis'?",
                            "Is it correct that the property 'hasDiagnosis' does not have a specified range?",
                            "Can the property 'hasDiagnosis' be associated with any value regardless of type as its range?"
                        ]
                    }
                ]
            },
            "hasScore": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"hasScore\" has no defined domain, range, characteristics, super-properties, or inverse properties. Based on its name, it is likely used to associate an entity with a numerical or evaluative score, but no formal restrictions or relationships are specified in the current axioms.",
                "CQ": [
                    {
                        "axiom": "hasScore domain None",
                        "CQ": [
                            "Is it correct that the property 'hasScore' does not have a specified domain?",
                            "What types of entities can be subjects of the 'hasScore' property?",
                            "Can 'hasScore' be used with any entity as its subject, or are there implicit constraints?"
                        ]
                    },
                    {
                        "axiom": "hasScore range None",
                        "CQ": [
                            "Is it correct that the property 'hasScore' does not specify a range?",
                            "What types of values can be used as the range of the property 'hasScore'?",
                            "Can 'hasScore' be associated with entities of any type as its range?"
                        ]
                    }
                ]
            },
            "dateOfBirth": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"dateOfBirth\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. Typically, it is intended to link an entity to its date of birth, although no formal constraints or relationships are currently specified in the ontology.",
                "CQ": [
                    {
                        "axiom": "dateOfBirth domain None",
                        "CQ": [
                            "What kinds of entities can have a 'dateOfBirth' property?",
                            "Is it correct that the property 'dateOfBirth' does not specify any domain?",
                            "Could anything other than a specific class serve as the subject of 'dateOfBirth'?"
                        ]
                    },
                    {
                        "axiom": "dateOfBirth range None",
                        "CQ": [
                            "What entities can appear as the value for the property 'dateOfBirth'?",
                            "Is it correct that the property 'dateOfBirth' does not have a specified range?",
                            "Can 'dateOfBirth' have a range other than those currently defined?"
                        ]
                    }
                ]
            },
            "hasMMSEScore": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"hasMMSEScore\" has no explicitly defined characteristics, domain or range restrictions, super-properties, or inverse properties. Based on its name, it is intended to associate an entity with its MMSE (Mini-Mental State Examination) score.",
                "CQ": [
                    {
                        "axiom": "hasMMSEScore domain None",
                        "CQ": [
                            "What entities can serve as the domain for the property 'hasMMSEScore'?",
                            "Is it correct that the property 'hasMMSEScore' does not have a specified domain?",
                            "Can 'hasMMSEScore' relate any type of subject, or is there a restriction on its domain?"
                        ]
                    },
                    {
                        "axiom": "hasMMSEScore range None",
                        "CQ": [
                            "Is it correct that the property 'hasMMSEScore' does not have a defined range?",
                            "What can be the possible range for the property 'hasMMSEScore'?",
                            "Can 'hasMMSEScore' link to any type of entity, given that its range is unspecified?"
                        ]
                    }
                ]
            },
            "repetitions": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"repetitions\" has no explicitly defined characteristics, domain, or range restrictions. It does not specify any super-properties or inverse properties. Based on the current axioms, \"repetitions\" can relate any two entities without additional constraints or semantic specifications.",
                "CQ": [
                    {
                        "axiom": "repetitions domain None",
                        "CQ": [
                            "What can be the domain of the property 'repetitions'?",
                            "Is it correct that 'repetitions' does not have a defined domain?",
                            "Are there any entity types that could serve as the subject for the 'repetitions' property?"
                        ]
                    },
                    {
                        "axiom": "repetitions range None",
                        "CQ": [
                            "What types of values can serve as the range for the property 'repetitions'?",
                            "Is it correct that the property 'repetitions' has no specified range?",
                            "Can entities other than those currently defined be used as the range for 'repetitions'?"
                        ]
                    }
                ]
            },
            "iadl_e": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"iadl_e\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. No additional description is provided, and the property is not currently constrained by any axioms, indicating it is unspecified in its current form.",
                "CQ": [
                    {
                        "axiom": "iadl_e domain None",
                        "CQ": [
                            "Is it correct that the property 'iadl_e' has no specified domain?",
                            "What types of entities may serve as the domain for the property 'iadl_e'?",
                            "Can the domain of 'iadl_e' include any class, or is it intended to be limited?"
                        ]
                    },
                    {
                        "axiom": "iadl_e range None",
                        "CQ": [
                            "What classes or entities can serve as the range of the property 'iadl_e'?",
                            "Is it correct that the property 'iadl_e' has no specified range?",
                            "Can 'iadl_e' be associated with any type of value as its range?"
                        ]
                    }
                ]
            },
            "size": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"size\" currently lacks explicit characteristics, domain, or range restrictions, and is not defined as a sub-property or inverse of any other property. This indicates that \"size\" is a general-purpose property intended to relate entities to their size attributes, but its specific usage and constraints are not currently specified.",
                "CQ": [
                    {
                        "axiom": "size domain None",
                        "CQ": [
                            "What can be the domain of the property 'size'?",
                            "Is it correct that the property 'size' does not have a specified domain?",
                            "Are there any entities that are not allowed to be the subject of the property 'size'?"
                        ]
                    },
                    {
                        "axiom": "size range None",
                        "CQ": [
                            "What types of entities can appear as the value of the 'size' property?",
                            "Is it correct that the 'size' property does not have a specified range?",
                            "Are there any restrictions on what can be used as the range of the 'size' property?"
                        ]
                    }
                ]
            },
            "protocolStep": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"protocolStep\" does not have any explicitly defined characteristics, domain, or range restrictions. It is not specified as a sub-property of another property and has no declared inverse property. Its intended usage and semantics should be inferred from its name or surrounding context.",
                "CQ": [
                    {
                        "axiom": "protocolStep domain None",
                        "CQ": [
                            "Is it permissible for 'protocolStep' to have no specified domain?",
                            "What types of entities could serve as the domain for the property 'protocolStep'?",
                            "Can 'protocolStep' be associated with subjects from any class, given its undefined domain?"
                        ]
                    },
                    {
                        "axiom": "protocolStep range None",
                        "CQ": [
                            "What types of entities can appear as the range of the property 'protocolStep'?",
                            "Is it accurate that the property 'protocolStep' does not have a range defined?",
                            "Can the property 'protocolStep' be associated with any object, given that it has no specified range?"
                        ]
                    }
                ]
            },
            "compliantInstructionsOrder": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "xsd:boolean"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"compliantInstructionsOrder\" has no explicitly defined characteristics, domain, or super-properties. Its range is restricted to boolean values (xsd:boolean), indicating it is used to assert whether a particular condition of instruction order compliance holds true or false. No inverse property is specified.",
                "CQ": [
                    {
                        "axiom": "compliantInstructionsOrder domain None",
                        "CQ": [
                            "What entities can serve as the domain for the property 'compliantInstructionsOrder'?",
                            "Is it correct that 'compliantInstructionsOrder' has no specified domain?",
                            "Can 'compliantInstructionsOrder' be associated with subjects other than those explicitly defined?"
                        ]
                    },
                    {
                        "axiom": "compliantInstructionsOrder range xsd:boolean",
                        "CQ": [
                            "Is every value used with the property 'compliantInstructionsOrder' required to be a boolean?",
                            "Could 'compliantInstructionsOrder' ever have a value that is not of type xsd:boolean?",
                            "What types of entities are permitted as the range for 'compliantInstructionsOrder'?"
                        ]
                    }
                ]
            },
            "countingType": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"countingType\" has no explicitly defined characteristics, domain, or range restrictions. It does not have any specified super-properties or inverse properties. Its intended purpose must be inferred from its name, as no additional description or axioms are provided.",
                "CQ": [
                    {
                        "axiom": "countingType domain None",
                        "CQ": [
                            "What entities can serve as the domain for the property 'countingType'?",
                            "Is it appropriate for the property 'countingType' to have no defined domain?",
                            "Can 'countingType' be used with subjects of any type, or is its domain implicitly constrained?"
                        ]
                    },
                    {
                        "axiom": "countingType range None",
                        "CQ": [
                            "Is it correct that the property 'countingType' does not have a defined range?",
                            "What possible types of values can be used as the range for the property 'countingType'?",
                            "Can 'countingType' relate a subject to any type of entity given its unspecified range?"
                        ]
                    }
                ]
            },
            "taskDuration": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"taskDuration\" has no specified characteristics, domain, or range restrictions. It does not have defined super-properties or an inverse property. Its intended use should be inferred from its name, which suggests it relates to the duration associated with a task, but no explicit constraints are imposed by the current axioms.",
                "CQ": [
                    {
                        "axiom": "taskDuration domain None",
                        "CQ": [
                            "What entities can be the subject (domain) of the property 'taskDuration'?",
                            "Is it correct that the property 'taskDuration' does not have any specified domain?",
                            "Can 'taskDuration' be used with any type of subject, or should its domain be specifically defined?"
                        ]
                    },
                    {
                        "axiom": "taskDuration range None",
                        "CQ": [
                            "Is it correct that the property 'taskDuration' does not have a specified range?",
                            "What kinds of values could be valid as the range for the property 'taskDuration'?",
                            "Can 'taskDuration' relate to entities of any type, given its lack of a defined range?"
                        ]
                    }
                ]
            },
            "hasParticipant": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"hasParticipant\" has no specified domain, range, characteristics, super-properties, or inverse properties. This property can be used in a general manner to relate an entity to its participant(s) without restriction on the types of subjects or objects involved.",
                "CQ": [
                    {
                        "axiom": "hasParticipant domain None",
                        "CQ": [
                            "What types of entities are permitted as the domain of the property 'hasParticipant'?",
                            "Is it accurate that the property 'hasParticipant' does not restrict its domain?",
                            "Are there any entities that should not serve as the subject for the property 'hasParticipant'?"
                        ]
                    },
                    {
                        "axiom": "hasParticipant range None",
                        "CQ": [
                            "Is it correct that the property 'hasParticipant' does not have a defined range?",
                            "What types of entities can serve as the range for 'hasParticipant'?",
                            "Can anything be the value of the 'hasParticipant' property, or is there an implicit restriction?"
                        ]
                    }
                ]
            },
            "distanceWalked": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"distanceWalked\" has no explicitly defined characteristics, domain, or range restrictions. It does not inherit from any super-properties and has no specified inverse property. Its usage and semantics should be defined by the context or by further specification in the ontology.",
                "CQ": [
                    {
                        "axiom": "distanceWalked domain None",
                        "CQ": [
                            "Is it correct that the property 'distanceWalked' does not have a specified domain?",
                            "What kinds of entities can use the 'distanceWalked' property as their subject?",
                            "Can entities other than a particular class be associated with the property 'distanceWalked'?"
                        ]
                    },
                    {
                        "axiom": "distanceWalked range None",
                        "CQ": [
                            "Can the property 'distanceWalked' be associated with any type of value as its object, given that it has no specified range?",
                            "What kinds of entities or values are allowed as the range for the 'distanceWalked' property?",
                            "Is it correct that the 'distanceWalked' property does not have a defined range?"
                        ]
                    }
                ]
            },
            "laterality": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"laterality\" has no explicitly specified domain, range, or characteristics, and does not inherit from any super-properties nor possess any inverse property. The purpose and usage of this property are not further detailed by its current axioms.",
                "CQ": [
                    {
                        "axiom": "laterality domain None",
                        "CQ": [
                            "What types of entities can serve as the domain for the property 'laterality'?",
                            "Is it correct that the property 'laterality' has no specified domain?",
                            "Are there any entities for which 'laterality' should not be used due to lack of an explicit domain?"
                        ]
                    },
                    {
                        "axiom": "laterality range None",
                        "CQ": [
                            "What types of entities can be the range of the property 'laterality'?",
                            "Is it correct that 'laterality' has no specified range?",
                            "Can 'laterality' be used with any value as its object, or should its range be restricted?"
                        ]
                    }
                ]
            },
            "apathyInventory": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "owl:topDataProperty"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"apathyInventory\" does not have specified domain or range restrictions and has no declared characteristics. It is defined as a subproperty of \"owl:topDataProperty,\" indicating it is a data property applicable to any individual. No inverse property is specified.",
                "CQ": [
                    {
                        "axiom": "apathyInventory domain None",
                        "CQ": [
                            "What entities can serve as the domain for the property 'apathyInventory'?",
                            "Is it correct that the property 'apathyInventory' does not have a defined domain?",
                            "Can 'apathyInventory' be applied to any subject, or should its use be restricted to a specific class?"
                        ]
                    },
                    {
                        "axiom": "apathyInventory range None",
                        "CQ": [
                            "What types of entities can serve as the range for the property 'apathyInventory'?",
                            "Is 'apathyInventory' permitted to have no specified range?",
                            "Can 'apathyInventory' be associated with values or objects of any type?"
                        ]
                    },
                    {
                        "axiom": "apathyInventory subPropertyOf owl:topDataProperty",
                        "CQ": [
                            "Is apathyInventory classified as a data property within the ontology?",
                            "What superproperties does apathyInventory have according to the property hierarchy?",
                            "Which data properties are subsumed by owl:topDataProperty within the ontology?"
                        ]
                    }
                ]
            },
            "hasDualTaskScore": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "hasScore"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"hasDualTaskScore\" does not specify explicit domain or range restrictions and has no defined characteristics. It is a sub-property of \"hasScore,\" indicating that it represents a specific kind of score, likely associated with dual-task performance. No inverse property is defined.",
                "CQ": [
                    {
                        "axiom": "hasDualTaskScore domain None",
                        "CQ": [
                            "What kinds of entities can act as the subject of the 'hasDualTaskScore' property?",
                            "Is it correct that the property 'hasDualTaskScore' does not have a specified domain?",
                            "Could any type of entity be linked with the 'hasDualTaskScore' property as its subject?"
                        ]
                    },
                    {
                        "axiom": "hasDualTaskScore range None",
                        "CQ": [
                            "Is it correct that the property 'hasDualTaskScore' does not have a defined range?",
                            "Can entities of any type serve as the value for the property 'hasDualTaskScore'?",
                            "What possible types can be assigned as the range of the property 'hasDualTaskScore'?"
                        ]
                    },
                    {
                        "axiom": "hasDualTaskScore subPropertyOf hasScore",
                        "CQ": [
                            "Is every usage of the hasDualTaskScore property also classified under hasScore?",
                            "Which properties are recognized as subproperties of hasScore?",
                            "What are the superproperties of hasDualTaskScore within the ontology?"
                        ]
                    }
                ]
            },
            "shortCognitiveBatteryAssessment": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"shortCognitiveBatteryAssessment\" does not have any explicitly defined characteristics, domain, range, super-properties, or inverse properties. Based on its name, it likely represents a relation involving a brief cognitive battery assessment, but no formal constraints are specified in the ontology.",
                "CQ": [
                    {
                        "axiom": "shortCognitiveBatteryAssessment domain None",
                        "CQ": [
                            "What type of entities can be the subject of the property 'shortCognitiveBatteryAssessment'?",
                            "Is it correct that the property 'shortCognitiveBatteryAssessment' is defined without a domain?",
                            "Can 'shortCognitiveBatteryAssessment' relate to subjects outside of any specific class?"
                        ]
                    },
                    {
                        "axiom": "shortCognitiveBatteryAssessment range None",
                        "CQ": [
                            "Can the property 'shortCognitiveBatteryAssessment' be associated with any type of value as its range?",
                            "Is it accurate to state that 'shortCognitiveBatteryAssessment' does not have a specified range?",
                            "What kinds of entities are permitted as the range for the property 'shortCognitiveBatteryAssessment'?"
                        ]
                    }
                ]
            },
            "date": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"date\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. No additional descriptive information is provided, indicating that its use and relationships are unspecified in the current ontology.",
                "CQ": [
                    {
                        "axiom": "date domain None",
                        "CQ": [
                            "What types of entities can serve as the domain for the property 'date'?",
                            "Is it correct that the property 'date' has no specified domain?",
                            "Can 'date' be associated as a property with any class, or are there implicit restrictions?"
                        ]
                    },
                    {
                        "axiom": "date range None",
                        "CQ": [
                            "Is it correct that the property 'date' has no defined range?",
                            "What types of values can be assigned to the property 'date'?",
                            "Can any entity or datatype serve as a range for the property 'date'?"
                        ]
                    }
                ]
            },
            "startTime": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"startTime\" currently has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. Its intended use is likely to associate an entity with the point in time when an event or activity begins, but no formal restrictions or relationships are specified by the axioms.",
                "CQ": [
                    {
                        "axiom": "startTime domain None",
                        "CQ": [
                            "What kinds of subjects can the property 'startTime' be applied to?",
                            "Is it correct that the property 'startTime' is defined without a domain?",
                            "Can 'startTime' be used with subjects of any entity type?"
                        ]
                    },
                    {
                        "axiom": "startTime range None",
                        "CQ": [
                            "Is the property 'startTime' allowed to have a range, or must it always have no range?",
                            "What types of values, if any, can be assigned as the range of 'startTime'?",
                            "Can 'startTime' be associated with any entities as its range, or is its range intentionally unspecified?"
                        ]
                    }
                ]
            },
            "endTime": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"endTime\" has no defined domain, range, super-properties, or inverse properties, and no specific logical characteristics are assigned. This property is presumably intended to specify the endpoint or completion time of an event or process, but no ontological constraints or further documentation are currently provided.",
                "CQ": [
                    {
                        "axiom": "endTime domain None",
                        "CQ": [
                            "What classes can serve as the domain for the property 'endTime'?",
                            "Is it correct that the property 'endTime' does not have an explicitly defined domain?",
                            "Can 'endTime' be used with any type of subject, or should its domain be restricted?"
                        ]
                    },
                    {
                        "axiom": "endTime range None",
                        "CQ": [
                            "What types of values can be used as the range for 'endTime'?",
                            "Is it correct that the property 'endTime' has no specified range?",
                            "Can 'endTime' have a range assigned to it, and if so, what would it be?"
                        ]
                    }
                ]
            },
            "before": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"before\" has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. This indicates that it represents a generic relation without specific constraints on the types of entities it connects.",
                "CQ": [
                    {
                        "axiom": "before domain None",
                        "CQ": [
                            "What entities can serve as the domain for the property 'before'?",
                            "Is it correct that the property 'before' does not have a specified domain?",
                            "Are there possible restrictions on what can be the subject when using the 'before' property?"
                        ]
                    },
                    {
                        "axiom": "before range None",
                        "CQ": [
                            "Is it appropriate for the property 'before' to have no specified range?",
                            "What types of entities can serve as the range for the property 'before'?",
                            "Can the property 'before' associate with ranges outside a particular class?"
                        ]
                    }
                ]
            },
            "freeAndCuedRemindingAssessment": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"freeAndCuedRemindingAssessment\" has no explicitly defined characteristics, domain, or range restrictions, and does not specify any super-properties or inverse properties. Its intended use and meaning should be clarified by additional documentation or context, as current axioms do not constrain its usage.",
                "CQ": [
                    {
                        "axiom": "freeAndCuedRemindingAssessment domain None",
                        "CQ": [
                            "What can be the domain of the property 'freeAndCuedRemindingAssessment'?",
                            "Is it accurate that 'freeAndCuedRemindingAssessment' does not have a specified domain?",
                            "Can 'freeAndCuedRemindingAssessment' be used with any type of subject, or is its domain restricted?"
                        ]
                    },
                    {
                        "axiom": "freeAndCuedRemindingAssessment range None",
                        "CQ": [
                            "Is it valid for the property 'freeAndCuedRemindingAssessment' to have no range defined?",
                            "What possible types can be assigned as the range of 'freeAndCuedRemindingAssessment'?",
                            "Is there any entity that is explicitly precluded from being the range of 'freeAndCuedRemindingAssessment'?"
                        ]
                    }
                ]
            },
            "handTrajectory": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"handTrajectory\" has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. Based solely on its name and lack of further restrictions, it can be inferred that this property is used to associate entities with information related to the movement or path of a hand, but its usage is not formally constrained within the ontology.",
                "CQ": [
                    {
                        "axiom": "handTrajectory domain None",
                        "CQ": [
                            "Is it correct that the property 'handTrajectory' does not specify a domain?",
                            "What entities can serve as the domain for the property 'handTrajectory'?",
                            "Could 'handTrajectory' be applied to instances of any class, or should it be restricted to a specific domain?"
                        ]
                    },
                    {
                        "axiom": "handTrajectory range None",
                        "CQ": [
                            "Is it valid for the property 'handTrajectory' to have no specified range?",
                            "Which kinds of entities can be the range for the property 'handTrajectory'?",
                            "Can 'handTrajectory' have a range distinct from any specified class?"
                        ]
                    }
                ]
            },
            "gender": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"gender\" has no explicitly defined characteristics, domain, range, or hierarchy with other properties. There is no current description or axiomatic restriction, indicating that its usage context and value types are unspecified within the ontology. No inverse property is defined.",
                "CQ": [
                    {
                        "axiom": "gender domain None",
                        "CQ": [
                            "Is it correct that the property 'gender' does not have a defined domain?",
                            "What entities, if any, should be used as subjects with the 'gender' property?",
                            "Can the 'gender' property be applied to resources of any type?"
                        ]
                    },
                    {
                        "axiom": "gender range None",
                        "CQ": [
                            "What can be the range of the property 'gender'?",
                            "Is it correct that the property 'gender' has no specified range?",
                            "Can 'gender' relate to values other than a class or datatype?"
                        ]
                    }
                ]
            },
            "walkingSpeedInstantaneous": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"walkingSpeedInstantaneous\" has no specified characteristics, domain, or range restrictions, and is not defined as a sub-property or inverse of any other property. The property is expected to represent an entity's instantaneous walking speed, but lacks formal axiomatization to constrain or further describe its use.",
                "CQ": [
                    {
                        "axiom": "walkingSpeedInstantaneous domain None",
                        "CQ": [
                            "Is it correct that 'walkingSpeedInstantaneous' does not have a defined domain?",
                            "What kind of entities can be used as the subject for the property 'walkingSpeedInstantaneous'?",
                            "Can the property 'walkingSpeedInstantaneous' be associated with any type of entity, or should its domain be restricted?"
                        ]
                    },
                    {
                        "axiom": "walkingSpeedInstantaneous range None",
                        "CQ": [
                            "Can the property 'walkingSpeedInstantaneous' be associated with any particular type of entity as its value?",
                            "What can be the range of the property 'walkingSpeedInstantaneous'?",
                            "Is it correct that 'walkingSpeedInstantaneous' currently has no specified range?"
                        ]
                    }
                ]
            },
            "hasMonoTaskScore": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "hasScore"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"hasMonoTaskScore\" does not have explicitly defined characteristics, domain, or range restrictions. It is defined as a sub-property of \"hasScore,\" indicating it is used to represent a specific type of score related to mono-task contexts. No inverse property is specified.",
                "CQ": [
                    {
                        "axiom": "hasMonoTaskScore domain None",
                        "CQ": [
                            "What can be the domain of the property 'hasMonoTaskScore'?",
                            "Is it correct that 'hasMonoTaskScore' has no domain specified?",
                            "Can 'hasMonoTaskScore' be applied to any type of subject, or are there implicit domain restrictions?"
                        ]
                    },
                    {
                        "axiom": "hasMonoTaskScore range None",
                        "CQ": [
                            "What can be the range of the property 'hasMonoTaskScore'?",
                            "Is it correct that 'hasMonoTaskScore' does not have a range defined?",
                            "Can entities of any type serve as the value for the property 'hasMonoTaskScore'?"
                        ]
                    },
                    {
                        "axiom": "hasMonoTaskScore subPropertyOf hasScore",
                        "CQ": [
                            "Is hasScore the superproperty of hasMonoTaskScore?",
                            "Which properties are classified as subproperties under hasScore?",
                            "Does usage of hasMonoTaskScore always entail usage of hasScore?"
                        ]
                    }
                ]
            },
            "hasExperimentalDiagnosis": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "hasDiagnosis"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"hasExperimentalDiagnosis\" has no explicitly defined domain, range, or characteristics. It is a sub-property of \"hasDiagnosis,\" indicating that it represents a more specific form of diagnosis relationship within the ontology. No inverse property is specified. The lack of domain and range restrictions allows for flexible usage, but its naming suggests use for associating an entity with an experimental diagnosis.",
                "CQ": [
                    {
                        "axiom": "hasExperimentalDiagnosis domain None",
                        "CQ": [
                            "What entities can serve as the domain for the property 'hasExperimentalDiagnosis'?",
                            "Is it correct that 'hasExperimentalDiagnosis' does not have a domain restriction?",
                            "Can 'hasExperimentalDiagnosis' relate to subjects of any type, or should its scope be limited to specific classes?"
                        ]
                    },
                    {
                        "axiom": "hasExperimentalDiagnosis range None",
                        "CQ": [
                            "What can be the range of the property 'hasExperimentalDiagnosis'?",
                            "Is it correct that 'hasExperimentalDiagnosis' does not have a specified range?",
                            "Can 'hasExperimentalDiagnosis' relate to any type of entity as its object?"
                        ]
                    },
                    {
                        "axiom": "hasExperimentalDiagnosis subPropertyOf hasDiagnosis",
                        "CQ": [
                            "Is hasExperimentalDiagnosis considered a specific type of hasDiagnosis within the property hierarchy?",
                            "Which properties are defined as subproperties under hasDiagnosis?",
                            "Does the use of hasExperimentalDiagnosis in an assertion automatically entail the use of hasDiagnosis?"
                        ]
                    }
                ]
            },
            "hasUPDRSScore": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"hasUPDRSScore\" does not have explicitly defined characteristics, domain, range, super-properties, or inverse properties. Based on its name, it is likely intended to associate an entity with its Unified Parkinson's Disease Rating Scale (UPDRS) score, reflecting clinical assessments in Parkinson's disease. No further constraints or relationships are specified in the current axioms.",
                "CQ": [
                    {
                        "axiom": "hasUPDRSScore domain None",
                        "CQ": [
                            "What entities can act as the domain for the property 'hasUPDRSScore'?",
                            "Is it correct that the property 'hasUPDRSScore' does not have a defined domain?",
                            "Are there any specific types of subjects that must be associated with the property 'hasUPDRSScore'?"
                        ]
                    },
                    {
                        "axiom": "hasUPDRSScore range None",
                        "CQ": [
                            "Is there a defined range for the property 'hasUPDRSScore'?",
                            "Can any type of value serve as the range for 'hasUPDRSScore'?",
                            "Is it valid for 'hasUPDRSScore' to not restrict its range to a specific class?"
                        ]
                    }
                ]
            },
            "areasOfInterestExplored": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "rdfs:Literal"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"areasOfInterestExplored\" has no explicitly defined characteristics, domain restrictions, or super-properties. Its range is rdfs:Literal, indicating that the values associated with this property are expected to be plain text or data values. No inverse property is specified. This property is used to record or describe the areas of interest that have been explored by an entity.",
                "CQ": [
                    {
                        "axiom": "areasOfInterestExplored domain None",
                        "CQ": [
                            "What entities can serve as the domain of the property 'areasOfInterestExplored'?",
                            "Is it correct that 'areasOfInterestExplored' has no specified domain?",
                            "Are there any entities that cannot be subjects of the 'areasOfInterestExplored' property?"
                        ]
                    },
                    {
                        "axiom": "areasOfInterestExplored range rdfs:Literal",
                        "CQ": [
                            "Can the property 'areasOfInterestExplored' take any object other than a literal value?",
                            "Is every object associated with 'areasOfInterestExplored' necessarily an rdfs:Literal?",
                            "What types of values are permitted as the range for 'areasOfInterestExplored'?"
                        ]
                    }
                ]
            },
            "dsm_ivDepressionCriteria": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"dsm_ivDepressionCriteria\" has no explicitly defined characteristics, domain, or range constraints, and it is not specified as a sub-property of any other property nor does it have an inverse property. Based on its name, it is intended to relate an entity to the diagnostic criteria for depression as defined in DSM-IV, but this intended usage is not formally constrained by the provided axioms.",
                "CQ": [
                    {
                        "axiom": "dsm_ivDepressionCriteria domain None",
                        "CQ": [
                            "What are the possible domains for the property 'dsm_ivDepressionCriteria'?",
                            "Is it correct that 'dsm_ivDepressionCriteria' does not have a defined domain?",
                            "Can anything other than an explicitly specified class serve as the domain for 'dsm_ivDepressionCriteria'?"
                        ]
                    },
                    {
                        "axiom": "dsm_ivDepressionCriteria range None",
                        "CQ": [
                            "Can the property 'dsm_ivDepressionCriteria' have values outside of any defined range?",
                            "What entities, if any, are allowed as the range for 'dsm_ivDepressionCriteria'?",
                            "Is it correct that 'dsm_ivDepressionCriteria' does not specify a range?"
                        ]
                    }
                ]
            },
            "latency": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"latency\" has no explicitly specified characteristics, domain, or range constraints. It is not defined as a sub-property or inverse of any other property. The usage and applicable types for this property are unspecified in the current axioms.",
                "CQ": [
                    {
                        "axiom": "latency domain None",
                        "CQ": [
                            "What can be the domain of the property 'latency'?",
                            "Is it correct that 'latency' does not have any specified domain?",
                            "Can 'latency' be used with any type of subject entity?"
                        ]
                    },
                    {
                        "axiom": "latency range None",
                        "CQ": [
                            "What types of values can appear as the range for the property 'latency'?",
                            "Is it appropriate that the property 'latency' currently has no specified range?",
                            "Can the range of the property 'latency' be defined or restricted to particular classes?"
                        ]
                    }
                ]
            },
            "educationLevel": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"educationLevel\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. Its use is not constrained to specific classes or value types, allowing for flexible application in the ontology. No further description is currently provided.",
                "CQ": [
                    {
                        "axiom": "educationLevel domain None",
                        "CQ": [
                            "What types of entities can have an educationLevel?",
                            "Is it correct that the property educationLevel does not have an explicitly defined domain?",
                            "Can educationLevel be associated with any entity regardless of its type?"
                        ]
                    },
                    {
                        "axiom": "educationLevel range None",
                        "CQ": [
                            "What types of values can be the range of the property 'educationLevel'?",
                            "Is it accurate that the property 'educationLevel' does not have a specified range?",
                            "Can 'educationLevel' be associated with entities of any type as its object?"
                        ]
                    }
                ]
            },
            "npi": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"npi\" has no specified characteristics, domain, or range restrictions. It is not defined as a sub-property of any other property and does not have any inverse properties. This indicates \"npi\" is a general property with no explicit structural or semantic constraints currently defined.",
                "CQ": [
                    {
                        "axiom": "npi domain None",
                        "CQ": [
                            "What can be the domain of the property 'npi'?",
                            "Is it appropriate for the property 'npi' to have no specified domain?",
                            "Can entities outside any particular class utilize the property 'npi' as a subject?"
                        ]
                    },
                    {
                        "axiom": "npi range None",
                        "CQ": [
                            "What can be the range of the property 'npi'?",
                            "Is it correct that the property 'npi' does not specify a range?",
                            "Are there any constraints on the type of value that can be used as the range for 'npi'?"
                        ]
                    }
                ]
            },
            "stoppingDisplacement": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"stoppingDisplacement\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. No current description is provided. The intended use or semantics of this property should be specified for greater clarity.",
                "CQ": [
                    {
                        "axiom": "stoppingDisplacement domain None",
                        "CQ": [
                            "Is it correct that the property 'stoppingDisplacement' has no defined domain?",
                            "What types of subjects can 'stoppingDisplacement' be associated with?",
                            "Can entities outside any specific class use the property 'stoppingDisplacement' as their subject?"
                        ]
                    },
                    {
                        "axiom": "stoppingDisplacement range None",
                        "CQ": [
                            "What can be the range of the property 'stoppingDisplacement'?",
                            "Is it correct that 'stoppingDisplacement' does not have a defined range?",
                            "Does the property 'stoppingDisplacement' allow objects of any type as its range?"
                        ]
                    }
                ]
            },
            "trailMakingTest": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"trailMakingTest\" has no specified characteristics, domain, range, super-properties, or inverse properties. Based on its name, it is likely used to associate an entity with a trail making test, but no further ontological constraints or relationships are defined for this property.",
                "CQ": [
                    {
                        "axiom": "trailMakingTest domain None",
                        "CQ": [
                            "Is it correct that the property 'trailMakingTest' does not have a defined domain?",
                            "What entities can appear as the subject of the property 'trailMakingTest'?",
                            "Can 'trailMakingTest' be used with subjects from any class?"
                        ]
                    },
                    {
                        "axiom": "trailMakingTest range None",
                        "CQ": [
                            "Is it correct that the property 'trailMakingTest' does not have a specified range?",
                            "What types of values can be used as the object for the 'trailMakingTest' property?",
                            "Can any entity serve as the range for the 'trailMakingTest' property?"
                        ]
                    }
                ]
            },
            "involvesTask": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"involvesTask\" has no explicitly defined characteristics, domain, or range restrictions. It is not specified as a sub-property of any other property, nor does it have an inverse property. This indicates that \"involvesTask\" is a general property intended to relate entities to unspecified tasks, without formal constraints on the types of entities or tasks involved.",
                "CQ": [
                    {
                        "axiom": "involvesTask domain None",
                        "CQ": [
                            "What can be the domain of the property 'involvesTask'?",
                            "Is it correct that 'involvesTask' has no specified domain?",
                            "Can any type of entity use 'involvesTask' as a property subject?"
                        ]
                    },
                    {
                        "axiom": "involvesTask range None",
                        "CQ": [
                            "Is it correct that the property 'involvesTask' does not have a specified range?",
                            "What types of entities can serve as the range for the property 'involvesTask'?",
                            "Can 'involvesTask' be associated with objects of any class, given its range is undefined?"
                        ]
                    }
                ]
            },
            "stressLevel": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"stressLevel\" has no explicitly defined characteristics, domain, or range restrictions, nor any specified super-properties or inverse properties. Its intended purpose is not further described in the available axioms or documentation.",
                "CQ": [
                    {
                        "axiom": "stressLevel domain None",
                        "CQ": [
                            "Is it correct that the property 'stressLevel' does not have any specified domain?",
                            "What types of subjects can 'stressLevel' be applied to?",
                            "Can 'stressLevel' relate to entities from any class, or is there an implicit domain?"
                        ]
                    },
                    {
                        "axiom": "stressLevel range None",
                        "CQ": [
                            "What are the possible ranges that can be assigned to the property 'stressLevel'?",
                            "Is it correct that the property 'stressLevel' currently has no specified range?",
                            "Can 'stressLevel' be associated with any type of entity as its value?"
                        ]
                    }
                ]
            },
            "dynamicBalance": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"dynamicBalance\" does not have explicitly defined characteristics, domain, range, super-properties, or inverse properties. Based on its name, it is likely intended to relate entities in the context of maintaining or evaluating balance under changing conditions, but no formal constraints or further documentation are currently specified.",
                "CQ": [
                    {
                        "axiom": "dynamicBalance domain None",
                        "CQ": [
                            "Can the property 'dynamicBalance' have a domain other than what is currently specified (None)?",
                            "Is it appropriate for 'dynamicBalance' to lack a specified domain?",
                            "What entities are permitted to be subjects of the property 'dynamicBalance'?"
                        ]
                    },
                    {
                        "axiom": "dynamicBalance range None",
                        "CQ": [
                            "Does 'dynamicBalance' have a defined range?",
                            "What types of entities can be the range of the 'dynamicBalance' property?",
                            "Is it valid for the property 'dynamicBalance' to have no specified range?"
                        ]
                    }
                ]
            },
            "stepLength": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "owl:topDataProperty"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"stepLength\" is a data property with no explicitly defined domain or range, and no specified characteristics. It is a subproperty of owl:topDataProperty, indicating it is a general data property. There is no inverse property defined. This property is intended for representing the length of a step, but no further constraints are provided.",
                "CQ": [
                    {
                        "axiom": "stepLength domain None",
                        "CQ": [
                            "What entities can serve as the domain for the property 'stepLength'?",
                            "Is it correct that the property 'stepLength' has no defined domain?",
                            "Can the property 'stepLength' be used with any type of subject, or is there a restriction?"
                        ]
                    },
                    {
                        "axiom": "stepLength range None",
                        "CQ": [
                            "Can the property 'stepLength' have a range other than what is currently specified?",
                            "What types of values are permissible as the range for 'stepLength'?",
                            "Is it valid for 'stepLength' to have no defined range?"
                        ]
                    },
                    {
                        "axiom": "stepLength subPropertyOf owl:topDataProperty",
                        "CQ": [
                            "Is stepLength categorized under the general properties defined by owl:topDataProperty?",
                            "Which data properties are considered subproperties of owl:topDataProperty within the ontology?",
                            "Does assigning a value to stepLength also imply an assignment to owl:topDataProperty?"
                        ]
                    }
                ]
            },
            "hasClinicalDiagnosis": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "hasDiagnosis"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"hasClinicalDiagnosis\" does not specify any characteristics, domain, or range. It is a subproperty of \"hasDiagnosis,\" indicating that it represents a specialized type of diagnostic relationship, specifically pertaining to clinical diagnoses. No inverse property is defined.",
                "CQ": [
                    {
                        "axiom": "hasClinicalDiagnosis domain None",
                        "CQ": [
                            "Is it correct that the property 'hasClinicalDiagnosis' does not have a specified domain?",
                            "What types of entities can serve as the subject for the property 'hasClinicalDiagnosis'?",
                            "Are there restrictions on what can be the domain of 'hasClinicalDiagnosis'?"
                        ]
                    },
                    {
                        "axiom": "hasClinicalDiagnosis range None",
                        "CQ": [
                            "What can be the range of the property 'hasClinicalDiagnosis'?",
                            "Is it correct that 'hasClinicalDiagnosis' does not have a defined range?",
                            "Can 'hasClinicalDiagnosis' relate to objects of any type, given it has no specified range?"
                        ]
                    },
                    {
                        "axiom": "hasClinicalDiagnosis subPropertyOf hasDiagnosis",
                        "CQ": [
                            "Is hasClinicalDiagnosis a specific type of the hasDiagnosis property?",
                            "Which properties are considered subproperties of hasDiagnosis?",
                            "What superproperties are directly associated with hasClinicalDiagnosis?"
                        ]
                    }
                ]
            },
            "hasRecord": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"hasRecord\" does not have explicitly defined domain, range, characteristics, super-properties, or inverse properties. Based on its name, it is likely intended to associate an entity with a record, but no further semantic constraints are specified by its current axioms.",
                "CQ": [
                    {
                        "axiom": "hasRecord domain None",
                        "CQ": [
                            "Is it correct that the property 'hasRecord' does not specify a domain?",
                            "What types of entities can be the subject of the property 'hasRecord'?",
                            "Can 'hasRecord' be used with subjects of any class, or should a domain be defined?"
                        ]
                    },
                    {
                        "axiom": "hasRecord range None",
                        "CQ": [
                            "Is it correct that the property 'hasRecord' does not have a specified range?",
                            "What kinds of entities, if any, can appear as the object of the 'hasRecord' property?",
                            "Can anything be used as the range of 'hasRecord', or should its range be defined?"
                        ]
                    }
                ]
            },
            "fabScore": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"fabScore\" has no specified domain, range, characteristics, super-properties, or inverse properties. Its usage and constraints are not defined by axioms, indicating that it is a general property without ontology-imposed restrictions or semantic details.",
                "CQ": [
                    {
                        "axiom": "fabScore domain None",
                        "CQ": [
                            "Could entities other than those currently defined be the domain of the property 'fabScore'?",
                            "Is it correct that the property 'fabScore' has no specified domain?",
                            "What types of entities can act as the domain for the 'fabScore' property?"
                        ]
                    },
                    {
                        "axiom": "fabScore range None",
                        "CQ": [
                            "What entities are permitted as the range for the property 'fabScore'?",
                            "Does the property 'fabScore' have a range other than None?",
                            "Is it correct that the property 'fabScore' has no specified range?"
                        ]
                    }
                ]
            },
            "walkingSpeed": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"walkingSpeed\" has no specified characteristics, domain, range, super-properties, or inverse properties. This property is likely intended to capture the walking speed of an entity, but no formal usage constraints or value types are currently defined.",
                "CQ": [
                    {
                        "axiom": "walkingSpeed domain None",
                        "CQ": [
                            "Is it correct that the property 'walkingSpeed' does not have a defined domain?",
                            "What types of entities can be used as the subject of the 'walkingSpeed' property?",
                            "Can 'walkingSpeed' be associated with any entity regardless of its type?"
                        ]
                    },
                    {
                        "axiom": "walkingSpeed range None",
                        "CQ": [
                            "What types of values can serve as the range for the property 'walkingSpeed'?",
                            "Is it acceptable for the property 'walkingSpeed' to have no defined range?",
                            "Could entities of any type be used as the range of 'walkingSpeed'?"
                        ]
                    }
                ]
            }
        }
    },
    "swo": {
        "classes": {
            "Phylogenetics": {
                "axiom": {
                    "subClassOf": [
                        "Sequence analysis",
                        "Phylogeny"
                    ]
                },
                "description": "Phylogenetics is defined as a subclass of both Sequence analysis and Phylogeny, indicating that it involves analytical methods for understanding evolutionary relationships. It is formally described as the study of evolutionary relationships among organisms using analyses of genetic information, typically involving gene or protein sequence data. This class focuses on methodologies and approaches to infer phylogenetic relationships through sequence-based evidence.",
                "CQ": [
                    {
                        "axiom": "Phylogenetics subClassOf Sequence analysis",
                        "CQ": [
                            "Is Phylogenetics categorized as a specific type of Sequence analysis?",
                            "Which disciplines are classified under Sequence analysis, and does this include Phylogenetics?",
                            "What are the broader conceptual categories that encompass Phylogenetics within sequence studies?"
                        ]
                    },
                    {
                        "axiom": "Phylogenetics subClassOf Phylogeny",
                        "CQ": [
                            "Is Phylogeny the broader category that encompasses Phylogenetics?",
                            "Which specific subcategories are classified under Phylogeny, such as Phylogenetics?",
                            "What higher-level categories include Phylogenetics within their conceptual scope?"
                        ]
                    }
                ]
            },
            "Preclinical and clinical studies": {
                "axiom": {
                    "subClassOf": [
                        "Medicine research and development"
                    ]
                },
                "description": "Preclinical and clinical studies is a subclass of Medicine research and development. This class includes activities focused on testing new medicines, vaccines, or medical procedures first on animals (preclinical studies) and then on humans (clinical studies), all conducted prior to regulatory approval. The formalization aligns with the definition, emphasizing the sequential and comprehensive process integral to medical research and development.",
                "CQ": [
                    {
                        "axiom": "Preclinical and clinical studies subClassOf Medicine research and development",
                        "CQ": [
                            "Are preclinical and clinical studies classified under the broader category of medicine research and development?",
                            "Which research and development activities are more specific subdivisions of medicine research and development, such as preclinical and clinical studies?",
                            "What general domains of research and development encompass preclinical and clinical studies?"
                        ]
                    }
                ]
            },
            "Nucleic acid features (quadruplexes)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Nucleic acid features (quadruplexes) is classified as a subclass of Obsolete concept (EDAM), indicating that it represents a concept that is no longer active or recommended for current use in the ontology. The class is defined as a report on quadruplex-forming motifs in a nucleotide sequence, highlighting its focus on sequence motifs capable of forming quadruplex structures.",
                "CQ": [
                    {
                        "axiom": "Nucleic acid features (quadruplexes) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Nucleic acid features (quadruplexes) classified under Obsolete concept (EDAM)?",
                            "Which concepts fall under the category of Obsolete concept (EDAM), including Nucleic acid features (quadruplexes)?",
                            "What broader categories include Nucleic acid features (quadruplexes) in this ontology?"
                        ]
                    }
                ]
            },
            "Protein-ligand docking": {
                "axiom": {
                    "subClassOf": [
                        "Molecular docking"
                    ],
                    "propertyRestrictions": [
                        "[has topic some Protein interactions]",
                        "[has output some Protein-ligand complex]"
                    ]
                },
                "description": "Protein-ligand docking is a subclass of molecular docking, focused on modeling the binding interactions between proteins and ligands. It is formally restricted to topics involving protein interactions and must produce as output a protein-ligand complex. Methods in this class aim to predict both the position and orientation of a ligand when bound to a protein receptor or enzyme, utilizing comparative modeling or other computational techniques to model protein-ligand (e.g., protein-peptide) binding events.",
                "CQ": [
                    {
                        "axiom": "Protein-ligand docking subClassOf Molecular docking",
                        "CQ": [
                            "Is Protein-ligand docking classified as a more specific form of Molecular docking?",
                            "Which types of Molecular docking include Protein-ligand docking as a subclass?",
                            "What broader categories encompass Protein-ligand docking?"
                        ]
                    },
                    {
                        "axiom": "Protein-ligand docking propertyRestrictions [has topic some Protein interactions]",
                        "CQ": [
                            "Does every protein-ligand docking necessarily involve some aspect related to protein interactions?",
                            "Is it required that protein-ligand docking has a topic associated with protein interactions?",
                            "Does protein-ligand docking always pertain to a subject within the domain of protein interactions?"
                        ]
                    },
                    {
                        "axiom": "Protein-ligand docking propertyRestrictions [has output some Protein-ligand complex]",
                        "CQ": [
                            "Is it required that protein-ligand docking always outputs at least one protein-ligand complex?",
                            "Can the result of a protein-ligand docking process ever be something other than a protein-ligand complex?",
                            "Does every instance of protein-ligand docking necessarily yield a protein-ligand complex as an output?"
                        ]
                    }
                ]
            },
            "CpG island and isochores": {
                "axiom": {
                    "subClassOf": [
                        "Gene transcription features"
                    ]
                },
                "description": "CpG island and isochores is defined as a subclass of Gene transcription features, focusing on CpG-rich regions—commonly referred to as isochores—within nucleotide sequences. These regions are characterized by a high frequency of CpG dinucleotides and play important roles in gene regulation and transcriptional processes. The class specifically encompasses features related to the presence and function of CpG-rich regions in genomic sequences.",
                "CQ": [
                    {
                        "axiom": "CpG island and isochores subClassOf Gene transcription features",
                        "CQ": [
                            "Are CpG island and isochores included as specific types under Gene transcription features?",
                            "Which subclasses are defined within Gene transcription features, such as CpG island and isochores?",
                            "What higher-level categories encompass CpG island and isochores in the context of gene transcription?"
                        ]
                    }
                ]
            },
            "Logit-t algorithm": {
                "axiom": {
                    "subClassOf": [
                        "algorithm"
                    ]
                },
                "description": "Logit-t algorithm is a subclass of algorithm, indicating that it inherits all general characteristics of algorithms. No further constraints or distinguishing axioms are provided, so its definition is currently limited to being a type of algorithm.",
                "CQ": [
                    {
                        "axiom": "Logit-t algorithm subClassOf algorithm",
                        "CQ": [
                            "Is Logit-t algorithm classified under the general category of algorithm?",
                            "Which types of algorithm encompass the Logit-t algorithm as a specific example?",
                            "What are the specialized subclasses included within algorithm, such as Logit-t algorithm?"
                        ]
                    }
                ]
            },
            "TAIR accession (protein)": {
                "axiom": {
                    "subClassOf": [
                        "TAIR accession",
                        "Sequence accession (protein)"
                    ],
                    "propertyRestrictions": [
                        "[is identifier of some Sequence record]"
                    ]
                },
                "description": "TAIR accession (protein) is defined as a subclass of both TAIR accession and Sequence accession (protein), representing identifiers specifically assigned to protein sequences within the TAIR database. Each TAIR accession (protein) serves as an identifier for at least one sequence record. This class formalizes the concept of associating unique protein sequence identifiers from TAIR, ensuring they are only used as identifiers of protein sequence records.",
                "CQ": [
                    {
                        "axiom": "TAIR accession (protein) subClassOf TAIR accession",
                        "CQ": [
                            "Is TAIR accession (protein) categorized under the general class of TAIR accession?",
                            "What are the subclasses defined within TAIR accession, including TAIR accession (protein)?",
                            "Which broader classes encompass TAIR accession (protein)?"
                        ]
                    },
                    {
                        "axiom": "TAIR accession (protein) subClassOf Sequence accession (protein)",
                        "CQ": [
                            "Is TAIR accession (protein) a more specific form of Sequence accession (protein)?",
                            "Which types of Sequence accession (protein) include TAIR accession (protein) as a subtype?",
                            "To what broader classifications does TAIR accession (protein) pertain within the context of protein accession identifiers?"
                        ]
                    },
                    {
                        "axiom": "TAIR accession (protein) propertyRestrictions [is identifier of some Sequence record]",
                        "CQ": [
                            "Is every TAIR accession (protein) necessarily associated with at least one Sequence record through the 'is identifier of' property?",
                            "Can a TAIR accession (protein) exist without serving as the identifier for any Sequence record?",
                            "Does the ontology require that only Sequence records are linked to TAIR accessions (protein) via the 'is identifier of' property?"
                        ]
                    }
                ]
            },
            "MLInterfaces": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[implements some k-nearest neighbour classification]",
                        "[has specified data output some (ALL/AML data set and [has format specification some data format specification])]",
                        "[has specified data input some (Gene expression dataset and [has format specification some data format specification])]",
                        "[is encoded in some R language]"
                    ]
                },
                "description": "MLInterfaces is a subclass of software characterized by several specific features. It implements at least one k-nearest neighbour classification algorithm and is encoded in the R programming language. Members of this class must have specified data input from gene expression datasets and specified data output from ALL/AML datasets, with both types of data conforming to at least one specified data format specification. This ensures that MLInterfaces are R-based software tools specialized in handling gene expression and ALL/AML datasets for k-nearest neighbour classification, with clear input/output format requirements.",
                "CQ": [
                    {
                        "axiom": "MLInterfaces subClassOf software",
                        "CQ": [
                            "Are MLInterfaces a specialized kind of software?",
                            "What software subclasses encompass MLInterfaces?",
                            "Which broader categories include MLInterfaces as a specific instance?"
                        ]
                    },
                    {
                        "axiom": "MLInterfaces propertyRestrictions [implements some k-nearest neighbour classification]",
                        "CQ": [
                            "Is it required that every MLInterface implements at least one k-nearest neighbour classification?",
                            "Can an MLInterface exist without implementing k-nearest neighbour classification?",
                            "Does the ontology allow for MLInterfaces that implement only k-nearest neighbour classification among possible implementations?"
                        ]
                    },
                    {
                        "axiom": "MLInterfaces propertyRestrictions [has specified data output some (ALL/AML data set and [has format specification some data format specification])]",
                        "CQ": [
                            "Is it required for an MLInterface to have at least one specified data output that consists of both an ALL or AML data set and a format specification?",
                            "Can an MLInterface’s specified data output be valid only if it includes both an ALL/AML data set and a corresponding data format specification?",
                            "Are ALL and AML data sets, with their associated data format specifications, the only types eligible as specified data output for MLInterfaces?"
                        ]
                    },
                    {
                        "axiom": "MLInterfaces propertyRestrictions [has specified data input some (Gene expression dataset and [has format specification some data format specification])]",
                        "CQ": [
                            "Is it necessary for an MLInterface to have at least one specified data input that is both a gene expression dataset and has some data format specification?",
                            "Can an MLInterface satisfy the property restriction without its specified data input being a gene expression dataset with a format specification?",
                            "Does every MLInterface require a specified data input that meets both the gene expression dataset type and has an associated data format specification?"
                        ]
                    },
                    {
                        "axiom": "MLInterfaces propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is it required that every MLInterface is encoded in at least one R language?",
                            "Can an MLInterface exist without being associated with encoding in the R language?",
                            "Does the ontology specify that if an entity is an MLInterface, then it must be represented using some form of the R language?"
                        ]
                    }
                ]
            },
            "Ensembl gene ID": {
                "axiom": {
                    "subClassOf": [
                        "Gene ID",
                        "Ensembl ID"
                    ]
                },
                "description": "Ensembl gene ID is a subclass of both Gene ID and Ensembl ID, representing a unique identifier specifically assigned to a gene or related feature within the Ensembl database. This class is used to distinctly reference genetic loci in the Ensembl genome annotation system, ensuring unambiguous identification of genetic entities and facilitating cross-referencing between biological databases.",
                "CQ": [
                    {
                        "axiom": "Ensembl gene ID subClassOf Gene ID",
                        "CQ": [
                            "Is every Ensembl gene ID classified as a type of Gene ID?",
                            "Which gene identifiers are more specific than Gene ID, such as Ensembl gene ID?",
                            "What broader identifier categories does Ensembl gene ID fall under?"
                        ]
                    },
                    {
                        "axiom": "Ensembl gene ID subClassOf Ensembl ID",
                        "CQ": [
                            "Is Ensembl gene ID classified under Ensembl ID?",
                            "Which instances are defined as specific types of Ensembl ID, such as Ensembl gene ID?",
                            "What broader identifiers encompass the Ensembl gene ID category?"
                        ]
                    }
                ]
            },
            "Amino acid index (White-Wimley data)": {
                "axiom": {
                    "subClassOf": [
                        "Amino acid index"
                    ]
                },
                "description": "Amino acid index (White-Wimley data) is a subclass of Amino acid index, specifically representing experimental free energy values associated with water-interface and water-octanol transitions for amino acids. This class formalizes data characterizing the thermodynamic properties of amino acids as measured by the White-Wimley method.",
                "CQ": [
                    {
                        "axiom": "Amino acid index (White-Wimley data) subClassOf Amino acid index",
                        "CQ": [
                            "Is \"Amino acid index (White-Wimley data)\" classified under the category \"Amino acid index\"?",
                            "Which specific indices fall under the broader class of \"Amino acid index\" and include \"Amino acid index (White-Wimley data)\"?",
                            "What are the higher-level categories associated with \"Amino acid index (White-Wimley data)\"?"
                        ]
                    }
                ]
            },
            "Sequence database search (by sequence using global alignment-based methods)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Sequence database search (by sequence using global alignment-based methods) is classified as a subclass of Obsolete concept (EDAM). This class encompasses search tools and processes that identify sequences similar to a query by applying global alignment-based methods, such as the Needleman and Wunsch algorithm. These approaches compare entire sequences to maximize overall alignment, and are considered outdated in the current ontology context.",
                "CQ": [
                    {
                        "axiom": "Sequence database search (by sequence using global alignment-based methods) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Does Sequence database search (by sequence using global alignment-based methods) fall under the category of Obsolete concept (EDAM)?",
                            "What are the more specific concepts classified within Obsolete concept (EDAM), for example, Sequence database search (by sequence using global alignment-based methods)?",
                            "Which general knowledge categories encompass Sequence database search (by sequence using global alignment-based methods)?"
                        ]
                    }
                ]
            },
            "Protein dipole moment calculation": {
                "axiom": {
                    "subClassOf": [
                        "Protein property calculation (from sequence)"
                    ],
                    "propertyRestrictions": [
                        "[has output some Protein dipole moment]"
                    ]
                },
                "description": "Protein dipole moment calculation is a subclass of Protein property calculation (from sequence) and is characterized by producing at least one Protein dipole moment as output. This class represents computational methods or procedures used to determine whether a protein structure exhibits an unusually large net charge, specifically by calculating its dipole moment.",
                "CQ": [
                    {
                        "axiom": "Protein dipole moment calculation subClassOf Protein property calculation (from sequence)",
                        "CQ": [
                            "Does Protein dipole moment calculation represent a specific instance of Protein property calculation (from sequence)?",
                            "Which calculation types are classified under Protein property calculation (from sequence), such as Protein dipole moment calculation?",
                            "What broader categories include Protein dipole moment calculation as a member?"
                        ]
                    },
                    {
                        "axiom": "Protein dipole moment calculation propertyRestrictions [has output some Protein dipole moment]",
                        "CQ": [
                            "Does every instance of Protein dipole moment calculation necessarily produce at least one output of Protein dipole moment?",
                            "Is it required that the output of a Protein dipole moment calculation always includes a Protein dipole moment?",
                            "Can a Protein dipole moment calculation exist without yielding a Protein dipole moment as its output?"
                        ]
                    }
                ]
            },
            "Database search (by sequence)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Database search (by sequence) is classified as a subclass of Obsolete concept (EDAM), indicating it is no longer in active use within the ontology. It refers to the process of screening one or more molecular sequences against a database to identify similarities between the query sequence and database entries. This class represents a type of analysis focused on sequence comparison for the purpose of finding related or homologous sequences.",
                "CQ": [
                    {
                        "axiom": "Database search (by sequence) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Database search (by sequence) classified under the broader category of Obsolete concept (EDAM)?",
                            "Which obsolete concepts, as defined in EDAM, encompass Database search (by sequence)?",
                            "What are the more specific concepts that fall within Obsolete concept (EDAM), including Database search (by sequence)?"
                        ]
                    }
                ]
            },
            "Microsoft Excel 2007": {
                "axiom": {
                    "subClassOf": [
                        "Microsoft Excel"
                    ],
                    "propertyRestrictions": [
                        "[has specified data output some (data and [has format specification some XML spreadsheet])]",
                        "[has specified data input some (data and [has format specification some tab delimited file format])]",
                        "[has specified data output some (data and [has format specification some XLS spreadsheet])]",
                        "[has release date hasValue ns1:00]",
                        "[has website homepage hasValue http://office.microsoft.com/]",
                        "[directly followed by some Microsoft Excel for Windows 2010]",
                        "[has specified data output some (data and [has format specification some tab delimited file format])]",
                        "[has version hasValue Microsoft 2007 version]",
                        "[has specified data input some (data and [has format specification some XLS spreadsheet])]"
                    ]
                },
                "description": "Microsoft Excel 2007 is defined as a subclass of Microsoft Excel with several specified properties. It accepts data input in both XLS spreadsheet and tab-delimited file formats, and can output data in XLS, XML spreadsheet, and tab-delimited file formats. Its release date is specified as ns1:00, and its homepage is http://office.microsoft.com/. Microsoft Excel 2007 has the version identifier \"Microsoft 2007 version\" and is directly succeeded by Microsoft Excel for Windows 2010. These formal properties distinguish Microsoft Excel 2007 in terms of version, supported data formats, and its place within the timeline of Excel releases.",
                "CQ": [
                    {
                        "axiom": "Microsoft Excel 2007 subClassOf Microsoft Excel",
                        "CQ": [
                            "Is Microsoft Excel 2007 classified as a type of Microsoft Excel?",
                            "What specific versions fall under the broader category of Microsoft Excel, including Microsoft Excel 2007?",
                            "Which general application families include Microsoft Excel 2007 as a member?"
                        ]
                    },
                    {
                        "axiom": "Microsoft Excel 2007 propertyRestrictions [has specified data output some (data and [has format specification some XML spreadsheet])]",
                        "CQ": [
                            "Does Microsoft Excel 2007 require at least one data output that follows the XML spreadsheet format specification?",
                            "Is there a necessity for any data output specified by Microsoft Excel 2007 to conform to the XML spreadsheet format?",
                            "Can Microsoft Excel 2007 provide a specified data output that is not both data and formatted as an XML spreadsheet?"
                        ]
                    },
                    {
                        "axiom": "Microsoft Excel 2007 propertyRestrictions [has specified data input some (data and [has format specification some tab delimited file format])]",
                        "CQ": [
                            "Must data input for Microsoft Excel 2007 always include data that adheres to a tab delimited file format specification?",
                            "Can Microsoft Excel 2007 accept data input if the format specification is not tab delimited?",
                            "Is it required that any data input specified for Microsoft Excel 2007 has a format described by the tab delimited file type?"
                        ]
                    },
                    {
                        "axiom": "Microsoft Excel 2007 propertyRestrictions [has specified data output some (data and [has format specification some XLS spreadsheet])]",
                        "CQ": [
                            "Does Microsoft Excel 2007 require that its specified data output includes data formatted as an XLS spreadsheet?",
                            "Is it necessary for the specified data output of Microsoft Excel 2007 to have a format specification corresponding to XLS spreadsheets?",
                            "Can data outputs lacking the XLS spreadsheet format specification be recognized as outputs specified by Microsoft Excel 2007?"
                        ]
                    },
                    {
                        "axiom": "Microsoft Excel 2007 propertyRestrictions [has release date hasValue ns1:00]",
                        "CQ": [
                            "Is the release date of Microsoft Excel 2007 necessarily set to ns1:00?",
                            "Can Microsoft Excel 2007 possess any release date property value other than ns1:00?",
                            "Does the ontology specify that Microsoft Excel 2007 must have the release date property with the exact value of ns1:00?"
                        ]
                    },
                    {
                        "axiom": "Microsoft Excel 2007 propertyRestrictions [has website homepage hasValue http://office.microsoft.com/]",
                        "CQ": [
                            "Is Microsoft Excel 2007 required to have its website homepage as http://office.microsoft.com/?",
                            "Does the ontology specify that the homepage of Microsoft Excel 2007 is exclusively http://office.microsoft.com/?",
                            "Can Microsoft Excel 2007 have a different homepage property value other than http://office.microsoft.com/?"
                        ]
                    },
                    {
                        "axiom": "Microsoft Excel 2007 propertyRestrictions [directly followed by some Microsoft Excel for Windows 2010]",
                        "CQ": [
                            "Is it necessary for Microsoft Excel 2007 to be directly followed by some instance of Microsoft Excel for Windows 2010?",
                            "Does Microsoft Excel 2007 only appear in a sequence where it is directly succeeded by Microsoft Excel for Windows 2010?",
                            "Can Microsoft Excel 2007 ever be found without being directly followed by Microsoft Excel for Windows 2010?"
                        ]
                    },
                    {
                        "axiom": "Microsoft Excel 2007 propertyRestrictions [has specified data output some (data and [has format specification some tab delimited file format])]",
                        "CQ": [
                            "Does Microsoft Excel 2007 always generate data output that is formatted as a tab delimited file?",
                            "Is it necessary for data output from Microsoft Excel 2007 to be data with a format specification of tab delimited file format?",
                            "Can Microsoft Excel 2007 output any data that is not both data and specified as tab delimited file format?"
                        ]
                    },
                    {
                        "axiom": "Microsoft Excel 2007 propertyRestrictions [has version hasValue Microsoft 2007 version]",
                        "CQ": [
                            "Is Microsoft Excel 2007 required to have the version property with the value 'Microsoft 2007 version'?",
                            "Can Microsoft Excel 2007 exist without the version specified as 'Microsoft 2007 version'?",
                            "Does every instance of Microsoft Excel 2007 necessarily have the version property set to 'Microsoft 2007 version'?"
                        ]
                    },
                    {
                        "axiom": "Microsoft Excel 2007 propertyRestrictions [has specified data input some (data and [has format specification some XLS spreadsheet])]",
                        "CQ": [
                            "Does Microsoft Excel 2007 require data input that is both recognized as data and formatted specifically as an XLS spreadsheet?",
                            "Is it necessary for the data input feature of Microsoft Excel 2007 to be associated with at least one instance of data that adheres to the XLS spreadsheet format specification?",
                            "Can Microsoft Excel 2007 accept any specified data input that does not have the XLS spreadsheet format specification?"
                        ]
                    }
                ]
            },
            "GeneR": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[has specified data input some (data and [has format specification some R data frame])]",
                        "[has specified data input some (Gene list and [has format specification some data format specification])]",
                        "[is encoded in some R language]",
                        "[has specified data input some (data and [has format specification some FASTA])]"
                    ]
                },
                "description": "GeneR is defined as a subclass of software that is implemented in the R programming language. Members of this class are characterized by accepting multiple specified data input types: general data formatted as R data frames, gene lists with specific data format specifications, and data in FASTA format. These input constraints ensure that any instance of GeneR-typed software is capable of handling commonly used biological data formats, particularly those relevant for bioinformatics applications in R.",
                "CQ": [
                    {
                        "axiom": "GeneR subClassOf software",
                        "CQ": [
                            "Is GeneR categorized under the broader class of software?",
                            "What are the specific subclasses defined within the class of software, including GeneR?",
                            "To which upper-level classes does GeneR belong according to the hierarchy?"
                        ]
                    },
                    {
                        "axiom": "GeneR propertyRestrictions [has specified data input some (data and [has format specification some R data frame])]",
                        "CQ": [
                            "Is every GeneR instance required to have at least one specified data input that includes data with a format specified as an R data frame?",
                            "Can a GeneR be correctly modeled if it does not have any specified data input that is a data formatted as an R data frame?",
                            "Does the use of the property 'has specified data input' for GeneR instances necessarily involve data that has a format specification including an R data frame?"
                        ]
                    },
                    {
                        "axiom": "GeneR propertyRestrictions [has specified data input some (Gene list and [has format specification some data format specification])]",
                        "CQ": [
                            "Does GeneR require at least one specified data input that is both a Gene list and has some data format specification?",
                            "Must all specified data inputs of GeneR meet the criteria of being Gene lists with an associated data format specification?",
                            "Can GeneR have a specified data input that is not a Gene list or lacks a data format specification?"
                        ]
                    },
                    {
                        "axiom": "GeneR propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is every GeneR necessarily encoded in at least one R language?",
                            "Does the definition of GeneR require that it must be encoded in an R language?",
                            "Can a GeneR exist that is not encoded in any R language?"
                        ]
                    },
                    {
                        "axiom": "GeneR propertyRestrictions [has specified data input some (data and [has format specification some FASTA])]",
                        "CQ": [
                            "Is it necessary for a GeneR to have at least one specified data input that includes both data and a format specification such as FASTA?",
                            "Must all specified data inputs associated with GeneR include a data component that is linked to a FASTA format specification?",
                            "Can a GeneR exist without any specified data input that has both the data and a format specification of FASTA?"
                        ]
                    }
                ]
            },
            "50-50 MANOVA algorithm": {
                "axiom": {
                    "subClassOf": [
                        "algorithm"
                    ]
                },
                "description": "50-50 MANOVA algorithm is defined as a subclass of algorithm, indicating it is a specific type of computational method. While no further axioms or restrictions are provided, this class represents algorithms designed for multivariate analysis of variance (MANOVA) employing a 50-50 partitioning strategy or criterion within their procedure.",
                "CQ": [
                    {
                        "axiom": "50-50 MANOVA algorithm subClassOf algorithm",
                        "CQ": [
                            "Is the 50-50 MANOVA algorithm classified as a specific type of algorithm?",
                            "What algorithms encompass the 50-50 MANOVA algorithm as their subclass?",
                            "Under which broader algorithmic categories can the 50-50 MANOVA algorithm be grouped?"
                        ]
                    }
                ]
            },
            "Job identifier": {
                "axiom": {
                    "subClassOf": [
                        "Identifier (typed)"
                    ]
                },
                "description": "Job identifier is defined as a subclass of Identifier (typed). It represents an identifier specifically assigned to a submitted job, uniquely distinguishing it within a system or workflow. This class inherits all characteristics of Identifier (typed), ensuring that each job identifier maintains the constraints and semantics of typed identifiers.",
                "CQ": [
                    {
                        "axiom": "Job identifier subClassOf Identifier (typed)",
                        "CQ": [
                            "Is Job identifier classified as a more specific type of Identifier?",
                            "What specific kinds of Identifier include Job identifier in their classification?",
                            "Which broader classes encompass Job identifier within the Identifier hierarchy?"
                        ]
                    }
                ]
            },
            "JPEG 2000": {
                "axiom": {
                    "subClassOf": [
                        "raster image format"
                    ]
                },
                "description": "JPEG 2000 is a subclass of raster image format, indicating that it is a specific type of raster image format. This classification places JPEG 2000 within the hierarchy of digital image encoding formats that represent images as a grid of pixels.",
                "CQ": [
                    {
                        "axiom": "JPEG 2000 subClassOf raster image format",
                        "CQ": [
                            "Is JPEG 2000 classified as a kind of raster image format?",
                            "Which raster image format subclasses include JPEG 2000?",
                            "What broader categories is JPEG 2000 an instance or subclass of?"
                        ]
                    }
                ]
            },
            "DNA transduction map": {
                "axiom": {
                    "subClassOf": [
                        "Genetic map"
                    ]
                },
                "description": "DNA transduction map is defined as a subclass of Genetic map. It specifically refers to a gene map that illustrates the distances between loci by utilizing relative cotransduction frequencies. This means such maps provide information about the relative positions of genes based on the likelihood of their co-transfer during the process of genetic transduction.",
                "CQ": [
                    {
                        "axiom": "DNA transduction map subClassOf Genetic map",
                        "CQ": [
                            "Is DNA transduction map categorized under Genetic map?",
                            "Which genetic map subclasses exist, and does this include DNA transduction map?",
                            "What are the direct superclasses associated with DNA transduction map?"
                        ]
                    }
                ]
            },
            "Article comparison": {
                "axiom": {
                    "subClassOf": [
                        "Comparison"
                    ]
                },
                "description": "Article comparison is a subclass of Comparison, defined as an activity that involves the comparison of two or more scientific articles. This class formalizes instances where scientific articles are systematically contrasted or evaluated with respect to each other.",
                "CQ": [
                    {
                        "axiom": "Article comparison subClassOf Comparison",
                        "CQ": [
                            "Is Article comparison categorized as a more specific form of Comparison?",
                            "Which comparisons encompass subtypes such as Article comparison?",
                            "What broader concept does Article comparison fall under within the ontology?"
                        ]
                    }
                ]
            },
            "obsolete_Microarray data": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "obsolete_Microarray data is defined as a subclass of Obsolete concept (EDAM), indicating that it represents a concept that is no longer in active use or has been superseded within the ontology. As an obsolete class, individuals should no longer be assigned to this category, and usage is discouraged in favor of more current concepts.",
                "CQ": [
                    {
                        "axiom": "obsolete_Microarray data subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is obsolete_Microarray data classified under Obsolete concept (EDAM)?",
                            "Which data types are specified as subclasses of Obsolete concept (EDAM)?",
                            "What broader category encompasses obsolete_Microarray data in the ontology?"
                        ]
                    }
                ]
            },
            "HilbertVis": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[has specified data input some (data and [has format specification some GFF])]",
                        "[is executed in some data visualization]",
                        "[has specified data output some (Graph plot and [has format specification some image format])]",
                        "[has specified data input some (data and [has format specification some BED])]",
                        "[is encoded in some R language]",
                        "[is executed in some data normalization]"
                    ]
                },
                "description": "HilbertVis is a subclass of software that is implemented in the R language. It is designed to process input data in either GFF or BED formats and requires explicit format specification. The software is executed within the contexts of data visualization and data normalization tasks. Its output consists of graph plots, which are specified to be in an image format. The axiomatic structure ensures that HilbertVis operates strictly on well-structured biological data formats and produces visual representations suitable for further analysis or presentation.",
                "CQ": [
                    {
                        "axiom": "HilbertVis subClassOf software",
                        "CQ": [
                            "Is HilbertVis categorized under the broader class of software?",
                            "Which software subclasses include HilbertVis as a more specific instance?",
                            "What general classifications encompass HilbertVis within the software hierarchy?"
                        ]
                    },
                    {
                        "axiom": "HilbertVis propertyRestrictions [has specified data input some (data and [has format specification some GFF])]",
                        "CQ": [
                            "Is it required that a HilbertVis includes at least one data input that has a format specification of GFF?",
                            "Does HilbertVis necessarily involve a data input that both represents data and includes the GFF format specification?",
                            "Must every specified data input for HilbertVis have its format specification set to GFF?"
                        ]
                    },
                    {
                        "axiom": "HilbertVis propertyRestrictions [is executed in some data visualization]",
                        "CQ": [
                            "Is every HilbertVis instance required to be executed in at least one data visualization?",
                            "Can a HilbertVis exist without being associated with any data visualization?",
                            "Does the definition of HilbertVis ensure execution within the context of a data visualization?"
                        ]
                    },
                    {
                        "axiom": "HilbertVis propertyRestrictions [has specified data output some (Graph plot and [has format specification some image format])]",
                        "CQ": [
                            "Must every HilbertVis have at least one specified data output that is both a graph plot and has a format specification in an image format?",
                            "Is the presence of a specified data output that is a graph plot with an associated image format specification required for an entity to be classified as HilbertVis?",
                            "Can a HilbertVis exist without providing a graph plot as a specified data output in an image format?"
                        ]
                    },
                    {
                        "axiom": "HilbertVis propertyRestrictions [has specified data input some (data and [has format specification some BED])]",
                        "CQ": [
                            "Must every HilbertVis have at least one data input characterized both as data and having a format specification in BED?",
                            "Can HilbertVis possess a specified data input without that input conforming to the BED format specification?",
                            "Is it necessary that any instance of HilbertVis includes a data input with an explicit BED format specification?"
                        ]
                    },
                    {
                        "axiom": "HilbertVis propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is every instance of HilbertVis required to be encoded in at least one R language?",
                            "Can a HilbertVis exist without being encoded in any R language?",
                            "Does the encoding property for HilbertVis necessarily involve an R language?"
                        ]
                    },
                    {
                        "axiom": "HilbertVis propertyRestrictions [is executed in some data normalization]",
                        "CQ": [
                            "Is it required that a HilbertVis instance is executed in at least one data normalization process?",
                            "Does every HilbertVis necessarily associate with being executed in some form of data normalization?",
                            "Can there exist a HilbertVis that is not executed in any data normalization?"
                        ]
                    }
                ]
            },
            "GeneSelector": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[implements some SAM]",
                        "[implements some BaldiLongT]",
                        "[implements some FoxDimmicT]",
                        "[implements some WilcEbam]",
                        "[implements some Bayesian Model]",
                        "[implements some Wilcoxon]",
                        "[implements some Linear modelling]",
                        "[implements some 't-test']",
                        "[is encoded in some R language]"
                    ]
                },
                "description": "GeneSelector is defined as a subclass of software that is encoded in the R language. Members of this class are characterized by implementing at least one of the following statistical or machine learning methods: SAM, BaldiLongT, FoxDimmicT, WilcEbam, Bayesian Model, Wilcoxon, Linear modelling, or t-test. This formalization indicates that any instance of GeneSelector must provide implementations for some of these methods in an R-based environment, supporting flexible selection and analysis of genes using diverse computational techniques.",
                "CQ": [
                    {
                        "axiom": "GeneSelector subClassOf software",
                        "CQ": [
                            "Is GeneSelector categorized under the broader class of software?",
                            "What types of software include GeneSelector as a specific instance?",
                            "Which general software categories does GeneSelector fall under?"
                        ]
                    },
                    {
                        "axiom": "GeneSelector propertyRestrictions [implements some SAM]",
                        "CQ": [
                            "Is it required for a GeneSelector to implement at least one SAM?",
                            "Which types of SAM can be implemented by a GeneSelector according to the ontology?",
                            "Are all instances of GeneSelector linked to the 'implements' property with some SAM?"
                        ]
                    },
                    {
                        "axiom": "GeneSelector propertyRestrictions [implements some BaldiLongT]",
                        "CQ": [
                            "Is every instance of GeneSelector required to implement at least one BaldiLongT?",
                            "Can GeneSelector have implementations that are not related to BaldiLongT?",
                            "Does the presence of BaldiLongT implementation necessarily characterize a GeneSelector?"
                        ]
                    },
                    {
                        "axiom": "GeneSelector propertyRestrictions [implements some FoxDimmicT]",
                        "CQ": [
                            "Is it required for a GeneSelector to implement at least one instance of FoxDimmicT?",
                            "Can a GeneSelector exist without implementing FoxDimmicT at all?",
                            "Does every GeneSelector necessarily possess the ability to implement FoxDimmicT?"
                        ]
                    },
                    {
                        "axiom": "GeneSelector propertyRestrictions [implements some WilcEbam]",
                        "CQ": [
                            "Is every GeneSelector required to implement at least one WilcEbam?",
                            "Can there be a GeneSelector that does not implement any WilcEbam?",
                            "Does the set of GeneSelectors necessarily include entities implementing WilcEbam?"
                        ]
                    },
                    {
                        "axiom": "GeneSelector propertyRestrictions [implements some Bayesian Model]",
                        "CQ": [
                            "Must every GeneSelector implement at least one Bayesian Model?",
                            "Can a GeneSelector be defined without implementing any Bayesian Model?",
                            "Is it required for a GeneSelector to implement a Bayesian Model to satisfy its property restrictions?"
                        ]
                    },
                    {
                        "axiom": "GeneSelector propertyRestrictions [implements some Wilcoxon]",
                        "CQ": [
                            "Is every GeneSelector required to implement at least one Wilcoxon?",
                            "Does a GeneSelector necessarily utilize the Wilcoxon implementation?",
                            "Can GeneSelector entities exist without implementing any Wilcoxon?"
                        ]
                    },
                    {
                        "axiom": "GeneSelector propertyRestrictions [implements some Linear modelling]",
                        "CQ": [
                            "Is it required that a GeneSelector implements at least one Linear modelling approach?",
                            "Can a GeneSelector exist without implementing any Linear modelling technique?",
                            "Does every GeneSelector necessarily implement some form of Linear modelling?"
                        ]
                    },
                    {
                        "axiom": "GeneSelector propertyRestrictions [implements some 't-test']",
                        "CQ": [
                            "Is it required that a GeneSelector must implement at least one 't-test'?",
                            "Can a GeneSelector exist without implementing any 't-test'?",
                            "Does the presence of a GeneSelector imply it implements a 't-test' in some manner?"
                        ]
                    },
                    {
                        "axiom": "GeneSelector propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is it required that every GeneSelector must be encoded in at least one R language?",
                            "Can a GeneSelector exist without being encoded in any R language?",
                            "Does the ontology specify that GeneSelectors may only be encoded in R language, or are other encoding languages permitted?"
                        ]
                    }
                ]
            },
            "Lognormal Normal with Modied Variance Model": {
                "axiom": {
                    "subClassOf": [
                        "algorithm"
                    ]
                },
                "description": "Lognormal Normal with Modified Variance Model is defined as a subclass of algorithm. This class represents a specific type of algorithm, and is formally categorized under the general class of algorithms. Further specialization or characteristics about its function, parameters, or use are not specified in the current axioms.",
                "CQ": [
                    {
                        "axiom": "Lognormal Normal with Modied Variance Model subClassOf algorithm",
                        "CQ": [
                            "Is Lognormal Normal with Modied Variance Model categorized under algorithm?",
                            "Which types of algorithm include Lognormal Normal with Modied Variance Model as a specialization?",
                            "What broader classes encompass Lognormal Normal with Modied Variance Model within the ontology?"
                        ]
                    }
                ]
            },
            "Nucleic acid stitch profile": {
                "axiom": {
                    "subClassOf": [
                        "Nucleic acid melting profile"
                    ]
                },
                "description": "Nucleic acid stitch profile is a subclass of Nucleic acid melting profile. It represents a diagrammatic or computational depiction of hybridized or double-stranded nucleic acids (such as DNA or DNA/RNA hybrids) showing partly melted conformations and their associated probabilities across a range of temperatures. The stitch profile captures detailed features such as location, size, probability, and fluctuations of possible loop openings at specific temperatures, providing insights into the thermal stability and dynamic structural transitions of nucleic acids.",
                "CQ": [
                    {
                        "axiom": "Nucleic acid stitch profile subClassOf Nucleic acid melting profile",
                        "CQ": [
                            "Is Nucleic acid stitch profile categorized under the broader class of Nucleic acid melting profile?",
                            "Which more specific profiles fall under the category of Nucleic acid melting profile?",
                            "To which higher-level profile classes does Nucleic acid stitch profile belong?"
                        ]
                    }
                ]
            },
            "Structure alignment report": {
                "axiom": {
                    "subClassOf": [
                        "Report"
                    ]
                },
                "description": "Structure alignment report is defined as a subclass of Report, serving as a broad data type used primarily as a placeholder for more specific report types. It represents an informative report detailing data derived from the alignment of molecular tertiary structures, providing insight into structural similarities or differences between molecules.",
                "CQ": [
                    {
                        "axiom": "Structure alignment report subClassOf Report",
                        "CQ": [
                            "Does Structure alignment report fall under the general classification of Report?",
                            "Which types of reports encompass Structure alignment report as a specific kind?",
                            "What broader report categories is Structure alignment report associated with?"
                        ]
                    }
                ]
            },
            "maCorrPlot": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[has specified data output some Graph plot]",
                        "[is encoded in some R language]",
                        "[has specified data input some [has format specification only (mas5 format or .rma format)]]",
                        "[is published by hasValue Bioconductor]",
                        "[is executed in some (data visualization and background correction and data normalization)]"
                    ]
                },
                "description": "maCorrPlot is a subclass of software designed for use in data visualization, background correction, and data normalization workflows. It requires data inputs specifically in mas5 or .rma formats, and its outputs include at least one Graph plot. maCorrPlot is implemented in the R language, and the authoritative source for this software is Bioconductor. This class formalizes the functional characteristics and technical restrictions of maCorrPlot, ensuring its application in specialized bioinformatic data analysis pipelines.",
                "CQ": [
                    {
                        "axiom": "maCorrPlot subClassOf software",
                        "CQ": [
                            "Is maCorrPlot categorized under the broader class of software?",
                            "Which specific instances or subclasses fall under the category of software, such as maCorrPlot?",
                            "What higher-level categories does maCorrPlot belong to within the ontology?"
                        ]
                    },
                    {
                        "axiom": "maCorrPlot propertyRestrictions [has specified data output some Graph plot]",
                        "CQ": [
                            "Must every maCorrPlot have at least one specified data output that is a Graph plot?",
                            "Is it possible for a maCorrPlot to exist without producing a Graph plot as a specified data output?",
                            "Does the specification of data output for maCorrPlot necessarily include some type of Graph plot?"
                        ]
                    },
                    {
                        "axiom": "maCorrPlot propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is it required for every instance of maCorrPlot to be encoded in at least one R language?",
                            "Does maCorrPlot necessarily involve an encoding implemented using R language?",
                            "Can a maCorrPlot exist without being associated with the R language for its encoding?"
                        ]
                    },
                    {
                        "axiom": "maCorrPlot propertyRestrictions [has specified data input some [has format specification only (mas5 format or .rma format)]]",
                        "CQ": [
                            "Is it required that any specified data input for maCorrPlot has a format specification restricted exclusively to mas5 format or .rma format?",
                            "Can maCorrPlot accept a specified data input if its format specification is neither mas5 format nor .rma format?",
                            "Does the property restriction ensure that all specified data inputs for maCorrPlot must have a format specification only among mas5 format or .rma format?"
                        ]
                    },
                    {
                        "axiom": "maCorrPlot propertyRestrictions [is published by hasValue Bioconductor]",
                        "CQ": [
                            "Is every maCorrPlot necessarily published by Bioconductor?",
                            "Can a maCorrPlot be associated with a publisher other than Bioconductor?",
                            "Does the property restriction for maCorrPlot enforce exclusive publication by Bioconductor?"
                        ]
                    },
                    {
                        "axiom": "maCorrPlot propertyRestrictions [is executed in some (data visualization and background correction and data normalization)]",
                        "CQ": [
                            "Is it required that maCorrPlot is executed in a context that involves data visualization, background correction, and data normalization?",
                            "Can maCorrPlot be executed only in situations where all three processes—data visualization, background correction, and data normalization—are present?",
                            "Does the execution of maCorrPlot necessarily entail the simultaneous involvement of data visualization, background correction, and data normalization?"
                        ]
                    }
                ]
            },
            "predictive modeling task": {
                "axiom": {
                    "subClassOf": [
                        "data mining task"
                    ]
                },
                "description": "predictive modeling task is defined as a subclass of data mining task. It involves learning a (probabilistic) predictive model from a dataset comprising pairs (d, c), where d represents the description (of type Td) and c is the class or target (of type Tc). The core objective is to learn a mapping, m :: Td → Tc, that accurately predicts the target value c from the description d. The quality of a predictive modeling task is measured by how closely the predicted target values (m(d)) match the actual observed target values in the dataset.",
                "CQ": [
                    {
                        "axiom": "predictive modeling task subClassOf data mining task",
                        "CQ": [
                            "Does predictive modeling task fall under the classification of data mining task?",
                            "Which data mining task subclasses include predictive modeling task?",
                            "What broader task categories is predictive modeling task associated with?"
                        ]
                    }
                ]
            },
            "Interaction data": {
                "axiom": {
                    "subClassOf": [
                        "data"
                    ]
                },
                "description": "Interaction data is defined as a subclass of data. It represents information specifically pertaining to interactions, thereby inheriting all characteristics of data while providing a more focused context on records or attributes related to interactive events or behaviors.",
                "CQ": [
                    {
                        "axiom": "Interaction data subClassOf data",
                        "CQ": [
                            "Is Interaction data classified as a type of data?",
                            "Which specific data subclasses include Interaction data?",
                            "What broader categories does Interaction data fall under within the data hierarchy?"
                        ]
                    }
                ]
            },
            "Spectral analysis": {
                "axiom": {
                    "subClassOf": [
                        "Analysis"
                    ]
                },
                "description": "Spectral analysis is a subclass of Analysis and refers to the process of analyzing a spectrum generated from a mass spectrometry experiment or other types of experiments. This class encompasses methods and practices for interpreting spectral data to extract relevant information, and is formally categorized under the broader concept of Analysis.",
                "CQ": [
                    {
                        "axiom": "Spectral analysis subClassOf Analysis",
                        "CQ": [
                            "Is Spectral analysis recognized as a category within the broader concept of Analysis?",
                            "Which types of Analysis include Spectral analysis as a more specific instance?",
                            "What general classes does Spectral analysis fall under within the classification of Analysis?"
                        ]
                    }
                ]
            },
            "Single particle analysis": {
                "axiom": {
                    "subClassOf": [
                        "Structure analysis",
                        "Image analysis"
                    ],
                    "propertyRestrictions": [
                        "[has topic some Structural biology]"
                    ]
                },
                "description": "Single particle analysis is a subclass of both Structure analysis and Image analysis, and is characterized by the requirement that it is related to the topic of Structural biology. It refers to an image processing technique that combines and analyzes multiple images of a particulate sample, such as proteins or viruses, to produce higher quality, interpretable images—typically used to enhance information obtained from low resolution methods like transmission electron microscopy (TEM).",
                "CQ": [
                    {
                        "axiom": "Single particle analysis subClassOf Structure analysis",
                        "CQ": [
                            "Is Single particle analysis included within the broader set of Structure analysis methods?",
                            "Which analytical approaches are more specific than Structure analysis, such as Single particle analysis?",
                            "What higher-level analysis categories encompass Single particle analysis?"
                        ]
                    },
                    {
                        "axiom": "Single particle analysis subClassOf Image analysis",
                        "CQ": [
                            "Is Single particle analysis categorized as a specific form of Image analysis?",
                            "Which types of Image analysis include Single particle analysis as a narrower concept?",
                            "What broader analytical domains encompass Single particle analysis?"
                        ]
                    },
                    {
                        "axiom": "Single particle analysis propertyRestrictions [has topic some Structural biology]",
                        "CQ": [
                            "Is it required that single particle analysis has at least one topic related to structural biology?",
                            "Can single particle analysis be associated with a topic that is not structural biology?",
                            "Must every instance of single particle analysis involve structural biology as a topic?"
                        ]
                    }
                ]
            },
            "ChemSpider entry format": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "ChemSpider entry format is defined as a subclass of Obsolete concept (EDAM). It refers to the format used for entries in ChemSpider, a database of chemical structures and property predictions. The classification under \"Obsolete concept\" indicates that this format is no longer in active use or recommended.",
                "CQ": [
                    {
                        "axiom": "ChemSpider entry format subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is ChemSpider entry format classified as a type of Obsolete concept (EDAM)?",
                            "Which specific formats are categorized under Obsolete concept (EDAM), such as ChemSpider entry format?",
                            "What broader conceptual groups encompass ChemSpider entry format according to the classification hierarchy?"
                        ]
                    }
                ]
            },
            "Codon usage": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Codon usage is defined as a subclass of the obsolete concept in EDAM, indicating that it is no longer actively maintained. The class represents a broad data type concerning patterns in the use of codons, and currently serves as a placeholder for more specific types related to codon usage data.",
                "CQ": [
                    {
                        "axiom": "Codon usage subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is codon usage classified as an obsolete concept in the EDAM ontology?",
                            "What concepts are categorized under the obsolete concept class in EDAM, including codon usage?",
                            "Which broader classes does codon usage belong to within the EDAM ontology structure?"
                        ]
                    }
                ]
            },
            "Plasmid map drawing": {
                "axiom": {
                    "subClassOf": [
                        "Map drawing"
                    ]
                },
                "description": "Plasmid map drawing is defined as a subclass of map drawing, specifically focused on the creation of circular maps depicting DNA structures, such as plasmids. This class encompasses graphical representations that illustrate the features, genes, and elements present on plasmid DNA, ensuring their visualization aligns with the broader category of map drawings.",
                "CQ": [
                    {
                        "axiom": "Plasmid map drawing subClassOf Map drawing",
                        "CQ": [
                            "Is plasmid map drawing classified under the broader category of map drawing?",
                            "Which types of map drawing include plasmid map drawing as a specific instance?",
                            "What are the parent categories of plasmid map drawing?"
                        ]
                    }
                ]
            },
            "Pathway ID (ConsensusPathDB)": {
                "axiom": {
                    "subClassOf": [
                        "Pathway or network accession",
                        "ConsensusPathDB identifier"
                    ]
                },
                "description": "Pathway ID (ConsensusPathDB) is a subclass of both \"Pathway or network accession\" and \"ConsensusPathDB identifier.\" It refers to an identifier specifically assigned to a pathway within the ConsensusPathDB pathway database. This class is intended to capture and represent accession numbers or codes uniquely identifying pathways stored in ConsensusPathDB.",
                "CQ": [
                    {
                        "axiom": "Pathway ID (ConsensusPathDB) subClassOf Pathway or network accession",
                        "CQ": [
                            "Is Pathway ID (ConsensusPathDB) a subtype of Pathway or network accession?",
                            "Which types are encompassed under Pathway or network accession, including Pathway ID (ConsensusPathDB)?",
                            "Under what broader classes can Pathway ID (ConsensusPathDB) be classified?"
                        ]
                    },
                    {
                        "axiom": "Pathway ID (ConsensusPathDB) subClassOf ConsensusPathDB identifier",
                        "CQ": [
                            "Is Pathway ID (ConsensusPathDB) included as a specific instance within the broader category of ConsensusPathDB identifier?",
                            "Which identifiers are classified under ConsensusPathDB identifier, including Pathway ID (ConsensusPathDB)?",
                            "What higher-level identifier types does Pathway ID (ConsensusPathDB) fall under?"
                        ]
                    }
                ]
            },
            "CRG Expresso Web Tool": {
                "axiom": {
                    "subClassOf": [
                        "TCoffee"
                    ],
                    "propertyRestrictions": [
                        "[has documentation hasValue ns6:gkl092]",
                        "[has interface some web user interface]",
                        "[uses software some CRG TCoffee 9.02.r1228]",
                        "[output of some (software publishing process and [has participant hasValue Centre for Genomic Regulation (CRG) of Barcelona])]"
                    ]
                },
                "description": "CRG Expresso Web Tool is defined as a subclass of TCoffee, with several specific characteristics. Individuals of this class are required to have documentation identified as ns6:gkl092 and provide at least one web user interface. They must utilize some version of the CRG TCoffee 9.02.r1228 software. Additionally, their outputs must result from a software publishing process in which the Centre for Genomic Regulation (CRG) of Barcelona is a participant. This class models web-based tools for TCoffee developed and documented by CRG, with online accessibility and provenance traceable to the institution.",
                "CQ": [
                    {
                        "axiom": "CRG Expresso Web Tool subClassOf TCoffee",
                        "CQ": [
                            "Does CRG Expresso Web Tool fall under the category of TCoffee tools?",
                            "Which variants or tools are categorized as more specific forms of TCoffee, including CRG Expresso Web Tool?",
                            "What higher-level classifications include CRG Expresso Web Tool as a member?"
                        ]
                    },
                    {
                        "axiom": "CRG Expresso Web Tool propertyRestrictions [has documentation hasValue ns6:gkl092]",
                        "CQ": [
                            "Is it necessary that the CRG Expresso Web Tool has documentation with the value ns6:gkl092?",
                            "Does the CRG Expresso Web Tool’s documentation property exclusively include the value ns6:gkl092?",
                            "Can the CRG Expresso Web Tool be considered compliant if it lacks documentation with the value ns6:gkl092?"
                        ]
                    },
                    {
                        "axiom": "CRG Expresso Web Tool propertyRestrictions [has interface some web user interface]",
                        "CQ": [
                            "Does every instance of CRG Expresso Web Tool necessarily have at least one web user interface as its interface?",
                            "Is it required for CRG Expresso Web Tool to be connected via the 'has interface' property to an entity classified as a web user interface?",
                            "Can a CRG Expresso Web Tool exist without having any web user interface associated through the 'has interface' property?"
                        ]
                    },
                    {
                        "axiom": "CRG Expresso Web Tool propertyRestrictions [uses software some CRG TCoffee 9.02.r1228]",
                        "CQ": [
                            "Is it required for the CRG Expresso Web Tool to utilize at least one instance of the CRG TCoffee 9.02.r1228 software?",
                            "Does every use of the CRG Expresso Web Tool involve employing the CRG TCoffee 9.02.r1228 as software?",
                            "Can the CRG Expresso Web Tool use software other than CRG TCoffee 9.02.r1228, or is use restricted to this version only?"
                        ]
                    },
                    {
                        "axiom": "CRG Expresso Web Tool propertyRestrictions [output of some (software publishing process and [has participant hasValue Centre for Genomic Regulation (CRG) of Barcelona])]",
                        "CQ": [
                            "Does the CRG Expresso Web Tool require its output to result from at least one software publishing process involving the Centre for Genomic Regulation (CRG) of Barcelona as a participant?",
                            "Is it necessary that any output produced by the CRG Expresso Web Tool is associated with a software publishing process in which the Centre for Genomic Regulation (CRG) of Barcelona participates?",
                            "Can the output of the CRG Expresso Web Tool ever originate from a process that is not a software publishing process involving the Centre for Genomic Regulation (CRG) of Barcelona?"
                        ]
                    }
                ]
            },
            "Gene annotation format": {
                "axiom": {
                    "subClassOf": [
                        "Format (typed)"
                    ],
                    "propertyRestrictions": [
                        "[is format of some Gene report]"
                    ]
                },
                "description": "Gene annotation format is a subclass of Format (typed) that is specifically used as the format of some Gene report. According to its definition, it represents the format of a report concerning a particular locus, gene, gene system, or groups of genes. This ensures that any Gene annotation format is necessarily associated with documenting information about genetic entities in a structured manner.",
                "CQ": [
                    {
                        "axiom": "Gene annotation format subClassOf Format (typed)",
                        "CQ": [
                            "Does Gene annotation format represent a more specific type under the general category of Format?",
                            "Which formats have Gene annotation format as a specialized form within their structure?",
                            "To which broader format categories can Gene annotation format be classified?"
                        ]
                    },
                    {
                        "axiom": "Gene annotation format propertyRestrictions [is format of some Gene report]",
                        "CQ": [
                            "Is every gene annotation format necessarily associated with at least one gene report through the 'is format of' property?",
                            "Does a gene annotation format serve as the format specifically for some gene report?",
                            "For a given gene annotation format, can we identify at least one gene report that it formats by means of the 'is format of' relationship?"
                        ]
                    }
                ]
            },
            "Transcriptomics": {
                "axiom": {
                    "subClassOf": [
                        "Genomics",
                        "Gene expression"
                    ]
                },
                "description": "Transcriptomics is defined as a subclass of both Genomics and Gene expression, focusing on the comprehensive analysis of transcriptomes—the complete set of RNA molecules present in a given cell, tissue, or organism. This class encompasses topics and research related to measuring, analyzing, and interpreting gene expression at the RNA level, thereby linking the study of genetic material (genomics) with the actual molecular output (gene expression) observed in biological samples.",
                "CQ": [
                    {
                        "axiom": "Transcriptomics subClassOf Genomics",
                        "CQ": [
                            "Is Transcriptomics classified within the hierarchy of Genomics?",
                            "What broader categories encompass Transcriptomics in the context of genomics research?",
                            "Which specialized fields are narrower in scope than Genomics, such as Transcriptomics?"
                        ]
                    },
                    {
                        "axiom": "Transcriptomics subClassOf Gene expression",
                        "CQ": [
                            "Is Transcriptomics classified under the broader category of Gene expression?",
                            "Which concepts are considered specialized types of Gene expression, such as Transcriptomics?",
                            "To which higher-level classes does Transcriptomics belong within the ontology?"
                        ]
                    }
                ]
            },
            "EMBOSS supermatcher error file": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "EMBOSS supermatcher error file is categorized as an obsolete concept (EDAM ontology), indicating it is no longer in active use. It specifically refers to error files generated by the EMBOSS (EMBASSY) supermatcher tool.",
                "CQ": [
                    {
                        "axiom": "EMBOSS supermatcher error file subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is EMBOSS supermatcher error file classified under the broader concept of Obsolete concept (EDAM)?",
                            "Which entities are specified as subclasses of Obsolete concept (EDAM), such as EMBOSS supermatcher error file?",
                            "What higher-level concepts encompass EMBOSS supermatcher error file within the ontology?"
                        ]
                    }
                ]
            },
            "BioPAX": {
                "axiom": {
                    "subClassOf": [
                        "Biological pathway or network format"
                    ]
                },
                "description": "BioPAX is defined as a subclass of biological pathway or network format, meaning it is a specific type of data format for representing biological pathways or networks. According to its current definition, BioPAX is intended for the exchange of pathway data, and its data model is defined using OWL (Web Ontology Language), ensuring structured and semantically rich data representation. This places BioPAX within the context of standardized formats facilitating pathway data sharing and interoperability in the life sciences.",
                "CQ": [
                    {
                        "axiom": "BioPAX subClassOf Biological pathway or network format",
                        "CQ": [
                            "Is BioPAX classified under the general category of Biological pathway or network format?",
                            "Which specific formats fall under the category of Biological pathway or network format, such as BioPAX?",
                            "What broader categories is BioPAX directly associated with in terms of data formats for biological pathways or networks?"
                        ]
                    }
                ]
            },
            "Sequence database name": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Sequence database name is defined as a subclass of Obsolete concept (EDAM), indicating that it represents a concept no longer in active use. The class refers to the name assigned to a molecular sequence database, specifying the designation or title under which such a database is identified. This definition clarifies that instances of this class are used to denote the names of molecular sequence databases but are considered obsolete within the ontology context.",
                "CQ": [
                    {
                        "axiom": "Sequence database name subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Sequence database name classified under the broader concept of Obsolete concept (EDAM)?",
                            "Which specific concepts are contained within the category Obsolete concept (EDAM), including Sequence database name?",
                            "To which higher-level classes does Sequence database name belong within the ontology?"
                        ]
                    }
                ]
            },
            "50-50 MANOVA": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[output of some (software publishing process and [has participant hasValue Matforsk])]",
                        "[is encoded in some R language]",
                        "[implements some 50-50 MANOVA algorithm]",
                        "[is encoded in some MATLAB language]"
                    ]
                },
                "description": "50-50 MANOVA is defined as a subclass of software. Members of this class are characterized by being outputs of some software publishing process involving Matforsk as a participant. They implement some 50-50 MANOVA algorithm, and are encoded in either R or MATLAB languages. This formalization captures 50-50 MANOVA as specialized analytical software produced in collaborative contexts with Matforsk, leveraging both R and MATLAB for implementation.",
                "CQ": [
                    {
                        "axiom": "50-50 MANOVA subClassOf software",
                        "CQ": [
                            "Is 50-50 MANOVA categorized under the broader class of software?",
                            "Which subclasses fall within the software category, and does 50-50 MANOVA appear among them?",
                            "What higher-level categories encompass 50-50 MANOVA?"
                        ]
                    },
                    {
                        "axiom": "50-50 MANOVA propertyRestrictions [output of some (software publishing process and [has participant hasValue Matforsk])]",
                        "CQ": [
                            "Does the output of a 50-50 MANOVA always involve a software publishing process that includes Matforsk as a participant?",
                            "Is it possible for the output of a 50-50 MANOVA to result from a software publishing process that does not have Matforsk as a participant?",
                            "Must every output of a 50-50 MANOVA arise from both a software publishing process and guarantee Matforsk's participation?"
                        ]
                    },
                    {
                        "axiom": "50-50 MANOVA propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is it required that 50-50 MANOVA is always encoded in some R language?",
                            "Can 50-50 MANOVA exist without being encoded in an R language?",
                            "Does every instance of 50-50 MANOVA entail encoding in at least one R language?"
                        ]
                    },
                    {
                        "axiom": "50-50 MANOVA propertyRestrictions [implements some 50-50 MANOVA algorithm]",
                        "CQ": [
                            "Does every 50-50 MANOVA propertyRestriction necessarily implement at least one 50-50 MANOVA algorithm?",
                            "Is it required for a 50-50 MANOVA propertyRestriction to have the ‘implements’ relationship with a 50-50 MANOVA algorithm?",
                            "Can a 50-50 MANOVA propertyRestriction exist without implementing any 50-50 MANOVA algorithm?"
                        ]
                    },
                    {
                        "axiom": "50-50 MANOVA propertyRestrictions [is encoded in some MATLAB language]",
                        "CQ": [
                            "Is it necessary for a 50-50 MANOVA property restriction to be encoded in at least one MATLAB language?",
                            "Does the ontology require that every 50-50 MANOVA property restriction utilize the 'is encoded in' property with some MATLAB language?",
                            "Can a 50-50 MANOVA property restriction exist without being encoded in any MATLAB language?"
                        ]
                    }
                ]
            },
            "Trauma medicine": {
                "axiom": {
                    "subClassOf": [
                        "Medicine"
                    ]
                },
                "description": "Trauma medicine is a subclass of Medicine, specifically focused on the treatment of bodily wounds or shock resulting from sudden physical injuries such as those caused by violence or accidents. This class encompasses the medical knowledge and practices involved in the immediate assessment, management, and care of trauma patients.",
                "CQ": [
                    {
                        "axiom": "Trauma medicine subClassOf Medicine",
                        "CQ": [
                            "Is Trauma medicine classified under the broader category of Medicine?",
                            "Which medical specialties fall under the category of Medicine, including Trauma medicine?",
                            "What general medical domains encompass Trauma medicine?"
                        ]
                    }
                ]
            },
            "'beadarraySNP'": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[has specified data output some Graph plot]",
                        "[has specified data input some Text data set]",
                        "[is executed in some data normalization]",
                        "[is encoded in some R language]"
                    ]
                },
                "description": "beadarraySNP is a subclass of software designed for processing text-based data sets, producing graphical plots as output. It operates as part of data normalization workflows, indicating its use in preparing or standardizing data. Additionally, beadarraySNP is implemented in the R programming language. These axioms collectively characterize beadarraySNP as a software tool focused on data normalization tasks, with specified input (text data set), output (graph plots), and implementation (R language).",
                "CQ": [
                    {
                        "axiom": "'beadarraySNP' subClassOf software",
                        "CQ": [
                            "Is beadarraySNP categorized as a type of software?",
                            "Which software subclasses include beadarraySNP?",
                            "What broader classes encompass beadarraySNP?"
                        ]
                    },
                    {
                        "axiom": "'beadarraySNP' propertyRestrictions [has specified data output some Graph plot]",
                        "CQ": [
                            "Is it required that every beadarraySNP instance must have at least one specified data output related to a Graph plot?",
                            "Does beadarraySNP necessarily produce a specified data output of the type Graph plot?",
                            "Can a beadarraySNP exist without generating a specified data output that is a Graph plot?"
                        ]
                    },
                    {
                        "axiom": "'beadarraySNP' propertyRestrictions [has specified data input some Text data set]",
                        "CQ": [
                            "Is it required for beadarraySNP to have at least one specified data input that is a Text data set?",
                            "Can a beadarraySNP exist without having any specified data input of type Text data set?",
                            "Does a beadarraySNP necessarily utilize a Text data set as a specified data input?"
                        ]
                    },
                    {
                        "axiom": "'beadarraySNP' propertyRestrictions [is executed in some data normalization]",
                        "CQ": [
                            "Is it required that beadarraySNP is associated with at least one execution in data normalization?",
                            "Can beadarraySNP exist without being executed within a data normalization process?",
                            "Does beadarraySNP necessarily involve execution in data normalization at least once?"
                        ]
                    },
                    {
                        "axiom": "'beadarraySNP' propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is it necessary for a beadarraySNP to be encoded in at least one R language?",
                            "Can a beadarraySNP exist without being encoded in any R language?",
                            "Does every beadarraySNP instance require association with some R language through the 'is encoded in' property?"
                        ]
                    }
                ]
            },
            "qpgraph": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[is executed in some descriptive statistical calculation]",
                        "[has specified data output some (Graph plot and [has format specification only R data frame])]",
                        "[has specified data input some Gene expression data]",
                        "[implements some (Pearson correlation estimator and AvgNRRs)]",
                        "[is encoded in some R language]",
                        "[is published by hasValue Bioconductor]"
                    ]
                },
                "description": "qpgraph is a subclass of software that is specifically designed for use in descriptive statistical calculations, particularly those involving gene expression data as input. It outputs graph plots, with data formats specified as R data frames. qpgraph implements Pearson correlation estimators and AvgNRRs, and is encoded in the R programming language. This software is published by Bioconductor, ensuring its integration within the bioinformatics community.",
                "CQ": [
                    {
                        "axiom": "qpgraph subClassOf software",
                        "CQ": [
                            "Is qpgraph classified as a type of software?",
                            "What are the specific subclasses of software, such as qpgraph?",
                            "Which higher-level categories include qpgraph?"
                        ]
                    },
                    {
                        "axiom": "qpgraph propertyRestrictions [is executed in some descriptive statistical calculation]",
                        "CQ": [
                            "Is every instance of qpgraph required to be associated with at least one descriptive statistical calculation through the 'is executed in' property?",
                            "Can a qpgraph exist if it is not executed in any descriptive statistical calculation?",
                            "Does the execution of a qpgraph necessarily involve participation in a descriptive statistical calculation?"
                        ]
                    },
                    {
                        "axiom": "qpgraph propertyRestrictions [has specified data output some (Graph plot and [has format specification only R data frame])]",
                        "CQ": [
                            "Is it necessary for a qpgraph to have at least one specified data output that is both a Graph plot and has format specification restricted to R data frame?",
                            "Does every specified data output related to a qpgraph in this context always correspond to a Graph plot whose format specification is only an R data frame?",
                            "Can a qpgraph possess a specified data output that is not a Graph plot or whose format specification is not exclusively an R data frame?"
                        ]
                    },
                    {
                        "axiom": "qpgraph propertyRestrictions [has specified data input some Gene expression data]",
                        "CQ": [
                            "Is it required that qpgraph has at least one specified data input related to gene expression data?",
                            "Can qpgraph be associated with specified data input other than gene expression data?",
                            "Must each qpgraph instance include gene expression data among its specified data inputs?"
                        ]
                    },
                    {
                        "axiom": "qpgraph propertyRestrictions [implements some (Pearson correlation estimator and AvgNRRs)]",
                        "CQ": [
                            "Does every qpgraph have to implement at least one functionality that is both a Pearson correlation estimator and an AvgNRRs?",
                            "Is it required for qpgraph to employ methods that satisfy the criteria of both Pearson correlation estimator and AvgNRRs?",
                            "Can an entity be classified as qpgraph if it lacks an implementation comprising both Pearson correlation estimator and AvgNRRs?"
                        ]
                    },
                    {
                        "axiom": "qpgraph propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is every QPGraph necessarily encoded in at least one R language?",
                            "Can a QPGraph exist without being encoded in any R language?",
                            "Does the definition of QPGraph require that there is some encoding in an R language?"
                        ]
                    },
                    {
                        "axiom": "qpgraph propertyRestrictions [is published by hasValue Bioconductor]",
                        "CQ": [
                            "Is every qpgraph necessarily published by Bioconductor?",
                            "Can any instance of qpgraph be published by a source other than Bioconductor?",
                            "Are qpgraphs restricted to having their publisher as only Bioconductor?"
                        ]
                    }
                ]
            },
            "Immunoproteins, genes and antigens": {
                "axiom": {
                    "subClassOf": [
                        "Protein families",
                        "Immunology"
                    ]
                },
                "description": "Immunoproteins, genes and antigens is a class defined as a subclass of both Protein families and Immunology. This class covers entities such as T cell receptors (TR), major histocompatibility complex (MHC), immunoglobulin superfamily (IgSF)/antibodies, and the major histocompatibility complex superfamily (MhcSF). It includes immunity-related genes, proteins, their ligands, and antigens involved in immune system function.",
                "CQ": [
                    {
                        "axiom": "Immunoproteins, genes and antigens subClassOf Protein families",
                        "CQ": [
                            "Are Immunoproteins, genes and antigens categorized as a type of Protein families?",
                            "Which subclasses fall under Protein families, and does this include Immunoproteins, genes and antigens?",
                            "Into which upper-level categories are Immunoproteins, genes and antigens classified?"
                        ]
                    },
                    {
                        "axiom": "Immunoproteins, genes and antigens subClassOf Immunology",
                        "CQ": [
                            "Are Immunoproteins, genes and antigens classified as a subgroup under Immunology?",
                            "Which classes fall under the broader category of Immunology, including Immunoproteins, genes and antigens?",
                            "What are the higher-level categories to which Immunoproteins, genes and antigens are assigned?"
                        ]
                    }
                ]
            },
            "DTD": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "DTD is a subclass of Obsolete concept (EDAM) and represents a document type definition (DTD). This class denotes a concept that is considered obsolete within the ontology. DTD is defined as a specification that describes the structure and permissible content of an XML document.",
                "CQ": [
                    {
                        "axiom": "DTD subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is DTD categorized under the broader concept of Obsolete concept (EDAM)?",
                            "Which concepts are classified as more specific instances of Obsolete concept (EDAM), such as DTD?",
                            "What higher-level classifications does DTD fall under in the ontology?"
                        ]
                    }
                ]
            },
            "G protein-coupled receptors (GPCR)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "G protein-coupled receptors (GPCR) are defined as a subclass of Obsolete concept (EDAM). This class covers the topic of G-protein coupled receptors (GPCRs), as specified in its definition. Classification as an obsolete concept indicates that this class is no longer in active use or has been superseded within the ontology.",
                "CQ": [
                    {
                        "axiom": "G protein-coupled receptors (GPCR) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Are G protein-coupled receptors (GPCR) classified under the obsolete concepts in EDAM ontology?",
                            "Which entities are categorized as specializations of Obsolete concept (EDAM), including G protein-coupled receptors (GPCR)?",
                            "What broader categories encompass G protein-coupled receptors (GPCR) within the EDAM framework?"
                        ]
                    }
                ]
            },
            "geneseq": {
                "axiom": {
                    "subClassOf": [
                        "EMBL-like (text)"
                    ]
                },
                "description": "geneseq is defined as a subclass of EMBL-like (text), indicating that it inherits the foundational characteristics of EMBL-like sequence formats. The class represents data in the Geneseq sequence format, serving as a specific variant or instance within the broader category of EMBL-like text formats.",
                "CQ": [
                    {
                        "axiom": "geneseq subClassOf EMBL-like (text)",
                        "CQ": [
                            "Is geneseq categorized as a type of EMBL-like?",
                            "Which sequence types are narrower classifications under EMBL-like, such as geneseq?",
                            "What broader sequence categories encompass geneseq?"
                        ]
                    }
                ]
            },
            "Molecular similarity score": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Molecular similarity score is defined as a subclass of Obsolete concept (EDAM). It refers to a score that quantifies the structural similarities between two molecules. This class represents outdated or deprecated concepts within the ontology context.",
                "CQ": [
                    {
                        "axiom": "Molecular similarity score subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Does Molecular similarity score fall under the category of Obsolete concept (EDAM)?",
                            "What are the more specific concepts classified beneath Obsolete concept (EDAM), such as Molecular similarity score?",
                            "Which broader categories encompass Molecular similarity score within the EDAM ontology?"
                        ]
                    }
                ]
            },
            "MEDME": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[has specified data input some (data and [has format specification some R data frame])]",
                        "[has specified data output some (data and [has format specification some GFF])]",
                        "[is encoded in some R language]"
                    ]
                },
                "description": "MEDME is defined as a subclass of software. It is characterized by its ability to accept specified data input, where the input data must have a format specification of an R data frame. The software produces specified data output, which must have a format specification of GFF (General Feature Format). Additionally, MEDME is encoded in the R programming language. This formalization ensures that any instance of MEDME must process data inputs as R data frames and produce outputs in GFF format, utilizing R for its implementation.",
                "CQ": [
                    {
                        "axiom": "MEDME subClassOf software",
                        "CQ": [
                            "Is MEDME categorized under the broader class of software?",
                            "Which software subclasses include MEDME?",
                            "What are the direct superclasses of MEDME?"
                        ]
                    },
                    {
                        "axiom": "MEDME propertyRestrictions [has specified data input some (data and [has format specification some R data frame])]",
                        "CQ": [
                            "Does MEDME require at least one specified data input with a format specification of an R data frame?",
                            "Must every specified data input associated with MEDME include a format specification that is an R data frame?",
                            "Is it possible for MEDME to have a specified data input that lacks both the 'data' type and an 'R data frame' format specification?"
                        ]
                    },
                    {
                        "axiom": "MEDME propertyRestrictions [has specified data output some (data and [has format specification some GFF])]",
                        "CQ": [
                            "Does a MEDME resource necessarily have a specified data output that includes a data entity with at least one format specification of type GFF?",
                            "Is it possible for a MEDME entity to have a specified data output that lacks a data component formatted according to the GFF specification?",
                            "Are MEDME's specified data outputs required to provide some data that conforms to the GFF format specification?"
                        ]
                    },
                    {
                        "axiom": "MEDME propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is every instance of MEDME necessarily associated with being encoded in at least one R language?",
                            "Can a MEDME be considered valid if it is not encoded in any R language?",
                            "Does the property restriction on MEDME allow encoding only when an R language is present?"
                        ]
                    }
                ]
            },
            "graphical user interface": {
                "axiom": {
                    "subClassOf": [
                        "software interface"
                    ]
                },
                "description": "graphical user interface is defined as a subclass of software interface. This means every graphical user interface is a type of software interface, distinguished by its focus on visual elements for user interaction such as windows, icons, and menus, as opposed to purely text-based interfaces.",
                "CQ": [
                    {
                        "axiom": "graphical user interface subClassOf software interface",
                        "CQ": [
                            "Is graphical user interface classified under the broader category of software interface?",
                            "Which interfaces are specialized types of software interface, such as graphical user interface?",
                            "What higher-level categories encompass graphical user interface?"
                        ]
                    }
                ]
            },
            "AtlasImage": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[output of some (software publishing process and [has participant hasValue Clontech Laboratories, Inc])]"
                    ]
                },
                "description": "AtlasImage is defined as a subclass of software, specifically distinguished by being the output of at least one software publishing process in which Clontech Laboratories, Inc is a participant. This ensures that any instance of AtlasImage is software generated or published through such a process involving Clontech Laboratories, Inc.",
                "CQ": [
                    {
                        "axiom": "AtlasImage subClassOf software",
                        "CQ": [
                            "Is AtlasImage classified under the broader category of software?",
                            "Which specific entities are categorized as subclasses of software, such as AtlasImage?",
                            "To what higher-level categories does AtlasImage pertain within the ontology?"
                        ]
                    },
                    {
                        "axiom": "AtlasImage propertyRestrictions [output of some (software publishing process and [has participant hasValue Clontech Laboratories, Inc])]",
                        "CQ": [
                            "Is every AtlasImage necessarily the output of a software publishing process involving Clontech Laboratories, Inc. as a participant?",
                            "Can an AtlasImage be produced without the involvement of Clontech Laboratories, Inc. in the software publishing process?",
                            "Are AtlasImages limited to being outputs only from software publishing processes that have Clontech Laboratories, Inc. as a participant?"
                        ]
                    }
                ]
            },
            "Article report": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Article report is a subclass of Obsolete concept (EDAM). It refers to data derived from the analysis of a scientific text, such as a full-text article from a scientific journal. This classification indicates that the \"Article report\" concept is considered obsolete within the EDAM ontology.",
                "CQ": [
                    {
                        "axiom": "Article report subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Article report classified under the broader category of Obsolete concept (EDAM)?",
                            "Which specific concepts fall under Obsolete concept (EDAM), including Article report?",
                            "What more general concepts encompass Article report within the ontology?"
                        ]
                    }
                ]
            },
            "GenePix Pro 3": {
                "axiom": {
                    "subClassOf": [
                        "GenePix Pro"
                    ]
                },
                "description": "GenePix Pro 3 is defined as a subclass of GenePix Pro. This means that every instance of GenePix Pro 3 is also an instance of GenePix Pro, inheriting all characteristics and constraints of the parent class. There are no additional distinguishing axioms or restrictions specified for this class beyond its hierarchical classification.",
                "CQ": [
                    {
                        "axiom": "GenePix Pro 3 subClassOf GenePix Pro",
                        "CQ": [
                            "Is GenePix Pro 3 categorized as a type of GenePix Pro?",
                            "Which software types are classified under GenePix Pro, including GenePix Pro 3?",
                            "What broader categories does GenePix Pro 3 fall under in the classification hierarchy?"
                        ]
                    }
                ]
            },
            "Lipids": {
                "axiom": {
                    "subClassOf": [
                        "Biochemistry"
                    ]
                },
                "description": "Lipids is defined as a subclass of Biochemistry, formally situating it within the domain of biochemical studies. The class concerns lipids and their structures, encompassing topics related to the molecular composition, properties, and functions of lipids within biological systems.",
                "CQ": [
                    {
                        "axiom": "Lipids subClassOf Biochemistry",
                        "CQ": [
                            "Are lipids encompassed within the broader classification of biochemistry?",
                            "Which entities are more specific subcategories under biochemistry, such as lipids?",
                            "What higher-level categories include lipids in their classification hierarchy?"
                        ]
                    }
                ]
            },
            "Complex Estimation Algorithm": {
                "axiom": {
                    "subClassOf": [
                        "algorithm"
                    ]
                },
                "description": "Complex Estimation Algorithm is defined as a subclass of algorithm. This means that every complex estimation algorithm is an algorithm, inheriting all general properties applicable to algorithms, while also indicating a specialization focused on complex estimation tasks. No additional axioms or property restrictions are specified.",
                "CQ": [
                    {
                        "axiom": "Complex Estimation Algorithm subClassOf algorithm",
                        "CQ": [
                            "Is Complex Estimation Algorithm categorized under the broader class of algorithm?",
                            "What types fall under the classification of algorithm, including Complex Estimation Algorithm?",
                            "Which more abstract groupings does Complex Estimation Algorithm belong to within the ontology?"
                        ]
                    }
                ]
            },
            "Gene features (exonic splicing enhancer)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Gene features (exonic splicing enhancer) is defined as a subclass of Obsolete concept (EDAM), indicating that this concept is no longer in active use within the ontology. It refers to a report on exonic splicing enhancers (ESE) within an exon, documenting regions that promote the inclusion of exons during RNA splicing. The classification as obsolete suggests that researchers should refer to more current terms or concepts for this topic.",
                "CQ": [
                    {
                        "axiom": "Gene features (exonic splicing enhancer) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is exonic splicing enhancer classified as an obsolete concept in EDAM?",
                            "Which gene features are designated as obsolete concepts according to EDAM?",
                            "What broader categories encompass exonic splicing enhancer within the EDAM classification?"
                        ]
                    }
                ]
            },
            "Gene expression profile clustering": {
                "axiom": {
                    "subClassOf": [
                        "Clustering",
                        "Gene expression profile comparison"
                    ],
                    "propertyRestrictions": [
                        "[has output some Processed microarray data]"
                    ]
                },
                "description": "Gene expression profile clustering is a subclass of both Clustering and Gene expression profile comparison. It involves performing cluster analysis specifically on gene expression (microarray) data, grouping similar gene expression profiles together. By axiom, any instance of Gene expression profile clustering must have as output some Processed microarray data. This class is used to formally represent analyses that discover patterns or groups within complex gene expression datasets.",
                "CQ": [
                    {
                        "axiom": "Gene expression profile clustering subClassOf Clustering",
                        "CQ": [
                            "Does gene expression profile clustering fall under the category of clustering?",
                            "What are the more specific forms of clustering that include gene expression profile clustering?",
                            "Which broader classification does gene expression profile clustering belong to?"
                        ]
                    },
                    {
                        "axiom": "Gene expression profile clustering subClassOf Gene expression profile comparison",
                        "CQ": [
                            "Does Gene expression profile clustering fall under the broader class of Gene expression profile comparison?",
                            "Which specific techniques are categorized as subclasses of Gene expression profile comparison, including Gene expression profile clustering?",
                            "What are the immediate parent concepts of Gene expression profile clustering in this ontology?"
                        ]
                    },
                    {
                        "axiom": "Gene expression profile clustering propertyRestrictions [has output some Processed microarray data]",
                        "CQ": [
                            "Does every gene expression profile clustering necessarily produce at least one output of processed microarray data?",
                            "Is it required that gene expression profile clustering leads to the availability of processed microarray data as an output?",
                            "Can there be a gene expression profile clustering without resulting in any processed microarray data as output?"
                        ]
                    }
                ]
            },
            "Cell biology": {
                "axiom": {
                    "subClassOf": [
                        "Biology"
                    ]
                },
                "description": "Cell biology is a subclass of Biology, focusing on the study of cells. This class encompasses topics related to cells, including key genes and proteins involved in the cell cycle. It serves to address the molecular and functional aspects of cells within the broader context of biological sciences.",
                "CQ": [
                    {
                        "axiom": "Cell biology subClassOf Biology",
                        "CQ": [
                            "Is Cell biology categorized under the broader discipline of Biology?",
                            "What specialized fields are classified as subtypes of Biology, such as Cell biology?",
                            "Which higher-level domains encompass Cell biology within their classification hierarchy?"
                        ]
                    }
                ]
            },
            "Sequence alignment (nucleic acid)": {
                "axiom": {
                    "subClassOf": [
                        "Sequence alignment"
                    ]
                },
                "description": "Sequence alignment (nucleic acid) is a subclass of Sequence alignment, specifically referring to the alignment of multiple nucleotide sequences. This class captures the process by which two or more nucleic acid (DNA or RNA) sequences are arranged to identify regions of similarity, which may indicate functional, structural, or evolutionary relationships.",
                "CQ": [
                    {
                        "axiom": "Sequence alignment (nucleic acid) subClassOf Sequence alignment",
                        "CQ": [
                            "Is Sequence alignment (nucleic acid) classified under the broader category of Sequence alignment?",
                            "What specific types fall under Sequence alignment, and does this include Sequence alignment (nucleic acid)?",
                            "Which hierarchical parent classes is Sequence alignment (nucleic acid) associated with?"
                        ]
                    }
                ]
            },
            "Sequence length range": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Sequence length range is a subclass of Obsolete concept (EDAM). It represents the specification of range(s) of length of sequences. This class is considered obsolete within the ontology, and its primary purpose was to define limits or intervals for the lengths that sequences can have.",
                "CQ": [
                    {
                        "axiom": "Sequence length range subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Sequence length range classified as a kind of Obsolete concept (EDAM)?",
                            "Which categories encompass Sequence length range, specifically considering its relationship to Obsolete concept (EDAM)?",
                            "What are the more specific subclasses represented under Obsolete concept (EDAM), such as Sequence length range?"
                        ]
                    }
                ]
            },
            "Splice site prediction": {
                "axiom": {
                    "subClassOf": [
                        "Nucleic acid sequence feature detection"
                    ],
                    "propertyRestrictions": [
                        "[has topic some Gene structure]"
                    ]
                },
                "description": "Splice site prediction is defined as a subclass of nucleic acid sequence feature detection, specifically involving detection methods that are related to gene structure. Members of this class identify, predict, or analyze splice sites in nucleotide sequences—including methods that may require input of pre-mRNA or genomic DNA sequences. This ensures a focus on the prediction or analysis of gene structure elements relevant to splicing within nucleotide data.",
                "CQ": [
                    {
                        "axiom": "Splice site prediction subClassOf Nucleic acid sequence feature detection",
                        "CQ": [
                            "Is Splice site prediction categorized as a type of Nucleic acid sequence feature detection?",
                            "Which specific activities are classified under Nucleic acid sequence feature detection, such as Splice site prediction?",
                            "What higher-level categories encompass Splice site prediction within the ontology?"
                        ]
                    },
                    {
                        "axiom": "Splice site prediction propertyRestrictions [has topic some Gene structure]",
                        "CQ": [
                            "Is it required that splice site prediction concerns gene structure as a topic?",
                            "Can every instance of splice site prediction be associated with at least one gene structure through the 'has topic' relationship?",
                            "Is there a requirement for splice site prediction to reference gene structure in its property restrictions?"
                        ]
                    }
                ]
            },
            "FACS data": {
                "axiom": {
                    "subClassOf": [
                        "data"
                    ]
                },
                "description": "FACS data is defined as a subclass of data. This means that any instance of FACS data is categorized as data, with no additional constraints or distinguishing properties specified by the current axiom.",
                "CQ": [
                    {
                        "axiom": "FACS data subClassOf data",
                        "CQ": [
                            "Is FACS data recognized as a specific type under the general category of data?",
                            "Which data subtypes encompass FACS data as a more specialized instance?",
                            "What broader data classifications does FACS data fall under?"
                        ]
                    }
                ]
            },
            "dynamic Bayesian network model": {
                "axiom": {
                    "subClassOf": [
                        "Bayesian Model"
                    ]
                },
                "description": "dynamic Bayesian network model is defined as a subclass of Bayesian Model. This means every dynamic Bayesian network model is, by definition, a type of Bayesian Model, inheriting all its fundamental properties and characteristics. This class typically represents Bayesian models that allow for temporal or sequential representation of probabilistic dependencies, suitable for modeling dynamic systems where variables evolve over time.",
                "CQ": [
                    {
                        "axiom": "dynamic Bayesian network model subClassOf Bayesian Model",
                        "CQ": [
                            "Is dynamic Bayesian network model classified as a type of Bayesian Model?",
                            "Which models are categorized under Bayesian Model, including dynamic Bayesian network model?",
                            "What broader modeling categories encompass dynamic Bayesian network model?"
                        ]
                    }
                ]
            },
            "affypdnn": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[has specified data input some (Text data set and [has format specification some R data frame])]",
                        "[is encoded in some R language]",
                        "[has specified data output some Graph plot]",
                        "[is published by hasValue Bioconductor]"
                    ]
                },
                "description": "affypdnn is defined as a subclass of software, with several specific characteristics. It operates on input that must be a text data set in the format of an R data frame, and it is encoded in the R programming language. The software produces output in the form of graph plots. Additionally, it is explicitly published by Bioconductor. These axioms collectively specify affypdnn as R-based software for producing graphical representations from structured text data sets, distributed via Bioconductor.",
                "CQ": [
                    {
                        "axiom": "affypdnn subClassOf software",
                        "CQ": [
                            "Is affypdnn categorized as a type of software?",
                            "What other subclasses fall under software alongside affypdnn?",
                            "Which higher-level classes encompass affypdnn?"
                        ]
                    },
                    {
                        "axiom": "affypdnn propertyRestrictions [has specified data input some (Text data set and [has format specification some R data frame])]",
                        "CQ": [
                            "Does affypdnn require at least one specified data input that is both a Text data set and has a format specification of R data frame?",
                            "Is it necessary for affypdnn to accept as specified data input only those datasets that are text-based and formatted as R data frames?",
                            "Can affypdnn have a specified data input unless it meets the criteria of being a Text data set with a format specification of R data frame?"
                        ]
                    },
                    {
                        "axiom": "affypdnn propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is every instance of affypdnn required to be encoded in at least one R language?",
                            "Can affypdnn exist without being encoded in any R language?",
                            "Does affypdnn necessarily imply the use of R language for its encoding property?"
                        ]
                    },
                    {
                        "axiom": "affypdnn propertyRestrictions [has specified data output some Graph plot]",
                        "CQ": [
                            "Is it necessary for affypdnn to have the property 'has specified data output' with a Graph plot?",
                            "Can affypdnn have a data output other than a Graph plot specified by the property 'has specified data output'?",
                            "Does affypdnn always produce at least one Graph plot as a specified data output?"
                        ]
                    },
                    {
                        "axiom": "affypdnn propertyRestrictions [is published by hasValue Bioconductor]",
                        "CQ": [
                            "Is every instance of affypdnn necessarily published by Bioconductor?",
                            "Can affypdnn exist without being published by Bioconductor?",
                            "Are there any publishers other than Bioconductor associated with affypdnn?"
                        ]
                    }
                ]
            },
            "dat": {
                "axiom": {
                    "subClassOf": [
                        "Textual format",
                        "Gene expression report format"
                    ],
                    "propertyRestrictions": [
                        "[is format of some Microarray spots image]"
                    ]
                },
                "description": "dat is a format defined as a subclass of both Textual format and Gene expression report format, specifically used for representing Affymetrix data files containing raw image data. Members of this class serve as formats for at least one Microarray spots image, indicating their direct association with raw image outputs from microarray experiments. This formalization ensures that any instance of dat is recognized as a textual and gene expression report format, uniquely related to microarray spot images.",
                "CQ": [
                    {
                        "axiom": "dat subClassOf Textual format",
                        "CQ": [
                            "Is dat categorized under the broader class of Textual format?",
                            "Which instances are considered direct subclasses of Textual format, including dat?",
                            "To which upper-level classes is dat hierarchically related?"
                        ]
                    },
                    {
                        "axiom": "dat subClassOf Gene expression report format",
                        "CQ": [
                            "Does the dat format fall under the category of Gene expression report formats?",
                            "What are the specific formats classified as Gene expression report formats, including dat?",
                            "Which broader reporting format categories encompass dat?"
                        ]
                    },
                    {
                        "axiom": "dat propertyRestrictions [is format of some Microarray spots image]",
                        "CQ": [
                            "Is it required that propertyRestrictions has the format property with some Microarray spots image?",
                            "Does every instance of propertyRestrictions involve a format that includes at least one Microarray spots image?",
                            "Can propertyRestrictions exist without being the format of any Microarray spots image?"
                        ]
                    }
                ]
            },
            "Functional enrichment": {
                "axiom": {
                    "subClassOf": [
                        "Gene expression data analysis",
                        "Enrichment"
                    ],
                    "propertyRestrictions": [
                        "[has topic some Function analysis]"
                    ]
                },
                "description": "Functional enrichment is a subclass of both Gene expression data analysis and Enrichment, and is characterized by the requirement that it has as its topic some form of function analysis. This class encompasses methods that analyze a set of genes—often derived from gene expression profiles or other gene sets—using an ontology of gene functions, such as the Gene Ontology (GO). The analysis typically takes a set of Gene IDs as input and produces a ranked list of functional terms (e.g., GO terms) each associated with a p-value, reflecting the statistical significance of enrichment.",
                "CQ": [
                    {
                        "axiom": "Functional enrichment subClassOf Gene expression data analysis",
                        "CQ": [
                            "Does Functional enrichment fall under the broader classification of Gene expression data analysis?",
                            "Which analysis types are narrower in scope than Gene expression data analysis, such as Functional enrichment?",
                            "What higher-level categories encompass Functional enrichment within gene-related analytical processes?"
                        ]
                    },
                    {
                        "axiom": "Functional enrichment subClassOf Enrichment",
                        "CQ": [
                            "Is Functional enrichment classified under the broader category of Enrichment?",
                            "Which enrichment types are specialized forms of Enrichment, such as Functional enrichment?",
                            "What higher-level categories include Functional enrichment as a member?"
                        ]
                    },
                    {
                        "axiom": "Functional enrichment propertyRestrictions [has topic some Function analysis]",
                        "CQ": [
                            "Must every instance of Functional enrichment be associated with at least one topic of Function analysis?",
                            "Can a Functional enrichment process exist without having the topic of Function analysis?",
                            "Is it possible for Functional enrichment to have topics other than Function analysis?"
                        ]
                    }
                ]
            },
            "rsbml": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[is executed in some (parse and cross validation)]",
                        "[is encoded in some R language]",
                        "[is published by hasValue Bioconductor]",
                        "[has specified data input some [has format specification only SBML]]",
                        "[has specified data output some [has format specification only XML]]"
                    ]
                },
                "description": "rsbml is defined as a subclass of software, specifically characterized by several axioms. It must be executed through at least one of the following processes: parse or cross validation. The software is encoded in the R programming language and is published by Bioconductor. Regarding data interaction, rsbml takes as input data that is strictly formatted according to the SBML specification and produces output data formatted exclusively according to the XML specification. These axioms collectively ensure that any instance of rsbml adheres to these strict requirements concerning its function, implementation language, publisher, and I/O data format.",
                "CQ": [
                    {
                        "axiom": "rsbml subClassOf software",
                        "CQ": [
                            "Is rsbml categorized under the broader class of software?",
                            "Which subclasses fall under software, with rsbml as an example?",
                            "What higher-level classifications encompass rsbml?"
                        ]
                    },
                    {
                        "axiom": "rsbml propertyRestrictions [is executed in some (parse and cross validation)]",
                        "CQ": [
                            "Is it required that rsbml propertyRestrictions is executed in at least one context involving parse or cross validation?",
                            "Can rsbml propertyRestrictions execution occur outside the processes of parse or cross validation?",
                            "Does every instance of rsbml propertyRestrictions need to be executed in either a parse or cross validation scenario?"
                        ]
                    },
                    {
                        "axiom": "rsbml propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is it required that every rsbml property restriction be encoded in at least one R language?",
                            "Can an rsbml property restriction exist without being encoded in any R language?",
                            "Does the ontology allow for multiple R languages to encode a single rsbml property restriction?"
                        ]
                    },
                    {
                        "axiom": "rsbml propertyRestrictions [is published by hasValue Bioconductor]",
                        "CQ": [
                            "Is every rsbml resource necessarily published by Bioconductor according to the property restriction?",
                            "Can an rsbml entity have a publisher other than Bioconductor under this axiom?",
                            "Does the restriction on rsbml enforce that Bioconductor must always be the value for its publisher property?"
                        ]
                    },
                    {
                        "axiom": "rsbml propertyRestrictions [has specified data input some [has format specification only SBML]]",
                        "CQ": [
                            "Is it required that an rsbml propertyRestrictions entity with a specified data input must ensure all such inputs follow only the SBML format specification?",
                            "Does an rsbml propertyRestrictions entity necessarily allow at least one specified data input, with all inputs conforming exclusively to the SBML format specification?",
                            "If a specified data input associated with rsbml propertyRestrictions uses a format specification other than SBML, does this violate the defined restriction?"
                        ]
                    },
                    {
                        "axiom": "rsbml propertyRestrictions [has specified data output some [has format specification only XML]]",
                        "CQ": [
                            "Does every specified data output of an rsbml necessarily have a format specification limited to XML?",
                            "Is it possible for an rsbml to have a specified data output whose format specification is not XML?",
                            "Are all values of the format specification for data outputs specified by rsbml instances restricted to XML only?"
                        ]
                    }
                ]
            },
            "Atomic x coordinate": {
                "axiom": {
                    "subClassOf": [
                        "Atomic coordinate"
                    ]
                },
                "description": "Atomic x coordinate is a subclass of Atomic coordinate that specifically represents the Cartesian x coordinate of an atom within a molecular structure. This class is used to denote the x-axis spatial position of an atom, distinguishing it from other possible spatial coordinates in molecular data.",
                "CQ": [
                    {
                        "axiom": "Atomic x coordinate subClassOf Atomic coordinate",
                        "CQ": [
                            "Is Atomic x coordinate classified under the broader category of Atomic coordinate?",
                            "Which specific subtypes fall within Atomic coordinate, such as Atomic x coordinate?",
                            "What are the hierarchical parent classes of Atomic x coordinate?"
                        ]
                    }
                ]
            },
            "Northern blot experiment": {
                "axiom": {
                    "subClassOf": [
                        "Proteomics experiment"
                    ]
                },
                "description": "Northern blot experiment is defined as a subclass of Proteomics experiment. It concerns the investigation and analysis techniques used in Northern Blot experiments, which typically involve the detection and study of RNA molecules. This class is used to capture information, protocols, or procedures specifically related to Northern Blot experimental methods under the broader category of proteomics research.",
                "CQ": [
                    {
                        "axiom": "Northern blot experiment subClassOf Proteomics experiment",
                        "CQ": [
                            "Does the category of Proteomics experiment include more specific experiments such as Northern blot experiment?",
                            "Is Northern blot experiment a specialized form of Proteomics experiment?",
                            "Which experiments fall under the class of Proteomics experiment, including Northern blot experiment?"
                        ]
                    }
                ]
            },
            "Ensembl ID ('Danio rerio')": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Ensembl ID ('Danio rerio') is defined as a subclass of 'Obsolete concept (EDAM)'. It represents the identifier assigned to an entry—such as an exon, gene, transcript, or protein—in the Ensembl 'core' database for the 'Danio rerio' (zebrafish) division. This class specifies identifiers that are considered obsolete within the EDAM ontology context.",
                "CQ": [
                    {
                        "axiom": "Ensembl ID ('Danio rerio') subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Ensembl ID ('Danio rerio') categorized under the broader class of Obsolete concept (EDAM)?",
                            "Which identifiers are classified as subclasses of Obsolete concept (EDAM)?",
                            "What parent classes are defined for Ensembl ID ('Danio rerio') within the ontology?"
                        ]
                    }
                ]
            },
            "System metadata": {
                "axiom": {
                    "subClassOf": [
                        "Resource metadata"
                    ]
                },
                "description": "System metadata is defined as a subclass of Resource metadata. It specifically encompasses metadata that pertains to software, hardware, or other aspects of a computer system, distinguishing it from broader resource metadata by its focus on computer system components and their characteristics.",
                "CQ": [
                    {
                        "axiom": "System metadata subClassOf Resource metadata",
                        "CQ": [
                            "Is System metadata categorized under Resource metadata?",
                            "Which types of metadata are included within the category of Resource metadata?",
                            "What broader metadata categories encompass System metadata?"
                        ]
                    }
                ]
            },
            "EMBL accession": {
                "axiom": {
                    "subClassOf": [
                        "EMBL/GenBank/DDBJ ID"
                    ]
                },
                "description": "EMBL accession is defined as a subclass of EMBL/GenBank/DDBJ ID, which means it is a specific type of sequence identifier within the broader INSDC (International Nucleotide Sequence Database Collaboration) context. Members of this class are accession numbers assigned to entries in the EMBL sequence database, serving as unique identifiers for nucleotide sequence records within EMBL.",
                "CQ": [
                    {
                        "axiom": "EMBL accession subClassOf EMBL/GenBank/DDBJ ID",
                        "CQ": [
                            "Is every EMBL accession classified as an EMBL/GenBank/DDBJ ID?",
                            "Which identifiers are specified as subclasses under EMBL/GenBank/DDBJ ID, such as EMBL accession?",
                            "What are the direct superclass categories for EMBL accession?"
                        ]
                    }
                ]
            },
            "Gene regulatory network processing": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Gene regulatory network processing is defined as a subclass of Obsolete concept (EDAM). It refers to processes that read and/or write networks of gene regulation. As an obsolete concept, its use is deprecated in favor of more current or accurate terms, but historically it represented the computational handling or manipulation of gene regulatory networks.",
                "CQ": [
                    {
                        "axiom": "Gene regulatory network processing subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is gene regulatory network processing categorized under obsolete concept (EDAM)?",
                            "Which concepts are classified as specializations of obsolete concept (EDAM), including gene regulatory network processing?",
                            "What higher-level classifications does gene regulatory network processing fall under?"
                        ]
                    }
                ]
            },
            "dasdna": {
                "axiom": {
                    "subClassOf": [
                        "XML",
                        "Sequence record format (XML)"
                    ]
                },
                "description": "dasdna is a subclass of both XML and Sequence record format (XML), indicating that it is an XML-based sequence record format. Specifically, it refers to the DAS sequence (XML) format, which is restricted to nucleotide-only data. The use of this format is deprecated.",
                "CQ": [
                    {
                        "axiom": "dasdna subClassOf XML",
                        "CQ": [
                            "Is dasdna categorized under the broader class of XML?",
                            "Which subclasses fall under the XML category, such as dasdna?",
                            "What are the parent classes associated with dasdna?"
                        ]
                    },
                    {
                        "axiom": "dasdna subClassOf Sequence record format (XML)",
                        "CQ": [
                            "Is dasdna categorized as a specific type within Sequence record format (XML)?",
                            "What formats are considered narrower concepts under Sequence record format (XML), such as dasdna?",
                            "Which broader format classifications does dasdna fall under?"
                        ]
                    }
                ]
            },
            "web user interface": {
                "axiom": {
                    "subClassOf": [
                        "graphical user interface"
                    ]
                },
                "description": "web user interface is defined as a subclass of graphical user interface, indicating that it inherits all properties and characteristics of graphical user interfaces. This class encompasses user interfaces accessed through web technologies, typically rendered in web browsers, and facilitates user interaction with software applications over the internet or an intranet.",
                "CQ": [
                    {
                        "axiom": "web user interface subClassOf graphical user interface",
                        "CQ": [
                            "Is web user interface classified as a type of graphical user interface?",
                            "Which interfaces fall under the category of graphical user interface, such as web user interface?",
                            "What broader categories encompass web user interface?"
                        ]
                    }
                ]
            },
            "Acuity": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[output of some (software publishing process and [has participant hasValue Molecular Devices])]"
                    ]
                },
                "description": "Acuity is defined as a subclass of software, and is characterized by being the output of at least one software publishing process in which Molecular Devices is a participant. This means that any instance of Acuity must be a software product that results from a publishing process involving Molecular Devices.",
                "CQ": [
                    {
                        "axiom": "Acuity subClassOf software",
                        "CQ": [
                            "Is Acuity categorized as a type of software?",
                            "Which software subclasses include Acuity?",
                            "What broader categories does Acuity fall under within the software hierarchy?"
                        ]
                    },
                    {
                        "axiom": "Acuity propertyRestrictions [output of some (software publishing process and [has participant hasValue Molecular Devices])]",
                        "CQ": [
                            "Does every instance of Acuity necessarily produce an output related to a software publishing process involving Molecular Devices as a participant?",
                            "Can Acuity have any output that is not a result of a software publishing process with Molecular Devices participating?",
                            "Is it required that all outputs of Acuity are strictly derived from software publishing processes that include Molecular Devices as a participant?"
                        ]
                    }
                ]
            },
            "Data retrieval": {
                "axiom": {
                    "subClassOf": [
                        "Query and retrieval"
                    ],
                    "propertyRestrictions": [
                        "[has input some Identifier]"
                    ]
                },
                "description": "Data retrieval is defined as a subclass of Query and retrieval, specifically focusing on retrieving an entry or part of an entry from a data resource that matches a supplied query. Every instance of Data retrieval requires an input that is an Identifier, such as an accession number or an indexed term. This process may involve obtaining primary data and annotations associated with the query. The class formalizes retrieval activities where a unique identifier or an indexed keyword is used to locate and access relevant data entries within a resource.",
                "CQ": [
                    {
                        "axiom": "Data retrieval subClassOf Query and retrieval",
                        "CQ": [
                            "Is Data retrieval categorized under the broader class of Query and retrieval?",
                            "Which types are recognized as specific forms of Query and retrieval, including Data retrieval?",
                            "What higher-level groups does Data retrieval belong to in this ontology?"
                        ]
                    },
                    {
                        "axiom": "Data retrieval propertyRestrictions [has input some Identifier]",
                        "CQ": [
                            "Is it required that a Data retrieval instance has at least one 'has input' relationship to an Identifier?",
                            "Can a Data retrieval process exist without being associated with any Identifier through the 'has input' property?",
                            "Does Data retrieval necessarily involve input that is classified as an Identifier?"
                        ]
                    }
                ]
            },
            "pure dna": {
                "axiom": {
                    "subClassOf": [
                        "dna",
                        "pure nucleotide"
                    ]
                },
                "description": "pure dna is defined as a subclass of both dna and pure nucleotide. It represents an alphabet for a DNA sequence that may include ambiguous or unknown nucleotide positions, but does not allow any non-sequence characters. This ensures that pure dna sequences are composed strictly of nucleotides (with possible ambiguities), excluding all extraneous symbols.",
                "CQ": [
                    {
                        "axiom": "pure dna subClassOf dna",
                        "CQ": [
                            "Does pure dna fall under the general classification of dna?",
                            "Which forms of dna include pure dna as a specific type?",
                            "What broader categories encompass pure dna in the ontology?"
                        ]
                    },
                    {
                        "axiom": "pure dna subClassOf pure nucleotide",
                        "CQ": [
                            "Does pure dna qualify as an instance within the pure nucleotide category?",
                            "Which specific entities are classified under pure nucleotide, including pure dna?",
                            "To which broader classes is pure dna hierarchically associated?"
                        ]
                    }
                ]
            },
            "Raw microarray data": {
                "axiom": {
                    "subClassOf": [
                        "Experimental measurement",
                        "Microarray hybridisation data"
                    ]
                },
                "description": "Raw microarray data is a subclass of both Experimental measurement and Microarray hybridisation data. It refers to the unprocessed data generated from microarray experiments, as commonly found in formats like Affymetrix CEL or GPR files. This data typically adheres to MIAME compliance and captures the initial measurements resulting from hybridisation events in a microarray assay.",
                "CQ": [
                    {
                        "axiom": "Raw microarray data subClassOf Experimental measurement",
                        "CQ": [
                            "Does raw microarray data fall under the broader category of experimental measurement?",
                            "Which specific types of experimental measurement include raw microarray data?",
                            "What are the parent categories to which raw microarray data is assigned?"
                        ]
                    },
                    {
                        "axiom": "Raw microarray data subClassOf Microarray hybridisation data",
                        "CQ": [
                            "Is Raw microarray data classified under the broader category of Microarray hybridisation data?",
                            "Which specific data types fall under Microarray hybridisation data, such as Raw microarray data?",
                            "What are the parent categories for Raw microarray data within the ontology?"
                        ]
                    }
                ]
            },
            "Nucleic acid features report (expression signal)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Nucleic acid features report (expression signal) is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer maintained or recommended for use. This class concerns regions within a nucleic acid sequence that contain a signal which alters a biological function, capturing sequence features relevant to changes in gene expression or functional activity.",
                "CQ": [
                    {
                        "axiom": "Nucleic acid features report (expression signal) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Nucleic acid features report (expression signal) classified as a more specific concept under Obsolete concept (EDAM)?",
                            "What specialized types are listed within Obsolete concept (EDAM), including Nucleic acid features report (expression signal)?",
                            "Which broader groups encompass Nucleic acid features report (expression signal)?"
                        ]
                    }
                ]
            },
            "NONMEM data format": {
                "axiom": {
                    "subClassOf": [
                        "data format specification"
                    ]
                },
                "description": "NONMEM data format is a subclass of data format specification. It represents a specific data format standard used primarily for the input and handling of pharmacometric and population modeling data in NONMEM software. This class encapsulates all data structure requirements and constraints defined for compliant data interchange within NONMEM workflows.",
                "CQ": [
                    {
                        "axiom": "NONMEM data format subClassOf data format specification",
                        "CQ": [
                            "Is NONMEM data format categorized under data format specification?",
                            "Which data format specifications encompass more specific types such as NONMEM data format?",
                            "What are the superclass categories to which NONMEM data format belongs?"
                        ]
                    }
                ]
            },
            "CAF": {
                "axiom": {
                    "subClassOf": [
                        "Textual format",
                        "Sequence assembly format (text)"
                    ]
                },
                "description": "CAF (Common Assembly Format) is a subclass of both Textual format and Sequence assembly format (text). It is a sequence assembly format that encodes information in text form, specifically designed to represent contigs, base-call qualities, and other metadata related to assembled genetic sequences. This formalization situates CAF within the hierarchy of textual data formats for sequence assembly, highlighting its structure and intended use for storing detailed assembly metadata.",
                "CQ": [
                    {
                        "axiom": "CAF subClassOf Textual format",
                        "CQ": [
                            "Does CAF fall under the category of Textual format?",
                            "What kinds of Textual format include CAF as a more specific type?",
                            "What broader categories encompass CAF in the ontology hierarchy?"
                        ]
                    },
                    {
                        "axiom": "CAF subClassOf Sequence assembly format (text)",
                        "CQ": [
                            "Does CAF fall under the general classification of Sequence assembly format?",
                            "What specific format types, such as CAF, are classified as subclasses of Sequence assembly format?",
                            "Which broader format categories include CAF as a more specific type?"
                        ]
                    }
                ]
            },
            "Protein structure raw data": {
                "axiom": {
                    "subClassOf": [
                        "Experimental measurement"
                    ]
                },
                "description": "Protein structure raw data is defined as a subclass of Experimental measurement. It represents raw data obtained from experimental methods used to determine protein structure. This class serves as a broad, placeholder data type, primarily intended to facilitate navigation within EDAM, rather than for direct annotation.",
                "CQ": [
                    {
                        "axiom": "Protein structure raw data subClassOf Experimental measurement",
                        "CQ": [
                            "Is Protein structure raw data classified as a more specific type under Experimental measurement?",
                            "Which subtypes are encompassed within Experimental measurement, specifically including Protein structure raw data?",
                            "To which higher-level categories does Protein structure raw data pertain within the ontology?"
                        ]
                    }
                ]
            },
            "ASCII format": {
                "axiom": {
                    "subClassOf": [
                        "plain text file format"
                    ]
                },
                "description": "ASCII format is defined as a subclass of plain text file format. This means that any instance of ASCII format is also a plain text file format, characterized by storing data as unformatted text using the ASCII character encoding standard. The definition ensures that ASCII format files are recognized specifically as plain text representations, inheriting all properties of plain text file formats.",
                "CQ": [
                    {
                        "axiom": "ASCII format subClassOf plain text file format",
                        "CQ": [
                            "Is ASCII format categorized as a more specific type under plain text file format?",
                            "Which file formats are subclasses within the plain text file format category, including ASCII format?",
                            "What broader file format categories does ASCII format fall under?"
                        ]
                    }
                ]
            },
            "Phylogenetic tree generation (from gene frequencies)": {
                "axiom": {
                    "subClassOf": [
                        "Phylogenetic tree generation (data centric)"
                    ],
                    "propertyRestrictions": [
                        "[has topic some Gene expression]",
                        "[has input some Phylogenetic gene frequencies data]"
                    ]
                },
                "description": "Phylogenetic tree generation (from gene frequencies) is a subclass of Phylogenetic tree generation (data centric), specifically focusing on constructing phylogenetic trees using gene frequency data as input. This class is characterized by its association with the topic of gene expression and requires phylogenetic gene frequencies data as input. The formal definition emphasizes that the process involves phylogenetic tree construction derived from gene frequency data.",
                "CQ": [
                    {
                        "axiom": "Phylogenetic tree generation (from gene frequencies) subClassOf Phylogenetic tree generation (data centric)",
                        "CQ": [
                            "Is Phylogenetic tree generation (data centric) a generalization of Phylogenetic tree generation (from gene frequencies)?",
                            "Which methods fall under the broader class of Phylogenetic tree generation (data centric)?",
                            "What are the more specific types of Phylogenetic tree generation (data centric) that include Phylogenetic tree generation (from gene frequencies)?"
                        ]
                    },
                    {
                        "axiom": "Phylogenetic tree generation (from gene frequencies) propertyRestrictions [has topic some Gene expression]",
                        "CQ": [
                            "Must phylogenetic tree generation (from gene frequencies) always involve at least one topic related to gene expression?",
                            "Is it necessary for the process of phylogenetic tree generation (from gene frequencies) to be associated with gene expression as a topic?",
                            "Can phylogenetic tree generation (from gene frequencies) occur without referencing gene expression in its topic property?"
                        ]
                    },
                    {
                        "axiom": "Phylogenetic tree generation (from gene frequencies) propertyRestrictions [has input some Phylogenetic gene frequencies data]",
                        "CQ": [
                            "Does phylogenetic tree generation necessarily require at least one input of phylogenetic gene frequencies data?",
                            "Is it possible to perform phylogenetic tree generation without providing any phylogenetic gene frequencies data as input?",
                            "Must all instances of phylogenetic tree generation use some phylogenetic gene frequencies data as input?"
                        ]
                    }
                ]
            },
            "Protein structure prediction": {
                "axiom": {
                    "subClassOf": [
                        "Protein analysis",
                        "Prediction and recognition (protein)",
                        "Protein sequence analysis",
                        "Structure prediction",
                        "Protein structure analysis",
                        "Structure prediction"
                    ],
                    "propertyRestrictions": [
                        "[has output some Protein structure]",
                        "[has topic some Protein structure prediction]"
                    ]
                },
                "description": "Protein structure prediction is a subclass of Protein analysis, Protein sequence analysis, Structure prediction, and Protein structure analysis, and is grouped under the broader category of Prediction and recognition (protein). This class concerns methods and topics related to the prediction, modelling, recognition, or design of protein secondary, tertiary, or other structural features. Individuals of this class are associated with outputs that include some form of protein structure, and the class specifically includes topics relevant to protein structure prediction.",
                "CQ": [
                    {
                        "axiom": "Protein structure prediction subClassOf Protein analysis",
                        "CQ": [
                            "Is protein structure prediction categorized as a type of protein analysis?",
                            "What specialized analyses fall under the category of protein analysis, such as protein structure prediction?",
                            "Which broader methodological groups encompass protein structure prediction?"
                        ]
                    },
                    {
                        "axiom": "Protein structure prediction subClassOf Prediction and recognition (protein)",
                        "CQ": [
                            "Is Protein structure prediction categorized under Prediction and recognition (protein)?",
                            "Which specific prediction types, such as Protein structure prediction, fall under the class Prediction and recognition (protein)?",
                            "What broader categories encompass Protein structure prediction in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Protein structure prediction subClassOf Protein sequence analysis",
                        "CQ": [
                            "Is protein structure prediction categorized under the domain of protein sequence analysis?",
                            "Which analysis methods are more specific than protein sequence analysis, such as protein structure prediction?",
                            "What broader analytical categories does protein structure prediction fall under?"
                        ]
                    },
                    {
                        "axiom": "Protein structure prediction subClassOf Structure prediction",
                        "CQ": [
                            "Is Protein structure prediction a specialized form of Structure prediction?",
                            "Which prediction types fall under the category of Structure prediction, specifically including Protein structure prediction?",
                            "To what broader prediction categories does Protein structure prediction belong?"
                        ]
                    },
                    {
                        "axiom": "Protein structure prediction subClassOf Protein structure analysis",
                        "CQ": [
                            "Is Protein structure analysis a broader category that encompasses Protein structure prediction?",
                            "Which specialized analyses fall under the category of Protein structure analysis, such as Protein structure prediction?",
                            "What more general domains is Protein structure prediction associated with within protein studies?"
                        ]
                    },
                    {
                        "axiom": "Protein structure prediction propertyRestrictions [has output some Protein structure]",
                        "CQ": [
                            "Is it necessary for protein structure prediction to have an output that is a protein structure?",
                            "Does protein structure prediction always produce at least one protein structure as output?",
                            "Can the output of protein structure prediction include entities other than protein structures?"
                        ]
                    },
                    {
                        "axiom": "Protein structure prediction propertyRestrictions [has topic some Protein structure prediction]",
                        "CQ": [
                            "Is it necessary for a protein structure prediction property restriction to involve the topic of protein structure prediction?",
                            "Can a protein structure prediction property restriction exist without having 'has topic' set to protein structure prediction?",
                            "Does every protein structure prediction property restriction entail some association with the topic of protein structure prediction?"
                        ]
                    }
                ]
            },
            "Dotplot plotting": {
                "axiom": {
                    "subClassOf": [
                        "Plotting",
                        "Sequence word comparison",
                        "Sequence alignment visualisation"
                    ],
                    "propertyRestrictions": [
                        "[has output some Dotplot]"
                    ]
                },
                "description": "Dotplot plotting is a subclass of Plotting, Sequence word comparison, and Sequence alignment visualisation, indicating its role in both visual representation and comparative analysis of biological sequences. Any Dotplot plotting process is characterized by producing some Dotplot as output. It specifically involves drawing a dotplot to visualize sequence similarities, which are identified through word-matching or character comparison techniques. This class formalizes visualization methods for interpreting sequence alignments using dotplots.",
                "CQ": [
                    {
                        "axiom": "Dotplot plotting subClassOf Plotting",
                        "CQ": [
                            "Is Dotplot plotting categorized as a specific type of Plotting?",
                            "Which subcategories are encompassed by Plotting, including Dotplot plotting?",
                            "To which broader classes does Dotplot plotting belong within the ontology?"
                        ]
                    },
                    {
                        "axiom": "Dotplot plotting subClassOf Sequence word comparison",
                        "CQ": [
                            "Does Dotplot plotting fall under the category of Sequence word comparison?",
                            "Which methods are classified under Sequence word comparison, such as Dotplot plotting?",
                            "What broader methodological class does Dotplot plotting belong to?"
                        ]
                    },
                    {
                        "axiom": "Dotplot plotting subClassOf Sequence alignment visualisation",
                        "CQ": [
                            "Does Dotplot plotting fall within the broader category of Sequence alignment visualisation?",
                            "What specific visualisation techniques are classified as subtypes of Sequence alignment visualisation, including Dotplot plotting?",
                            "Which upper-level visualisation categories encompass Dotplot plotting?"
                        ]
                    },
                    {
                        "axiom": "Dotplot plotting propertyRestrictions [has output some Dotplot]",
                        "CQ": [
                            "Is it required that every Dotplot plotting entity produces at least one output of type Dotplot?",
                            "Can a plotting process classified as Dotplot plotting have an output other than Dotplot?",
                            "Does the Dotplot plotting process necessarily generate a Dotplot as an output?"
                        ]
                    }
                ]
            },
            "Obsolete": {
                "axiom": {
                    "subClassOf": [
                        "Development status"
                    ],
                    "disjointWith": [
                        "Maintained"
                    ]
                },
                "description": "Obsolete is defined as a subclass of Development status, indicating it represents a specific developmental state. It is explicitly disjoint with Maintained, meaning an entity cannot simultaneously be classified as both Obsolete and Maintained. This ensures a clear distinction between entities that are no longer in active use or development (Obsolete) and those that continue to be supported or updated (Maintained).",
                "CQ": [
                    {
                        "axiom": "Obsolete subClassOf Development status",
                        "CQ": [
                            "Is Obsolete classified under the broader category of Development status?",
                            "What specific statuses are classified as subclasses of Development status, including Obsolete?",
                            "To which higher-level classes does Obsolete conceptually belong?"
                        ]
                    },
                    {
                        "axiom": "Obsolete disjointWith Maintained",
                        "CQ": [
                            "What logical separation is asserted between Obsolete and Maintained entities in the ontology?",
                            "Is it permitted for a resource to be classified as both Obsolete and Maintained?",
                            "Which classes are declared as disjoint with Maintained in the ontology?"
                        ]
                    }
                ]
            },
            "Protein interaction network comparison": {
                "axiom": {
                    "subClassOf": [
                        "Protein interaction network analysis",
                        "Protein function comparison"
                    ]
                },
                "description": "Protein interaction network comparison is a subclass of both protein interaction network analysis and protein function comparison. This class encompasses the process of comparing two or more networks of protein interactions, facilitating the evaluation of similarities and differences between distinct protein interaction networks to gain insights into protein functions and relationships across biological systems.",
                "CQ": [
                    {
                        "axiom": "Protein interaction network comparison subClassOf Protein interaction network analysis",
                        "CQ": [
                            "Is Protein interaction network comparison categorized as a specific kind of Protein interaction network analysis?",
                            "Which analysis methods are subclassed under Protein interaction network analysis, such as Protein interaction network comparison?",
                            "What broader analytical categories does Protein interaction network comparison inherit from?"
                        ]
                    },
                    {
                        "axiom": "Protein interaction network comparison subClassOf Protein function comparison",
                        "CQ": [
                            "Is Protein interaction network comparison classified as a more specific type of Protein function comparison?",
                            "Which kinds of comparisons fall under the category of Protein function comparison, and does this include Protein interaction network comparison?",
                            "To what broader comparison classes does Protein interaction network comparison belong?"
                        ]
                    }
                ]
            },
            "Phylogeny": {
                "axiom": {
                    "subClassOf": [
                        "Evolutionary biology"
                    ]
                },
                "description": "Phylogeny is defined as a subclass of Evolutionary biology, focusing on the study of evolutionary relationships among organisms. This class encompasses diverse phylogenetic methods, including the construction of phylogenetic trees from molecular sequence or morphological data, simulation of DNA sequence evolution, estimation or use of molecular clock and stratigraphic (age) data, and techniques for studying gene evolution. These methods collectively facilitate the analysis and inference of evolutionary patterns and relationships within and across species.",
                "CQ": [
                    {
                        "axiom": "Phylogeny subClassOf Evolutionary biology",
                        "CQ": [
                            "Is Phylogeny categorized under the broader domain of Evolutionary biology?",
                            "Which fields are classified as subtypes of Evolutionary biology, such as Phylogeny?",
                            "What higher-level disciplines encompass Phylogeny within their scope?"
                        ]
                    }
                ]
            },
            "Sequence signature recognition": {
                "axiom": {
                    "subClassOf": [
                        "Sequence feature detection"
                    ],
                    "propertyRestrictions": [
                        "[has output some Sequence signature matches]",
                        "[has topic some Sequence sites, features and motifs]"
                    ]
                },
                "description": "Sequence signature recognition is a subclass of Sequence feature detection concerned with identifying (scanning for) known motifs, patterns, and regular expressions in molecular sequence(s). It is characterized by generating outputs that include Sequence signature matches and is associated with topics such as Sequence sites, features, and motifs. This class formally captures analyses that detect established sequence elements within biological sequences.",
                "CQ": [
                    {
                        "axiom": "Sequence signature recognition subClassOf Sequence feature detection",
                        "CQ": [
                            "Is Sequence feature detection a generalization of Sequence signature recognition?",
                            "Which detection methods are more specific than Sequence feature detection, such as Sequence signature recognition?",
                            "What broader detection categories include Sequence signature recognition?"
                        ]
                    },
                    {
                        "axiom": "Sequence signature recognition propertyRestrictions [has output some Sequence signature matches]",
                        "CQ": [
                            "Does sequence signature recognition always produce at least one output that is a sequence signature match?",
                            "Is it required that the output of sequence signature recognition includes some sequence signature matches?",
                            "Can sequence signature recognition result in an output that does not involve any sequence signature matches?"
                        ]
                    },
                    {
                        "axiom": "Sequence signature recognition propertyRestrictions [has topic some Sequence sites, features and motifs]",
                        "CQ": [
                            "Does a sequence signature recognition necessarily involve at least one topic concerning sequence sites, features, or motifs?",
                            "Is it required for a sequence signature recognition to be associated with sequence sites, features, or motifs by the 'has topic' property?",
                            "Can a sequence signature recognition exist without having 'has topic' linking it to sequence sites, features, or motifs?"
                        ]
                    }
                ]
            },
            "quantsmooth": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[is encoded in some R language]",
                        "[is executed in some data visualization]",
                        "[has specified data input some (ILLUMINA data or Gene expression dataset)]",
                        "[has specified data output some Graph plot]"
                    ]
                },
                "description": "quantsmooth is defined as a subclass of software, characterized by several key attributes: it is implemented in the R language and operates within the context of data visualization. Members of this class must accept input in the form of either ILLUMINA data or Gene expression datasets, and the output generated is specifically a Graph plot. This ensures that any instance of quantsmooth is a piece of software for data visualization, encoded in R, designed to process biological datasets and produce graphical representations.",
                "CQ": [
                    {
                        "axiom": "quantsmooth subClassOf software",
                        "CQ": [
                            "Is quantsmooth included among the subclasses of software?",
                            "Which general categories encompass quantsmooth as a specialized type?",
                            "What software categories is quantsmooth classified under?"
                        ]
                    },
                    {
                        "axiom": "quantsmooth propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is it required that Quantsmooth is encoded in at least one R language?",
                            "Can Quantsmooth have an encoding only in R language?",
                            "Does the encoding of Quantsmooth necessarily involve the R language in some capacity?"
                        ]
                    },
                    {
                        "axiom": "quantsmooth propertyRestrictions [is executed in some data visualization]",
                        "CQ": [
                            "Is it required that every instance of quantsmooth is executed in at least one data visualization?",
                            "Can a quantsmooth instance exist without being executed in any data visualization?",
                            "Does the definition of quantsmooth ensure that it must participate in some form of data visualization execution?"
                        ]
                    },
                    {
                        "axiom": "quantsmooth propertyRestrictions [has specified data input some (ILLUMINA data or Gene expression dataset)]",
                        "CQ": [
                            "Does quantsmooth require at least one specified data input that is either an ILLUMINA data or a Gene expression dataset?",
                            "Is it necessary for every instance of quantsmooth to work with a data input that is of type ILLUMINA data or Gene expression dataset?",
                            "Can quantsmooth have any specified data input that is not categorized as either ILLUMINA data or Gene expression dataset?"
                        ]
                    },
                    {
                        "axiom": "quantsmooth propertyRestrictions [has specified data output some Graph plot]",
                        "CQ": [
                            "Is it required that Quantsmooth must produce at least one specified data output that is a Graph plot?",
                            "Can Quantsmooth generate a specified data output other than a Graph plot?",
                            "Does Quantsmooth always provide a specified data output in the form of a Graph plot?"
                        ]
                    }
                ]
            },
            "timecourse": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[implements some RMA]",
                        "[is published by hasValue Bioconductor]",
                        "[is encoded in some R language]",
                        "[has specified data input some Gene expression dataset]",
                        "[has specified data output some [has format specification only CEL binary format]]"
                    ]
                },
                "description": "timecourse is defined as a subclass of software, distinguished by several specific characteristics. Instances of timecourse implement some RMA (Robust Multi-array Average) algorithm and are published exclusively by Bioconductor. They are encoded in the R programming language. For data handling, timecourse software requires as input some gene expression dataset and produces as output data that is strictly in the CEL binary format, conforming to the respective format specification. These axioms ensure that timecourse represents specialized software tools for processing gene expression datasets using the Bioconductor framework and RMA methodology within the R language environment.",
                "CQ": [
                    {
                        "axiom": "timecourse subClassOf software",
                        "CQ": [
                            "Is timecourse categorized under software?",
                            "Which software subclasses include timecourse?",
                            "What are the direct superclasses of timecourse?"
                        ]
                    },
                    {
                        "axiom": "timecourse propertyRestrictions [implements some RMA]",
                        "CQ": [
                            "Is it required that every timecourse necessarily implements at least one RMA?",
                            "Does a timecourse exhibit the implements property only with instances of RMA?",
                            "Can a timecourse exist without implementing any RMA?"
                        ]
                    },
                    {
                        "axiom": "timecourse propertyRestrictions [is published by hasValue Bioconductor]",
                        "CQ": [
                            "Is it required that every timecourse propertyRestriction is published only by Bioconductor?",
                            "Can timecourse propertyRestrictions be considered valid if they are published by any source other than Bioconductor?",
                            "Does the definition of timecourse propertyRestrictions exclude publication by platforms other than Bioconductor?"
                        ]
                    },
                    {
                        "axiom": "timecourse propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is every timecourse necessarily encoded in at least one R language?",
                            "Can a timecourse exist without being encoded in some R language?",
                            "Does the ontology require that any encoding of a timecourse involves R language?"
                        ]
                    },
                    {
                        "axiom": "timecourse propertyRestrictions [has specified data input some Gene expression dataset]",
                        "CQ": [
                            "Is it required that a timecourse has at least one specified data input that is a gene expression dataset?",
                            "Can a timecourse exist without any specified data input of type gene expression dataset?",
                            "Does the definition of timecourse permit only those data inputs that are gene expression datasets as specified?"
                        ]
                    },
                    {
                        "axiom": "timecourse propertyRestrictions [has specified data output some [has format specification only CEL binary format]]",
                        "CQ": [
                            "Is it required that any specified data output in a timecourse must have format specification restricted solely to the CEL binary format?",
                            "Does the ontology allow a timecourse to have a specified data output with a format specification other than CEL binary format?",
                            "Must every output designated by has specified data output for a timecourse include at least one instance where its format specification is only CEL binary format?"
                        ]
                    }
                ]
            },
            "Protein family report": {
                "axiom": {
                    "subClassOf": [
                        "Protein report"
                    ],
                    "propertyRestrictions": [
                        "[has topic some Protein families]"
                    ]
                },
                "description": "Protein family report is defined as a subclass of Protein report, focusing specifically on content whose topic concerns one or more protein families. It is formally characterized by the requirement that it pertains to, or discusses, some protein families. According to its current definition, it provides informative content on a specific protein family or related classification, encompassing groups of protein sequences or structures.",
                "CQ": [
                    {
                        "axiom": "Protein family report subClassOf Protein report",
                        "CQ": [
                            "Is Protein report a broader category that encompasses Protein family report?",
                            "Which types of reports are classified under Protein report, including Protein family report?",
                            "To what higher-level categories does Protein family report belong?"
                        ]
                    },
                    {
                        "axiom": "Protein family report propertyRestrictions [has topic some Protein families]",
                        "CQ": [
                            "Is it required that a protein family report has at least one topic related to protein families?",
                            "Does every protein family report necessarily cover a topic concerning protein families?",
                            "Can a protein family report exist without having a topic associated with any protein family?"
                        ]
                    }
                ]
            },
            "Smultron": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[is executed in some text editing]",
                        "[has version hasValue 3.5.1]",
                        "[has specified data input some (Ontology and [has format specification some Textual format])]",
                        "[has declared status some Latest release]",
                        "[has website homepage hasValue http://www.peterborgapps.com/smultron/]"
                    ]
                },
                "description": "Smultron is a subclass of software, specifically defined as an application that is executed in at least one text editing context. Each instance has the specific version 3.5.1 and is characterized as handling data inputs that are ontologies provided in some textual format. Smultron is declared to have the latest release status, and its official homepage is http://www.peterborgapps.com/smultron/.",
                "CQ": [
                    {
                        "axiom": "Smultron subClassOf software",
                        "CQ": [
                            "Is Smultron classified as a type of software?",
                            "Which entities are specified as subclasses under software, including Smultron?",
                            "What broader categories include Smultron within their classification?"
                        ]
                    },
                    {
                        "axiom": "Smultron propertyRestrictions [is executed in some text editing]",
                        "CQ": [
                            "Is it necessary for Smultron to be executed in at least one text editing environment?",
                            "Does the execution context of Smultron always involve a text editing activity?",
                            "Can Smultron exist without being performed in text editing scenarios?"
                        ]
                    },
                    {
                        "axiom": "Smultron propertyRestrictions [has version hasValue 3.5.1]",
                        "CQ": [
                            "Is every instance of Smultron required to have the property 'has version' with the value 3.5.1?",
                            "Can any Smultron exist without its 'has version' property set to 3.5.1?",
                            "Does the definition of Smultron exclude all versions except 3.5.1 for its 'has version' property?"
                        ]
                    },
                    {
                        "axiom": "Smultron propertyRestrictions [has specified data input some (Ontology and [has format specification some Textual format])]",
                        "CQ": [
                            "Must every Smultron have at least one specified data input that is both an Ontology and uses a Textual format as its format specification?",
                            "Is it possible for a Smultron to have a specified data input that does not satisfy being an Ontology with a Textual format as its format specification?",
                            "Are all specified data inputs of Smultron required to have the format specification of Textual format if they are Ontologies?"
                        ]
                    },
                    {
                        "axiom": "Smultron propertyRestrictions [has declared status some Latest release]",
                        "CQ": [
                            "Must every instance of Smultron have at least one declared status corresponding to a Latest release?",
                            "Can there exist a Smultron that does not have its declared status set to Latest release?",
                            "Is it required for Smultron to be linked via has declared status to some entity categorized as Latest release?"
                        ]
                    },
                    {
                        "axiom": "Smultron propertyRestrictions [has website homepage hasValue http://www.peterborgapps.com/smultron/]",
                        "CQ": [
                            "Is Smultron required to have the website homepage value set to http://www.peterborgapps.com/smultron/?",
                            "Does every instance of Smultron have the website homepage http://www.peterborgapps.com/smultron/?",
                            "Can a Smultron entity have a website homepage other than http://www.peterborgapps.com/smultron/?"
                        ]
                    }
                ]
            },
            "sizepower": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[is executed in some (background correction and data normalization and differential expression analysis)]",
                        "[has specified data output some [has format specification only R data frame]]",
                        "[has specified data input some [has format specification only R data frame]]",
                        "[is encoded in some R language]",
                        "[is published by hasValue Bioconductor]"
                    ]
                },
                "description": "sizepower is a subclass of software, specifically characterized by several key properties. It is implemented in the R programming language and is published by Bioconductor. The software is designed to be executed in the context of background correction, data normalization, and differential expression analysis tasks. It accepts input data exclusively in the R data frame format and produces output data also solely as R data frames. This ensures consistency in data formatting throughout its use and integration within bioinformatics workflows.",
                "CQ": [
                    {
                        "axiom": "sizepower subClassOf software",
                        "CQ": [
                            "Is sizepower categorized under the broader class of software?",
                            "Which subclasses are defined within software, such as sizepower?",
                            "What are the general classes that encompass sizepower?"
                        ]
                    },
                    {
                        "axiom": "sizepower propertyRestrictions [is executed in some (background correction and data normalization and differential expression analysis)]",
                        "CQ": [
                            "Must every instance of sizepower involve execution in all three processes: background correction, data normalization, and differential expression analysis?",
                            "Can sizepower be executed in a context where only some, but not all, of background correction, data normalization, and differential expression analysis are performed?",
                            "Are there cases where sizepower execution occurs without being associated with background correction, data normalization, or differential expression analysis?"
                        ]
                    },
                    {
                        "axiom": "sizepower propertyRestrictions [has specified data output some [has format specification only R data frame]]",
                        "CQ": [
                            "Must every sizepower include at least one specified data output whose format specification is limited exclusively to R data frames?",
                            "Is it mandatory for the format specification of any data output provided by sizepower to be restricted only to R data frames?",
                            "Are there any data outputs associated with sizepower that can have format specifications other than R data frames?"
                        ]
                    },
                    {
                        "axiom": "sizepower propertyRestrictions [has specified data input some [has format specification only R data frame]]",
                        "CQ": [
                            "Is it required that sizepower accepts as specified data input only those with a format specification of R data frame?",
                            "Can sizepower have specified data input in any format other than R data frame according to the property restriction?",
                            "Does sizepower necessarily restrict its specified data input to entities whose format specification is limited to R data frame?"
                        ]
                    },
                    {
                        "axiom": "sizepower propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is it necessary for a sizepower propertyRestriction to be encoded in at least one R language?",
                            "Can a sizepower propertyRestriction exist without being associated with any R language?",
                            "Does every sizepower propertyRestriction require an encoding in an R language?"
                        ]
                    },
                    {
                        "axiom": "sizepower propertyRestrictions [is published by hasValue Bioconductor]",
                        "CQ": [
                            "Is every instance of sizepower necessarily published by Bioconductor?",
                            "Can sizepower ever be published by an entity other than Bioconductor?",
                            "Does sizepower have the publishing entity restricted solely to Bioconductor?"
                        ]
                    }
                ]
            },
            "CDF binary format": {
                "axiom": {
                    "subClassOf": [
                        "Binary format"
                    ],
                    "propertyRestrictions": [
                        "[is published by hasValue Affymetrix]"
                    ]
                },
                "description": "CDF binary format is defined as a subclass of Binary format and is specifically published by Affymetrix. This class represents the binary variant of the CDF format; due to historical uncertainty about the format's original specification (ASCII or binary), this class has been clearly designated for the binary version, while a separate class (CDF ASCII format) exists for the ASCII variant.",
                "CQ": [
                    {
                        "axiom": "CDF binary format subClassOf Binary format",
                        "CQ": [
                            "Is CDF binary format categorized as a subclass of Binary format?",
                            "Which types are encompassed by the Binary format class, and does this include CDF binary format?",
                            "What are the broader format categories that include CDF binary format?"
                        ]
                    },
                    {
                        "axiom": "CDF binary format propertyRestrictions [is published by hasValue Affymetrix]",
                        "CQ": [
                            "Is every CDF binary format necessarily associated with being published specifically by Affymetrix?",
                            "Can a CDF binary format be considered valid if it is not published by Affymetrix?",
                            "Is the value of the publishing entity for any CDF binary format always restricted to Affymetrix?"
                        ]
                    }
                ]
            },
            "database creation": {
                "axiom": {
                    "subClassOf": [
                        "information processing"
                    ]
                },
                "description": "database creation is classified as a subclass of information processing, meaning it represents a specific type of process involved in the handling or manipulation of information. Individuals of this class are characterized as activities or operations whose primary function is to establish or generate databases as part of broader information processing tasks.",
                "CQ": [
                    {
                        "axiom": "database creation subClassOf information processing",
                        "CQ": [
                            "Is database creation classified as a form of information processing?",
                            "What specific processes are included under information processing, such as database creation?",
                            "Which broader categories encompass database creation within the ontology?"
                        ]
                    }
                ]
            },
            "Amino acid name (single letter)": {
                "axiom": {
                    "subClassOf": [
                        "Amino acid name"
                    ]
                },
                "description": "Amino acid name (single letter) is defined as a subclass of Amino acid name. It represents a single-letter identifier used to denote amino acids, for example, \"G\" for glycine. This class is used to capture the standardized single-character codes assigned to specific amino acids.",
                "CQ": [
                    {
                        "axiom": "Amino acid name (single letter) subClassOf Amino acid name",
                        "CQ": [
                            "Does the single-letter amino acid name fall under the broader category of amino acid name?",
                            "Which specific designations are recognized as subclasses of amino acid name, including the single-letter representation?",
                            "To which higher-level groups is the single-letter amino acid name associated within the ontology?"
                        ]
                    }
                ]
            },
            "derivative software not allowed": {
                "axiom": {
                    "subClassOf": [
                        "Derivatives clause"
                    ],
                    "disjointWith": [
                        "derivative software allowed"
                    ]
                },
                "description": "derivative software not allowed is defined as a subclass of Derivatives clause, and is explicitly disjoint with derivative software allowed. This means that any clause categorized under derivative software not allowed falls within the broader category of Derivatives clause, but cannot simultaneously be considered as allowing derivative software. This class formalizes the restriction that the creation or use of derivative software is not permitted under this clause.",
                "CQ": [
                    {
                        "axiom": "derivative software not allowed subClassOf Derivatives clause",
                        "CQ": [
                            "Is a Derivatives clause a general category that includes derivative software not allowed?",
                            "What are the more specific instances under Derivatives clause, such as derivative software not allowed?",
                            "To which broader clause does derivative software not allowed belong?"
                        ]
                    },
                    {
                        "axiom": "derivative software not allowed disjointWith derivative software allowed",
                        "CQ": [
                            "What logical separation exists between 'derivative software not allowed' and 'derivative software allowed' within the ontology?",
                            "Is any software classified as both 'derivative software not allowed' and 'derivative software allowed'?",
                            "Which software permission classes are specifically declared as disjoint with 'derivative software allowed'?"
                        ]
                    }
                ]
            },
            "BAI": {
                "axiom": {
                    "subClassOf": [
                        "Data index format"
                    ],
                    "propertyRestrictions": [
                        "[is format of some Data index]"
                    ]
                },
                "description": "BAI is defined as a subclass of Data index format, specifically described as the BAM indexing format. It is characterized by the property that every BAI instance is a format for at least one Data index. This axiomatization ensures that BAI represents formats used for indexing BAM data, supporting efficient data retrieval and access.",
                "CQ": [
                    {
                        "axiom": "BAI subClassOf Data index format",
                        "CQ": [
                            "Is BAI categorized under Data index format?",
                            "Which data index formats include BAI as a specialization?",
                            "What hierarchical classification does BAI have in relation to Data index format?"
                        ]
                    },
                    {
                        "axiom": "BAI propertyRestrictions [is format of some Data index]",
                        "CQ": [
                            "Is it required that every BAI is the format of at least one Data index?",
                            "Can a BAI exist without being the format of any Data index?",
                            "Does the definition of BAI permit it to be the format for multiple Data indices?"
                        ]
                    }
                ]
            },
            "raster image format": {
                "axiom": {
                    "subClassOf": [
                        "image format"
                    ]
                },
                "description": "raster image format is defined as a subclass of image format. This means every raster image format is an image format, but not all image formats are raster. Members of this class represent image formats in which images are composed of a grid of pixels, as opposed to formats based on vectors or other representations.",
                "CQ": [
                    {
                        "axiom": "raster image format subClassOf image format",
                        "CQ": [
                            "Is raster image format encompassed within the broader classification of image format?",
                            "Which types of image format specifically include raster image format as a subclass?",
                            "What general format categories does raster image format fall under according to the ontology?"
                        ]
                    }
                ]
            },
            "Sequence alignment type": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Sequence alignment type is a subclass of Obsolete concept (EDAM). It represents a label or text token used to describe the type of a sequence alignment. Possible values encompass various alignment categories, such as those defined by EMBOSS and BLAST. This class captures the categorization of sequence alignments based on their methodological or functional characteristics.",
                "CQ": [
                    {
                        "axiom": "Sequence alignment type subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Sequence alignment type categorized under Obsolete concept (EDAM)?",
                            "Which specific concepts are defined as subclasses of Obsolete concept (EDAM), such as Sequence alignment type?",
                            "What broader category encompasses Sequence alignment type according to the ontology?"
                        ]
                    }
                ]
            },
            "Protein sequence alignment analysis": {
                "axiom": {
                    "subClassOf": [
                        "Protein analysis",
                        "Prediction and recognition (protein)",
                        "Sequence alignment analysis"
                    ],
                    "propertyRestrictions": [
                        "[has input some Sequence alignment (protein)]"
                    ]
                },
                "description": "Protein sequence alignment analysis is a subclass of Protein analysis, Prediction and recognition (protein), and Sequence alignment analysis. It is characterized by requiring at least one input of type Sequence alignment (protein). This class encompasses analyses performed on protein sequence alignments, typically to detect features or make predictions about the aligned sequences. The formal definition ensures that instances of this class specifically involve input data consisting of protein sequence alignments within the broader context of protein and sequence analysis.",
                "CQ": [
                    {
                        "axiom": "Protein sequence alignment analysis subClassOf Protein analysis",
                        "CQ": [
                            "Is Protein analysis a broader category that encompasses Protein sequence alignment analysis?",
                            "Which analysis techniques are considered more specific types under Protein analysis, such as Protein sequence alignment analysis?",
                            "To which higher-level analysis categories does Protein sequence alignment analysis belong?"
                        ]
                    },
                    {
                        "axiom": "Protein sequence alignment analysis subClassOf Prediction and recognition (protein)",
                        "CQ": [
                            "Is Protein sequence alignment analysis a specialized form of Prediction and recognition (protein)?",
                            "Which analysis types are classified under Prediction and recognition (protein), including Protein sequence alignment analysis?",
                            "What higher-level categories encompass Protein sequence alignment analysis?"
                        ]
                    },
                    {
                        "axiom": "Protein sequence alignment analysis subClassOf Sequence alignment analysis",
                        "CQ": [
                            "Is Sequence alignment analysis a broader category that encompasses Protein sequence alignment analysis?",
                            "Which types of analyses are classified as more specific forms under Sequence alignment analysis, such as Protein sequence alignment analysis?",
                            "To what general analysis categories can Protein sequence alignment analysis be conceptually assigned?"
                        ]
                    },
                    {
                        "axiom": "Protein sequence alignment analysis propertyRestrictions [has input some Sequence alignment (protein)]",
                        "CQ": [
                            "Is it required that protein sequence alignment analysis always has at least one input that is a protein sequence alignment?",
                            "Can a protein sequence alignment analysis exist without taking any protein sequence alignment as input?",
                            "Must every input to a protein sequence alignment analysis be a protein sequence alignment?"
                        ]
                    }
                ]
            },
            "Ontology format": {
                "axiom": {
                    "subClassOf": [
                        "Format (typed)"
                    ],
                    "propertyRestrictions": [
                        "[is format of some Ontology]"
                    ]
                },
                "description": "Ontology format is defined as a subclass of Format (typed) and is characterized by the property that it is the format of at least one Ontology. Members of this class represent formats specifically used for ontologies, ensuring a clear association between an ontology and its format type.",
                "CQ": [
                    {
                        "axiom": "Ontology format subClassOf Format (typed)",
                        "CQ": [
                            "Is Ontology format categorized under Format?",
                            "Which types are classified as specializations of Format, such as Ontology format?",
                            "What broader classes does Ontology format fall within?"
                        ]
                    },
                    {
                        "axiom": "Ontology format propertyRestrictions [is format of some Ontology]",
                        "CQ": [
                            "Does every property restriction necessarily serve as the format of at least one ontology?",
                            "Is it required that a property restriction be associated with some ontology through the 'is format of' relationship?",
                            "For each property restriction, does there exist an ontology of which it is the format?"
                        ]
                    }
                ]
            },
            "Ensembl ID (Homo sapiens)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Ensembl ID (Homo sapiens) is defined as a subclass of Obsolete concept (EDAM), indicating that it represents an outdated or deprecated notion within the ontology. It refers specifically to identifiers assigned to entries such as exons, genes, transcripts, or proteins within the Homo sapiens division of the Ensembl 'core' database. This class is intended for referencing unique identifiers for human genomic entities as catalogued in Ensembl, but it is marked as obsolete within the current ontology structure.",
                "CQ": [
                    {
                        "axiom": "Ensembl ID (Homo sapiens) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Ensembl ID (Homo sapiens) categorized under the broader group Obsolete concept (EDAM)?",
                            "Which concepts are more specific than Obsolete concept (EDAM), such as Ensembl ID (Homo sapiens)?",
                            "What parent categories include Ensembl ID (Homo sapiens) within the ontology?"
                        ]
                    }
                ]
            },
            "GO (molecular function)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "GO (molecular function) is classified as a subclass of Obsolete concept (EDAM), indicating it is no longer in active use within the ontology framework. It represents an enumerated string data type that provides a term definition for a molecular function from the Gene Ontology (GO). This class captures definitions associated with molecular functional terms, but is considered obsolete for current applications.",
                "CQ": [
                    {
                        "axiom": "GO (molecular function) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is molecular function classified under the category of Obsolete concept (EDAM)?",
                            "Which concepts are more specific subclasses within Obsolete concept (EDAM), including molecular function?",
                            "To which higher-level categories does molecular function, as represented by GO, belong?"
                        ]
                    }
                ]
            },
            "logitT": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[implements some (Logit-t algorithm and 't-test')]",
                        "[is executed in some differential expression analysis]",
                        "[has specified data input some [has format specification only (CEL binary format or CEL ASCII format)]]",
                        "[is encoded in some R language]",
                        "[is published by hasValue Bioconductor]",
                        "[has specified data output some [has format specification only R data frame]]"
                    ]
                },
                "description": "logitT is defined as a subclass of software specialized in differential expression analysis. It must implement both the Logit-t algorithm and the t-test, be executed in the context of differential expression analysis, and is encoded in the R programming language. logitT requires input data specifically in CEL binary or CEL ASCII formats, as specified, and produces output strictly in the form of an R data frame. Additionally, it is formally associated with the Bioconductor project as its publisher.",
                "CQ": [
                    {
                        "axiom": "logitT subClassOf software",
                        "CQ": [
                            "Is logitT categorized under the broader class of software?",
                            "What types are included as subclasses of software, specifically mentioning logitT?",
                            "Which higher-level categories encompass logitT within the ontology?"
                        ]
                    },
                    {
                        "axiom": "logitT propertyRestrictions [implements some (Logit-t algorithm and 't-test')]",
                        "CQ": [
                            "Does every logitT necessarily implement at least one entity that is both a Logit-t algorithm and related to a t-test?",
                            "Is it required that logitT is associated with an implementation involving both Logit-t algorithm and t-test elements?",
                            "Can logitT exist without implementing something that combines the characteristics of Logit-t algorithm and the t-test?"
                        ]
                    },
                    {
                        "axiom": "logitT propertyRestrictions [is executed in some differential expression analysis]",
                        "CQ": [
                            "Is it required that every LogitT property restriction is associated with at least one execution in a differential expression analysis?",
                            "Does a LogitT property restriction necessarily participate in some form of differential expression analysis?",
                            "Can a LogitT property restriction exist without being executed in any differential expression analysis?"
                        ]
                    },
                    {
                        "axiom": "logitT propertyRestrictions [has specified data input some [has format specification only (CEL binary format or CEL ASCII format)]]",
                        "CQ": [
                            "Is it required that any specified data input for a logitT property restriction has a format specification exclusively restricted to CEL binary format or CEL ASCII format?",
                            "Can a specified data input under logitT property restrictions have a format specification outside of CEL binary format or CEL ASCII format?",
                            "Are inputs permitted in logitT property restrictions if their format specification includes both CEL binary and CEL ASCII formats but no other formats?"
                        ]
                    },
                    {
                        "axiom": "logitT propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Does every logitT property restriction require encoding in at least one R language?",
                            "Is it necessary for logitT propertyRestrictions to be encoded using some R language?",
                            "Can a logitT property restriction exist without being encoded in any R language?"
                        ]
                    },
                    {
                        "axiom": "logitT propertyRestrictions [is published by hasValue Bioconductor]",
                        "CQ": [
                            "Is every logitT instance necessarily published by Bioconductor?",
                            "Can a logitT entity be associated with any publisher other than Bioconductor?",
                            "Does the definition of logitT require its publisher to be exclusively Bioconductor?"
                        ]
                    },
                    {
                        "axiom": "logitT propertyRestrictions [has specified data output some [has format specification only R data frame]]",
                        "CQ": [
                            "Must every data output specified by logitT necessarily follow the R data frame format specification?",
                            "Can logitT have any specified data output that is not restricted to the R data frame format?",
                            "Is it possible for logitT to output data of formats other than R data frame among its specified outputs?"
                        ]
                    }
                ]
            },
            "Sequence Alignment and Modeling System": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[is executed in some multiple sequence alignment]"
                    ]
                },
                "description": "Sequence Alignment and Modeling System is a subclass of software, characterized by its role in the context of multiple sequence alignment. Any instance of this class must be executed within at least one multiple sequence alignment process, reflecting its functional application in computational biology for aligning and modeling biological sequences.",
                "CQ": [
                    {
                        "axiom": "Sequence Alignment and Modeling System subClassOf software",
                        "CQ": [
                            "Is Sequence Alignment and Modeling System classified as a type of software?",
                            "What are the specialized systems categorized under software, such as Sequence Alignment and Modeling System?",
                            "Which broader classes include Sequence Alignment and Modeling System?"
                        ]
                    },
                    {
                        "axiom": "Sequence Alignment and Modeling System propertyRestrictions [is executed in some multiple sequence alignment]",
                        "CQ": [
                            "Is the execution of a Sequence Alignment and Modeling System necessarily associated with at least one multiple sequence alignment?",
                            "Can a Sequence Alignment and Modeling System exist without being executed within any multiple sequence alignment?",
                            "Does every instance where a Sequence Alignment and Modeling System is executed involve a multiple sequence alignment as the context?"
                        ]
                    }
                ]
            },
            "Gene ID (ZFIN)": {
                "axiom": {
                    "subClassOf": [
                        "Gene ID"
                    ]
                },
                "description": "Gene ID (ZFIN) is defined as a subclass of Gene ID and represents an identifier specifically assigned to a gene in the Zebrafish Information Network (ZFIN) genome database. This class is intended to uniquely reference zebrafish genes within the context of ZFIN, ensuring clear identification and integration with the ZFIN resource.",
                "CQ": [
                    {
                        "axiom": "Gene ID (ZFIN) subClassOf Gene ID",
                        "CQ": [
                            "Is every Gene ID (ZFIN) instance included under the broader Gene ID category?",
                            "Which specific types of Gene ID exist, such as Gene ID (ZFIN)?",
                            "What hierarchical categories does Gene ID (ZFIN) fall under within the ontology?"
                        ]
                    }
                ]
            },
            "Endnote": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[has interface some graphical user interface]",
                        "[has license some Proprietary commercial software license]",
                        "[has declared status some Live]",
                        "[has website homepage hasValue http://www.endnote.com/]",
                        "[is executed in some citation management]",
                        "[output of some (software publishing process and [has participant hasValue Thompson Reuters])]"
                    ]
                },
                "description": "Endnote is a subclass of software defined as citation management software with a graphical user interface, operating under a proprietary commercial software license. It maintains a live status and has its official homepage at http://www.endnote.com/. The software is used within the domain of citation management and is an output of a software publishing process that involves Thomson Reuters as a participant. These axioms formally characterize Endnote as an actively maintained, proprietary, GUI-based citation management tool linked to Thomson Reuters and distributed via its dedicated website.",
                "CQ": [
                    {
                        "axiom": "Endnote subClassOf software",
                        "CQ": [
                            "Does Endnote fall under the broader classification of software?",
                            "What specific types are listed as subclasses of software, including Endnote?",
                            "Which higher-level categories include Endnote within their hierarchy?"
                        ]
                    },
                    {
                        "axiom": "Endnote propertyRestrictions [has interface some graphical user interface]",
                        "CQ": [
                            "Does every Endnote property restriction require the inclusion of at least one graphical user interface via the 'has interface' property?",
                            "Is it necessary for Endnote to have an interface that is a graphical user interface according to its property restrictions?",
                            "Can an Endnote property restriction exist without specifying the 'has interface' relation to a graphical user interface?"
                        ]
                    },
                    {
                        "axiom": "Endnote propertyRestrictions [has license some Proprietary commercial software license]",
                        "CQ": [
                            "Is it required that Endnote has at least one license which is a Proprietary commercial software license?",
                            "Does Endnote necessarily possess a license that falls under the category of Proprietary commercial software license?",
                            "Can Endnote exist without having any association to a Proprietary commercial software license through its license property?"
                        ]
                    },
                    {
                        "axiom": "Endnote propertyRestrictions [has declared status some Live]",
                        "CQ": [
                            "Must every Endnote have at least one declared status that is Live?",
                            "Is it required that Endnote instances possess a declared status property with some instance classified as Live?",
                            "Can an Endnote exist without any declared status of type Live?"
                        ]
                    },
                    {
                        "axiom": "Endnote propertyRestrictions [has website homepage hasValue http://www.endnote.com/]",
                        "CQ": [
                            "Is every instance classified as Endnote required to have the website homepage property with the value http://www.endnote.com/?",
                            "Is it true that only http://www.endnote.com/ can be the website homepage for Endnote entities?",
                            "Does being an Endnote entity necessarily entail possessing the website homepage http://www.endnote.com/?"
                        ]
                    },
                    {
                        "axiom": "Endnote propertyRestrictions [is executed in some citation management]",
                        "CQ": [
                            "Does every Endnote instance require execution within at least one citation management context?",
                            "Is it necessary for Endnote to be associated with the execution property in relation to citation management systems?",
                            "Can an Endnote be executed independently of any citation management environment?"
                        ]
                    },
                    {
                        "axiom": "Endnote propertyRestrictions [output of some (software publishing process and [has participant hasValue Thompson Reuters])]",
                        "CQ": [
                            "Does an Endnote propertyRestriction require output from a software publishing process that includes Thompson Reuters as a participant?",
                            "Is it necessary for Endnote propertyRestrictions to have outputs related specifically to software publishing processes involving Thompson Reuters?",
                            "Are all outputs associated with Endnote propertyRestrictions restricted to software publishing processes where Thompson Reuters participates?"
                        ]
                    }
                ]
            },
            "MPL v2.0": {
                "axiom": {
                    "subClassOf": [
                        "MPL"
                    ],
                    "propertyRestrictions": [
                        "[is compatible license of some GNU GPL v2]",
                        "[is compatible license of some GNU GPL v3]"
                    ]
                },
                "description": "MPL v2.0 is defined as a subclass of MPL, meaning it inherits all characteristics of the general Mozilla Public License class. Additionally, MPL v2.0 is characterized by being a compatible license with both GNU GPL v2 and GNU GPL v3. This means that any license classified as MPL v2.0 must be compatible for use in projects licensed under either version 2 or version 3 of the GNU General Public License.",
                "CQ": [
                    {
                        "axiom": "MPL v2.0 subClassOf MPL",
                        "CQ": [
                            "Is MPL v2.0 classified as a kind of MPL?",
                            "Which categories include MPL v2.0 as a more specific instance under MPL?",
                            "What parent classes does MPL v2.0 belong to within the ontology?"
                        ]
                    },
                    {
                        "axiom": "MPL v2.0 propertyRestrictions [is compatible license of some GNU GPL v2]",
                        "CQ": [
                            "Is every instance of MPL v2.0 associated with at least one GNU GPL v2 license through the 'is compatible license of' property?",
                            "Must MPL v2.0 have a compatibility relationship with some software licensed under GNU GPL v2?",
                            "Does the ontology entail that MPL v2.0 can demonstrate compatibility via the 'is compatible license of' relation with at least one entity classified as GNU GPL v2?"
                        ]
                    },
                    {
                        "axiom": "MPL v2.0 propertyRestrictions [is compatible license of some GNU GPL v3]",
                        "CQ": [
                            "Is every instance of an MPL v2.0 license required to be compatible with at least one GNU GPL v3 license?",
                            "Are there cases where an MPL v2.0 license does not have any compatibility relation with a GNU GPL v3 license?",
                            "Can an MPL v2.0 license be associated with compatibility only when at least one GNU GPL v3 license is involved?"
                        ]
                    }
                ]
            },
            "Sequence assembly format (text)": {
                "axiom": {
                    "subClassOf": [
                        "Sequence assembly format"
                    ]
                },
                "description": "Sequence assembly format (text) is a subclass of Sequence assembly format and refers specifically to formats used to represent sequence assembly data in a text-based form. This class encompasses any text format designed to store, exchange, or process sequence assembly information.",
                "CQ": [
                    {
                        "axiom": "Sequence assembly format (text) subClassOf Sequence assembly format",
                        "CQ": [
                            "Is Sequence assembly format (text) classified as a specific kind of Sequence assembly format?",
                            "Which sequence assembly formats encompass Sequence assembly format (text) as a more specific type?",
                            "What broader classes include Sequence assembly format (text) as a member?"
                        ]
                    }
                ]
            },
            "2D PAGE experiment": {
                "axiom": {
                    "subClassOf": [
                        "Proteomics experiment"
                    ]
                },
                "description": "2D PAGE experiment is defined as a subclass of Proteomics experiment. It specifically concerns two-dimensional gel electrophoresis (2D-PAGE) techniques, encompassing experiments, gels, or spots observed within a gel. This class captures experimental processes and data associated with the separation and analysis of proteins based on two distinct properties, typically isoelectric point and molecular weight, as utilized in 2D-PAGE within proteomic studies.",
                "CQ": [
                    {
                        "axiom": "2D PAGE experiment subClassOf Proteomics experiment",
                        "CQ": [
                            "Is every 2D PAGE experiment classified under the category of Proteomics experiment?",
                            "What specific experiments are categorized as Proteomics experiment, such as 2D PAGE experiment?",
                            "Which broader experiment categories encompass 2D PAGE experiment?"
                        ]
                    }
                ]
            },
            "Genome index": {
                "axiom": {
                    "subClassOf": [
                        "Data index"
                    ]
                },
                "description": "Genome index is defined as a subclass of Data index. It refers to an index specifically constructed for a genome sequence, serving as a precomputed organizational structure that facilitates rapid sequence alignment, especially when dealing with large or numerous sequences. This enables efficient retrieval and comparison operations by accelerating computational alignment tasks involving genome data.",
                "CQ": [
                    {
                        "axiom": "Genome index subClassOf Data index",
                        "CQ": [
                            "Is Genome index categorized as a type of Data index?",
                            "Which indexes are subclasses of Data index, with Genome index as an example?",
                            "What broader classifications encompass Genome index?"
                        ]
                    }
                ]
            },
            "Database cross-mapping": {
                "axiom": {
                    "subClassOf": [
                        "Data reference"
                    ]
                },
                "description": "Database cross-mapping is a subclass of Data reference, representing the process or entity in which accession numbers or other database identifiers are mapped between two or more biological or biomedical databases. Typically implemented as a table, each row corresponds to an accession number and each column to a database being referenced, with cells containing identifiers of corresponding entries. Empty cells indicate the absence of a mapping for that database. Additional metadata such as version or date may also be included. This structure facilitates the integration and comparison of related data across different database sources.",
                "CQ": [
                    {
                        "axiom": "Database cross-mapping subClassOf Data reference",
                        "CQ": [
                            "Is Database cross-mapping classified as a kind of Data reference?",
                            "What specific types fall under the category of Data reference, and does Database cross-mapping belong to them?",
                            "Which broader concepts is Database cross-mapping subsumed by?"
                        ]
                    }
                ]
            },
            "PubChem bioassay ID": {
                "axiom": {
                    "subClassOf": [
                        "Identifier (typed)",
                        "PubChem ID"
                    ]
                },
                "description": "PubChem bioassay ID is a subclass of both Identifier (typed) and PubChem ID, indicating it is a specific type of identifier used within the PubChem resource. It is defined as the identifier assigned to an assay entry in the PubChem database, enabling unambiguous reference to bioassays curated by PubChem.",
                "CQ": [
                    {
                        "axiom": "PubChem bioassay ID subClassOf Identifier (typed)",
                        "CQ": [
                            "Does PubChem bioassay ID represent a specialized form of Identifier (typed)?",
                            "Which identifiers encompass PubChem bioassay ID as a more specific type?",
                            "Under which higher-level identifier categories does PubChem bioassay ID fall?"
                        ]
                    },
                    {
                        "axiom": "PubChem bioassay ID subClassOf PubChem ID",
                        "CQ": [
                            "Is every PubChem bioassay ID categorized under PubChem ID?",
                            "Which identifiers fall under the broader class of PubChem ID, including PubChem bioassay ID?",
                            "What are the parent categories of PubChem bioassay ID?"
                        ]
                    }
                ]
            },
            "Alignment processing": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Alignment processing is a subclass of 'Obsolete concept (EDAM)', indicating that it is no longer recommended for use. It is defined as the process of reading and/or writing alignments of two or more molecular sequences, structures, or derived data. This class encompasses methods or workflows that manipulate such alignments, but its obsolescence status suggests use of alternative, updated concepts where possible.",
                "CQ": [
                    {
                        "axiom": "Alignment processing subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Alignment processing classified as an Obsolete concept (EDAM)?",
                            "Which concepts fall under the category of Obsolete concept (EDAM), such as Alignment processing?",
                            "What broader category encompasses Alignment processing within the EDAM ontology?"
                        ]
                    }
                ]
            },
            "BAR": {
                "axiom": {
                    "subClassOf": [
                        "Binary format"
                    ],
                    "propertyRestrictions": [
                        "[is published by hasValue Affymetrix]"
                    ]
                },
                "description": "BAR is defined as a subclass of Binary format, representing a specific type of binary data format. Every instance of BAR must be published exclusively by Affymetrix, as specified by the restriction that the 'is published by' property has the fixed value Affymetrix. This formalization captures that BAR files are a specialized binary format uniquely associated with Affymetrix as the publishing entity.",
                "CQ": [
                    {
                        "axiom": "BAR subClassOf Binary format",
                        "CQ": [
                            "Is BAR categorized under the broader class of Binary format?",
                            "Which formats are classified as specific subtypes of Binary format, such as BAR?",
                            "What general format categories encompass BAR?"
                        ]
                    },
                    {
                        "axiom": "BAR propertyRestrictions [is published by hasValue Affymetrix]",
                        "CQ": [
                            "Is every instance of BAR necessarily published by Affymetrix?",
                            "Can a BAR exist if it is not published by Affymetrix?",
                            "Does BAR exclusively have the 'is published by' property value set to Affymetrix?"
                        ]
                    }
                ]
            },
            "Sequence alignment parameter": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Sequence alignment parameter is a subclass of Obsolete concept (EDAM) and is defined as some simple value controlling a sequence alignment or similar 'match' operation. This class represents conceptual parameters that guide how sequence alignment procedures are performed, but has been marked as obsolete in the EDAM ontology.",
                "CQ": [
                    {
                        "axiom": "Sequence alignment parameter subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Sequence alignment parameter classified under the category of Obsolete concept (EDAM)?",
                            "Which parameters are considered subclasses of Obsolete concept (EDAM), including Sequence alignment parameter?",
                            "What broader classes encompass the Sequence alignment parameter within the ontology?"
                        ]
                    }
                ]
            },
            "Recombination detection": {
                "axiom": {
                    "subClassOf": [
                        "Nucleic acid sequence alignment analysis"
                    ]
                },
                "description": "Recombination detection is a subclass of nucleic acid sequence alignment analysis, focused on identifying recombination events in aligned genetic sequences. This class covers the detection of recombination hotspots and coldspots, as well as the precise identification of recombination breakpoints within sequence alignments. Tools for recombination detection may employ various methods, including genetic algorithms, quartet-mapping, bootscanning, graphical techniques, or machine learning models such as random forests.",
                "CQ": [
                    {
                        "axiom": "Recombination detection subClassOf Nucleic acid sequence alignment analysis",
                        "CQ": [
                            "Is Recombination detection classified under the broader category of Nucleic acid sequence alignment analysis?",
                            "Which analytical methods are considered specializations of Nucleic acid sequence alignment analysis, such as Recombination detection?",
                            "To what higher-level analytical domains does Recombination detection pertain?"
                        ]
                    }
                ]
            },
            "Motif database search": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Motif database search is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer recommended for current use within the EDAM ontology. It refers to the process of screening a biological sequence against a motif or pattern database to identify potential matches. This category encompasses methods or tools designed to perform such computational searches, but is now considered outdated or superseded in this context.",
                "CQ": [
                    {
                        "axiom": "Motif database search subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Motif database search classified as an instance of the broader category Obsolete concept (EDAM)?",
                            "Which concepts are encompassed by the Obsolete concept (EDAM) category, including Motif database search?",
                            "What hierarchical parent classes does Motif database search fall under?"
                        ]
                    }
                ]
            },
            "Residue bump detection": {
                "axiom": {
                    "subClassOf": [
                        "Residue non-canonical interaction detection"
                    ]
                },
                "description": "Residue bump detection is a subclass of Residue non-canonical interaction detection. This class encompasses methods or processes that identify 'bumps' between residues in a molecular structure, defined as pairs of atoms where the Van der Waals' radii overlap (interpenetrate) beyond a specified threshold. This detection helps characterize unusual or sterically hindered residue interactions not considered canonical.",
                "CQ": [
                    {
                        "axiom": "Residue bump detection subClassOf Residue non-canonical interaction detection",
                        "CQ": [
                            "Is Residue bump detection categorized under the broader group of Residue non-canonical interaction detection?",
                            "What detection types are encompassed by Residue non-canonical interaction detection, specifically including Residue bump detection?",
                            "Which overarching detection categories does Residue bump detection fall under?"
                        ]
                    }
                ]
            },
            "STRIDE log file": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "STRIDE log file is defined as a subclass of Obsolete concept (EDAM), indicating that it represents a concept no longer in active use or recommended within the EDAM ontology. This class refers specifically to STRIDE log files, but its status as an obsolete concept suggests it should not be used for new data or annotation activities.",
                "CQ": [
                    {
                        "axiom": "STRIDE log file subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is STRIDE log file classified as a type of Obsolete concept (EDAM)?",
                            "Which log file types are included under Obsolete concept (EDAM), specifically encompassing STRIDE log file?",
                            "To which overarching categories does STRIDE log file belong according to the ontology?"
                        ]
                    }
                ]
            },
            "Laboratory techniques": {
                "axiom": {
                    "subClassOf": [
                        "Topic"
                    ]
                },
                "description": "Laboratory techniques is a subclass of Topic, defined as a topic concerning the procedures used to conduct an experiment. This class encapsulates various methods and processes essential for carrying out experimental investigations within laboratory settings.",
                "CQ": [
                    {
                        "axiom": "Laboratory techniques subClassOf Topic",
                        "CQ": [
                            "Are laboratory techniques classified as a subset of Topic?",
                            "Which categories under Topic encompass Laboratory techniques?",
                            "What broader conceptual groupings include Laboratory techniques?"
                        ]
                    }
                ]
            },
            "Protein-protein interaction prediction": {
                "axiom": {
                    "subClassOf": [
                        "Protein interaction prediction"
                    ],
                    "propertyRestrictions": [
                        "[has output some Protein interaction report]",
                        "[has topic some Protein interactions]"
                    ]
                },
                "description": "Protein-protein interaction prediction is defined as a subclass of protein interaction prediction, focused specifically on the identification or prediction of interactions between proteins, including interfaces and binding sites. Members of this class are characterized by having outputs that are protein interaction reports and are concerned with topics relating to protein interactions. This ensures that any instance of this class is involved in generating reports about protein interactions and is centered on protein interaction phenomena.",
                "CQ": [
                    {
                        "axiom": "Protein-protein interaction prediction subClassOf Protein interaction prediction",
                        "CQ": [
                            "Does Protein-protein interaction prediction fall under the broader category of Protein interaction prediction?",
                            "Which interaction prediction tasks are classified as specializations of Protein interaction prediction?",
                            "To which upper-level categories does Protein-protein interaction prediction belong?"
                        ]
                    },
                    {
                        "axiom": "Protein-protein interaction prediction propertyRestrictions [has output some Protein interaction report]",
                        "CQ": [
                            "Must every protein-protein interaction prediction produce at least one protein interaction report as output?",
                            "Is the existence of a protein interaction report output required for an activity to be classified as a protein-protein interaction prediction?",
                            "Can a protein-protein interaction prediction be identified by the presence of a protein interaction report as its output?"
                        ]
                    },
                    {
                        "axiom": "Protein-protein interaction prediction propertyRestrictions [has topic some Protein interactions]",
                        "CQ": [
                            "Must every protein-protein interaction prediction have at least one topic related to protein interactions?",
                            "Is it possible for a protein-protein interaction prediction to lack any association with protein interactions as its topic?",
                            "Are all topics associated with protein-protein interaction prediction necessarily about protein interactions?"
                        ]
                    }
                ]
            },
            "LabVIEW": {
                "axiom": {
                    "subClassOf": [
                        "programming language"
                    ]
                },
                "description": "LabVIEW is defined as a subclass of programming language. This indicates that LabVIEW inherits all characteristics of programming languages, and any instance of LabVIEW is also considered a programming language. No further restrictions or disjointness axioms are specified.",
                "CQ": [
                    {
                        "axiom": "LabVIEW subClassOf programming language",
                        "CQ": [
                            "Is LabVIEW classified under the category of programming languages?",
                            "What other concepts are subclasses of programming language alongside LabVIEW?",
                            "Which broader classes encompass LabVIEW as a specialized instance?"
                        ]
                    }
                ]
            },
            "Surface rendering": {
                "axiom": {
                    "subClassOf": [
                        "Structure visualisation",
                        "Protein surface calculation"
                    ]
                },
                "description": "Surface rendering is defined as a subclass of both Structure visualisation and Protein surface calculation. It involves calculating the positions of dots, each specified by three coordinates (x, y, z) and typically a color, which are homogeneously distributed over the surface of a molecule. This process aids in the visual representation and analysis of molecular surfaces.",
                "CQ": [
                    {
                        "axiom": "Surface rendering subClassOf Structure visualisation",
                        "CQ": [
                            "Is Surface rendering categorized under the broader class of Structure visualisation?",
                            "What are the specific subclasses encompassed by Structure visualisation such as Surface rendering?",
                            "Under which higher-level visualisation categories can Surface rendering be classified?"
                        ]
                    },
                    {
                        "axiom": "Surface rendering subClassOf Protein surface calculation",
                        "CQ": [
                            "Is Surface rendering categorized as a specialized form of Protein surface calculation?",
                            "Which processes are identified as subtypes of Protein surface calculation, such as Surface rendering?",
                            "Under which higher-level process is Surface rendering classified?"
                        ]
                    }
                ]
            },
            "Atom ID": {
                "axiom": {
                    "subClassOf": [
                        "Identifier (typed)"
                    ]
                },
                "description": "Atom ID is defined as a subclass of Identifier (typed). It serves as an identifier—such as a character symbol—for a specific atom. This class captures identifiers that are explicitly associated with individual atoms, ensuring precise atom-level reference within the ontology.",
                "CQ": [
                    {
                        "axiom": "Atom ID subClassOf Identifier (typed)",
                        "CQ": [
                            "Is Atom ID categorized as a kind of Identifier?",
                            "Which specialized types are encompassed by the class Identifier?",
                            "What are the parent classes of Atom ID within the ontology?"
                        ]
                    }
                ]
            },
            "Sequence alignment (hybrid)": {
                "axiom": {
                    "subClassOf": [
                        "Sequence alignment"
                    ]
                },
                "description": "Sequence alignment (hybrid) is a subclass of Sequence alignment, specifically referring to the alignment of multiple molecular sequences of different types, such as genomic DNA and expressed sequence tags (EST), cDNA, or mRNA. This class captures alignments that integrate sequences representing distinct biological molecules, allowing for comparative analysis across different molecular sequence types.",
                "CQ": [
                    {
                        "axiom": "Sequence alignment (hybrid) subClassOf Sequence alignment",
                        "CQ": [
                            "Is Sequence alignment (hybrid) classified as a specialized form of Sequence alignment?",
                            "Which types of alignment fall under the broader category of Sequence alignment, specifically including Sequence alignment (hybrid)?",
                            "Under which more general classes does Sequence alignment (hybrid) fall within the ontology?"
                        ]
                    }
                ]
            },
            "DictyBase gene report format": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "DictyBase gene report format is defined as an entry format used within the DictyBase genome database. It is formally classified as a subclass of Obsolete concept (EDAM), indicating that this format is no longer in active use and has been superseded or retired. This class represents reporting structures for gene information specific to DictyBase, but its obsolete status means it should not be applied to current datasets or applications.",
                "CQ": [
                    {
                        "axiom": "DictyBase gene report format subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is DictyBase gene report format classified under the broader category of Obsolete concept (EDAM)?",
                            "Which data formats are considered subclasses of Obsolete concept (EDAM)?",
                            "What are the higher-level categories associated with DictyBase gene report format?"
                        ]
                    }
                ]
            },
            "Sequence-profile alignment (HMM) format": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Sequence-profile alignment (HMM) format is defined as a data format specifically used for representing alignments between biological sequences and hidden Markov model (HMM) profiles. According to its axioms, this class is a subclass of Obsolete concept (EDAM), indicating that it is no longer considered current or in active use within the EDAM ontology. This classification helps ensure that this format is recognized as deprecated and should not be used for new data or tools.",
                "CQ": [
                    {
                        "axiom": "Sequence-profile alignment (HMM) format subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Sequence-profile alignment (HMM) format classified under the broader category of Obsolete concept (EDAM)?",
                            "Which formats are considered specific types of Obsolete concept (EDAM), such as Sequence-profile alignment (HMM) format?",
                            "What more general classes does Sequence-profile alignment (HMM) format fall under within the ontology?"
                        ]
                    }
                ]
            },
            "MPL": {
                "axiom": {
                    "subClassOf": [
                        "software license"
                    ],
                    "propertyRestrictions": [
                        "[has clause some Source code available]",
                        "[has clause some Distribution with notices]"
                    ]
                },
                "description": "MPL is defined as a subclass of software license, characterized by the requirement that any license in this class must include at least some clause ensuring that source code is available and at least some clause stipulating distribution must include notices. This formalization captures the core obligations commonly associated with the Mozilla Public License: making source code accessible and ensuring proper attribution upon distribution.",
                "CQ": [
                    {
                        "axiom": "MPL subClassOf software license",
                        "CQ": [
                            "Is MPL an instance of the more general category of software license?",
                            "What types of software license include MPL as a more specific subclass?",
                            "To which broader classifications does MPL, as a kind of license, belong?"
                        ]
                    },
                    {
                        "axiom": "MPL propertyRestrictions [has clause some Source code available]",
                        "CQ": [
                            "Is it required that every MPL instance includes at least one clause where source code is available?",
                            "Can an MPL be considered valid if it lacks any clause with available source code?",
                            "Does the existence of a clause with source code availability suffice for an MPL to meet its property restrictions?"
                        ]
                    },
                    {
                        "axiom": "MPL propertyRestrictions [has clause some Distribution with notices]",
                        "CQ": [
                            "Must every MPL include at least one clause associated with a Distribution notice?",
                            "Is it required for an MPL to possess a 'has clause' relationship with some Distribution that includes notices?",
                            "Does the presence of any clause in an MPL always correspond to Distribution with notices?"
                        ]
                    }
                ]
            },
            "Sequence editing (nucleic acid)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Sequence editing (nucleic acid) is defined as a subclass of Obsolete concept (EDAM). It refers to the process of editing or changing a nucleic acid sequence, either in a random or specific manner. This class has been marked obsolete, indicating that its use is deprecated in the ontology.",
                "CQ": [
                    {
                        "axiom": "Sequence editing (nucleic acid) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Sequence editing (nucleic acid) categorized under Obsolete concept (EDAM)?",
                            "What obsolete concepts in EDAM encompass Sequence editing (nucleic acid)?",
                            "Which specific processes are included within the Obsolete concept (EDAM) class, such as Sequence editing (nucleic acid)?"
                        ]
                    }
                ]
            },
            "BIND entry format": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "BIND entry format is defined as a subclass of the obsolete concept in EDAM, indicating it is no longer current or recommended for use. It specifically refers to the entry format used in the BIND database for protein interaction data. This classification marks the BIND entry format as both historically significant and deprecated within contemporary bioinformatics ontologies.",
                "CQ": [
                    {
                        "axiom": "BIND entry format subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is BIND entry format categorized under the broader concept of Obsolete concept (EDAM)?",
                            "Which entity types are classified as more specific than Obsolete concept (EDAM), such as BIND entry format?",
                            "What higher-level classifications include BIND entry format?"
                        ]
                    }
                ]
            },
            "Multivariate correlation estimator": {
                "axiom": {
                    "subClassOf": [
                        "algorithm"
                    ]
                },
                "description": "Multivariate correlation estimator is defined as a subclass of algorithm. It encompasses algorithms specifically designed to estimate the correlation structure among multiple variables simultaneously. This class formalizes methods that take multivariate data as input and output information about the linear or nonlinear relationships among variables, supporting multivariate statistical analysis.",
                "CQ": [
                    {
                        "axiom": "Multivariate correlation estimator subClassOf algorithm",
                        "CQ": [
                            "Is Multivariate correlation estimator categorized as a type of algorithm?",
                            "What algorithms exist that include Multivariate correlation estimator as a specific variant?",
                            "Which broader categories encompass Multivariate correlation estimator beyond its direct classification?"
                        ]
                    }
                ]
            },
            "affyPara": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[is published by hasValue Bioconductor]",
                        "[is executed in some (averaging and correction and data normalization)]",
                        "[has specified data input some [has format specification only (CEL binary format or CEL ASCII format)]]",
                        "[has specified data output some (Graph plot and [has format specification some R data frame])]",
                        "[is encoded in some R language]"
                    ]
                },
                "description": "affyPara is a subclass of software, formally characterized by several property restrictions: it is published by Bioconductor; it is executed in processes involving averaging and correction and data normalization; its specified data input must include data with a format specification of either CEL binary format or CEL ASCII format; its specified data output includes both graph plots and outputs with a format specification of R data frame; and it is encoded in the R language. This class represents software tools that process CEL format data for statistical normalization and visualization in bioinformatics workflows.",
                "CQ": [
                    {
                        "axiom": "affyPara subClassOf software",
                        "CQ": [
                            "Is affyPara classified as a type of software?",
                            "Which entities are more specific than software, such as affyPara?",
                            "What broader categories encompass affyPara within the hierarchy?"
                        ]
                    },
                    {
                        "axiom": "affyPara propertyRestrictions [is published by hasValue Bioconductor]",
                        "CQ": [
                            "Is every instance of affyPara required to be published by Bioconductor?",
                            "Can affyPara be published by any source other than Bioconductor?",
                            "Does the property restriction ensure that affyPara has the publisher value set specifically to Bioconductor?"
                        ]
                    },
                    {
                        "axiom": "affyPara propertyRestrictions [is executed in some (averaging and correction and data normalization)]",
                        "CQ": [
                            "Is it necessary for affyPara to be executed in a context that includes averaging, correction, and data normalization?",
                            "Does the execution of affyPara always require all three processes: averaging, correction, and data normalization to be present?",
                            "Can affyPara be executed in any scenario where averaging, correction, and data normalization are not all applied together?"
                        ]
                    },
                    {
                        "axiom": "affyPara propertyRestrictions [has specified data input some [has format specification only (CEL binary format or CEL ASCII format)]]",
                        "CQ": [
                            "Does affyPara have at least one specified data input with a format restricted solely to CEL binary or CEL ASCII format?",
                            "Is it required that the format of any specified data input for affyPara be exclusively CEL binary or CEL ASCII format?",
                            "Can a specified data input for affyPara ever have a format specification other than CEL binary or CEL ASCII format?"
                        ]
                    },
                    {
                        "axiom": "affyPara propertyRestrictions [has specified data output some (Graph plot and [has format specification some R data frame])]",
                        "CQ": [
                            "Is it necessary for affyPara to have at least one specified data output that is both a Graph plot and has a format specification as an R data frame?",
                            "Can affyPara provide a specified data output only if it is a Graph plot with an R data frame format specification?",
                            "Must every specified data output of affyPara satisfy being a Graph plot and also possess an R data frame as its format specification?"
                        ]
                    },
                    {
                        "axiom": "affyPara propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is it required that affyPara is encoded in at least one R language?",
                            "Can affyPara exist without being encoded in any R language?",
                            "Which R languages are permissible for encoding affyPara?"
                        ]
                    }
                ]
            },
            "Structural (3D) profile ID": {
                "axiom": {
                    "subClassOf": [
                        "Identifier (typed)",
                        "Accession"
                    ],
                    "propertyRestrictions": [
                        "[is identifier of some Structural profile]"
                    ]
                },
                "description": "Structural (3D) profile ID is a subclass of both Identifier (typed) and Accession, representing identifiers or names specifically assigned to structural (3D) profiles or templates. Members of this class serve as identifiers for some Structural profile, such as those representing structures or structure alignments, ensuring unambiguous referencing within structural data repositories.",
                "CQ": [
                    {
                        "axiom": "Structural (3D) profile ID subClassOf Identifier (typed)",
                        "CQ": [
                            "Is Structural (3D) profile ID categorized under the broader class of Identifier (typed)?",
                            "Which specific subclasses fall under Identifier (typed), including Structural (3D) profile ID?",
                            "What higher-level categories encompass Structural (3D) profile ID?"
                        ]
                    },
                    {
                        "axiom": "Structural (3D) profile ID subClassOf Accession",
                        "CQ": [
                            "Is Structural (3D) profile ID classified under the broader concept of Accession?",
                            "Which identifiers are more specific forms of Accession, such as Structural (3D) profile ID?",
                            "To what overarching categories does Structural (3D) profile ID belong?"
                        ]
                    },
                    {
                        "axiom": "Structural (3D) profile ID propertyRestrictions [is identifier of some Structural profile]",
                        "CQ": [
                            "Is every Structural (3D) profile ID necessarily associated only with a Structural profile through the 'is identifier of' property?",
                            "Must a Structural (3D) profile ID serve as an identifier for at least one Structural profile?",
                            "Can a Structural (3D) profile ID exist without being linked to any Structural profile via the 'is identifier of' property?"
                        ]
                    }
                ]
            },
            "Text mining": {
                "axiom": {
                    "subClassOf": [
                        "Analysis"
                    ],
                    "propertyRestrictions": [
                        "[has input some Report]",
                        "[has topic some Data mining]",
                        "[has output some Text mining report]"
                    ]
                },
                "description": "Text mining is a subclass of Analysis, defined as the process of analyzing text—typically biomedical and informatics literature—to extract information. Formally, any instance of text mining operates on some input that is a Report, pertains to a topic within Data mining, and produces as output a Text mining report. This class captures methodologies and systems that utilize reports as input and focus on extracting structured data or insights from textual content related to data mining.",
                "CQ": [
                    {
                        "axiom": "Text mining subClassOf Analysis",
                        "CQ": [
                            "Is Text mining classified as a specialized form of Analysis?",
                            "What are the specific subcategories under Analysis, such as Text mining?",
                            "To which higher-level categories does Text mining belong?"
                        ]
                    },
                    {
                        "axiom": "Text mining propertyRestrictions [has input some Report]",
                        "CQ": [
                            "Can every instance of Text mining be associated with at least one Report as input?",
                            "Is it required that a Text mining process uses a Report as an input?",
                            "Does the definition of Text mining ensure that it operates only when a Report is provided as input?"
                        ]
                    },
                    {
                        "axiom": "Text mining propertyRestrictions [has topic some Data mining]",
                        "CQ": [
                            "Is every instance of Text mining necessarily associated with at least one topic that is Data mining?",
                            "Does Text mining require the presence of the has topic relation to Data mining in its definition?",
                            "Can Text mining exist without having Data mining as a topic?"
                        ]
                    },
                    {
                        "axiom": "Text mining propertyRestrictions [has output some Text mining report]",
                        "CQ": [
                            "Is it required that every Text mining process produces at least one output classified as a Text mining report?",
                            "Does the property 'has output' for Text mining always involve the existence of a Text mining report?",
                            "Can a Text mining activity exist without associating any output with a Text mining report?"
                        ]
                    }
                ]
            },
            "vsn": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[is encoded in some R language]",
                        "[has specified data input some Gene expression dataset]",
                        "[is executed in some (correction and data normalization and differential expression analysis)]"
                    ]
                },
                "description": "vsn is defined as a subclass of software, characterized by being implemented in the R language. It requires specific data input in the form of a gene expression dataset and is executed for tasks including correction, data normalization, and differential expression analysis. This formalization ensures that any instance of vsn is an R-based software tool designed to perform these essential bioinformatics processes on gene expression data.",
                "CQ": [
                    {
                        "axiom": "vsn subClassOf software",
                        "CQ": [
                            "Is vsn categorized as a type of software?",
                            "What other subclasses are defined under software, including vsn?",
                            "Which higher-level categories encompass vsn?"
                        ]
                    },
                    {
                        "axiom": "vsn propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is it required that every property restriction in vsn is encoded in at least one R language?",
                            "Does a property restriction in vsn necessarily have to be represented in some form of R language?",
                            "Can a vsn property restriction exist without being encoded in an R language?"
                        ]
                    },
                    {
                        "axiom": "vsn propertyRestrictions [has specified data input some Gene expression dataset]",
                        "CQ": [
                            "Does a vsn instance require at least one specified data input linking to a gene expression dataset?",
                            "Is it necessary for vsn to have the property 'has specified data input' with some gene expression dataset?",
                            "Can vsn exist without having any 'has specified data input' property connecting to a gene expression dataset?"
                        ]
                    },
                    {
                        "axiom": "vsn propertyRestrictions [is executed in some (correction and data normalization and differential expression analysis)]",
                        "CQ": [
                            "Is it required that a vsn propertyRestriction is executed in a process that involves correction, data normalization, and differential expression analysis together?",
                            "Can a vsn propertyRestriction be executed in any context other than one that simultaneously includes correction, data normalization, and differential expression analysis?",
                            "Are all three: correction, data normalization, and differential expression analysis, essential conditions for a process in which vsn propertyRestriction is executed?"
                        ]
                    }
                ]
            },
            "Genes and proteins resources": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Genes and proteins resources is defined as a subclass of the obsolete concept category in EDAM, indicating that it is no longer in current use or has been superseded. This class encompasses topics concerning specific genes, their encoded proteins, and groupings such as gene or protein families, focusing on resources related to molecular genetics and proteomics.",
                "CQ": [
                    {
                        "axiom": "Genes and proteins resources subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Obsolete concept (EDAM) a superclass for Genes and proteins resources?",
                            "Which resources are classified as subclasses of Obsolete concept (EDAM), such as Genes and proteins resources?",
                            "What higher-level classes does Genes and proteins resources fall under in the ontology?"
                        ]
                    }
                ]
            },
            "Cysteine bridge detection": {
                "axiom": {
                    "subClassOf": [
                        "Protein cysteine and disulfide bond assignment"
                    ]
                },
                "description": "Cysteine bridge detection is defined as a subclass of protein cysteine and disulfide bond assignment. This class focuses on the identification of cysteine bridges, specifically by detecting disulfide bonds formed between cysteine residues within a protein structure using coordinate data. Individuals of this class perform or represent methods for recognizing these covalent linkages, which are important for protein stability and function.",
                "CQ": [
                    {
                        "axiom": "Cysteine bridge detection subClassOf Protein cysteine and disulfide bond assignment",
                        "CQ": [
                            "Does cysteine bridge detection fall under the broader category of protein cysteine and disulfide bond assignment?",
                            "Which processes are recognized as specialized forms of protein cysteine and disulfide bond assignment, such as cysteine bridge detection?",
                            "To which overarching categories is cysteine bridge detection formally related in the ontology?"
                        ]
                    }
                ]
            },
            "Peptide annotation": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Peptide annotation is defined as a subclass of the obsolete concept (EDAM), indicating that it is deprecated or no longer recommended for use. It is described as an informative report about a specific peptide, suggesting its historical role in providing details or metadata relating to peptides. Use of this class should be reconsidered due to its obsolete status.",
                "CQ": [
                    {
                        "axiom": "Peptide annotation subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Peptide annotation categorized under the broader class of Obsolete concept (EDAM)?",
                            "What are all the subclasses defined within Obsolete concept (EDAM), including Peptide annotation?",
                            "To which higher-level concepts does Peptide annotation belong?"
                        ]
                    }
                ]
            },
            "Gene name (MaizeGDB)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Gene name (MaizeGDB) is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer in active use within the referenced ontology. It represents the name of a gene from the MaizeGDB (maize genes) database. This class should not be used for current annotation, as it has been marked obsolete.",
                "CQ": [
                    {
                        "axiom": "Gene name (MaizeGDB) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Gene name (MaizeGDB) categorized under the broader class of Obsolete concept (EDAM)?",
                            "Which specific entities are classified as subclasses of Obsolete concept (EDAM), including Gene name (MaizeGDB)?",
                            "To which higher-level classes does Gene name (MaizeGDB) belong according to the ontology?"
                        ]
                    }
                ]
            },
            "markx0": {
                "axiom": {
                    "subClassOf": [
                        "markx0 variant"
                    ]
                },
                "description": "markx0 is defined as a subclass of markx0 variant. It represents the Pearson MARKX0 alignment format, which pertains to a specific format used for sequence alignments. This class inherits all properties of markx0 variant and is characterized by its association with the MARKX0 alignment specification.",
                "CQ": [
                    {
                        "axiom": "markx0 subClassOf markx0 variant",
                        "CQ": [
                            "Is markx0 classified under the broader group of markx0 variant?",
                            "Which variants categorize markx0 as a more specific form?",
                            "What overarching classes include markx0 within the markx0 variant hierarchy?"
                        ]
                    }
                ]
            },
            "FreeBSD": {
                "axiom": {
                    "subClassOf": [
                        "software license"
                    ],
                    "propertyRestrictions": [
                        "[is compatible license of some GNU GPL v2]",
                        "[has clause some Source code available]",
                        "[has clause some Distribution with notices]",
                        "[has clause some derivative software allowed]",
                        "[is compatible license of some GNU GPL v3]"
                    ]
                },
                "description": "FreeBSD is defined as a subclass of software license and is compatible with both GNU GPL v2 and GNU GPL v3 licenses. This license includes several clauses: the requirement that source code must be available, that distribution must include notices, and that derivative software is permitted. These characteristics ensure that FreeBSD enables broad software reuse and distribution while maintaining attribution and allowing for the creation of derivative works.",
                "CQ": [
                    {
                        "axiom": "FreeBSD subClassOf software license",
                        "CQ": [
                            "What are the subclasses of software license, and does FreeBSD fall under them?",
                            "Is FreeBSD categorized as a software license within the ontology structure?",
                            "Which broader types include FreeBSD as a specialized instance, specifically in the context of software licenses?"
                        ]
                    },
                    {
                        "axiom": "FreeBSD propertyRestrictions [is compatible license of some GNU GPL v2]",
                        "CQ": [
                            "Is every instance of FreeBSD associated with at least one license that is compatible with GNU GPL v2?",
                            "Does FreeBSD necessarily have a property indicating compatibility with the GNU GPL v2 license?",
                            "Can FreeBSD exist without being the compatible license of any instance of GNU GPL v2?"
                        ]
                    },
                    {
                        "axiom": "FreeBSD propertyRestrictions [has clause some Source code available]",
                        "CQ": [
                            "Is it required that FreeBSD possesses at least one clause specifying that source code is available?",
                            "Does FreeBSD have property 'has clause' with a value constrained to indicate the availability of source code?",
                            "Can FreeBSD be described without including a clause that refers to the availability of source code?"
                        ]
                    },
                    {
                        "axiom": "FreeBSD propertyRestrictions [has clause some Distribution with notices]",
                        "CQ": [
                            "Is it required that every FreeBSD instance has at least one clause associated with a distribution that includes notices?",
                            "Can FreeBSD possess a clause if it is not linked to any distribution with notices?",
                            "Does FreeBSD necessarily have a relationship via ‘has clause’ to some distribution entity that contains notices?"
                        ]
                    },
                    {
                        "axiom": "FreeBSD propertyRestrictions [has clause some derivative software allowed]",
                        "CQ": [
                            "Is FreeBSD required to have at least one clause permitting derivative software?",
                            "Must FreeBSD's property restrictions include allowance for derivative software under some circumstances?",
                            "Does the presence of a clause allowing derivative software suffice for FreeBSD to meet its property restriction requirements?"
                        ]
                    },
                    {
                        "axiom": "FreeBSD propertyRestrictions [is compatible license of some GNU GPL v3]",
                        "CQ": [
                            "Is it required for FreeBSD to be compatible with at least one license that is GNU GPL v3?",
                            "Does FreeBSD necessarily have a compatible license relationship with GNU GPL v3?",
                            "Can FreeBSD exist without being compatible with any instance of GNU GPL v3?"
                        ]
                    }
                ]
            },
            "EMBOSS database resource definition": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "EMBOSS database resource definition is a subclass of Obsolete concept (EDAM), indicating it is no longer in active use or has been superseded. It refers to a resource definition for an EMBOSS database, representing the specification or structured description of a database resource within the EMBOSS bioinformatics suite.",
                "CQ": [
                    {
                        "axiom": "EMBOSS database resource definition subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is EMBOSS database resource definition classified as a type of Obsolete concept in EDAM?",
                            "Which concepts are direct specializations of Obsolete concept (EDAM), such as EMBOSS database resource definition?",
                            "What general categories encompass EMBOSS database resource definition in the EDAM ontology?"
                        ]
                    }
                ]
            },
            "SAGx": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[implements some (Linear modelling and 't-test')]",
                        "[is published by hasValue Bioconductor]",
                        "[has specified data input some (Graph plot and [has format specification only R data frame])]",
                        "[is encoded in some R language]"
                    ]
                },
                "description": "SAGx is defined as a subclass of software that is implemented to provide functionality for both linear modelling and t-test. It is encoded in the R programming language and is published by Bioconductor. SAGx requires data input in the form of graph plots, with the specification that these inputs must be provided only as R data frames. This formalization ensures that any individual classified as SAGx software must meet these criteria with respect to implementation, publishing authority, data input format, and programming language used.",
                "CQ": [
                    {
                        "axiom": "SAGx subClassOf software",
                        "CQ": [
                            "Is SAGx classified under the broader category of software?",
                            "Which types fall under the classification of software, including SAGx?",
                            "What overarching categories encompass SAGx within the ontology?"
                        ]
                    },
                    {
                        "axiom": "SAGx propertyRestrictions [implements some (Linear modelling and 't-test')]",
                        "CQ": [
                            "Is it required that SAGx implements at least one of Linear modelling or t-test?",
                            "Can SAGx exist without implementing either Linear modelling or t-test?",
                            "Does every instance of SAGx necessarily implement Linear modelling, t-test, or both?"
                        ]
                    },
                    {
                        "axiom": "SAGx propertyRestrictions [is published by hasValue Bioconductor]",
                        "CQ": [
                            "Is every instance of SAGx necessarily published by Bioconductor?",
                            "Can an entity be considered SAGx if it is published by an organization other than Bioconductor?",
                            "Does the definition of SAGx restrict its publisher exclusively to Bioconductor?"
                        ]
                    },
                    {
                        "axiom": "SAGx propertyRestrictions [has specified data input some (Graph plot and [has format specification only R data frame])]",
                        "CQ": [
                            "Does SAGx require each specified data input to include both a graph plot and have a format specification restricted only to R data frame?",
                            "Is it possible for an instance of SAGx to have a specified data input with a format specification other than R data frame?",
                            "Can SAGx have a specified data input that either lacks a graph plot or whose format specification is not limited to R data frame?"
                        ]
                    },
                    {
                        "axiom": "SAGx propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Must every SAGx be encoded in at least one R language?",
                            "Is it possible for a SAGx to exist without being encoded in any R language?",
                            "Does SAGx necessarily require the presence of an encoding relationship with an R language?"
                        ]
                    }
                ]
            },
            "Protein targeting and localization": {
                "axiom": {
                    "subClassOf": [
                        "Protein expression"
                    ]
                },
                "description": "Protein targeting and localization is defined as a subclass of Protein expression. It encompasses the study of the mechanisms by which proteins are transported to specific locations within or outside the cell, including processes such as signal peptide-mediated transport, subcellular localization, and protein export. This class focuses on understanding how proteins reach their functional destinations as part of cellular protein expression dynamics.",
                "CQ": [
                    {
                        "axiom": "Protein targeting and localization subClassOf Protein expression",
                        "CQ": [
                            "Is Protein expression a general category that encompasses Protein targeting and localization?",
                            "Which categories does Protein targeting and localization fall under with respect to Protein expression?",
                            "What are the specialized subtypes of Protein expression, including Protein targeting and localization?"
                        ]
                    }
                ]
            },
            "Secondary structure comparison": {
                "axiom": {
                    "subClassOf": [
                        "Comparison"
                    ],
                    "propertyRestrictions": [
                        "[has topic some Structure comparison]"
                    ]
                },
                "description": "Secondary structure comparison is a subclass of Comparison, specifically focused on evaluating or comparing molecular secondary structures. It is defined by the property restriction that its topic involves some form of structure comparison. Members of this class are concerned with the comparative analysis of two or more molecular secondary structures, as indicated by its definition.",
                "CQ": [
                    {
                        "axiom": "Secondary structure comparison subClassOf Comparison",
                        "CQ": [
                            "Is Secondary structure comparison classified under the broader category of Comparison?",
                            "What are the specific types of Comparison that include Secondary structure comparison?",
                            "Which parent categories encompass Secondary structure comparison?"
                        ]
                    },
                    {
                        "axiom": "Secondary structure comparison propertyRestrictions [has topic some Structure comparison]",
                        "CQ": [
                            "Must every instance of the secondary structure comparison propertyRestrictions involve the topic of structure comparison?",
                            "Is it necessary for secondary structure comparison propertyRestrictions to relate to at least one structure comparison topic?",
                            "Can a secondary structure comparison propertyRestriction exist without referencing the structure comparison topic?"
                        ]
                    }
                ]
            },
            "Splice transcript prediction": {
                "axiom": {
                    "subClassOf": [
                        "Splicing model analysis"
                    ],
                    "propertyRestrictions": [
                        "[has topic some Gene structure]"
                    ]
                },
                "description": "Splice transcript prediction is a subclass of Splicing model analysis, focused on the prediction of splicing alternatives or transcript isoforms through the analysis of sequence data. Members of this class are associated with topics related to gene structure, indicating that predictions pertain to the organization and variation of genes at the transcript level.",
                "CQ": [
                    {
                        "axiom": "Splice transcript prediction subClassOf Splicing model analysis",
                        "CQ": [
                            "Is Splicing model analysis a direct superclass of Splice transcript prediction?",
                            "Which analysis types are classified under Splicing model analysis, such as Splice transcript prediction?",
                            "Under which broader analysis categories does Splice transcript prediction fall?"
                        ]
                    },
                    {
                        "axiom": "Splice transcript prediction propertyRestrictions [has topic some Gene structure]",
                        "CQ": [
                            "Is it required that every splice transcript prediction is associated with at least one gene structure through the 'has topic' property?",
                            "Can a splice transcript prediction exist without having the 'has topic' relation to a gene structure?",
                            "Does the 'has topic' property for splice transcript prediction necessarily include a gene structure as its value?"
                        ]
                    }
                ]
            },
            "phyloXML": {
                "axiom": {
                    "subClassOf": [
                        "XML",
                        "Phylogenetic tree format (XML)"
                    ]
                },
                "description": "phyloXML is a standardized XML-based file format specifically designed for representing phylogenetic trees, networks, and their associated data. It is defined as a subclass of both XML and \"Phylogenetic tree format (XML)\", situating it within the hierarchy of XML-based structured formats and explicitly identifying its domain focus on phylogenetics. This ensures that instances of phyloXML are recognized as conforming to general XML standards while also supporting specialized requirements for phylogenetic data representation.",
                "CQ": [
                    {
                        "axiom": "phyloXML subClassOf XML",
                        "CQ": [
                            "Does phyloXML fall under the category of XML languages?",
                            "Which XML-based formats include phyloXML as a specialized subset?",
                            "What broader classes encompass phyloXML within document markup languages?"
                        ]
                    },
                    {
                        "axiom": "phyloXML subClassOf Phylogenetic tree format (XML)",
                        "CQ": [
                            "Is phyloXML a specialized instance of Phylogenetic tree format (XML)?",
                            "Which formats are encompassed by the category of Phylogenetic tree format (XML), including phyloXML?",
                            "What broader data format categories does phyloXML fall under?"
                        ]
                    }
                ]
            },
            "Sequence trace format": {
                "axiom": {
                    "subClassOf": [
                        "Sequence record format"
                    ],
                    "propertyRestrictions": [
                        "[is format of some Sequence trace]"
                    ]
                },
                "description": "Sequence trace format is a subclass of Sequence record format that serves specifically as a format for sequence trace data, including information such as base calls. According to its axioms, every Sequence trace format is associated with at least one Sequence trace, meaning it is designed to represent or encode the data generated during DNA sequencing processes. This class formalizes the relationship between sequence trace data and the file formats used to store such data.",
                "CQ": [
                    {
                        "axiom": "Sequence trace format subClassOf Sequence record format",
                        "CQ": [
                            "Is Sequence trace format included as a subclass within Sequence record format?",
                            "Which formats fall under the broader classification of Sequence record format?",
                            "What are the more general categories that Sequence trace format is classified under?"
                        ]
                    },
                    {
                        "axiom": "Sequence trace format propertyRestrictions [is format of some Sequence trace]",
                        "CQ": [
                            "Is every instance described by the sequence trace format propertyRestrictions required to be the format of at least one Sequence trace?",
                            "Can a sequence trace format propertyRestriction exist without being associated as the format of a Sequence trace?",
                            "Does the ontology permit a sequence trace format propertyRestriction that is not related to any Sequence trace through the 'is format of' property?"
                        ]
                    }
                ]
            },
            "mspcrunch": {
                "axiom": {
                    "subClassOf": [
                        "Textual format",
                        "Database hits (sequence) format"
                    ]
                },
                "description": "mspcrunch is defined as a subclass of both Textual format and Database hits (sequence) format. It represents the format used for results produced by sequence database searches utilizing a variant of MSPCrunch. This class captures result formats that are textual and specifically designed to document database hit information from MSPCrunch-based search tools.",
                "CQ": [
                    {
                        "axiom": "mspcrunch subClassOf Textual format",
                        "CQ": [
                            "Is mspcrunch categorized as a subtype of Textual format?",
                            "Which specific types fall under the broader class of Textual format, including mspcrunch?",
                            "What higher-level format classes does mspcrunch inherit from?"
                        ]
                    },
                    {
                        "axiom": "mspcrunch subClassOf Database hits (sequence) format",
                        "CQ": [
                            "Is mspcrunch a specific instance within the broader category of Database hits (sequence) format?",
                            "Which formats are defined as more specialized than Database hits (sequence) format, such as mspcrunch?",
                            "What overarching categories does mspcrunch fall under within sequence data formats?"
                        ]
                    }
                ]
            },
            "Microarray raw data analysis": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Microarray raw data analysis is defined as a subclass of Obsolete concept (EDAM), indicating it is no longer an actively maintained or recommended concept. It refers to the process of analyzing raw microarray data, typically involving the initial computational and statistical procedures applied to uninterpreted data obtained from microarray experiments. The obsolete status suggests that this method or term has been superseded by newer approaches or terminologies.",
                "CQ": [
                    {
                        "axiom": "Microarray raw data analysis subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Microarray raw data analysis classified under the Obsolete concept (EDAM) category?",
                            "What are the more specific types encompassed by Obsolete concept (EDAM), including Microarray raw data analysis?",
                            "Which broader concepts does Microarray raw data analysis inherit from within the ontology?"
                        ]
                    }
                ]
            },
            "Dylan": {
                "axiom": {
                    "subClassOf": [
                        "programming language"
                    ]
                },
                "description": "Dylan is defined as a subclass of programming language, indicating that it represents a specific type of programming language. No additional axioms or restrictions are provided, so members of this class inherit all the general characteristics of programming languages.",
                "CQ": [
                    {
                        "axiom": "Dylan subClassOf programming language",
                        "CQ": [
                            "Does Dylan belong to the category of programming languages?",
                            "Which programming languages have Dylan as a specific type within their hierarchy?",
                            "What are the parent categories of Dylan in the ontology?"
                        ]
                    }
                ]
            },
            "Usage restricted": {
                "axiom": {
                    "subClassOf": [
                        "Usage clause"
                    ]
                },
                "description": "Usage restricted is defined as a subclass of Usage clause. This means that every instance of Usage restricted is also considered a Usage clause, typically signifying a specific type of usage limitation or regulation formalized within a broader policy or agreement context. No further restrictions or disjointness are specified beyond this hierarchical relationship.",
                "CQ": [
                    {
                        "axiom": "Usage restricted subClassOf Usage clause",
                        "CQ": [
                            "Does Usage restricted fall under the general category of Usage clause?",
                            "Which specific usages are classified within the Usage clause category?",
                            "What broader clauses encompass Usage restricted as a subtype?"
                        ]
                    }
                ]
            },
            "Metabolic disease": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Metabolic disease is defined as a subclass of Obsolete concept (EDAM), indicating its deprecated status within the ontology. It refers to a topic concerning the study of metabolic diseases, though its classification as obsolete suggests it should not be used for current or future annotation.",
                "CQ": [
                    {
                        "axiom": "Metabolic disease subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Does Metabolic disease fall under the overarching class of Obsolete concept (EDAM)?",
                            "Which specific concepts are categorized under Obsolete concept (EDAM), such as Metabolic disease?",
                            "What general classes or categories does Metabolic disease directly inherit from?"
                        ]
                    }
                ]
            },
            "application programming interface": {
                "axiom": {
                    "subClassOf": [
                        "software interface"
                    ]
                },
                "description": "application programming interface is defined as a subclass of software interface. This means every application programming interface is a specialized form of software interface, facilitating communication and interaction between different software components or systems.",
                "CQ": [
                    {
                        "axiom": "application programming interface subClassOf software interface",
                        "CQ": [
                            "Does application programming interface fall under the category of software interface?",
                            "What are the more specific types classified within software interface, such as application programming interface?",
                            "To which higher-level categories is application programming interface assigned?"
                        ]
                    }
                ]
            },
            "Phylogenetic tree generation (minimum distance methods)": {
                "axiom": {
                    "subClassOf": [
                        "Phylogenetic tree generation (method centric)"
                    ]
                },
                "description": "Phylogenetic tree generation (minimum distance methods) is a subclass of Phylogenetic tree generation (method centric). This class comprises approaches—such as the neighbor joining (NJ) clustering method—that construct phylogenetic trees by calculating or utilizing precomputed distances between sequences. The goal is to identify a tree where the discrepancies between the observed pairwise distances and those implied by the tree structure are minimized, allowing for accurate inference of evolutionary relationships.",
                "CQ": [
                    {
                        "axiom": "Phylogenetic tree generation (minimum distance methods) subClassOf Phylogenetic tree generation (method centric)",
                        "CQ": [
                            "Is Phylogenetic tree generation (minimum distance methods) classified within the broader group of Phylogenetic tree generation (method centric)?",
                            "What are the more specific types under Phylogenetic tree generation (method centric), including minimum distance methods?",
                            "Which higher-level categories encompass Phylogenetic tree generation (minimum distance methods)?"
                        ]
                    }
                ]
            },
            "matlab software": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "equivalentClass": [
                        "[is encoded in some MATLAB language]"
                    ]
                },
                "description": "matlab software is defined as a subclass of software, characterized by being encoded in some MATLAB language. Any individual of this class must be implemented using MATLAB programming language, making it equivalent to software whose code is written in MATLAB. This specification ensures that only software realized through MATLAB language belongs to this class.",
                "CQ": [
                    {
                        "axiom": "matlab software subClassOf software",
                        "CQ": [
                            "Is matlab software classified as a more specific member within the category of software?",
                            "Which entities are directly categorized as subclasses of software, including matlab software?",
                            "What higher-level classes does matlab software fall under according to the ontology?"
                        ]
                    },
                    {
                        "axiom": "matlab software equivalentClass [is encoded in some MATLAB language]",
                        "CQ": [
                            "Is every matlab software instance necessarily encoded in some MATLAB language?",
                            "Is matlab software defined exactly as those entities that are encoded in MATLAB language?",
                            "Does the class matlab software precisely include all entities that are encoded using MATLAB language?"
                        ]
                    }
                ]
            },
            "Protein residue surface calculation": {
                "axiom": {
                    "subClassOf": [
                        "Protein surface and interior calculation"
                    ]
                },
                "description": "Protein residue surface calculation is a subclass of Protein surface and interior calculation. This class refers to the process of calculating the solvent accessibility for each residue within a protein structure, determining how much of each residue's surface is exposed to the surrounding solvent.",
                "CQ": [
                    {
                        "axiom": "Protein residue surface calculation subClassOf Protein surface and interior calculation",
                        "CQ": [
                            "Is Protein surface and interior calculation a broader classification encompassing Protein residue surface calculation?",
                            "Which calculation methods are classified under Protein surface and interior calculation, specifically including Protein residue surface calculation?",
                            "To which higher-level calculation categories does Protein residue surface calculation pertain?"
                        ]
                    }
                ]
            },
            "Protein signal peptide detection (eukaryotes)": {
                "axiom": {
                    "subClassOf": [
                        "Protein signal peptide detection"
                    ]
                },
                "description": "Protein signal peptide detection (eukaryotes) is a subclass of Protein signal peptide detection. Members of this class are concerned with detecting or predicting signal peptides specifically in eukaryotic proteins, often also predicting their subcellular localization. This classification formalizes tasks or methods focused on identifying signal peptides in eukaryotic protein sequences.",
                "CQ": [
                    {
                        "axiom": "Protein signal peptide detection (eukaryotes) subClassOf Protein signal peptide detection",
                        "CQ": [
                            "Is 'Protein signal peptide detection (eukaryotes)' classified as a kind of 'Protein signal peptide detection'?",
                            "What specific detection categories are subclasses of 'Protein signal peptide detection', including the eukaryote-focused type?",
                            "Which broader detection classes encompass 'Protein signal peptide detection (eukaryotes)'?"
                        ]
                    }
                ]
            },
            "Query and retrieval": {
                "axiom": {
                    "subClassOf": [
                        "information processing"
                    ],
                    "propertyRestrictions": [
                        "[has output some data]",
                        "[has topic some Data search, query and retrieval]"
                    ]
                },
                "description": "Query and retrieval is a subclass of information processing that focuses on searching or querying data resources to retrieve entries or annotations. Members of this class produce some form of data as output and are concerned specifically with topics related to data search, query, and retrieval. This formalization ensures that any process classified under query and retrieval involves both the act of querying/searching and the acquisition of data or annotations from relevant data resources.",
                "CQ": [
                    {
                        "axiom": "Query and retrieval subClassOf information processing",
                        "CQ": [
                            "Does Query and retrieval fall under the broader classification of information processing?",
                            "Which specific categories are encompassed within information processing, including Query and retrieval?",
                            "What higher-level concepts include Query and retrieval as a member?"
                        ]
                    },
                    {
                        "axiom": "Query and retrieval propertyRestrictions [has output some data]",
                        "CQ": [
                            "Must every instance of Query and Retrieval have at least one output that is classified as Data?",
                            "Is it required for Query and Retrieval to produce Data as an output?",
                            "Can Query and Retrieval exist without having the property ‘has output’ linked to some instance of Data?"
                        ]
                    },
                    {
                        "axiom": "Query and retrieval propertyRestrictions [has topic some Data search, query and retrieval]",
                        "CQ": [
                            "Is it required that every Query and retrieval instance is associated via 'has topic' with at least one Data search, query and retrieval topic?",
                            "Does a Query and retrieval necessarily have the 'has topic' property pointing to something categorized as Data search, query and retrieval?",
                            "Is there any instance of Query and retrieval that does not involve a 'has topic' relationship to Data search, query and retrieval?"
                        ]
                    }
                ]
            },
            "Epitope mapping": {
                "axiom": {
                    "subClassOf": [
                        "Mapping",
                        "Protein sequence feature detection"
                    ],
                    "propertyRestrictions": [
                        "[has topic some Immunology]"
                    ]
                },
                "description": "Epitope mapping is defined as a subclass of both Mapping and Protein sequence feature detection, and is characterized by having an association with the topic of Immunology. This class encompasses processes or methods aimed at predicting antigenic determinant sites (epitopes) within protein sequences, a fundamental step frequently employed in vaccine design.",
                "CQ": [
                    {
                        "axiom": "Epitope mapping subClassOf Mapping",
                        "CQ": [
                            "Does Epitope mapping fall under the general category of Mapping?",
                            "What specialized types are encompassed by Mapping, with reference to Epitope mapping?",
                            "Which broader concepts does Epitope mapping inherit from within the hierarchy?"
                        ]
                    },
                    {
                        "axiom": "Epitope mapping subClassOf Protein sequence feature detection",
                        "CQ": [
                            "Does Epitope mapping fall under the broader classification of Protein sequence feature detection?",
                            "Which types of feature detection methods in protein sequences encompass Epitope mapping?",
                            "Under what higher-level categories is Epitope mapping classified in the context of protein analysis?"
                        ]
                    },
                    {
                        "axiom": "Epitope mapping propertyRestrictions [has topic some Immunology]",
                        "CQ": [
                            "Does every instance of Epitope mapping necessarily pertain to at least one topic within Immunology?",
                            "Is it required that Epitope mapping is associated with the subject area of Immunology through its topic property?",
                            "Can an Epitope mapping exist if it does not involve any aspect classified under Immunology as a topic?"
                        ]
                    }
                ]
            },
            "Coding region prediction": {
                "axiom": {
                    "subClassOf": [
                        "Gene component prediction"
                    ]
                },
                "description": "Coding region prediction is defined as a subclass of gene component prediction. It refers to the computational process of identifying protein-coding regions, such as coding sequences (CDS), exons, or open reading frames, within nucleotide sequences. This class formalizes prediction methods aimed specifically at detecting the parts of genes that encode proteins, distinguishing them from non-coding regions.",
                "CQ": [
                    {
                        "axiom": "Coding region prediction subClassOf Gene component prediction",
                        "CQ": [
                            "Does Coding region prediction represent a specialized form of Gene component prediction?",
                            "Which subcategories fall under Gene component prediction, such as Coding region prediction?",
                            "To which major prediction category does Coding region prediction belong?"
                        ]
                    }
                ]
            },
            "Protein secondary structure image": {
                "axiom": {
                    "subClassOf": [
                        "Protein image"
                    ]
                },
                "description": "Protein secondary structure image is a subclass of Protein image. It represents images specifically depicting the secondary structure of proteins, such as alpha helices and beta sheets. This class is defined by the oboInOwl:hasDefinition property: \"Image of protein secondary structure.\"",
                "CQ": [
                    {
                        "axiom": "Protein secondary structure image subClassOf Protein image",
                        "CQ": [
                            "Is Protein image a more general category that includes Protein secondary structure image?",
                            "Which specific types of Protein image exist, and does this include Protein secondary structure image?",
                            "To which superordinate image categories does Protein secondary structure image belong?"
                        ]
                    }
                ]
            },
            "Sequence cluster ID (UniRef90)": {
                "axiom": {
                    "subClassOf": [
                        "Sequence cluster ID (UniRef)"
                    ]
                },
                "description": "Sequence cluster ID (UniRef90) is a subclass of Sequence cluster ID (UniRef). It represents a unique identifier assigned to each entry in the UniRef90 database, enabling the unambiguous referencing and retrieval of sequence clusters within the UniRef90 dataset.",
                "CQ": [
                    {
                        "axiom": "Sequence cluster ID (UniRef90) subClassOf Sequence cluster ID (UniRef)",
                        "CQ": [
                            "Is Sequence cluster ID (UniRef90) categorized under Sequence cluster ID (UniRef)?",
                            "Which specific sequence cluster IDs are included within Sequence cluster ID (UniRef), such as UniRef90?",
                            "What broader cluster identifier categories does Sequence cluster ID (UniRef90) fall under?"
                        ]
                    }
                ]
            },
            "REBASE proto enzyme report format": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "REBASE proto enzyme report format is defined as a subclass of Obsolete concept (EDAM). It represents the format of an entry from the proto section of the REBASE enzyme database. This class is considered obsolete, indicating that the format is no longer in active use or has been superseded.",
                "CQ": [
                    {
                        "axiom": "REBASE proto enzyme report format subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is REBASE proto enzyme report format classified under the overarching category of Obsolete concept (EDAM)?",
                            "What obsolete concepts (EDAM) include REBASE proto enzyme report format as a more specific subtype?",
                            "Which broader conceptual categories recognize REBASE proto enzyme report format as a subordinate member?"
                        ]
                    }
                ]
            },
            "LBE": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[is encoded in some R language]",
                        "[has specified data output some (Graph plot and [has format specification some image format])]",
                        "[implements some 'FDR']",
                        "[has specified data output some (data and [has format specification some R data frame])]",
                        "[is executed in some differential expression analysis]",
                        "[has specified data input some (Gene expression dataset and [has format specification some data format specification])]"
                    ]
                },
                "description": "LBE is defined as a subclass of software specifically designed for execution within differential expression analysis workflows. LBE must be encoded in some R language and is required to implement the FDR (False Discovery Rate) method. It accepts as input gene expression datasets, which must conform to a specified data format. The outputs of LBE include (1) graphical plots, which are constrained to possess image format specifications, and (2) data outputs provided as R data frames. This class formalization highlights LBE's role as a specialized analytical software tool in genomics, with rigorous specifications for input formats, output formats, and methodological implementation.",
                "CQ": [
                    {
                        "axiom": "LBE subClassOf software",
                        "CQ": [
                            "Is LBE categorized as a type of software?",
                            "What specific subcategories fall under software, such as LBE?",
                            "Which broader classes does LBE belong to within the ontology?"
                        ]
                    },
                    {
                        "axiom": "LBE propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is it necessary for an LBE to be encoded in at least one R language?",
                            "Does every LBE instance have to satisfy the property 'is encoded in' with some R language?",
                            "Can an LBE exist without being encoded in any R language?"
                        ]
                    },
                    {
                        "axiom": "LBE propertyRestrictions [has specified data output some (Graph plot and [has format specification some image format])]",
                        "CQ": [
                            "Is it required that an LBE propertyRestriction's specified data output includes both a Graph plot and at least one image format?",
                            "Must the specified data output produced by an LBE propertyRestriction combine a Graph plot with an output that conforms to some image format?",
                            "Does every LBE propertyRestriction ensure that its specified data output is composed of a Graph plot which is provided in some image format?"
                        ]
                    },
                    {
                        "axiom": "LBE propertyRestrictions [implements some 'FDR']",
                        "CQ": [
                            "Is it required that every LBE implements at least one FDR?",
                            "Does the definition of LBE ensure that it has an implementation relationship with an FDR?",
                            "Can an instance of LBE exist without implementing any FDR?"
                        ]
                    },
                    {
                        "axiom": "LBE propertyRestrictions [has specified data output some (data and [has format specification some R data frame])]",
                        "CQ": [
                            "Is every LBE required to produce at least one data output that is a data formatted according to an R data frame specification?",
                            "Can LBE generate data outputs only if the output includes a format specification for R data frames?",
                            "Does the property restriction on LBE ensure that there exists some data output with a format specified as an R data frame?"
                        ]
                    },
                    {
                        "axiom": "LBE propertyRestrictions [is executed in some differential expression analysis]",
                        "CQ": [
                            "Is it required for LBE to be executed in at least one differential expression analysis?",
                            "Can any instance of LBE exist without being executed in some differential expression analysis?",
                            "Does the ontology allow for LBE usage only when it is associated with a differential expression analysis?"
                        ]
                    },
                    {
                        "axiom": "LBE propertyRestrictions [has specified data input some (Gene expression dataset and [has format specification some data format specification])]",
                        "CQ": [
                            "Is it required for LBE propertyRestrictions to include at least one specified data input that is both a gene expression dataset and has some format specification?",
                            "Can an LBE propertyRestriction exist without referring to a gene expression dataset with an associated data format specification?",
                            "Are all specified data inputs within LBE propertyRestrictions constrained to be gene expression datasets that have some data format specification?"
                        ]
                    }
                ]
            },
            "Sequence word comparison": {
                "axiom": {
                    "subClassOf": [
                        "Sequence comparison"
                    ]
                },
                "description": "Sequence word comparison is a subclass of Sequence comparison, specialized in identifying exact character or word matches between molecular sequences. Unlike full sequence alignment, this class represents operations that focus solely on pinpointing matching words or characters, providing a targeted approach for comparative analysis of sequence fragments.",
                "CQ": [
                    {
                        "axiom": "Sequence word comparison subClassOf Sequence comparison",
                        "CQ": [
                            "Does Sequence word comparison fall under the broader class of Sequence comparison?",
                            "Which types of comparisons are classified as subclasses of Sequence comparison?",
                            "What general comparison categories include Sequence word comparison?"
                        ]
                    }
                ]
            },
            "amino acid protein sequence data": {
                "axiom": {
                    "subClassOf": [
                        "biological sequence data"
                    ]
                },
                "description": "amino acid protein sequence data is defined as a subclass of biological sequence data. This class represents sequence data composed specifically of amino acids, typically encoding the primary structure of proteins. Members of this class are distinguished from other types of biological sequence data, such as nucleic acid sequences, by representing the ordered series of amino acids that form protein molecules.",
                "CQ": [
                    {
                        "axiom": "amino acid protein sequence data subClassOf biological sequence data",
                        "CQ": [
                            "Is amino acid protein sequence data a more specialized form of biological sequence data?",
                            "Which subcategories fall under the class of biological sequence data?",
                            "To which higher-level groups does amino acid protein sequence data pertain?"
                        ]
                    }
                ]
            },
            "RBioinf": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[has specified data output some (Image and [has format specification some image format])]",
                        "[has specified data input some (data and [has format specification some R data frame])]",
                        "[is encoded in some R language]",
                        "[implements some Linear modelling]"
                    ]
                },
                "description": "RBioinf is defined as a subclass of software characterized by its use of the R programming language and its implementation of linear modelling functionality. It accepts data inputs that are specifically R data frames and outputs images, with both inputs and outputs subject to precise format specifications. This class formalizes that any RBioinf software must process data in the form of R data frames, produce image outputs conforming to specified image formats, and must be implemented in the R language with capabilities for linear modelling.",
                "CQ": [
                    {
                        "axiom": "RBioinf subClassOf software",
                        "CQ": [
                            "Is RBioinf classified as a type of software?",
                            "Which software subclasses include RBioinf?",
                            "To which broader categories does RBioinf belong?"
                        ]
                    },
                    {
                        "axiom": "RBioinf propertyRestrictions [has specified data output some (Image and [has format specification some image format])]",
                        "CQ": [
                            "Does every RBioinf instance necessarily produce at least one data output that is both an Image and has some format specification corresponding to an image format?",
                            "Is it required that the data output of RBioinf includes an Image with a specified image format?",
                            "Can there be an RBioinf with no data outputs that meet both the Image type and the image format specification criteria?"
                        ]
                    },
                    {
                        "axiom": "RBioinf propertyRestrictions [has specified data input some (data and [has format specification some R data frame])]",
                        "CQ": [
                            "Does RBioinf require that its specified data input includes data with at least one format specification of an R data frame?",
                            "Is it necessary for RBioinf to have the has specified data input property relating to data that has a format specification of an R data frame?",
                            "Can RBioinf’s specified data input be data without any format specification as an R data frame?"
                        ]
                    },
                    {
                        "axiom": "RBioinf propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is every instance of RBioinf required to be encoded in at least one R language?",
                            "Can RBioinf exist without being associated through the 'is encoded in' property with any R language?",
                            "Does the 'is encoded in' property for RBioinf necessarily involve an R language?"
                        ]
                    },
                    {
                        "axiom": "RBioinf propertyRestrictions [implements some Linear modelling]",
                        "CQ": [
                            "Is it necessary for RBioinf to implement any Linear modelling methods?",
                            "Does RBioinf guarantee the presence of an implementation related to Linear modelling?",
                            "Can an RBioinf system exist without implementing Linear modelling?"
                        ]
                    }
                ]
            },
            "Algorithms for Calculating Microarray Enrichment": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[has specified data output some Graph plot]",
                        "[has specified data input some (data and [has format specification some R data frame])]",
                        "[is encoded in some R language]",
                        "[implements some (Algorithms for Calculating Microarray Enrichment and Chi-square)]"
                    ]
                },
                "description": "Algorithms for Calculating Microarray Enrichment is a subclass of software that specifically implements algorithms for analyzing microarray data enrichment, incorporating both its core methodology and Chi-square analysis. Instances of this class must be encoded in the R programming language, take as input data that conforms to the R data frame format, and output at least some form of graphical plot. This class formalization ensures that any software classified here is designed for statistical analysis of microarray enrichment with explicit data format and output requirements.",
                "CQ": [
                    {
                        "axiom": "Algorithms for Calculating Microarray Enrichment subClassOf software",
                        "CQ": [
                            "Are Algorithms for Calculating Microarray Enrichment classified as a specialized form of software?",
                            "Which software categories include Algorithms for Calculating Microarray Enrichment as subtypes?",
                            "What general software classes encompass Algorithms for Calculating Microarray Enrichment?"
                        ]
                    },
                    {
                        "axiom": "Algorithms for Calculating Microarray Enrichment propertyRestrictions [has specified data output some Graph plot]",
                        "CQ": [
                            "Is it required that Algorithms for Calculating Microarray Enrichment produce at least one data output that is a Graph plot?",
                            "Can any Algorithm for Calculating Microarray Enrichment exist without generating a Graph plot as a specified data output?",
                            "Are Graph plots an essential type of specified data output for Algorithms for Calculating Microarray Enrichment?"
                        ]
                    },
                    {
                        "axiom": "Algorithms for Calculating Microarray Enrichment propertyRestrictions [has specified data input some (data and [has format specification some R data frame])]",
                        "CQ": [
                            "Must every instance of Algorithms for Calculating Microarray Enrichment have at least one data input that is of type data and has a format specification of R data frame?",
                            "Are Algorithms for Calculating Microarray Enrichment required to accept as input only data in the form of an R data frame?",
                            "Can Algorithms for Calculating Microarray Enrichment operate if the specified data input lacks an R data frame format specification?"
                        ]
                    },
                    {
                        "axiom": "Algorithms for Calculating Microarray Enrichment propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Must every instance of 'Algorithms for Calculating Microarray Enrichment' be encoded in at least one R language implementation?",
                            "Is it possible for an 'Algorithm for Calculating Microarray Enrichment' to exist without being encoded in the R language?",
                            "Are there any algorithms for microarray enrichment that are encoded exclusively in the R language?"
                        ]
                    },
                    {
                        "axiom": "Algorithms for Calculating Microarray Enrichment propertyRestrictions [implements some (Algorithms for Calculating Microarray Enrichment and Chi-square)]",
                        "CQ": [
                            "Does every Algorithms for Calculating Microarray Enrichment implement at least one method that is both an Algorithms for Calculating Microarray Enrichment and a Chi-square algorithm?",
                            "Can an Algorithms for Calculating Microarray Enrichment exist without implementing any version of the Chi-square algorithm?",
                            "Is it required that Algorithms for Calculating Microarray Enrichment implement a process combining features of both enrichment calculation and Chi-square analysis?"
                        ]
                    }
                ]
            },
            "Ontology concept comment": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Ontology concept comment is a subclass of Obsolete concept (EDAM), representing a comment made on a concept within an ontology. This class is intended to capture annotations or remarks relevant to ontology concepts, though it is now considered obsolete within the EDAM framework.",
                "CQ": [
                    {
                        "axiom": "Ontology concept comment subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is every Ontology concept comment categorized under Obsolete concept (EDAM)?",
                            "Which concepts fall under the Obsolete concept (EDAM) class, including Ontology concept comment?",
                            "What broader classes does Ontology concept comment directly belong to?"
                        ]
                    }
                ]
            },
            "Sequence redundancy removal": {
                "axiom": {
                    "subClassOf": [
                        "Sequence comparison"
                    ],
                    "propertyRestrictions": [
                        "[has output some Sequence]"
                    ]
                },
                "description": "Sequence redundancy removal is defined as a subclass of Sequence comparison. This class includes processes that take two or more molecular sequences as input, compare them, and identify and remove redundant sequences based on specific criteria. According to its axioms, any instance of Sequence redundancy removal must have at least one output that is a Sequence.",
                "CQ": [
                    {
                        "axiom": "Sequence redundancy removal subClassOf Sequence comparison",
                        "CQ": [
                            "Does sequence redundancy removal fall under the broader category of sequence comparison?",
                            "What are the specific subclasses encompassed by sequence comparison, including sequence redundancy removal?",
                            "Which parent categories include sequence redundancy removal within their hierarchy?"
                        ]
                    },
                    {
                        "axiom": "Sequence redundancy removal propertyRestrictions [has output some Sequence]",
                        "CQ": [
                            "Is every output generated by the sequence redundancy removal process required to be a Sequence?",
                            "Can there exist a sequence redundancy removal result that is not categorized as a Sequence in the ontology?",
                            "Does the sequence redundancy removal process necessarily produce at least one output that qualifies as a Sequence?"
                        ]
                    }
                ]
            },
            "Image": {
                "axiom": {
                    "subClassOf": [
                        "data"
                    ]
                },
                "description": "Image is defined as a subclass of data, specifically representing biological or biomedical data that can be visually rendered—such as being displayed on a screen or plotted on a graph. Members of this class are characterized by their suitability for visual representation, distinguishing them within the spectrum of data types.",
                "CQ": [
                    {
                        "axiom": "Image subClassOf data",
                        "CQ": [
                            "Is Image categorized as a specialized type of data?",
                            "What types are encompassed under data, specifically including Image?",
                            "Which upper-level groups does Image fall under within the ontology?"
                        ]
                    }
                ]
            },
            "Free cysteine detection": {
                "axiom": {
                    "subClassOf": [
                        "Protein cysteine and disulfide bond assignment"
                    ]
                },
                "description": "Free cysteine detection is a subclass of Protein cysteine and disulfide bond assignment, concerned with identifying cysteine residues in a protein structure that are not engaged in disulfide bonds (cysteine bridges) and do not serve as ligands to metals. This class ensures the detection and annotation of cysteine residues that are chemically free within protein structures.",
                "CQ": [
                    {
                        "axiom": "Free cysteine detection subClassOf Protein cysteine and disulfide bond assignment",
                        "CQ": [
                            "Is Free cysteine detection classified under Protein cysteine and disulfide bond assignment?",
                            "What are the more specific processes that fall under Protein cysteine and disulfide bond assignment, such as Free cysteine detection?",
                            "Which broader categories encompass Free cysteine detection?"
                        ]
                    }
                ]
            },
            "NMR spectrum": {
                "axiom": {
                    "subClassOf": [
                        "Spectrum"
                    ],
                    "propertyRestrictions": [
                        "[has topic some Structural biology]"
                    ]
                },
                "description": "NMR spectrum is a subclass of Spectrum and represents spectral information for a molecule derived from a nuclear magnetic resonance (NMR) experiment. By axiom, every NMR spectrum is linked with at least one topic in Structural biology, situating it within research relevant to molecular structure determination. This class formalization ensures all instances pertain to spectra associated with structural biology analyses using NMR techniques.",
                "CQ": [
                    {
                        "axiom": "NMR spectrum subClassOf Spectrum",
                        "CQ": [
                            "Does NMR spectrum fall under the category of Spectrum?",
                            "What types of Spectrum include NMR spectrum as a specialized form?",
                            "Which more general classes encompass the NMR spectrum?"
                        ]
                    },
                    {
                        "axiom": "NMR spectrum propertyRestrictions [has topic some Structural biology]",
                        "CQ": [
                            "Is it necessary for an NMR spectrum propertyRestriction to have the topic Structural biology?",
                            "Can an NMR spectrum propertyRestriction exist without being related to Structural biology?",
                            "Are there NMR spectrum propertyRestrictions that are necessarily associated with the topic Structural biology?"
                        ]
                    }
                ]
            },
            "dhf": {
                "axiom": {
                    "subClassOf": [
                        "Textual format",
                        "Database hits (sequence) format"
                    ]
                },
                "description": "dhf is a subclass of both Textual format and Database hits (sequence) format. It represents a format for EMBASSY domain hits files (DHF), which store sequence hits that have domain classification information, specifically relating the hits to SCOP or CATH protein families as identified from sequence database searches. This format is used for capturing and conveying domain-related relationships identified through such searches.",
                "CQ": [
                    {
                        "axiom": "dhf subClassOf Textual format",
                        "CQ": [
                            "Is dhf classified as a type of Textual format?",
                            "Which specific formats are categorized under Textual format, such as dhf?",
                            "What broader categories encompass dhf within the hierarchy of formats?"
                        ]
                    },
                    {
                        "axiom": "dhf subClassOf Database hits (sequence) format",
                        "CQ": [
                            "Does dhf fall under the broader classification of Database hits (sequence) format?",
                            "Which sequence formats have dhf as a more specific variation?",
                            "What are the direct parent categories for dhf in terms of sequence formats?"
                        ]
                    }
                ]
            },
            "Cell type name": {
                "axiom": {
                    "subClassOf": [
                        "Name",
                        "Cell type identifier"
                    ]
                },
                "description": "Cell type name is a subclass of both Name and Cell type identifier. It represents the name assigned to a type or group of cells, serving as an identifier within biological and ontological contexts. This class formally captures the concept of cell type naming for purposes such as annotation, identification, and classification.",
                "CQ": [
                    {
                        "axiom": "Cell type name subClassOf Name",
                        "CQ": [
                            "Does Cell type name fall under the classification of Name?",
                            "Which entities are encompassed as more specific types of Name, including Cell type name?",
                            "What broader categories is Cell type name associated with in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Cell type name subClassOf Cell type identifier",
                        "CQ": [
                            "Is Cell type name categorized under Cell type identifier?",
                            "Which specific cell type names are encompassed by Cell type identifier?",
                            "What broader classes does Cell type name fall within according to the ontology?"
                        ]
                    }
                ]
            },
            "HGVbase entry format": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "HGVbase entry format is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer in active use or has been deprecated. It represents the format of a record originating from the HGVbase database, which stored information about genotypes and phenotypes.",
                "CQ": [
                    {
                        "axiom": "HGVbase entry format subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is HGVbase entry format classified under the broader category of Obsolete concept (EDAM)?",
                            "What specific concepts fall within Obsolete concept (EDAM), such as HGVbase entry format?",
                            "Which upper-level categories does HGVbase entry format belong to according to the ontology?"
                        ]
                    }
                ]
            },
            "GO concept name": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "GO concept name is a subclass of Obsolete concept (EDAM), indicating that it refers to a concept that is no longer actively used within the EDAM ontology. It is defined as the name of a concept from the Gene Ontology (GO), according to its current definition. This class captures deprecated labels or identifiers associated with GO concepts.",
                "CQ": [
                    {
                        "axiom": "GO concept name subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is every GO concept name classified under Obsolete concept in EDAM?",
                            "Which GO concept names fall within the scope of Obsolete concept in EDAM?",
                            "What broader EDAM categories include GO concept name as a more specific class?"
                        ]
                    }
                ]
            },
            "affyTiling": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[is published by hasValue Bioconductor]",
                        "[is executed in some (correction and data normalization)]",
                        "[has specified data output some CSV data set]",
                        "[implements some RMA]",
                        "[is encoded in some R language]",
                        "[has specified data input some [has format specification only (BPMAP and CEL binary format)]]"
                    ]
                },
                "description": "affyTiling is defined as a subclass of software that is published by Bioconductor. It is implemented in the R language, and its execution involves tasks related to correction and data normalization. The software implements RMA (Robust Multi-array Average) methods, with specified data input formats restricted to BPMAP and CEL binary formats. The data output produced by affyTiling is in the form of CSV data sets. This ontology representation ensures that any member of the affyTiling class is exclusively characterized by these properties and restrictions.",
                "CQ": [
                    {
                        "axiom": "affyTiling subClassOf software",
                        "CQ": [
                            "Is affyTiling classified under the general category of software?",
                            "What software categories have more specific subtypes, such as affyTiling?",
                            "Which broader categories encompass affyTiling within the context of software?"
                        ]
                    },
                    {
                        "axiom": "affyTiling propertyRestrictions [is published by hasValue Bioconductor]",
                        "CQ": [
                            "Is every instance of affyTiling necessarily published by Bioconductor?",
                            "Can affyTiling be published by any source other than Bioconductor according to the property restriction?",
                            "Does the ontology require that affyTiling must always have 'is published by' set to Bioconductor?"
                        ]
                    },
                    {
                        "axiom": "affyTiling propertyRestrictions [is executed in some (correction and data normalization)]",
                        "CQ": [
                            "Is it necessary for affyTiling propertyRestrictions to be executed in a process involving both correction and data normalization?",
                            "Can affyTiling propertyRestrictions be executed in any scenario where both correction and data normalization occur simultaneously?",
                            "Does affyTiling propertyRestrictions require execution exclusively within contexts entailing both correction and data normalization activities?"
                        ]
                    },
                    {
                        "axiom": "affyTiling propertyRestrictions [has specified data output some CSV data set]",
                        "CQ": [
                            "Is it required that affyTiling always produces at least one data output of type CSV data set?",
                            "Must every affyTiling instance be associated with some CSV data set as a specified data output?",
                            "Can affyTiling exist without generating a CSV data set as part of its specified data output?"
                        ]
                    },
                    {
                        "axiom": "affyTiling propertyRestrictions [implements some RMA]",
                        "CQ": [
                            "Is it required that every affyTiling implements at least one RMA?",
                            "Can an affyTiling exist without implementing any RMA?",
                            "Does the implementation of some RMA distinguish affyTiling from other concepts?"
                        ]
                    },
                    {
                        "axiom": "affyTiling propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is it required that affyTiling be encoded in at least one R language?",
                            "Can affyTiling exist without being encoded in any R language?",
                            "Must any instance of affyTiling always be associated with some R language encoding?"
                        ]
                    },
                    {
                        "axiom": "affyTiling propertyRestrictions [has specified data input some [has format specification only (BPMAP and CEL binary format)]]",
                        "CQ": [
                            "Must every specified data input for AffyTiling have a format specification that is limited to both BPMAP and CEL binary formats?",
                            "Is it required that AffyTiling’s specified data inputs conform exclusively to format specifications that are BPMAP and CEL binary format together?",
                            "Can AffyTiling have any specified data input whose format specification is not both BPMAP and CEL binary format simultaneously?"
                        ]
                    }
                ]
            },
            "Map": {
                "axiom": {
                    "subClassOf": [
                        "data"
                    ],
                    "propertyRestrictions": [
                        "[has topic some Mapping]"
                    ]
                },
                "description": "Map is defined as a subclass of data, with the restriction that it must be associated with at least one instance of Mapping via the has topic property. It is described as a map of (typically one) DNA sequence annotated with positional or non-positional features, indicating that instances of this class function as representations of sequence data linked to mapping information.",
                "CQ": [
                    {
                        "axiom": "Map subClassOf data",
                        "CQ": [
                            "Is Map categorized under the more general class of data?",
                            "Which specific instances or types fall under the subclass Map within data?",
                            "To which higher-level categories does Map belong in the data hierarchy?"
                        ]
                    },
                    {
                        "axiom": "Map propertyRestrictions [has topic some Mapping]",
                        "CQ": [
                            "Is it required that every Map has at least one topic associated via the has topic property that is an instance of Mapping?",
                            "Can a Map exist that does not have the has topic property relating it to any Mapping?",
                            "Does the presence of a Mapping as a value for the has topic property qualify an entity as a Map?"
                        ]
                    }
                ]
            },
            "TreeBASE format": {
                "axiom": {
                    "subClassOf": [
                        "Textual format",
                        "Phylogenetic tree format (text)"
                    ]
                },
                "description": "TreeBASE format is defined as a subclass of both Textual format and Phylogenetic tree format (text), indicating it is a specific type of text-based format used for representing phylogenetic trees. The class is described as the format used for entries in the TreeBASE database of phylogenetic data, highlighting its application within the domain of phylogenetic data management and exchange.",
                "CQ": [
                    {
                        "axiom": "TreeBASE format subClassOf Textual format",
                        "CQ": [
                            "Does TreeBASE format fall under the category of Textual format?",
                            "Which specialized formats are encompassed by Textual format, including TreeBASE format?",
                            "What broader classifications include TreeBASE format as a member?"
                        ]
                    },
                    {
                        "axiom": "TreeBASE format subClassOf Phylogenetic tree format (text)",
                        "CQ": [
                            "Is TreeBASE format classified as a type of Phylogenetic tree format?",
                            "Which data formats fall under the category of Phylogenetic tree format, including TreeBASE format?",
                            "What are the more general data format categories that encompass TreeBASE format?"
                        ]
                    }
                ]
            },
            "RLMM": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[implements some Mahalanobis distance]",
                        "[has specified data input some [has format specification only (Xba.CQV and Xba.regions and .raw files)]]",
                        "[has specified data output some Graph plot]",
                        "[is encoded in some R language]",
                        "[is executed in some data normalization]",
                        "[is published by hasValue Bioconductor]"
                    ]
                },
                "description": "RLMM is a subclass of software, characterized by its implementation of the Mahalanobis distance algorithm. It specifically requires data inputs that conform to the formats Xba.CQV, Xba.regions, and .raw files. The software outputs graph plots as part of its processing. RLMM is encoded in the R language and is designed to be executed within data normalization workflows. Additionally, it is published by Bioconductor. These axioms precisely define RLMM’s purpose and technical attributes within the domain of bioinformatics software.",
                "CQ": [
                    {
                        "axiom": "RLMM subClassOf software",
                        "CQ": [
                            "Is RLMM classified as a type of software?",
                            "Which entities are subclasses under software that include RLMM?",
                            "What broader categories encompass RLMM within the ontology?"
                        ]
                    },
                    {
                        "axiom": "RLMM propertyRestrictions [implements some Mahalanobis distance]",
                        "CQ": [
                            "Is it required for an RLMM to implement at least one Mahalanobis distance property?",
                            "Must every RLMM be associated with implementing the Mahalanobis distance?",
                            "Can an RLMM exist without having any implementation of Mahalanobis distance?"
                        ]
                    },
                    {
                        "axiom": "RLMM propertyRestrictions [has specified data input some [has format specification only (Xba.CQV and Xba.regions and .raw files)]]",
                        "CQ": [
                            "Is the specified data input for an RLMM propertyRestriction required to have a format specification that includes Xba.CQV, Xba.regions, and .raw files?",
                            "Can an RLMM propertyRestriction have a specified data input where the format specification is limited exclusively to Xba.CQV, Xba.regions, and .raw files?",
                            "Does an RLMM propertyRestriction necessarily entail that its specified data input must define format specifications corresponding to all three: Xba.CQV, Xba.regions, and .raw files?"
                        ]
                    },
                    {
                        "axiom": "RLMM propertyRestrictions [has specified data output some Graph plot]",
                        "CQ": [
                            "Is it required that an RLMM always has at least one specified data output that is a Graph plot?",
                            "Can an RLMM possess a specified data output property linked to a Graph plot?",
                            "Does every RLMM instance necessarily produce some data output classified as a Graph plot?"
                        ]
                    },
                    {
                        "axiom": "RLMM propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is it required that an RLMM has at least one encoding specified in an R language?",
                            "Can an RLMM exist without being encoded in any R language?",
                            "Is it possible for an RLMM to be encoded in more than one R language?"
                        ]
                    },
                    {
                        "axiom": "RLMM propertyRestrictions [is executed in some data normalization]",
                        "CQ": [
                            "Is it necessary for RLMM to be executed in some data normalization process?",
                            "Does every RLMM instance entail execution within a data normalization context?",
                            "Can an RLMM exist without being associated with any data normalization activity?"
                        ]
                    },
                    {
                        "axiom": "RLMM propertyRestrictions [is published by hasValue Bioconductor]",
                        "CQ": [
                            "Is every RLMM required to be published exclusively by Bioconductor?",
                            "Can an RLMM be considered valid if it is not published by Bioconductor?",
                            "Does the ontology allow any publisher other than Bioconductor for RLMM instances?"
                        ]
                    }
                ]
            },
            "Sequence feature detection": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)",
                        "Sequence analysis",
                        "Prediction and recognition"
                    ],
                    "propertyRestrictions": [
                        "[has topic some Sequence sites, features and motifs]",
                        "[has output some Sequence features]"
                    ]
                },
                "description": "Sequence feature detection is a subclass of the obsolete concept in EDAM, as well as sequence analysis and prediction and recognition. It specifically concerns the detection of positional sequence features, such as functional and other key sites, within molecular sequences. Formally, this class includes topics related to sequence sites, features, and motifs (via the 'has topic' property), and is characterized by producing sequence features as output (via the 'has output' property). This ensures the class encompasses analysis methods that predict or recognize annotated features within sequences.",
                "CQ": [
                    {
                        "axiom": "Sequence feature detection subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Sequence feature detection categorized as a type of Obsolete concept (EDAM)?",
                            "Which specific concepts fall under Obsolete concept (EDAM), with Sequence feature detection as an example?",
                            "What higher-level categories include Sequence feature detection?"
                        ]
                    },
                    {
                        "axiom": "Sequence feature detection subClassOf Sequence analysis",
                        "CQ": [
                            "Is Sequence analysis a general category that encompasses Sequence feature detection?",
                            "What specific types of analyses fall under the umbrella of Sequence analysis, such as Sequence feature detection?",
                            "To which broader analytical categories does Sequence feature detection belong?"
                        ]
                    },
                    {
                        "axiom": "Sequence feature detection subClassOf Prediction and recognition",
                        "CQ": [
                            "Does Sequence feature detection fall under the broader category of Prediction and recognition?",
                            "What are all the more specific types classified under Prediction and recognition, including Sequence feature detection?",
                            "Which higher-level categories does Sequence feature detection pertain to?"
                        ]
                    },
                    {
                        "axiom": "Sequence feature detection propertyRestrictions [has topic some Sequence sites, features and motifs]",
                        "CQ": [
                            "Is it required that a sequence feature detection property must involve at least one topic classified as a sequence site, feature, or motif?",
                            "Does every instance of sequence feature detection property have a topic that belongs to sequence sites, features, or motifs?",
                            "Can a sequence feature detection property exist without being associated with any sequence site, feature, or motif as a topic?"
                        ]
                    },
                    {
                        "axiom": "Sequence feature detection propertyRestrictions [has output some Sequence features]",
                        "CQ": [
                            "Is it necessary for a sequence feature detection to have at least one output that is a type of sequence feature?",
                            "Does sequence feature detection always produce some output classified as a sequence feature?",
                            "Can any instance of sequence feature detection exist without producing a sequence feature as output?"
                        ]
                    }
                ]
            },
            "Directory metadata": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Directory metadata is defined as a subclass of the obsolete concept (EDAM), indicating that it is no longer in current use. It is characterized as a directory on disk from which files are read. This class groups metadata associated specifically with such directories, although its use is considered outdated within the ontology.",
                "CQ": [
                    {
                        "axiom": "Directory metadata subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Directory metadata categorized as a specialized form of Obsolete concept (EDAM)?",
                            "Which concepts are classified under Obsolete concept (EDAM), such as Directory metadata?",
                            "What broader conceptual groupings encompass Directory metadata?"
                        ]
                    }
                ]
            },
            "Nucleic acid comparison": {
                "axiom": {
                    "subClassOf": [
                        "Comparison"
                    ]
                },
                "description": "Nucleic acid comparison is a subclass of Comparison, defined as the process of analyzing two or more nucleic acids to identify their similarities. This class is intended to capture activities focused on the comparative assessment of nucleic acid sequences or structures.",
                "CQ": [
                    {
                        "axiom": "Nucleic acid comparison subClassOf Comparison",
                        "CQ": [
                            "Does Nucleic acid comparison fall under the category of Comparison?",
                            "Which comparisons are classified more specifically as Nucleic acid comparisons?",
                            "To which parent classes does Nucleic acid comparison belong?"
                        ]
                    }
                ]
            },
            "beta": {
                "axiom": {
                    "subClassOf": [
                        "Development status"
                    ]
                },
                "description": "beta is defined as a subclass of Development status. This indicates that beta represents a specific stage or category within the broader concept of Development status, used to characterize entities according to their progress or phase in a development lifecycle. No further property restrictions or disjointness axioms are specified.",
                "CQ": [
                    {
                        "axiom": "beta subClassOf Development status",
                        "CQ": [
                            "Is beta categorized under the broader class of Development status?",
                            "Which specific subclasses fall within Development status, such as beta?",
                            "What general classifications does beta fall under in terms of Development status hierarchy?"
                        ]
                    }
                ]
            },
            "Rank-invariant set normalization": {
                "axiom": {
                    "subClassOf": [
                        "algorithm"
                    ]
                },
                "description": "Rank-invariant set normalization is an algorithm and thus a subclass of algorithm. While no further properties or relationships are specified in the given axiom, this class represents computational procedures designed for data normalization in which certain ranked sets or features remain unchanged, ensuring comparability across samples.",
                "CQ": [
                    {
                        "axiom": "Rank-invariant set normalization subClassOf algorithm",
                        "CQ": [
                            "Is rank-invariant set normalization classified under the general category of algorithm?",
                            "Which instances are recognized as more specific types of algorithm, such as rank-invariant set normalization?",
                            "What broader categories contain rank-invariant set normalization as a specific method?"
                        ]
                    }
                ]
            },
            "CBS": {
                "axiom": {
                    "subClassOf": [
                        "algorithm"
                    ]
                },
                "description": "CBS is defined as a subclass of algorithm. This indicates that every instance of CBS is recognized as a type of algorithm, inheriting all properties and characteristics typical of algorithms. No additional distinguishing axioms or restrictions are specified for CBS.",
                "CQ": [
                    {
                        "axiom": "CBS subClassOf algorithm",
                        "CQ": [
                            "Is CBS classified under the broader category of algorithm?",
                            "What are the specific subclasses found within the class algorithm, such as CBS?",
                            "Which higher-level categories does CBS conceptually fall into?"
                        ]
                    }
                ]
            },
            "Perl": {
                "axiom": {
                    "subClassOf": [
                        "programming language"
                    ]
                },
                "description": "Perl is defined as a subclass of programming language, indicating that any instance of Perl is also an instance of programming language. This classification situates Perl within the broader category of languages designed for coding and software development.",
                "CQ": [
                    {
                        "axiom": "Perl subClassOf programming language",
                        "CQ": [
                            "Is Perl classified as a specialized form of programming language?",
                            "Which programming languages include subclasses such as Perl?",
                            "To which higher-level categories does Perl belong within the programming language hierarchy?"
                        ]
                    }
                ]
            },
            "Functional mapping": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Functional mapping is defined as a subclass of the obsolete concept (EDAM), indicating it is no longer recommended for current use. It refers to mapping the genetic architecture of dynamic complex traits, often involving the characterization of underlying quantitative trait loci (QTLs) or nucleotides (QTNs). This term historically described approaches for associating genetic markers with complex trait variation through quantitative analysis.",
                "CQ": [
                    {
                        "axiom": "Functional mapping subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Functional mapping recognized as a specialized form of Obsolete concept (EDAM)?",
                            "Which concepts are classified under Obsolete concept (EDAM), including Functional mapping?",
                            "What broader conceptual categories include Functional mapping within the EDAM ontology?"
                        ]
                    }
                ]
            },
            "OmniOutliner": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[output of some (software development process and [has participant hasValue Omni])]",
                        "[is executed in some document outlining]",
                        "[output of some (software publishing process and [has participant hasValue Omni])]",
                        "[has website homepage hasValue http://www.omnigroup.com/products/omnioutliner/]",
                        "[has license some Proprietary commercial software license]",
                        "[has specified data output some (data and [has format specification some OmniOutline format])]"
                    ]
                },
                "description": "OmniOutliner is defined as a subclass of software, specifically characterized as the output of either a software development or publishing process involving the participant Omni. It is designed to be executed for document outlining tasks. The software is associated with a proprietary commercial license and its official homepage is http://www.omnigroup.com/products/omnioutliner/. OmniOutliner specifies data output in the OmniOutline format, adhering to a defined format specification for its data.",
                "CQ": [
                    {
                        "axiom": "OmniOutliner subClassOf software",
                        "CQ": [
                            "Is OmniOutliner categorized under the broader class of software?",
                            "Which subclasses does software include, such as OmniOutliner?",
                            "To which higher-level categories does OmniOutliner conceptually belong?"
                        ]
                    },
                    {
                        "axiom": "OmniOutliner propertyRestrictions [output of some (software development process and [has participant hasValue Omni])]",
                        "CQ": [
                            "Does every property restriction for OmniOutliner require its output to result from at least one software development process involving Omni?",
                            "Is it necessary for any output defined by an OmniOutliner property restriction to be produced via a software development process that has a participant Omni?",
                            "Can an OmniOutliner property restriction specify outputs unrelated to software development processes where Omni is a participant?"
                        ]
                    },
                    {
                        "axiom": "OmniOutliner propertyRestrictions [is executed in some document outlining]",
                        "CQ": [
                            "Is it required for every OmniOutliner propertyRestrictions to be executed in at least one document outlining?",
                            "Can an instance of OmniOutliner propertyRestrictions exist without being linked to any document outlining through execution?",
                            "Does the ontology specify that execution of OmniOutliner propertyRestrictions must occur within the context of a document outlining?"
                        ]
                    },
                    {
                        "axiom": "OmniOutliner propertyRestrictions [output of some (software publishing process and [has participant hasValue Omni])]",
                        "CQ": [
                            "Does the OmniOutliner propertyRestrictions class always output the result of at least one software publishing process that has Omni as a participant?",
                            "Is it required that OmniOutliner propertyRestrictions outputs something that is both a software publishing process and includes Omni as a participant?",
                            "Are there any outputs from OmniOutliner propertyRestrictions that are not related to a software publishing process involving Omni?"
                        ]
                    },
                    {
                        "axiom": "OmniOutliner propertyRestrictions [has website homepage hasValue http://www.omnigroup.com/products/omnioutliner/]",
                        "CQ": [
                            "Is every instance identified by the OmniOutliner property required to have the website homepage http://www.omnigroup.com/products/omnioutliner/?",
                            "Is it necessary for OmniOutliner to always be associated with the specific website homepage http://www.omnigroup.com/products/omnioutliner/?",
                            "Can any instance of OmniOutliner have a website homepage different from http://www.omnigroup.com/products/omnioutliner/?"
                        ]
                    },
                    {
                        "axiom": "OmniOutliner propertyRestrictions [has license some Proprietary commercial software license]",
                        "CQ": [
                            "Is it necessary for OmniOutliner to have at least one license that is a Proprietary commercial software license?",
                            "Does OmniOutliner always possess a license that belongs to the category of Proprietary commercial software licenses?",
                            "Can OmniOutliner exist without having any association with a Proprietary commercial software license?"
                        ]
                    },
                    {
                        "axiom": "OmniOutliner propertyRestrictions [has specified data output some (data and [has format specification some OmniOutline format])]",
                        "CQ": [
                            "Is it required for every OmniOutliner property restriction to specify data output in at least one data entity that has a format specification of OmniOutline format?",
                            "Does the existence of an OmniOutliner property restriction imply that there must be some data output conforming to the OmniOutline format?",
                            "Can an OmniOutliner property restriction exist without referencing any data output specified with the OmniOutline format?"
                        ]
                    }
                ]
            },
            "Ecology": {
                "axiom": {
                    "subClassOf": [
                        "Biology"
                    ]
                },
                "description": "Ecology is a subclass of Biology, focused on the study of ecological and environmental sciences. It is especially concerned with the application of information technology in these fields, as emphasized in ecoinformatics. This class covers both foundational ecological knowledge and the technological methods used to analyze and manage ecological data.",
                "CQ": [
                    {
                        "axiom": "Ecology subClassOf Biology",
                        "CQ": [
                            "Is Ecology classified under the broader discipline of Biology?",
                            "Which specialized fields fall under Biology, specifically referencing Ecology?",
                            "To which overarching domains does Ecology pertain within the life sciences hierarchy?"
                        ]
                    }
                ]
            },
            "Shell": {
                "axiom": {
                    "subClassOf": [
                        "programming language"
                    ]
                },
                "description": "Shell is defined as a subclass of programming language, indicating that every shell is considered a type of programming language within the ontology. No additional constraints or distinguishing characteristics are provided in the axioms. Thus, any individual classified as a shell must also be recognized as a programming language.",
                "CQ": [
                    {
                        "axiom": "Shell subClassOf programming language",
                        "CQ": [
                            "Is Shell classified as a type of programming language?",
                            "Which specific constructs fall under the category of programming language, including Shell?",
                            "What broader classes does Shell belong to within the ontology?"
                        ]
                    }
                ]
            },
            "Phylogenetic tree analysis (shape)": {
                "axiom": {
                    "subClassOf": [
                        "Phylogenetic tree analysis"
                    ]
                },
                "description": "Phylogenetic tree analysis (shape) is a subclass of Phylogenetic tree analysis, focused on analyzing the shape or topology of a phylogenetic tree. This class encompasses methods and approaches that examine structural features of the tree, such as its branching patterns, symmetry, or imbalance, to infer evolutionary relationships and patterns.",
                "CQ": [
                    {
                        "axiom": "Phylogenetic tree analysis (shape) subClassOf Phylogenetic tree analysis",
                        "CQ": [
                            "Does Phylogenetic tree analysis (shape) fall under the general category of Phylogenetic tree analysis?",
                            "What specific analyses are classified as subtypes of Phylogenetic tree analysis, such as Phylogenetic tree analysis (shape)?",
                            "Which larger conceptual classes include Phylogenetic tree analysis (shape)?"
                        ]
                    }
                ]
            },
            "Restriction map": {
                "axiom": {
                    "subClassOf": [
                        "Sequence map",
                        "Sequence image"
                    ]
                },
                "description": "Restriction map is defined as a subclass of both Sequence map and Sequence image, meaning it inherits characteristics of representing ordered features on a nucleic acid sequence and being a visual representation. A restriction map specifically depicts the locations of restriction enzyme cleavage sites (restriction sites) along a nucleic acid sequence, providing a visual overview of where enzymes cut within the sequence.",
                "CQ": [
                    {
                        "axiom": "Restriction map subClassOf Sequence map",
                        "CQ": [
                            "Does Restriction map fall under the classification of Sequence map?",
                            "Which map types are more specific than Sequence map, such as Restriction map?",
                            "What broader mapping categories include Restriction map as a member?"
                        ]
                    },
                    {
                        "axiom": "Restriction map subClassOf Sequence image",
                        "CQ": [
                            "Is Restriction map categorized under Sequence image?",
                            "Which specific subclasses are encompassed by Sequence image such as Restriction map?",
                            "What broader categories does Restriction map fall under?"
                        ]
                    }
                ]
            },
            "Gene ID (SGD)": {
                "axiom": {
                    "subClassOf": [
                        "Gene ID",
                        "SGD ID"
                    ]
                },
                "description": "Gene ID (SGD) is defined as a subclass of both Gene ID and SGD ID. It represents identifiers that uniquely reference gene entries within the Saccharomyces Genome Database (SGD). Members of this class serve as unique identifiers for genes as recorded in the SGD database, ensuring precise mapping and retrieval of genetic information associated with Saccharomyces cerevisiae.",
                "CQ": [
                    {
                        "axiom": "Gene ID (SGD) subClassOf Gene ID",
                        "CQ": [
                            "Is Gene ID (SGD) classified under the broader category of Gene ID?",
                            "What specific types are encompassed by the Gene ID class, including Gene ID (SGD)?",
                            "Which general identifier categories does Gene ID (SGD) fall under?"
                        ]
                    },
                    {
                        "axiom": "Gene ID (SGD) subClassOf SGD ID",
                        "CQ": [
                            "Is every Gene ID (SGD) instance inherently classified as an SGD ID?",
                            "Which identifiers are defined as specific types under the broader SGD ID class?",
                            "What are the more general categories that encompass Gene ID (SGD)?"
                        ]
                    }
                ]
            },
            "data processing task": {
                "axiom": {
                    "subClassOf": [
                        "information processing"
                    ]
                },
                "description": "data processing task is a subclass of information processing. It is defined as an information processing objective that specifies the goal for a data processing algorithm execution process, which, when applied to a dataset, is intended to produce a new dataset as output. This class formalizes the role of tasks that guide algorithm execution in transforming input datasets into resulting datasets.",
                "CQ": [
                    {
                        "axiom": "data processing task subClassOf information processing",
                        "CQ": [
                            "Is every data processing task classified under the broader group of information processing?",
                            "Which tasks are recognized as specific kinds of information processing, such as data processing tasks?",
                            "To what higher-level categories does data processing task correspond within the information processing domain?"
                        ]
                    }
                ]
            },
            "Structure-based sequence alignment": {
                "axiom": {
                    "subClassOf": [
                        "Sequence alignment generation"
                    ]
                },
                "description": "Structure-based sequence alignment is a subclass of sequence alignment generation. This class refers to the process of aligning molecular sequences using both sequence and structural information, integrating structural data to improve alignment accuracy compared to purely sequence-based methods.",
                "CQ": [
                    {
                        "axiom": "Structure-based sequence alignment subClassOf Sequence alignment generation",
                        "CQ": [
                            "Is structure-based sequence alignment categorized under sequence alignment generation?",
                            "What specific types of sequence alignment generation include structure-based sequence alignment?",
                            "Which broader alignment processes encompass structure-based sequence alignment?"
                        ]
                    }
                ]
            },
            "Organism name": {
                "axiom": {
                    "subClassOf": [
                        "Name",
                        "Organism identifier"
                    ]
                },
                "description": "Organism name is defined as a subclass of both Name and Organism identifier. It represents the name assigned to an organism or a group of organisms, serving as an identifier within biological contexts. This class formalizes organism names as entities that are both names and identifiers specific to organisms.",
                "CQ": [
                    {
                        "axiom": "Organism name subClassOf Name",
                        "CQ": [
                            "Is Organism name categorized as a subtype of Name?",
                            "What broader classes does Organism name belong to within the naming hierarchy?",
                            "Which specific kinds of Name include Organism name as a subclass?"
                        ]
                    },
                    {
                        "axiom": "Organism name subClassOf Organism identifier",
                        "CQ": [
                            "Is Organism identifier a generalization of Organism name?",
                            "What identifiers encompass Organism name as a more specific instance?",
                            "Which classes are broader than Organism name, including Organism identifier?"
                        ]
                    }
                ]
            },
            "UMLS": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "UMLS is defined as a subclass of Obsolete concept (EDAM), indicating that it represents a retired or superseded entity within the ontology. The class refers specifically to a term originating from the UMLS vocabulary, providing a clear provenance but signaling that the concept is no longer in active use within the EDAM framework.",
                "CQ": [
                    {
                        "axiom": "UMLS subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is UMLS categorized under the broader Obsolete concept (EDAM)?",
                            "Which concepts are subsumed by Obsolete concept (EDAM), and does this include UMLS?",
                            "What are the direct parent categories of UMLS within this ontology?"
                        ]
                    }
                ]
            },
            "Transcriptome assembly (de novo)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Transcriptome assembly (de novo) is a subclass of Obsolete concept (EDAM). It is defined as the process of inferring a transcriptome sequence without the aid of a reference genome, by comparing short sequence reads directly to each other. This approach does not rely on any pre-existing genomic reference, and the class is considered obsolete in the referenced ontology.",
                "CQ": [
                    {
                        "axiom": "Transcriptome assembly (de novo) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is transcriptome assembly (de novo) classified under the category of Obsolete concept (EDAM)?",
                            "What concepts are specified as subclasses of Obsolete concept (EDAM), including transcriptome assembly (de novo)?",
                            "Which higher-level categories does transcriptome assembly (de novo) fall under in relation to Obsolete concept (EDAM)?"
                        ]
                    }
                ]
            },
            "Structure formatting": {
                "axiom": {
                    "subClassOf": [
                        "Formatting"
                    ]
                },
                "description": "Structure formatting is defined as a subclass of Formatting. It involves the process of reformatting, specifically applied to files or reports containing tertiary structure data. This class represents formatting operations aimed at reorganizing or restructuring information related to tertiary structures.",
                "CQ": [
                    {
                        "axiom": "Structure formatting subClassOf Formatting",
                        "CQ": [
                            "Is Structure formatting classified as a type of Formatting?",
                            "Which formatting categories encompass Structure formatting as a more specific subclass?",
                            "What are the distinct subclasses that fall under Formatting, including Structure formatting?"
                        ]
                    }
                ]
            },
            "phylip sequence format": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "phylip sequence format is a subclass of Obsolete concept (EDAM), indicating that it is no longer recommended for active use. This class represents the Phylip interleaved sequence format, a file format for representing sequence data. Its use is deprecated in favor of more current standards.",
                "CQ": [
                    {
                        "axiom": "phylip sequence format subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is phylip sequence format categorized under the broader concept of Obsolete concept (EDAM)?",
                            "Which sequence formats are considered more specific instances of Obsolete concept (EDAM), such as phylip sequence format?",
                            "To which broader concepts does phylip sequence format conceptually pertain?"
                        ]
                    }
                ]
            },
            "Helical wheel": {
                "axiom": {
                    "subClassOf": [
                        "Protein secondary structure image"
                    ]
                },
                "description": "Helical wheel is defined as a subclass of Protein secondary structure image. It represents an image depicting a peptide sequence as viewed along the axis of a helix, specifically designed to highlight amphipathicity and other structural properties. This class is used to capture visual representations relevant to the analysis of helical structures in proteins.",
                "CQ": [
                    {
                        "axiom": "Helical wheel subClassOf Protein secondary structure image",
                        "CQ": [
                            "Is Helical wheel recognized as a type of Protein secondary structure image?",
                            "Which specific images fall under the category of Protein secondary structure image, including Helical wheel?",
                            "To which broader image classifications does Helical wheel belong?"
                        ]
                    }
                ]
            },
            "Gene ID (VBASE2)": {
                "axiom": {
                    "subClassOf": [
                        "Gene ID"
                    ]
                },
                "description": "Gene ID (VBASE2) is defined as a subclass of Gene ID and represents an identifier assigned to a gene in the VBASE2 database. This class is intended to uniquely specify gene records within VBASE2, aligning with its formal role as a specialization of general gene identifiers.",
                "CQ": [
                    {
                        "axiom": "Gene ID (VBASE2) subClassOf Gene ID",
                        "CQ": [
                            "Does VBASE2 fall under the broader classification of Gene ID?",
                            "What more specific Gene ID types encompass VBASE2?",
                            "Which general identifiers include VBASE2 as a specialized Gene ID?"
                        ]
                    }
                ]
            },
            "Sequence alignment (pair)": {
                "axiom": {
                    "subClassOf": [
                        "Sequence alignment"
                    ]
                },
                "description": "Sequence alignment (pair) is defined as a subclass of Sequence alignment, specifically referring to the alignment of exactly two molecular sequences. This class formalizes pairwise comparison, distinguishing it from alignments involving multiple sequences.",
                "CQ": [
                    {
                        "axiom": "Sequence alignment (pair) subClassOf Sequence alignment",
                        "CQ": [
                            "Is Sequence alignment (pair) a specific type under the general category of Sequence alignment?",
                            "Which types are classified as Sequence alignment, including Sequence alignment (pair)?",
                            "What broader categories encompass Sequence alignment (pair)?"
                        ]
                    }
                ]
            },
            "MUSCLE 3.8.31": {
                "axiom": {
                    "subClassOf": [
                        "Drive5 MUSCLE"
                    ],
                    "propertyRestrictions": [
                        "[has download location hasValue ns5:downloads.htm]",
                        "[has interface some command-line interface]",
                        "[has documentation hasValue ns5:muscle_userguide3.8.html]",
                        "[has version hasValue MUSCLE version 3.8.31]",
                        "[has documentation hasValue ns6:gkh340]"
                    ]
                },
                "description": "MUSCLE 3.8.31 is a subclass of Drive5 MUSCLE and represents a specific release of the MUSCLE software (version 3.8.31). Instances of this class are characterized by having a defined download location (ns5:downloads.htm), access to at least one command-line interface, and are associated with documentation resources (ns5:muscle_userguide3.8.html and ns6:gkh340). This formalization ensures that any individual classified as MUSCLE 3.8.31 is identifiable by these version-specific properties and documentation links.",
                "CQ": [
                    {
                        "axiom": "MUSCLE 3.8.31 subClassOf Drive5 MUSCLE",
                        "CQ": [
                            "Is MUSCLE 3.8.31 categorized under Drive5 MUSCLE?",
                            "Which specific versions are classified as subclasses of Drive5 MUSCLE?",
                            "What higher-level classes encompass MUSCLE 3.8.31?"
                        ]
                    },
                    {
                        "axiom": "MUSCLE 3.8.31 propertyRestrictions [has download location hasValue ns5:downloads.htm]",
                        "CQ": [
                            "Does MUSCLE 3.8.31 have the download location property value set specifically to ns5:downloads.htm?",
                            "Is it required that the download location for MUSCLE 3.8.31 must be ns5:downloads.htm?",
                            "Can MUSCLE 3.8.31 be associated with any download location other than ns5:downloads.htm?"
                        ]
                    },
                    {
                        "axiom": "MUSCLE 3.8.31 propertyRestrictions [has interface some command-line interface]",
                        "CQ": [
                            "Is it required that MUSCLE 3.8.31 has an interface with at least one command-line interface?",
                            "Can MUSCLE 3.8.31 possess any interface that is not a command-line interface?",
                            "Does MUSCLE 3.8.31 necessarily support a command-line interface among its interfaces?"
                        ]
                    },
                    {
                        "axiom": "MUSCLE 3.8.31 propertyRestrictions [has documentation hasValue ns5:muscle_userguide3.8.html]",
                        "CQ": [
                            "Must every instance of MUSCLE 3.8.31 have the 'has documentation' property with the value 'ns5:muscle_userguide3.8.html'?",
                            "Is it required that MUSCLE 3.8.31 is only documented by 'ns5:muscle_userguide3.8.html'?",
                            "Does the ontology restrict MUSCLE 3.8.31 to have 'has documentation' pointing exclusively to 'ns5:muscle_userguide3.8.html'?"
                        ]
                    },
                    {
                        "axiom": "MUSCLE 3.8.31 propertyRestrictions [has version hasValue MUSCLE version 3.8.31]",
                        "CQ": [
                            "Does MUSCLE 3.8.31 have the property 'has version' with the specific value 'MUSCLE version 3.8.31'?",
                            "Is it required that MUSCLE 3.8.31 is associated with the exact version 'MUSCLE version 3.8.31' through the 'has version' property?",
                            "Can MUSCLE 3.8.31 possess a 'has version' property value other than 'MUSCLE version 3.8.31'?"
                        ]
                    },
                    {
                        "axiom": "MUSCLE 3.8.31 propertyRestrictions [has documentation hasValue ns6:gkh340]",
                        "CQ": [
                            "Is MUSCLE 3.8.31 documented by the value ns6:gkh340 through the property 'has documentation'?",
                            "Does MUSCLE 3.8.31 necessarily have the property 'has documentation' with the specific value ns6:gkh340?",
                            "Can any value other than ns6:gkh340 fulfill the 'has documentation' property for MUSCLE 3.8.31?"
                        ]
                    }
                ]
            },
            "Taverna workflow format": {
                "axiom": {
                    "subClassOf": [
                        "XML",
                        "Workflow format"
                    ]
                },
                "description": "Taverna workflow format is formally defined as a subclass of both XML and Workflow format. This means it is a type of workflow format that is specifically encoded in XML. The class describes formats used to represent Taverna workflows, aligning with the definition: \"Format of Taverna workflows.\"",
                "CQ": [
                    {
                        "axiom": "Taverna workflow format subClassOf XML",
                        "CQ": [
                            "Is Taverna workflow format an instance of the broader category XML?",
                            "Which workflow formats are more specific than XML, for example, Taverna workflow format?",
                            "To which overarching data format categories does Taverna workflow format belong?"
                        ]
                    },
                    {
                        "axiom": "Taverna workflow format subClassOf Workflow format",
                        "CQ": [
                            "Is Taverna workflow format classified under the broader category of Workflow format?",
                            "What specific workflow formats, such as Taverna workflow format, are included within Workflow format?",
                            "Which higher-level categories does Taverna workflow format fall under?"
                        ]
                    }
                ]
            },
            "Medline Display Format": {
                "axiom": {
                    "subClassOf": [
                        "Textual format",
                        "Bibliographic reference format"
                    ]
                },
                "description": "Medline Display Format is a type of textual and bibliographic reference format specifically designed for presenting abstracts and citation information from the Medline database. This format ensures that bibliographic reference information, including essential citation details, is systematically included for scientific articles indexed in Medline.",
                "CQ": [
                    {
                        "axiom": "Medline Display Format subClassOf Textual format",
                        "CQ": [
                            "Is Medline Display Format categorized as a type of Textual format?",
                            "Which specific formats fall under the category of Textual format, including Medline Display Format?",
                            "What broader format classes does Medline Display Format belong to?"
                        ]
                    },
                    {
                        "axiom": "Medline Display Format subClassOf Bibliographic reference format",
                        "CQ": [
                            "Does Medline Display Format fall under the broader classification of Bibliographic reference format?",
                            "Which specific formats are categorized as Bibliographic reference format, including Medline Display Format?",
                            "What are the overarching categories that Medline Display Format is a specialized instance of?"
                        ]
                    }
                ]
            },
            "GenomeGraphs": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[has specified data input some (Gene expression dataset and [has format specification some data format specification])]",
                        "[is encoded in some R language]",
                        "[has specified data output some (Graph plot and [has format specification some image format])]"
                    ]
                },
                "description": "GenomeGraphs is defined as a subclass of software, specifically designed to handle gene expression datasets with explicit format specifications. It requires specified data inputs that must include a gene expression dataset accompanied by a data format specification. The software is encoded in the R programming language. Its data output consists of graph plots with format specifications that conform to an image format. These axioms formalize GenomeGraphs as an R-based software tool aimed at generating graphical representations of gene expression data, ensuring both input and output data comply with defined formats.",
                "CQ": [
                    {
                        "axiom": "GenomeGraphs subClassOf software",
                        "CQ": [
                            "Is GenomeGraphs classified as a type of software?",
                            "Which software subclasses encompass GenomeGraphs?",
                            "What broader categories does GenomeGraphs fall under within the software domain?"
                        ]
                    },
                    {
                        "axiom": "GenomeGraphs propertyRestrictions [has specified data input some (Gene expression dataset and [has format specification some data format specification])]",
                        "CQ": [
                            "Does a GenomeGraph necessarily require at least one specified data input that is a Gene expression dataset conforming to a data format specification?",
                            "Is it possible for a GenomeGraph to exist without having an input that is both a Gene expression dataset and meets a data format specification?",
                            "Are all specified data inputs for GenomeGraphs limited to those that are Gene expression datasets with some data format specification?"
                        ]
                    },
                    {
                        "axiom": "GenomeGraphs propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is it required that every GenomeGraph is encoded in at least one instance of R language?",
                            "Can a GenomeGraph exist without being encoded in any R language?",
                            "Does the encoding of a GenomeGraph necessarily involve an R language?"
                        ]
                    },
                    {
                        "axiom": "GenomeGraphs propertyRestrictions [has specified data output some (Graph plot and [has format specification some image format])]",
                        "CQ": [
                            "Is every data output specified by GenomeGraphs required to be a graph plot that also has at least one format specification in an image format?",
                            "Can GenomeGraphs generate a data output if it is not a graph plot or if it lacks a format specification defined as an image format?",
                            "Does the specification for GenomeGraphs ensure that all outputs with the designated property will include both a graph plot and an associated image format?"
                        ]
                    }
                ]
            },
            "Phylogenetic tree reconstruction": {
                "axiom": {
                    "subClassOf": [
                        "Phylogenetic tree generation"
                    ],
                    "propertyRestrictions": [
                        "[has topic some Phylogeny]"
                    ]
                },
                "description": "Phylogenetic tree reconstruction is a subclass of phylogenetic tree generation and is specifically concerned with topics pertaining to phylogeny. It involves reconstructing the inner node labels of a phylogenetic tree based on information from its leaves, distinguishing this process from merely analyzing an existing tree or constructing an entirely new tree. This class encapsulates methods and concepts relative to inferring ancestral relationships and internal features from observed leaf data in evolutionary trees.",
                "CQ": [
                    {
                        "axiom": "Phylogenetic tree reconstruction subClassOf Phylogenetic tree generation",
                        "CQ": [
                            "Does phylogenetic tree reconstruction fall under the category of phylogenetic tree generation?",
                            "Which specific processes are classified as types of phylogenetic tree generation, including phylogenetic tree reconstruction?",
                            "What broader classification does phylogenetic tree reconstruction conceptually fit within?"
                        ]
                    },
                    {
                        "axiom": "Phylogenetic tree reconstruction propertyRestrictions [has topic some Phylogeny]",
                        "CQ": [
                            "Is it required that phylogenetic tree reconstruction addresses at least one topic related to phylogeny?",
                            "Can a phylogenetic tree reconstruction process have the 'has topic' property only if the topic is phylogeny?",
                            "Must every instance of phylogenetic tree reconstruction involve a topic that is classified as phylogeny?"
                        ]
                    }
                ]
            },
            "Gramene identifier": {
                "axiom": {
                    "subClassOf": [
                        "Sequence accession (protein)"
                    ]
                },
                "description": "Gramene identifier is defined as a subclass of Sequence accession (protein), representing an identifier that uniquely denotes an entry within the Gramene database. This class formalizes Gramene database entries as specific types of protein sequence accessions, ensuring any individual in this class is both a protein sequence accession and a valid Gramene database identifier.",
                "CQ": [
                    {
                        "axiom": "Gramene identifier subClassOf Sequence accession (protein)",
                        "CQ": [
                            "Does Gramene identifier represent a specialized form of Sequence accession (protein)?",
                            "Which identifiers are categorized under Sequence accession (protein), including Gramene identifier?",
                            "What higher-level classes encompass Gramene identifier within the context of protein sequence accessions?"
                        ]
                    }
                ]
            },
            "Sequence submission": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Sequence submission is defined as a subclass of Obsolete concept (EDAM). It refers to the process of submitting a molecular sequence to a database. This categorization indicates that sequence submission is now considered an outdated or deprecated concept within the EDAM ontology.",
                "CQ": [
                    {
                        "axiom": "Sequence submission subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Sequence submission classified under the broader category of Obsolete concept (EDAM)?",
                            "What concepts are included as subclasses within Obsolete concept (EDAM), such as Sequence submission?",
                            "Which higher-level categories encompass Sequence submission in the ontology?"
                        ]
                    }
                ]
            },
            "limmaGUI": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[has specified data output some (Text data set and [has format specification only TIFF])]",
                        "[implements some Linear modelling]",
                        "[is published by hasValue Bioconductor]",
                        "[has specified data input some Text data set]",
                        "[is encoded in some R language]"
                    ]
                },
                "description": "limmaGUI is a subclass of software specifically designed for input and output of text data sets, where output formats are limited to those having only the TIFF specification. It implements linear modelling techniques, is encoded in the R language, and has been published by Bioconductor.",
                "CQ": [
                    {
                        "axiom": "limmaGUI subClassOf software",
                        "CQ": [
                            "Does limmaGUI fall under the classification of software?",
                            "What types are included as subclasses beneath software, specifically limmaGUI?",
                            "Which broader classes encompass limmaGUI as a member in the ontology?"
                        ]
                    },
                    {
                        "axiom": "limmaGUI propertyRestrictions [has specified data output some (Text data set and [has format specification only TIFF])]",
                        "CQ": [
                            "Is it required that limmaGUI produces at least one data output that is both a text data set and provided only in TIFF format?",
                            "Can limmaGUI have specified data output in any format other than TIFF for text data sets?",
                            "Does every specified data output of limmaGUI that is a text data set conform exclusively to the TIFF format specification?"
                        ]
                    },
                    {
                        "axiom": "limmaGUI propertyRestrictions [implements some Linear modelling]",
                        "CQ": [
                            "Is it required that limmaGUI implements at least one instance of Linear modelling?",
                            "Does every limmaGUI necessarily implement Linear modelling in some form?",
                            "Can limmaGUI exist without implementing any Linear modelling?"
                        ]
                    },
                    {
                        "axiom": "limmaGUI propertyRestrictions [is published by hasValue Bioconductor]",
                        "CQ": [
                            "Is every instance of limmaGUI necessarily published by Bioconductor?",
                            "Can a limmaGUI have any publisher other than Bioconductor?",
                            "Is it required for limmaGUI to have the value Bioconductor for the property 'is published by'?"
                        ]
                    },
                    {
                        "axiom": "limmaGUI propertyRestrictions [has specified data input some Text data set]",
                        "CQ": [
                            "Is it required that limmaGUI must have at least one specified data input that is a Text data set?",
                            "Does limmaGUI necessarily involve the has specified data input property with a Text data set as its value?",
                            "Can limmaGUI exist without associating any specified data input of type Text data set?"
                        ]
                    },
                    {
                        "axiom": "limmaGUI propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is every instance of limmaGUI necessarily encoded in at least one R language implementation?",
                            "Can limmaGUI be encoded in any programming language other than R language?",
                            "Must limmaGUI have an encoding relationship specifically with the R language?"
                        ]
                    }
                ]
            },
            "Backbone torsion angle calculation": {
                "axiom": {
                    "subClassOf": [
                        "Torsion angle calculation"
                    ]
                },
                "description": "Backbone torsion angle calculation is a subclass of torsion angle calculation. This class represents the process of computing all backbone torsion angles for each residue within a protein structure, enabling detailed analysis of the protein’s conformational properties.",
                "CQ": [
                    {
                        "axiom": "Backbone torsion angle calculation subClassOf Torsion angle calculation",
                        "CQ": [
                            "Is backbone torsion angle calculation classified under torsion angle calculation?",
                            "What categories fall under torsion angle calculation, and does that list include backbone torsion angle calculation?",
                            "Which broader calculation types encompass backbone torsion angle calculation?"
                        ]
                    }
                ]
            },
            "Codon usage table ID": {
                "axiom": {
                    "subClassOf": [
                        "Identifier (typed)"
                    ],
                    "propertyRestrictions": [
                        "[is identifier of some Genetic code]",
                        "[is identifier of some Codon usage table]"
                    ]
                },
                "description": "Codon usage table ID is a subclass of Identifier (typed), representing an identifier specifically used for codon usage tables and genetic codes. Each instance of this class is characterized by being an identifier of at least one genetic code or codon usage table. This class formalizes identifiers used to denote codon usage tables, such as those referring to specific genetic codes.",
                "CQ": [
                    {
                        "axiom": "Codon usage table ID subClassOf Identifier (typed)",
                        "CQ": [
                            "Does Codon usage table ID qualify as a kind of Identifier (typed)?",
                            "Which identifiers encompass Codon usage table ID as a specific form?",
                            "Within the classification of Identifier (typed), what subclasses exist, including Codon usage table ID?"
                        ]
                    },
                    {
                        "axiom": "Codon usage table ID propertyRestrictions [is identifier of some Genetic code]",
                        "CQ": [
                            "Is every Codon usage table ID required to serve as an identifier for at least one Genetic code?",
                            "Can a Codon usage table ID exist without being associated as an identifier for any Genetic code?",
                            "Does the ontology entail that there must be a Genetic code for which a given Codon usage table ID is the identifier?"
                        ]
                    },
                    {
                        "axiom": "Codon usage table ID propertyRestrictions [is identifier of some Codon usage table]",
                        "CQ": [
                            "Does every Codon usage table ID necessarily refer to at least one Codon usage table as its identifier?",
                            "Is it required that each instance of Codon usage table ID serves as an identifier for a Codon usage table?",
                            "Can a Codon usage table exist without being identified by a Codon usage table ID?"
                        ]
                    }
                ]
            },
            "Nucleic acid sequences": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Nucleic acid sequences is defined as a subclass of Obsolete concept (EDAM). This class represents topics related to nucleotide sequences, encompassing associated concepts such as sequence sites, alignments, motifs, and profiles. Its classification as obsolete indicates that it is no longer actively maintained or recommended for current use within the ontology.",
                "CQ": [
                    {
                        "axiom": "Nucleic acid sequences subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Are nucleic acid sequences classified as a type of obsolete concept within EDAM?",
                            "Which concepts are categorized under Obsolete concept (EDAM), including nucleic acid sequences?",
                            "What broader concepts encompass nucleic acid sequences in the EDAM ontology?"
                        ]
                    }
                ]
            },
            "probability distribution estimation algorithm": {
                "axiom": {
                    "subClassOf": [
                        "single generalization algorithm"
                    ]
                },
                "description": "probability distribution estimation algorithm is defined as a subclass of single generalization algorithm. This class comprises algorithms that infer or estimate a probability distribution from data, rather than focusing on mapping individual inputs to outputs. Members of this class generalize from data in a way that results in a probabilistic model, which can then be used for tasks such as sampling, density estimation, or uncertainty quantification.",
                "CQ": [
                    {
                        "axiom": "probability distribution estimation algorithm subClassOf single generalization algorithm",
                        "CQ": [
                            "Is every probability distribution estimation algorithm categorized as a type of single generalization algorithm?",
                            "Which algorithms are classified under single generalization algorithm, such as probability distribution estimation algorithm?",
                            "To what higher-level categories does probability distribution estimation algorithm belong?"
                        ]
                    }
                ]
            },
            "Pathway or network identifier": {
                "axiom": {
                    "subClassOf": [
                        "Identifier (typed)"
                    ],
                    "propertyRestrictions": [
                        "[is identifier of some Pathway or network]"
                    ]
                },
                "description": "Pathway or network identifier is a subclass of Identifier (typed) and is characterized by the property that it serves as an identifier for some Pathway or network. This class represents identifiers assigned to entries within databases cataloging biological pathways or networks. Any instance of this class functions specifically to uniquely reference a pathway or network entity.",
                "CQ": [
                    {
                        "axiom": "Pathway or network identifier subClassOf Identifier (typed)",
                        "CQ": [
                            "Is every Pathway or network identifier categorized under Identifier (typed)?",
                            "What identifiers exist as more specific types beneath Identifier (typed), including Pathway or network identifier?",
                            "To which higher-level identifier categories does Pathway or network identifier belong?"
                        ]
                    },
                    {
                        "axiom": "Pathway or network identifier propertyRestrictions [is identifier of some Pathway or network]",
                        "CQ": [
                            "Does every instance of 'Pathway or network identifier' necessarily identify at least one 'Pathway or network'?",
                            "Can a 'Pathway or network identifier' exist without being associated with any 'Pathway or network'?",
                            "Is it mandatory for an entity to be classified as a 'Pathway or network identifier' only when it is the identifier for some 'Pathway or network'?"
                        ]
                    }
                ]
            },
            "Ontology concept reference": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Ontology concept reference is defined as a subclass of Obsolete concept (EDAM), indicating that it is considered an outdated or superseded concept within the EDAM ontology framework. It refers specifically to a reference for a concept from an ontology, serving as a means to denote or cite ontology concepts.",
                "CQ": [
                    {
                        "axiom": "Ontology concept reference subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Ontology concept reference categorized under Obsolete concept (EDAM)?",
                            "Which concepts are classified as subclasses of Obsolete concept (EDAM)?",
                            "To which higher-level concepts does Ontology concept reference belong?"
                        ]
                    }
                ]
            },
            "Protein domain classification format": {
                "axiom": {
                    "subClassOf": [
                        "Format (typed)"
                    ],
                    "propertyRestrictions": [
                        "[is format of some Protein family report]"
                    ]
                },
                "description": "Protein domain classification format is a subclass of Format (typed) and represents a data format specifically used for reporting on the classification of sequences and/or structures of protein structural domains. By axiom, any instance of this class must serve as the format for at least one Protein family report. This ensures that such formats are formally recognized as integral to the documentation and communication of protein domain classification data.",
                "CQ": [
                    {
                        "axiom": "Protein domain classification format subClassOf Format (typed)",
                        "CQ": [
                            "Is Protein domain classification format categorized as a more specific type of Format?",
                            "Which types fall under the broader classification of Format, including Protein domain classification format?",
                            "What higher-level categories does Protein domain classification format belong to?"
                        ]
                    },
                    {
                        "axiom": "Protein domain classification format propertyRestrictions [is format of some Protein family report]",
                        "CQ": [
                            "Must every protein domain classification format be associated with at least one protein family report through the 'is format of' property?",
                            "Can a protein domain classification format exist without being the format for any protein family report?",
                            "Is it required that a protein domain classification format serves as the format for some report that describes a protein family?"
                        ]
                    }
                ]
            },
            "Small molecule data": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Small molecule data is defined as a subclass of Obsolete concept (EDAM). It represents data concerning one or more small molecules and is considered a broad data type, typically used as a placeholder for more specific types. This class is deprecated in favor of more precise classifications.",
                "CQ": [
                    {
                        "axiom": "Small molecule data subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Obsolete concept (EDAM) a direct superclass of Small molecule data?",
                            "What broader categories include Small molecule data as a specific instance?",
                            "Which obsolete concepts within EDAM have Small molecule data as a subclass?"
                        ]
                    }
                ]
            },
            "Gene ID (GeneDB Trypanosoma brucei)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Gene ID (GeneDB Trypanosoma brucei) is defined as a subclass of Obsolete concept (EDAM), indicating it is no longer in active use within the ontology. This class refers to gene identifiers that originate from the GeneDB database specifically for Trypanosoma brucei.",
                "CQ": [
                    {
                        "axiom": "Gene ID (GeneDB Trypanosoma brucei) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Gene ID (GeneDB Trypanosoma brucei) categorized under Obsolete concept (EDAM)?",
                            "Which concepts are designated as subclasses of Obsolete concept (EDAM), such as Gene ID (GeneDB Trypanosoma brucei)?",
                            "What are the direct and indirect superclasses of Gene ID (GeneDB Trypanosoma brucei)?"
                        ]
                    }
                ]
            },
            "Chemical formula": {
                "axiom": {
                    "subClassOf": [
                        "Molecular property (general)"
                    ]
                },
                "description": "Chemical formula is a subclass of Molecular property (general) and is defined as a specification of a chemical structure. This class captures the properties related to the way a chemical structure is formally represented, linking it to the broader category of molecular properties.",
                "CQ": [
                    {
                        "axiom": "Chemical formula subClassOf Molecular property (general)",
                        "CQ": [
                            "Is a chemical formula classified under the broader category of molecular property?",
                            "Which molecular properties have chemical formula as a more specific type?",
                            "To which higher-level molecular property categories does chemical formula belong?"
                        ]
                    }
                ]
            },
            "vbmp": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[is executed in some cross validation]",
                        "[has specified data input some [has format specification only R data frame]]",
                        "[has specified data output some (Graph plot and [has format specification only R data frame])]",
                        "[is published by hasValue Bioconductor]",
                        "[is encoded in some R language]",
                        "[implements some Multinomial probit regression with Gaussian Process priors]"
                    ]
                },
                "description": "vbmp is a subclass of software designed specifically for execution within cross validation processes. It is characterized by accepting data input strictly in the format of R data frames and producing outputs that include both graph plots and R data frames. The software is published by Bioconductor, is implemented in the R programming language, and employs Multinomial probit regression with Gaussian Process priors as a core method. These axioms ensure that vbmp is tightly integrated with R-centric workflows and statistical modeling techniques, particularly within the Bioconductor ecosystem.",
                "CQ": [
                    {
                        "axiom": "vbmp subClassOf software",
                        "CQ": [
                            "Is vbmp categorized as a type of software?",
                            "Which software subclasses does vbmp belong to?",
                            "What broader software categories encompass vbmp?"
                        ]
                    },
                    {
                        "axiom": "vbmp propertyRestrictions [is executed in some cross validation]",
                        "CQ": [
                            "Is it required that every vbmp instance must be executed in at least one cross validation?",
                            "Can a vbmp exist without being executed in any cross validation?",
                            "For any given vbmp, does there necessarily exist a cross validation where it is executed?"
                        ]
                    },
                    {
                        "axiom": "vbmp propertyRestrictions [has specified data input some [has format specification only R data frame]]",
                        "CQ": [
                            "Is every specified data input of a VBMP required to have a format specification that allows only R data frames?",
                            "Can a specified data input associated with VBMP possess any format specification apart from R data frame?",
                            "Does VBMP necessarily relate, through its specified data input property, to inputs restricted exclusively to the R data frame format?"
                        ]
                    },
                    {
                        "axiom": "vbmp propertyRestrictions [has specified data output some (Graph plot and [has format specification only R data frame])]",
                        "CQ": [
                            "Must every VBMP object produce some data output that includes both a graph plot and has the format specification restricted to R data frame?",
                            "Is it required that VBMP's specified data output always comprise a graph plot whose format specification is solely limited to R data frame?",
                            "Can a VBMP meet its output specification if it generates a graph plot in a format other than R data frame?"
                        ]
                    },
                    {
                        "axiom": "vbmp propertyRestrictions [is published by hasValue Bioconductor]",
                        "CQ": [
                            "Is every vbmp entity necessarily published by Bioconductor?",
                            "Does the property restriction for vbmp ensure it can only be published by Bioconductor?",
                            "Are vbmp instances excluded if they are published by any entity other than Bioconductor?"
                        ]
                    },
                    {
                        "axiom": "vbmp propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is every instance of a vbmp propertyRestriction necessarily encoded in at least one R language?",
                            "Can a vbmp propertyRestriction exist without being encoded in some R language?",
                            "Does a vbmp propertyRestriction require encoding in any R language to be valid?"
                        ]
                    },
                    {
                        "axiom": "vbmp propertyRestrictions [implements some Multinomial probit regression with Gaussian Process priors]",
                        "CQ": [
                            "Is every vbmp instance required to implement at least one Multinomial probit regression with Gaussian Process priors?",
                            "Can a vbmp exist without implementing any Multinomial probit regression that uses Gaussian Process priors?",
                            "Does the ontology assert that vbmp must implement some form of Multinomial probit regression with Gaussian Process priors?"
                        ]
                    }
                ]
            },
            "Database search": {
                "axiom": {
                    "subClassOf": [
                        "Query and retrieval"
                    ],
                    "propertyRestrictions": [
                        "[has output some Database search results]"
                    ]
                },
                "description": "Database search is a subclass of Query and retrieval, constrained such that it produces at least some Database search results as output. This class represents processes where a supplied query is compared against each entry in a database or data resource, returning those entries—or parts thereof—that are similar to the query. Typically, this involves identifying high-scoring matches, as exemplified by tasks like a BLAST search of a sequence database.",
                "CQ": [
                    {
                        "axiom": "Database search subClassOf Query and retrieval",
                        "CQ": [
                            "Is Database search classified under Query and retrieval?",
                            "What specific types fall under Query and retrieval, including Database search?",
                            "Which broader categories encompass Database search?"
                        ]
                    },
                    {
                        "axiom": "Database search propertyRestrictions [has output some Database search results]",
                        "CQ": [
                            "Is it required that a database search yields at least one output of type Database search results?",
                            "Can a database search exist without producing any database search results as output?",
                            "Does the presence of output classified as database search results indicate that an activity qualifies as a database search?"
                        ]
                    }
                ]
            },
            "Gene ID (GeneDB Glossina morsitans)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Gene ID (GeneDB Glossina morsitans) is defined as a subclass of Obsolete concept (EDAM), indicating that it represents a concept no longer in active use. This class refers specifically to gene identifiers from the Glossina morsitans GeneDB database.",
                "CQ": [
                    {
                        "axiom": "Gene ID (GeneDB Glossina morsitans) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Does Gene ID (GeneDB Glossina morsitans) fall under the category of Obsolete concept (EDAM)?",
                            "What are the specific subclasses that are included in Obsolete concept (EDAM), such as Gene ID (GeneDB Glossina morsitans)?",
                            "Which broader classes does Gene ID (GeneDB Glossina morsitans) belong to within the ontology?"
                        ]
                    }
                ]
            },
            "UniProt format": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "UniProt format is a subclass of the obsolete concept in the EDAM ontology, indicating it is no longer actively used or recommended for new work. It is defined as the sequence format used for UniProt entries. This class represents formats specifically designed for recording and representing protein sequence information in the UniProt knowledgebase.",
                "CQ": [
                    {
                        "axiom": "UniProt format subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is UniProt format classified under the broader category of Obsolete concept (EDAM)?",
                            "Which specific formats are subsumed by the Obsolete concept (EDAM), including UniProt format?",
                            "What more general concept categories encompass UniProt format?"
                        ]
                    }
                ]
            },
            "Virulence prediction": {
                "axiom": {
                    "subClassOf": [
                        "Sequence analysis",
                        "Prediction and recognition"
                    ],
                    "propertyRestrictions": [
                        "[has topic some Microbiology]"
                    ]
                },
                "description": "Virulence prediction is a subclass of both Sequence analysis and Prediction and recognition, and is defined as processes or activities that involve predicting the degree of pathogenicity (virulence) of a microorganism based on the analysis of molecular sequences. Additionally, this class is restricted to analyses that have a topic related to Microbiology, ensuring its relevance to the study of microorganisms and their potential for causing disease.",
                "CQ": [
                    {
                        "axiom": "Virulence prediction subClassOf Sequence analysis",
                        "CQ": [
                            "Is Virulence prediction recognized as a specific form of Sequence analysis?",
                            "Which analyses fall under the broader category of Sequence analysis, including Virulence prediction?",
                            "What parent categories encompass Virulence prediction within the ontology structure?"
                        ]
                    },
                    {
                        "axiom": "Virulence prediction subClassOf Prediction and recognition",
                        "CQ": [
                            "Is Virulence prediction classified under the more general category of Prediction and recognition?",
                            "What specialized forms of Prediction and recognition exist, including Virulence prediction?",
                            "Which higher-level concepts encompass Virulence prediction?"
                        ]
                    },
                    {
                        "axiom": "Virulence prediction propertyRestrictions [has topic some Microbiology]",
                        "CQ": [
                            "Is it required that virulence prediction has the topic Microbiology?",
                            "Can virulence prediction be associated with topics other than Microbiology?",
                            "Does every virulence prediction necessarily involve at least one topic within Microbiology?"
                        ]
                    }
                ]
            },
            "Structure prediction": {
                "axiom": {
                    "subClassOf": [
                        "Prediction and recognition",
                        "Structure analysis",
                        "Structure analysis"
                    ],
                    "propertyRestrictions": [
                        "[has output some Structure]",
                        "[has topic some Structure prediction]"
                    ]
                },
                "description": "Structure prediction is defined as a subclass of both Prediction and recognition and Structure analysis, emphasizing its role within analytical and predictive frameworks. It is characterized by outputs that must include some form of Structure, and its topical focus centers specifically on structure prediction. The class addresses topics related to the prediction of molecular secondary or tertiary structure, uniting aspects of analysis and prediction to determine structural features of molecules.",
                "CQ": [
                    {
                        "axiom": "Structure prediction subClassOf Prediction and recognition",
                        "CQ": [
                            "Is Structure prediction classified under the broader type of Prediction and recognition?",
                            "Which specific kinds of Prediction and recognition encompass Structure prediction?",
                            "What are the more general categories that Structure prediction is a member of?"
                        ]
                    },
                    {
                        "axiom": "Structure prediction subClassOf Structure analysis",
                        "CQ": [
                            "Does Structure prediction represent a more specific form of Structure analysis?",
                            "Which subclasses are encompassed by Structure analysis, for example, Structure prediction?",
                            "What broader categories does Structure prediction fall under within the ontology?"
                        ]
                    },
                    {
                        "axiom": "Structure prediction propertyRestrictions [has output some Structure]",
                        "CQ": [
                            "Is it required that every structure prediction has at least one output which is a Structure?",
                            "Does the property ‘has output’ for structure predictions necessarily involve some instance of Structure as an output?",
                            "Can a structure prediction exist without producing any output of type Structure?"
                        ]
                    },
                    {
                        "axiom": "Structure prediction propertyRestrictions [has topic some Structure prediction]",
                        "CQ": [
                            "Must entities with a structure prediction property restriction always possess the property 'has topic' linking them to Structure prediction?",
                            "Is it required that any entity characterized by the structure prediction property restriction has at least one connection via 'has topic' to Structure prediction?",
                            "Can an individual under the structure prediction property restriction exist without being associated, through 'has topic', with Structure prediction?"
                        ]
                    }
                ]
            },
            "Protein surface report": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Protein surface report is an obsolete concept in the EDAM ontology, serving as a broad data type that acts as a placeholder for more specific types. It primarily facilitates navigation within EDAM and is not typically intended for annotation. This class encompasses data regarding the surface properties of protein structures, such as shape, hydropathy, and electrostatic patches.",
                "CQ": [
                    {
                        "axiom": "Protein surface report subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Obsolete concept (EDAM) a generalization of Protein surface report?",
                            "What are the concepts categorized under Obsolete concept (EDAM), including Protein surface report?",
                            "Which higher-level classes include Protein surface report as a member?"
                        ]
                    }
                ]
            },
            "aaindex": {
                "axiom": {
                    "subClassOf": [
                        "Textual format",
                        "Amino acid index format"
                    ]
                },
                "description": "aaindex is defined as a subclass of both Textual format and Amino acid index format. It specifically refers to the amino acid index format utilized by the AAindex database, which is used to represent data about amino acid properties in a textual structure. This class ensures that any format identified as aaindex must inherit characteristics of textual formats for amino acid indices.",
                "CQ": [
                    {
                        "axiom": "aaindex subClassOf Textual format",
                        "CQ": [
                            "Does aaindex fall under the category of Textual format?",
                            "Which specific formats are classified as subtypes of Textual format, particularly including aaindex?",
                            "What higher-level classification does aaindex relate to within the ontology?"
                        ]
                    },
                    {
                        "axiom": "aaindex subClassOf Amino acid index format",
                        "CQ": [
                            "Is aaindex classified as a more specific form of Amino acid index format?",
                            "Which formats fall under the category of Amino acid index format, such as aaindex?",
                            "What broader classes does aaindex belong to within the context of amino acid index representation?"
                        ]
                    }
                ]
            },
            "bigWig": {
                "axiom": {
                    "subClassOf": [
                        "Binary format",
                        "Sequence annotation track format"
                    ]
                },
                "description": "bigWig is a file format defined as a subclass of both Binary format and Sequence annotation track format. It is designed for storing large sequence annotation tracks, where a numerical value is associated with each position in the sequence. The format is similar in function to the textual WIG format but provides a binary alternative for efficient storage and retrieval of large-scale genomic data.",
                "CQ": [
                    {
                        "axiom": "bigWig subClassOf Binary format",
                        "CQ": [
                            "Is bigWig classified under the broader Binary format category?",
                            "What Binary format subclasses exist, and does this include bigWig?",
                            "Which higher-level types encompass bigWig as a more specific instance?"
                        ]
                    },
                    {
                        "axiom": "bigWig subClassOf Sequence annotation track format",
                        "CQ": [
                            "Is bigWig classified as a subtype under Sequence annotation track format?",
                            "Which specific formats are categorized under Sequence annotation track format, such as bigWig?",
                            "To what broader format group does bigWig belong within the ontology structure?"
                        ]
                    }
                ]
            },
            "Data analysis": {
                "axiom": {
                    "subClassOf": [
                        "Data management"
                    ]
                },
                "description": "Data analysis is defined as a subclass of Data management, representing processes focused on the systematic application of statistical and/or logical techniques to describe, illustrate, condense, recap, and evaluate data. This class encompasses activities that transform raw data into meaningful insights, ensuring that data is interpreted and summarized accurately within the broader framework of data management.",
                "CQ": [
                    {
                        "axiom": "Data analysis subClassOf Data management",
                        "CQ": [
                            "Is Data analysis regarded as a specialized form of Data management?",
                            "What are the more specific types classified under Data management, such as Data analysis?",
                            "Which broader categories encompass Data analysis within their scope?"
                        ]
                    }
                ]
            },
            "Database": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Database is defined as a subclass of Obsolete concept (EDAM). It refers to a digital data archive, generally structured around a relational model, but it can also utilize object-oriented, tree, or graph-based models. This formalization indicates that the concept of 'Database'—as described here—has been superseded or rendered obsolete within its ontological context.",
                "CQ": [
                    {
                        "axiom": "Database subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Can Database be categorized under Obsolete concept (EDAM)?",
                            "Which concepts are considered more specific types within the Obsolete concept (EDAM) category, including Database?",
                            "What broader classifications does Database fall under according to the ontology?"
                        ]
                    }
                ]
            },
            "clustering algorithm": {
                "axiom": {
                    "subClassOf": [
                        "single generalization algorithm"
                    ]
                },
                "description": "clustering algorithm is defined as a subclass of single generalization algorithm, indicating that it represents a specialized type of algorithm focused on grouping data points based on similarity or shared characteristics. By this axiom, every clustering algorithm is inherently a single generalization algorithm, inheriting its properties and constraints, but with a specific emphasis on unsupervised partitioning of data into clusters.",
                "CQ": [
                    {
                        "axiom": "clustering algorithm subClassOf single generalization algorithm",
                        "CQ": [
                            "Is every clustering algorithm encompassed by the category of single generalization algorithm?",
                            "Which specific algorithms fall under the single generalization algorithm category, including clustering algorithms?",
                            "To what higher-level algorithm categories does clustering algorithm belong?"
                        ]
                    }
                ]
            },
            "Pathway or network processing": {
                "axiom": {
                    "subClassOf": [
                        "Operation (typed)"
                    ],
                    "propertyRestrictions": [
                        "[has topic some Molecular interactions, pathways and networks]"
                    ]
                },
                "description": "Pathway or network processing is defined as a subclass of Operation (typed), encompassing activities that generate, analyze, or handle biological pathways or networks. Members of this class are characterized by the property restriction that they must have a topic involving molecular interactions, pathways, and networks. This ensures that all pathway or network processing operations are specifically concerned with the management or investigation of biological molecular interaction systems.",
                "CQ": [
                    {
                        "axiom": "Pathway or network processing subClassOf Operation (typed)",
                        "CQ": [
                            "Is Pathway or network processing classified as a type of Operation (typed)?",
                            "Which specific operations are encompassed by Operation (typed), such as Pathway or network processing?",
                            "What broader operational categories does Pathway or network processing fall under?"
                        ]
                    },
                    {
                        "axiom": "Pathway or network processing propertyRestrictions [has topic some Molecular interactions, pathways and networks]",
                        "CQ": [
                            "Is it required that Pathway or network processing has topic that involves Molecular interactions, pathways, and networks?",
                            "Can any instance of Pathway or network processing be described without referencing Molecular interactions, pathways, and networks as a topic?",
                            "Must all Pathway or network processing activities relate to at least one topic of Molecular interactions, pathways, and networks?"
                        ]
                    }
                ]
            },
            "CMA": {
                "axiom": {
                    "subClassOf": [
                        "algorithm"
                    ]
                },
                "description": "CMA is defined as a subclass of algorithm, meaning it inherits all characteristics of algorithms and represents a more specific type within this category. No further restrictions or disjointness axioms are specified, so CMA encompasses all properties of algorithm without any additional constraints.",
                "CQ": [
                    {
                        "axiom": "CMA subClassOf algorithm",
                        "CQ": [
                            "Is CMA categorized as a subtype of algorithm?",
                            "Which kinds of algorithms include CMA as a more specific example?",
                            "What broader classes does CMA fall under in the ontology?"
                        ]
                    }
                ]
            },
            "Affymetrix-compliant data": {
                "axiom": {
                    "subClassOf": [
                        "data"
                    ],
                    "equivalentClass": [
                        "[has format specification some (data format specification and [is published by hasValue Affymetrix])]"
                    ]
                },
                "description": "Affymetrix-compliant data is defined as a subclass of data, and is equivalent to data that has some format specification which itself is a data format specification published by Affymetrix. This means any instance of Affymetrix-compliant data must be associated with at least one data format specification that is officially published by Affymetrix, ensuring adherence to the standards set by the organization.",
                "CQ": [
                    {
                        "axiom": "Affymetrix-compliant data subClassOf data",
                        "CQ": [
                            "What broader categories encompass Affymetrix-compliant data?",
                            "Is data a direct superclass of Affymetrix-compliant data?",
                            "Which specific types of data fall under the classification of data, including Affymetrix-compliant data?"
                        ]
                    },
                    {
                        "axiom": "Affymetrix-compliant data equivalentClass [has format specification some (data format specification and [is published by hasValue Affymetrix])]",
                        "CQ": [
                            "Is Affymetrix-compliant data defined as data that has a format specification which is published by Affymetrix?",
                            "Does Affymetrix-compliant data require at least one format specification that is both a data format specification and has Affymetrix as its publisher?",
                            "Is being Affymetrix-compliant equivalent to having a format specification that is simultaneously a data format specification and published by Affymetrix?"
                        ]
                    }
                ]
            },
            "INOH entry format": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "INOH entry format is defined as a subclass of Obsolete concept (EDAM), indicating it represents a deprecated concept within the ontology. It refers specifically to the format of an entry from the INOH signal transduction pathways database, describing the data structure or specification once used by this resource.",
                "CQ": [
                    {
                        "axiom": "INOH entry format subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Does INOH entry format belong to the broader category of Obsolete concept (EDAM)?",
                            "What specific formats are classified under Obsolete concept (EDAM), including INOH entry format?",
                            "To which higher-level groupings is INOH entry format subsumed?"
                        ]
                    }
                ]
            },
            "CDF ASCII format": {
                "axiom": {
                    "subClassOf": [
                        "ASCII format"
                    ],
                    "propertyRestrictions": [
                        "[is published by hasValue Affymetrix]"
                    ]
                },
                "description": "CDF ASCII format is defined as a subclass of ASCII format, with the additional restriction that it must be published by Affymetrix. This means every instance of CDF ASCII format is a type of ASCII format and is specifically associated with Affymetrix as its publisher.",
                "CQ": [
                    {
                        "axiom": "CDF ASCII format subClassOf ASCII format",
                        "CQ": [
                            "Is CDF ASCII format categorized as a type of ASCII format?",
                            "Which specific formats are included under the broader class of ASCII format?",
                            "What are the more general format categories that encompass CDF ASCII format?"
                        ]
                    },
                    {
                        "axiom": "CDF ASCII format propertyRestrictions [is published by hasValue Affymetrix]",
                        "CQ": [
                            "Is every instance of the CDF ASCII format published exclusively by Affymetrix?",
                            "Must the publisher of any CDF ASCII format always be Affymetrix?",
                            "Can a valid CDF ASCII format have a publisher different from Affymetrix?"
                        ]
                    }
                ]
            },
            "Book ID": {
                "axiom": {
                    "subClassOf": [
                        "Identifier (typed)",
                        "Accession"
                    ]
                },
                "description": "Book ID is defined as a subclass of both Identifier (typed) and Accession, representing a unique identifier assigned specifically to a book. This class ensures that each book instance can be distinctly referenced and accessed via its Book ID, supporting precise identification and management within collections or systems.",
                "CQ": [
                    {
                        "axiom": "Book ID subClassOf Identifier (typed)",
                        "CQ": [
                            "Is every Book ID classified under the broader group of Identifier?",
                            "What identifiers specifically fall under the category of Book ID?",
                            "Which superordinate classes does Book ID belong to in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Book ID subClassOf Accession",
                        "CQ": [
                            "Is Book ID classified under the category of Accession?",
                            "What are all the subclasses that fall within Accession, such as Book ID?",
                            "Which broader classes does Book ID derive from in the hierarchy?"
                        ]
                    }
                ]
            },
            "sequence alignment": {
                "axiom": {
                    "subClassOf": [
                        "pattern discovery task"
                    ]
                },
                "description": "sequence alignment is defined as a subclass of pattern discovery task. This means that every sequence alignment is considered a type of pattern discovery task, focusing on the process of arranging sequences (such as DNA, RNA, or protein sequences) to identify regions of similarity that may indicate functional, structural, or evolutionary relationships. This classification establishes sequence alignment as a specialized activity within the broader domain of discovering patterns in data.",
                "CQ": [
                    {
                        "axiom": "sequence alignment subClassOf pattern discovery task",
                        "CQ": [
                            "Is sequence alignment categorized under the broader class of pattern discovery task?",
                            "Which specific tasks are subclasses of pattern discovery task, such as sequence alignment?",
                            "What are the higher-level categories that encompass sequence alignment as a subclass?"
                        ]
                    }
                ]
            },
            "RDF format": {
                "axiom": {
                    "subClassOf": [
                        "XML",
                        "Ontology format"
                    ]
                },
                "description": "RDF format is defined as a subclass of both XML and Ontology format, indicating that it inherits characteristics from these classes. It is a serialization format that conforms to the Resource Description Framework (RDF) model, which is commonly used for representing information about resources in the Semantic Web. This classification highlights RDF format's position at the intersection of ontology-based knowledge representation and XML-based data structuring.",
                "CQ": [
                    {
                        "axiom": "RDF format subClassOf XML",
                        "CQ": [
                            "Does RDF have a more general type, such as XML?",
                            "Which classes fall under the broader category represented by XML, specifically including RDF?",
                            "Of which broader representations is RDF a specific example?"
                        ]
                    },
                    {
                        "axiom": "RDF format subClassOf Ontology format",
                        "CQ": [
                            "Is RDF format considered a more specific type within the broader category of Ontology format?",
                            "Which formats are classified as subclasses of Ontology format, including RDF format?",
                            "To what higher-level format categories does RDF format belong?"
                        ]
                    }
                ]
            },
            "MRI": {
                "axiom": {
                    "subClassOf": [
                        "Imaging"
                    ]
                },
                "description": "MRI is defined as a subclass of Imaging and refers to techniques that use magnetic fields and radio waves to produce images, typically for investigating the anatomy and physiology of the human body. This classification ensures that MRI is recognized as a specific type of imaging modality, distinct in its mechanism and applications.",
                "CQ": [
                    {
                        "axiom": "MRI subClassOf Imaging",
                        "CQ": [
                            "Is MRI classified as a type of Imaging?",
                            "Which procedures fall under the category of Imaging, such as MRI?",
                            "What broader categories encompass MRI within the ontology?"
                        ]
                    }
                ]
            },
            "Ensembl ID ('Bos taurus')": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Ensembl ID ('Bos taurus') is defined as a subclass of Obsolete concept (EDAM), indicating that it is considered deprecated or outdated in the ontology context. This class represents an identifier assigned to an entry—such as an exon, gene, transcript, or protein—in the Ensembl 'core' database specific to the Bos taurus division.",
                "CQ": [
                    {
                        "axiom": "Ensembl ID ('Bos taurus') subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Does the Ensembl ID ('Bos taurus') belong to the set of Obsolete concepts (EDAM)?",
                            "Which concepts are categorized as subclasses under Obsolete concept (EDAM), such as Ensembl ID ('Bos taurus')?",
                            "What are the broader classes that include Ensembl ID ('Bos taurus') as a member?"
                        ]
                    }
                ]
            },
            "2bit": {
                "axiom": {
                    "subClassOf": [
                        "Raw sequence format",
                        "Binary format"
                    ]
                },
                "description": "2bit is a binary format specifically designed for storing nucleotide sequences, utilizing 2 bits per nucleotide to enable compact representation. It is formally defined as a subclass of both Raw sequence format and Binary format. In addition to encoding standard nucleotide bases, the 2bit format allows for the representation of unknown nucleotides and supports lower-case masking to indicate regions of reduced confidence or biological relevance.",
                "CQ": [
                    {
                        "axiom": "2bit subClassOf Raw sequence format",
                        "CQ": [
                            "Is 2bit categorized under the broader class of Raw sequence format?",
                            "Which data formats are specific types of Raw sequence format, including 2bit?",
                            "What general format classifications does 2bit inherit within the ontology?"
                        ]
                    },
                    {
                        "axiom": "2bit subClassOf Binary format",
                        "CQ": [
                            "Is 2bit classified as a specific type within the Binary format category?",
                            "What are the direct and indirect subtypes encompassed by Binary format, such as 2bit?",
                            "Which higher-level categories include 2bit as a member, with respect to Binary format?"
                        ]
                    }
                ]
            },
            "1 or more": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "1 or more is defined as a subclass of Obsolete concept (EDAM). It represents the idea of \"one or more things.\" This class is considered obsolete within the ontology and is not intended for current use.",
                "CQ": [
                    {
                        "axiom": "1 or more subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is 1 or more categorized as an instance of the Obsolete concept in EDAM?",
                            "Which concepts are designated as subclasses under the Obsolete concept (EDAM)?",
                            "What higher-level classifications encompass 1 or more in the context of EDAM?"
                        ]
                    }
                ]
            },
            "Gene ID (GeneDB Plasmodium falciparum)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Gene ID (GeneDB Plasmodium falciparum) is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer in active use or superseded by other identifiers. It specifically represents a gene identifier assigned by the Plasmodium falciparum GeneDB database. This class captures identifiers unique to genes in this database, but should not be used for current annotation due to its obsolete status.",
                "CQ": [
                    {
                        "axiom": "Gene ID (GeneDB Plasmodium falciparum) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Does Gene ID (GeneDB Plasmodium falciparum) fall under the general category of Obsolete concept (EDAM)?",
                            "What other concepts, like Gene ID (GeneDB Plasmodium falciparum), are classified as subclasses of Obsolete concept (EDAM)?",
                            "Which higher-level groups include Gene ID (GeneDB Plasmodium falciparum) according to the ontology?"
                        ]
                    }
                ]
            },
            "Protein disordered structure": {
                "axiom": {
                    "subClassOf": [
                        "Protein sites, features and motifs"
                    ]
                },
                "description": "Protein disordered structure is defined as a subclass of Protein sites, features and motifs. It refers to regions within a protein that lack a fixed or ordered three-dimensional structure. This class captures concepts related to structural disorder in proteins, distinguishing such regions as important features within the broader context of protein sites, features, and motifs.",
                "CQ": [
                    {
                        "axiom": "Protein disordered structure subClassOf Protein sites, features and motifs",
                        "CQ": [
                            "Is Protein disordered structure classified under the category of Protein sites, features and motifs?",
                            "Which specific types are encompassed by Protein sites, features and motifs, including Protein disordered structure?",
                            "What are the broader ontological categories to which Protein disordered structure belongs?"
                        ]
                    }
                ]
            },
            "Position frequency matrix": {
                "axiom": {
                    "subClassOf": [
                        "Position-specific scoring matrix"
                    ]
                },
                "description": "Position frequency matrix is defined as a subclass of Position-specific scoring matrix. It represents a profile, typically derived from a sequence alignment, structured as a simple matrix where each entry reflects the count of nucleotides or amino acids at each position. This formalization distinguishes Position frequency matrices by their use of raw residue counts per position, rather than scores or probabilities, within the broader category of position-specific scoring matrices.",
                "CQ": [
                    {
                        "axiom": "Position frequency matrix subClassOf Position-specific scoring matrix",
                        "CQ": [
                            "Does the Position frequency matrix fall under the broader grouping of Position-specific scoring matrix?",
                            "Which matrix types are classified beneath Position-specific scoring matrix, such as Position frequency matrix?",
                            "What general matrix categories include Position frequency matrix as a conceptual member?"
                        ]
                    }
                ]
            },
            "Transcription factor accession": {
                "axiom": {
                    "subClassOf": [
                        "Accession",
                        "Protein accession",
                        "Transcription factor identifier"
                    ]
                },
                "description": "Transcription factor accession is defined as a subclass of Accession, Protein accession, and Transcription factor identifier. It represents the accession of an entry from a database specifically pertaining to transcription factors or their binding sites, uniquely identifying these entities within such resources. This formalization ensures that any transcription factor accession is recognized both as a general accession and as a specialized identifier for proteins with transcription factor activity.",
                "CQ": [
                    {
                        "axiom": "Transcription factor accession subClassOf Accession",
                        "CQ": [
                            "What categories is Transcription factor accession classified under within the accession taxonomy?",
                            "Which accessions are specifically categorized as Transcription factor accession?",
                            "Does Accession encompass Transcription factor accession as one of its subtypes?"
                        ]
                    },
                    {
                        "axiom": "Transcription factor accession subClassOf Protein accession",
                        "CQ": [
                            "Is a Protein accession a more general category that encompasses Transcription factor accession?",
                            "Which specific accessions fall under the category of Protein accession, including Transcription factor accession?",
                            "To which broader accession types does a Transcription factor accession belong?"
                        ]
                    },
                    {
                        "axiom": "Transcription factor accession subClassOf Transcription factor identifier",
                        "CQ": [
                            "Does Transcription factor accession fall under the category of Transcription factor identifier?",
                            "Which entities are categorized as subtypes of Transcription factor identifier such as Transcription factor accession?",
                            "What broader identifier classes include Transcription factor accession as a specific instance?"
                        ]
                    }
                ]
            },
            "Agilent Feature Extraction software version 7.5": {
                "axiom": {
                    "subClassOf": [
                        "Agilent Feature Extraction Software"
                    ]
                },
                "description": "Agilent Feature Extraction software version 7.5 is defined as a subclass of Agilent Feature Extraction Software. This classification indicates that version 7.5 inherits all general characteristics of the broader software class while representing a specific version distinguished by its unique features or updates. No additional constraints, disjointness, or property restrictions are asserted in the current axiom.",
                "CQ": [
                    {
                        "axiom": "Agilent Feature Extraction software version 7.5 subClassOf Agilent Feature Extraction Software",
                        "CQ": [
                            "Is Agilent Feature Extraction software version 7.5 classified under Agilent Feature Extraction Software?",
                            "Which specific versions or types are encompassed by Agilent Feature Extraction Software?",
                            "Which broader software categories does Agilent Feature Extraction software version 7.5 fall into?"
                        ]
                    }
                ]
            },
            "Structural variation": {
                "axiom": {
                    "subClassOf": [
                        "Genetic variation",
                        "Chromosomes"
                    ]
                },
                "description": "Structural variation is defined as a subclass of both Genetic variation and Chromosomes, representing changes in the structure of chromosomes. This class encompasses various types of chromosomal alterations, including deletions, duplications, copy-number variants, insertions, inversions, and translocations. These variations can be either microscopic or submicroscopic, reflecting a broad spectrum of structural differences within chromosomes that contribute to genetic diversity.",
                "CQ": [
                    {
                        "axiom": "Structural variation subClassOf Genetic variation",
                        "CQ": [
                            "Is Structural variation categorized as a type of Genetic variation?",
                            "Which specific variations fall under the broader class of Genetic variation, including Structural variation?",
                            "What higher-level categories encompass Structural variation?"
                        ]
                    },
                    {
                        "axiom": "Structural variation subClassOf Chromosomes",
                        "CQ": [
                            "Does Structural variation fall under the general category of Chromosomes?",
                            "What are the specific types that are subclasses of Chromosomes, such as Structural variation?",
                            "Which broader categories include Structural variation as a member?"
                        ]
                    }
                ]
            },
            "Error": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Error is defined as a subclass of the obsolete concept category, indicating that it is considered deprecated within the ontology. It represents data pertaining to an error generated by a computer system or tool. This class is maintained for reference to legacy data representations but should not be used for modeling current or future concepts.",
                "CQ": [
                    {
                        "axiom": "Error subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Error categorized as an instance of the broader Obsolete concept (EDAM)?",
                            "Which concepts are more specific than Obsolete concept (EDAM), including Error?",
                            "To what higher-level concepts does Error belong within the EDAM classification?"
                        ]
                    }
                ]
            },
            "Repeat sequence organisation analysis": {
                "axiom": {
                    "subClassOf": [
                        "Sequence composition calculation",
                        "Repeat sequence analysis"
                    ]
                },
                "description": "Repeat sequence organisation analysis is defined as a subclass of both Sequence composition calculation and Repeat sequence analysis, indicating that it inherits characteristics from both analytical approaches. It involves the analysis of the organization of repeat sequences within biological data, specifically focusing on aspects such as periodicity. This class is intended for methods and processes that evaluate how repeat sequences are arranged and structured within a given sequence, emphasizing their compositional and organizational properties.",
                "CQ": [
                    {
                        "axiom": "Repeat sequence organisation analysis subClassOf Sequence composition calculation",
                        "CQ": [
                            "Does Repeat sequence organisation analysis fall under the broader class of Sequence composition calculation?",
                            "Which specific analyses are classified under Sequence composition calculation, such as Repeat sequence organisation analysis?",
                            "What more general analysis categories encompass Repeat sequence organisation analysis?"
                        ]
                    },
                    {
                        "axiom": "Repeat sequence organisation analysis subClassOf Repeat sequence analysis",
                        "CQ": [
                            "Does Repeat sequence organisation analysis fall under the broader category of Repeat sequence analysis?",
                            "Which analyses are specific types included within Repeat sequence analysis, such as Repeat sequence organisation analysis?",
                            "What higher-level analysis categories encompass Repeat sequence organisation analysis?"
                        ]
                    }
                ]
            },
            "Annotation retrieval": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Annotation retrieval is a subclass of Obsolete concept (EDAM). This class is intended for tools or methods that retrieve existing annotations (or documentation), typically on database entities, rather than predicting or generating new annotations. The focus is on accessing pre-existing information, distinguishing it from annotation prediction methods.",
                "CQ": [
                    {
                        "axiom": "Annotation retrieval subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Annotation retrieval classified as a narrower concept under Obsolete concept (EDAM)?",
                            "Which concepts fall under the category of Obsolete concept (EDAM), such as Annotation retrieval?",
                            "What are the broader categories that Annotation retrieval is associated with?"
                        ]
                    }
                ]
            },
            "GeneData Expressionist Analyst v4.0.5": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[output of some (software publishing process and [has participant hasValue Genedata])]"
                    ]
                },
                "description": "GeneData Expressionist Analyst v4.0.5 is a subclass of software. It is specifically characterized as the output of a software publishing process in which Genedata participates. This definition ensures that any instance of this class is a software artifact resulting from such a process involving Genedata.",
                "CQ": [
                    {
                        "axiom": "GeneData Expressionist Analyst v4.0.5 subClassOf software",
                        "CQ": [
                            "Is GeneData Expressionist Analyst v4.0.5 categorized under software?",
                            "What software subclasses include GeneData Expressionist Analyst v4.0.5?",
                            "Which broader classes encompass GeneData Expressionist Analyst v4.0.5?"
                        ]
                    },
                    {
                        "axiom": "GeneData Expressionist Analyst v4.0.5 propertyRestrictions [output of some (software publishing process and [has participant hasValue Genedata])]",
                        "CQ": [
                            "Is it required that the output of GeneData Expressionist Analyst v4.0.5 results from a software publishing process involving Genedata as a participant?",
                            "Does every output generated by GeneData Expressionist Analyst v4.0.5 have to originate from a software publishing process with Genedata as a participant?",
                            "Can an output of GeneData Expressionist Analyst v4.0.5 be produced without Genedata being a participant in the relevant software publishing process?"
                        ]
                    }
                ]
            },
            "Diffraction data reduction": {
                "axiom": {
                    "subClassOf": [
                        "Diffraction data analysis"
                    ]
                },
                "description": "Diffraction data reduction is defined as a subclass of Diffraction data analysis. It involves the processing of diffraction data into a corrected, ordered, and simplified form, preparing the data for further interpretation or analysis. This class represents methods and procedures specifically focused on transforming raw diffraction measurements into structured datasets suitable for downstream applications.",
                "CQ": [
                    {
                        "axiom": "Diffraction data reduction subClassOf Diffraction data analysis",
                        "CQ": [
                            "Is Diffraction data analysis a broader category that encompasses Diffraction data reduction?",
                            "Which specific processes are classified under Diffraction data analysis, such as Diffraction data reduction?",
                            "What are the parent categories associated with Diffraction data reduction?"
                        ]
                    }
                ]
            },
            "lma": {
                "axiom": {
                    "subClassOf": [
                        "Binary format"
                    ]
                },
                "description": "lma is defined as a subclass of Binary format. This classification indicates that every instance of lma is, by definition, a type of Binary format, inheriting all its properties and constraints. No further characteristics or restrictions are specified in the given axiom.",
                "CQ": [
                    {
                        "axiom": "lma subClassOf Binary format",
                        "CQ": [
                            "Is lma categorized under Binary format?",
                            "Which formats are more specific than Binary format, such as lma?",
                            "What broader classifications encompass lma as a type?"
                        ]
                    }
                ]
            },
            "Genome identifier": {
                "axiom": {
                    "subClassOf": [
                        "Identifier (typed)"
                    ]
                },
                "description": "Genome identifier is defined as a subclass of Identifier (typed), representing an identifier specifically assigned to a particular genome. This class formalizes genome identifiers as a distinct type of typed identifiers, ensuring that any instance classified under Genome identifier must be used to uniquely denote a genome within biological datasets.",
                "CQ": [
                    {
                        "axiom": "Genome identifier subClassOf Identifier (typed)",
                        "CQ": [
                            "Is Genome identifier regarded as a more specific form of Identifier?",
                            "Which types of Identifier encompass Genome identifier as a specialized instance?",
                            "What broader classes does Genome identifier inherit characteristics from, given its classification?"
                        ]
                    }
                ]
            },
            "REST service": {
                "axiom": {
                    "subClassOf": [
                        "web service"
                    ]
                },
                "description": "REST service is defined as a subclass of web service. This means every REST service is a type of web service, inheriting all its general characteristics. No additional property restrictions or disjointness axioms are specified, so a REST service is formally distinguished only by its placement under the broader category of web service.",
                "CQ": [
                    {
                        "axiom": "REST service subClassOf web service",
                        "CQ": [
                            "Is REST service classified as a type of web service?",
                            "Which web service subclasses include REST service within their classification?",
                            "What broader categories does REST service fall under according to the ontology?"
                        ]
                    }
                ]
            },
            "Protein property calculation": {
                "axiom": {
                    "subClassOf": [
                        "Calculation",
                        "Protein analysis",
                        "Prediction and recognition (protein)"
                    ],
                    "propertyRestrictions": [
                        "[has output some Protein property]",
                        "[has topic some Protein properties]"
                    ]
                },
                "description": "Protein property calculation is defined as a subclass of Calculation, Protein analysis, and Prediction and recognition (protein), and is characterized by producing outputs related to Protein properties and being focused on topics concerning Protein properties. This class includes methods for rendering and visualizing properties of protein sequences, and is concerned with calculating or predicting physical or chemical properties of a protein, including any non-positional properties derived from processing the molecular sequence.",
                "CQ": [
                    {
                        "axiom": "Protein property calculation subClassOf Calculation",
                        "CQ": [
                            "Is Protein property calculation a specific variation under the general class of Calculation?",
                            "What types of calculations exist that are more specialized than Calculation, such as Protein property calculation?",
                            "To which overarching categories does Protein property calculation fall within?"
                        ]
                    },
                    {
                        "axiom": "Protein property calculation subClassOf Protein analysis",
                        "CQ": [
                            "Is Protein property calculation categorized as a type of Protein analysis?",
                            "Which analytical tasks are considered more specific than Protein analysis, including Protein property calculation?",
                            "What broader analytical domains encompass Protein property calculation?"
                        ]
                    },
                    {
                        "axiom": "Protein property calculation subClassOf Prediction and recognition (protein)",
                        "CQ": [
                            "Is Protein property calculation classified as a specialization of Prediction and recognition (protein)?",
                            "Which specific activities fall under the broader category of Prediction and recognition (protein), such as Protein property calculation?",
                            "What broader categories encompass Protein property calculation in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Protein property calculation propertyRestrictions [has output some Protein property]",
                        "CQ": [
                            "Is it necessary for a protein property calculation to always produce at least one output of type Protein property?",
                            "Can a protein property calculation yield an output that does not belong to the class of Protein property?",
                            "Does every output of a protein property calculation correspond to a Protein property as defined in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Protein property calculation propertyRestrictions [has topic some Protein properties]",
                        "CQ": [
                            "Is it required that protein property calculations always involve at least one topic related to protein properties?",
                            "Can a protein property calculation be associated with topics other than protein properties?",
                            "Does every protein property calculation explicitly reference at least one specific protein property through its topic?"
                        ]
                    }
                ]
            },
            "EMBOSS graph": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "EMBOSS graph is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer in active use or recommended for use. Members of this class refer specifically to images of graphs generated by the EMBOSS suite, as stated in its definition.",
                "CQ": [
                    {
                        "axiom": "EMBOSS graph subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is EMBOSS graph classified under the broader group of Obsolete concept (EDAM)?",
                            "Which concepts are categorized as specializations of Obsolete concept (EDAM), such as EMBOSS graph?",
                            "What higher-level classes include EMBOSS graph according to the ontology structure?"
                        ]
                    }
                ]
            },
            "MVCClass": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[has specified data output some (data and [has format specification some R data frame])]",
                        "[is executed in some data visualization]",
                        "[is encoded in some R language]",
                        "[has specified data input some (data and [has format specification some R data frame])]"
                    ]
                },
                "description": "MVCClass is defined as a subclass of software, characterized by several property restrictions. Any member of MVCClass must have specified data input and output, both of which are data entities that conform to the R data frame format specification. Additionally, each MVCClass is executed within a data visualization context and is encoded in the R programming language. This ensures MVCClass instances are dedicated software components facilitating R data frame inputs and outputs, utilized specifically in R-based data visualization processes.",
                "CQ": [
                    {
                        "axiom": "MVCClass subClassOf software",
                        "CQ": [
                            "Is MVCClass classified as a kind of software?",
                            "Which classes are subtypes under the software category, such as MVCClass?",
                            "What higher-level categories does MVCClass fall under in the ontology?"
                        ]
                    },
                    {
                        "axiom": "MVCClass propertyRestrictions [has specified data output some (data and [has format specification some R data frame])]",
                        "CQ": [
                            "Is every MVCClass required to provide at least one data output that is a data instance formatted as an R data frame?",
                            "Can an MVCClass be considered valid if it produces a data output that does not adhere to the R data frame format specification?",
                            "Does the requirement for MVCClass data output necessitate both the presence of data and its conformity to the R data frame format?"
                        ]
                    },
                    {
                        "axiom": "MVCClass propertyRestrictions [is executed in some data visualization]",
                        "CQ": [
                            "Is every MVCClass required to be executed in at least one data visualization?",
                            "Are there any MVCClasses that do not participate in the execution of data visualizations?",
                            "Must an MVCClass always establish an execution relationship with an instance of data visualization?"
                        ]
                    },
                    {
                        "axiom": "MVCClass propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is it required for an MVCClass to be encoded in at least one R language?",
                            "Can an MVCClass exist without being associated with any R language as its encoding?",
                            "Does every MVCClass necessarily have an encoding relationship with some instance of R language?"
                        ]
                    },
                    {
                        "axiom": "MVCClass propertyRestrictions [has specified data input some (data and [has format specification some R data frame])]",
                        "CQ": [
                            "Is it required for an MVCClass with a specified data input to always include data that has a format specification of an R data frame?",
                            "Does any specified data input to an MVCClass necessarily relate to data possessing a format specification of an R data frame?",
                            "Can an MVCClass have a specified data input that is not data typed with a format specification of an R data frame?"
                        ]
                    }
                ]
            },
            "Stock number": {
                "axiom": {
                    "subClassOf": [
                        "Identifier (typed)",
                        "Accession"
                    ]
                },
                "description": "Stock number is defined as a subclass of both Identifier (typed) and Accession, representing a specific type of typed identifier used for cataloguing. It is characterized as an identifier assigned to stock from a catalogue of biological resources, enabling precise identification and tracking of biological material in resource collections.",
                "CQ": [
                    {
                        "axiom": "Stock number subClassOf Identifier (typed)",
                        "CQ": [
                            "Does Stock number fall under the category of Identifier?",
                            "Which specific Identifier types include Stock number as a subclass?",
                            "What broader categories is Stock number classified under according to the ontology?"
                        ]
                    },
                    {
                        "axiom": "Stock number subClassOf Accession",
                        "CQ": [
                            "Does the category Accession include Stock number as a specific type?",
                            "Which concepts fall under the broader class of Accession, specifically including Stock number?",
                            "What broader classifications does Stock number derive from within the ontology?"
                        ]
                    }
                ]
            },
            "Protein features report (membrane regions)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Protein features report (membrane regions) is a subclass of Obsolete concept (EDAM). It refers to topics concerning trans- or intra-membrane regions of a protein, typically describing physicochemical properties of secondary structure elements. As an obsolete concept, it indicates that this classification is no longer in current use or has been replaced in the EDAM ontology.",
                "CQ": [
                    {
                        "axiom": "Protein features report (membrane regions) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Are all Protein features report (membrane regions) instances categorized under Obsolete concept (EDAM)?",
                            "Which specific concepts are considered subtypes of Obsolete concept (EDAM), such as Protein features report (membrane regions)?",
                            "To which broader classifications does Protein features report (membrane regions) pertain within EDAM?"
                        ]
                    }
                ]
            },
            "RNAi report": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "RNAi report is defined as a subclass of Obsolete concept (EDAM). This class represents topics concerning RNAi (RNA interference) experiments. Its classification under \"Obsolete concept\" indicates that this topic is no longer in active use within the ontology, although it historically referred to documenting or reporting on RNAi experimental data or findings.",
                "CQ": [
                    {
                        "axiom": "RNAi report subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is RNAi report categorized under the broader class of Obsolete concept (EDAM)?",
                            "Which concepts are specific instances or subtypes of Obsolete concept (EDAM), including RNAi report?",
                            "What are the more general categories to which RNAi report belongs?"
                        ]
                    }
                ]
            },
            "Sequence retrieval": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Sequence retrieval is defined as a subclass of Obsolete concept (EDAM), indicating that it represents a retired or deprecated concept within the EDAM ontology. This class encompasses methods for directly querying a sequence data resource—typically a sequence database—and retrieving sequences and/or their annotations. Direct retrieval methods, such as dbfetch, are included, but methods that perform calculations or further analysis on the sequences are excluded from this category.",
                "CQ": [
                    {
                        "axiom": "Sequence retrieval subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Sequence retrieval categorized under the broader class of Obsolete concept (EDAM)?",
                            "What specific concepts are designated as subtypes of Obsolete concept (EDAM), including Sequence retrieval?",
                            "Which higher-level groupings encompass Sequence retrieval within the ontology?"
                        ]
                    }
                ]
            },
            "Ligand identifier": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Ligand identifier is a subclass of Obsolete concept (EDAM), meaning it is considered outdated or superseded within the ontology. It is defined as a code word used to represent a ligand, such as those assigned in a PDB (Protein Data Bank) file. This classification and definition clarify that the concept was primarily employed to specify ligand codes in structural data resources but is no longer actively used.",
                "CQ": [
                    {
                        "axiom": "Ligand identifier subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Ligand identifier currently categorized as an instance of Obsolete concept (EDAM)?",
                            "What identifiers are classified as obsolete concepts according to EDAM?",
                            "Which higher-level concepts encompass Ligand identifier within the EDAM ontology?"
                        ]
                    }
                ]
            },
            "Pfam clan ID": {
                "axiom": {
                    "subClassOf": [
                        "Protein family accession"
                    ]
                },
                "description": "Pfam clan ID is defined as a subclass of Protein family accession, representing the accession number associated specifically with a Pfam clan. This class captures unique identifiers used for referencing Pfam clans within the broader context of protein family accessions.",
                "CQ": [
                    {
                        "axiom": "Pfam clan ID subClassOf Protein family accession",
                        "CQ": [
                            "Is every Pfam clan ID classified under the broader category of Protein family accession?",
                            "Which specific identifiers fall under the class Protein family accession, such as Pfam clan ID?",
                            "What higher-level classifications does Pfam clan ID belong to within protein family ontologies?"
                        ]
                    }
                ]
            },
            "DragonDB author identifier": {
                "axiom": {
                    "subClassOf": [
                        "Author ID"
                    ]
                },
                "description": "DragonDB author identifier is defined as a subclass of Author ID, representing an identifier specifically assigned to authors within the DragonDB database. This class ensures that any instance identified as a DragonDB author identifier is formally recognized as a type of Author ID, uniquely referencing author entities in the DragonDB resource.",
                "CQ": [
                    {
                        "axiom": "DragonDB author identifier subClassOf Author ID",
                        "CQ": [
                            "Is DragonDB author identifier a more specific form of Author ID?",
                            "Which identifier types are classified under Author ID, including DragonDB author identifier?",
                            "What broader categories encompass DragonDB author identifier?"
                        ]
                    }
                ]
            },
            "Enzyme kinetics data": {
                "axiom": {
                    "subClassOf": [
                        "Protein property",
                        "Reaction data"
                    ]
                },
                "description": "Enzyme kinetics data is a subclass of both Protein property and Reaction data, representing data concerning chemical reactions catalysed by enzymes. It serves as a broad, general data type and is typically used as a placeholder for more specific forms of enzyme-catalysed reaction data. The class formalizes that its members are intrinsically related to proteins (as enzymes) and chemical reaction processes.",
                "CQ": [
                    {
                        "axiom": "Enzyme kinetics data subClassOf Protein property",
                        "CQ": [
                            "Does enzyme kinetics data fall under the category of protein property?",
                            "Which specific types of protein property include enzyme kinetics data as a subclass?",
                            "What broader classes encompass enzyme kinetics data within the ontology?"
                        ]
                    },
                    {
                        "axiom": "Enzyme kinetics data subClassOf Reaction data",
                        "CQ": [
                            "Does Enzyme kinetics data qualify as a more specific form of Reaction data?",
                            "Which data types are categorized under Reaction data, including Enzyme kinetics data?",
                            "To which higher-level data categories does Enzyme kinetics data pertain?"
                        ]
                    }
                ]
            },
            "Sequence similarity search": {
                "axiom": {
                    "subClassOf": [
                        "Sequence comparison",
                        "Database search"
                    ]
                },
                "description": "Sequence similarity search is defined as a subclass of both Sequence comparison and Database search. It refers to the process of searching a sequence database to retrieve sequences that are similar to a given query sequence. This class links the computational method of comparing biological or other sequences with the practical task of searching databases, emphasizing the retrieval of similar sequences based on a defined similarity criterion.",
                "CQ": [
                    {
                        "axiom": "Sequence similarity search subClassOf Sequence comparison",
                        "CQ": [
                            "Is Sequence similarity search categorized under the broader class of Sequence comparison?",
                            "Which specific types of Sequence comparison include Sequence similarity search as a subclass?",
                            "What higher-level concepts encompass Sequence similarity search within the ontology?"
                        ]
                    },
                    {
                        "axiom": "Sequence similarity search subClassOf Database search",
                        "CQ": [
                            "Is Sequence similarity search classified under Database search within the ontology?",
                            "What specific search types are categorized as subclasses of Database search, including Sequence similarity search?",
                            "Which overarching classes encompass Sequence similarity search?"
                        ]
                    }
                ]
            },
            "GenePix": {
                "axiom": {
                    "subClassOf": [
                        "Gene Pix"
                    ]
                },
                "description": "GenePix is defined as a subclass of Gene Pix. This indicates that any individual classified as GenePix must also meet all criteria associated with Gene Pix. No additional property restrictions, equivalence, or disjointness axioms are specified, thus GenePix inherits all characteristics of its superclass.",
                "CQ": [
                    {
                        "axiom": "GenePix subClassOf Gene Pix",
                        "CQ": [
                            "Is Gene Pix a generalization of GenePix?",
                            "Which entities are more specific than Gene Pix, such as GenePix?",
                            "To what broader classes does GenePix belong?"
                        ]
                    }
                ]
            },
            "Carbohydrates": {
                "axiom": {
                    "subClassOf": [
                        "Biochemistry"
                    ]
                },
                "description": "Carbohydrates is a subclass within the broader domain of Biochemistry. This class focuses on topics related to carbohydrates, typically encompassing their structural information. It formalizes the study and categorization of carbohydrates as chemical compounds within biochemistry, emphasizing their molecular structure and relevance in biological systems.",
                "CQ": [
                    {
                        "axiom": "Carbohydrates subClassOf Biochemistry",
                        "CQ": [
                            "Are Carbohydrates categorized under the broader domain of Biochemistry?",
                            "Which specific entities are classified as subtypes of Biochemistry, such as Carbohydrates?",
                            "What higher-level classifications include Carbohydrates within their scope?"
                        ]
                    }
                ]
            },
            "Gene features (SECIS element)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Gene features (SECIS element) is defined as a subclass of Obsolete concept (EDAM), indicating that this concept is no longer considered current or in active use. It is described as a report on the selenocysteine insertion sequence (SECIS) element in a DNA sequence, which pertains to the identification or annotation of SECIS elements involved in the incorporation of selenocysteine during translation. The obsolete status suggests that this class has been deprecated in favor of more up-to-date concepts.",
                "CQ": [
                    {
                        "axiom": "Gene features (SECIS element) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is the SECIS element gene feature categorized under the obsolete concept class from EDAM?",
                            "Which gene features are defined as subclasses of the obsolete concept (EDAM), such as the SECIS element?",
                            "To which broader EDAM categories does the SECIS element gene feature belong?"
                        ]
                    }
                ]
            },
            "Disease ID": {
                "axiom": {
                    "subClassOf": [
                        "Identifier (typed)",
                        "Accession"
                    ],
                    "propertyRestrictions": [
                        "[is identifier of some Disease report]"
                    ]
                },
                "description": "Disease ID is defined as a subclass of both Identifier (typed) and Accession. It serves specifically as an identifier for entries in disease databases and is constrained by the property that it must be an identifier of some Disease report. This formalization ensures that any Disease ID is associated uniquely with disease records.",
                "CQ": [
                    {
                        "axiom": "Disease ID subClassOf Identifier (typed)",
                        "CQ": [
                            "Is Disease ID classified as a subtype of Identifier?",
                            "Which forms of Identifier include Disease ID as a more specific type?",
                            "What higher-level types encompass Disease ID?"
                        ]
                    },
                    {
                        "axiom": "Disease ID subClassOf Accession",
                        "CQ": [
                            "Does Disease ID fall under the general category of Accession?",
                            "Which specific entities are classified as subclasses of Accession, such as Disease ID?",
                            "What broader classes encompass Disease ID, considering its subclass relationship to Accession?"
                        ]
                    },
                    {
                        "axiom": "Disease ID propertyRestrictions [is identifier of some Disease report]",
                        "CQ": [
                            "Is every Disease ID required to serve as the identifier for at least one Disease report?",
                            "Can a Disease report exist without being associated with a Disease ID as its identifier?",
                            "Does a Disease ID function exclusively as an identifier for Disease reports?"
                        ]
                    }
                ]
            },
            "RFAM accession": {
                "axiom": {
                    "subClassOf": [
                        "Accession",
                        "RNA family identifier"
                    ]
                },
                "description": "RFAM accession is a subclass of Accession and serves as an RNA family identifier. It represents the stable accession number assigned to an RNA family entry in the RFAM database, ensuring persistent and unique identification for each RNA family entry within the database.",
                "CQ": [
                    {
                        "axiom": "RFAM accession subClassOf Accession",
                        "CQ": [
                            "Does RFAM accession fall under the category of Accession?",
                            "What are the more specific forms of Accession, such as RFAM accession?",
                            "Which higher-level categories include RFAM accession?"
                        ]
                    },
                    {
                        "axiom": "RFAM accession subClassOf RNA family identifier",
                        "CQ": [
                            "Does RFAM accession fall under the category of RNA family identifier?",
                            "Which identifiers are classified as more specific types of RNA family identifier, including RFAM accession?",
                            "What are the broader identifier categories that include RFAM accession?"
                        ]
                    }
                ]
            },
            "Protein folding report": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Protein folding report is defined as a subclass of Obsolete concept (EDAM), indicating that this concept is no longer in active use. It refers to a report detailing the analysis or modeling of protein folding properties, folding pathways, and identifying residues or sites key to protein folding, such as nucleation or stabilization centers. This class encompasses documentation surrounding investigations into the mechanisms and factors governing protein folding.",
                "CQ": [
                    {
                        "axiom": "Protein folding report subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Protein folding report classified as a kind of Obsolete concept (EDAM)?",
                            "Which concepts fall under the category of Obsolete concept (EDAM), specifically including Protein folding report?",
                            "What broader conceptual group does Protein folding report belong to according to the taxonomy?"
                        ]
                    }
                ]
            },
            "Immunology": {
                "axiom": {
                    "subClassOf": [
                        "Biomedical science"
                    ]
                },
                "description": "Immunology is a subclass of Biomedical science, focusing on the application of information technology to the study of immunological processes, including immunological genes, proteins, peptide ligands, antigens, and related topics. This class captures the intersection of informatics and immunology within the broader context of biomedical sciences.",
                "CQ": [
                    {
                        "axiom": "Immunology subClassOf Biomedical science",
                        "CQ": [
                            "Is Immunology classified under the broader category of Biomedical science?",
                            "What are the specialized fields that fall under Biomedical science, such as Immunology?",
                            "Which overarching scientific domains encompass Immunology?"
                        ]
                    }
                ]
            },
            "DiProDB ID": {
                "axiom": {
                    "subClassOf": [
                        "Oligonucleotide ID"
                    ]
                },
                "description": "DiProDB ID is defined as a subclass of Oligonucleotide ID, representing an identifier specifically assigned to a dinucleotide property within the DiProDB database. This class is intended to uniquely reference dinucleotide properties catalogued in DiProDB, ensuring structured identification within oligonucleotide-related datasets.",
                "CQ": [
                    {
                        "axiom": "DiProDB ID subClassOf Oligonucleotide ID",
                        "CQ": [
                            "Is DiProDB ID classified under the broader category of Oligonucleotide ID?",
                            "Which identifiers are considered specific forms of Oligonucleotide ID, including DiProDB ID?",
                            "What more general identifier categories encompass DiProDB ID?"
                        ]
                    }
                ]
            },
            "Wilcoxon": {
                "axiom": {
                    "subClassOf": [
                        "algorithm"
                    ]
                },
                "description": "Wilcoxon is defined as a subclass of algorithm, indicating that all instances of Wilcoxon are considered algorithms. No further property constraints or disjointness are specified, so its principal characteristic is its classification under the broader category of algorithm.",
                "CQ": [
                    {
                        "axiom": "Wilcoxon subClassOf algorithm",
                        "CQ": [
                            "Is Wilcoxon classified as a specific kind of algorithm?",
                            "Which algorithms encompass Wilcoxon as a more specialized form?",
                            "What broader categories does Wilcoxon, as a subclass, fall under?"
                        ]
                    }
                ]
            },
            "LMGene": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[is encoded in some R language]",
                        "[has specified data input some (Gene expression dataset and [has format specification some data format specification])]",
                        "[is executed in some data normalization]",
                        "[implements some Linear modelling]",
                        "[is executed in some Linear modelling]",
                        "[has specified data output some (data and [has format specification some R data frame])]"
                    ]
                },
                "description": "LMGene is defined as a subclass of software, specifically characterized by its association with gene expression analysis. Every LMGene instance must be encoded in the R programming language and requires a specified data input that is both a gene expression dataset and accompanied by a data format specification. LMGene must execute data normalization and linear modeling procedures, and it implements linear modeling methods. The resulting data output is required to be a data object, specifically structured as an R data frame, and specified with an appropriate data format specification. This formalization captures the core purpose and constraints of LMGene as software dedicated to linear modeling of gene expression data in R.",
                "CQ": [
                    {
                        "axiom": "LMGene subClassOf software",
                        "CQ": [
                            "Is LMGene classified as a specific kind of software?",
                            "Which software subclasses include LMGene as an example?",
                            "What higher-level classes encompass LMGene according to the ontology?"
                        ]
                    },
                    {
                        "axiom": "LMGene propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is it required that an LMGene is encoded in at least one R language?",
                            "Can an LMGene exist without being encoded in any R language?",
                            "Does having an encoding in an R language satisfy the property restriction for LMGene?"
                        ]
                    },
                    {
                        "axiom": "LMGene propertyRestrictions [has specified data input some (Gene expression dataset and [has format specification some data format specification])]",
                        "CQ": [
                            "Does every LMGene necessarily have a specified data input that is both a gene expression dataset and follows some data format specification?",
                            "Can an LMGene exist without having any specified data input that qualifies as a gene expression dataset with an associated data format specification?",
                            "Is it possible for an LMGene to have a specified data input that is not both a gene expression dataset and formatted according to a data format specification?"
                        ]
                    },
                    {
                        "axiom": "LMGene propertyRestrictions [is executed in some data normalization]",
                        "CQ": [
                            "Is it necessary for every LMGene to be executed in some form of data normalization?",
                            "Does the definition of LMGene require that it is associated with at least one execution within data normalization?",
                            "Can an LMGene exist without participating in any data normalization process?"
                        ]
                    },
                    {
                        "axiom": "LMGene propertyRestrictions [implements some Linear modelling]",
                        "CQ": [
                            "Is it required that every LMGene implements at least one form of linear modelling?",
                            "Are there any instances of LMGene that do not implement linear modelling?",
                            "Can an LMGene be asserted without fulfilling the property 'implements' with respect to linear modelling?"
                        ]
                    },
                    {
                        "axiom": "LMGene propertyRestrictions [is executed in some Linear modelling]",
                        "CQ": [
                            "Does every LM Gene require execution in at least one Linear Modelling context?",
                            "Is it necessary for an LM Gene to be associated with the 'is executed in' property referencing a Linear Modelling process?",
                            "Can an LM Gene exist without being executed in any Linear Modelling scenario?"
                        ]
                    },
                    {
                        "axiom": "LMGene propertyRestrictions [has specified data output some (data and [has format specification some R data frame])]",
                        "CQ": [
                            "Does every LMGene have at least one specified data output that is a data object with at least one format specification of R data frame?",
                            "Is it required that LMGene produces a data output in the form of a data object specified as an R data frame?",
                            "Can any data output of LMGene lack the format specification of an R data frame?"
                        ]
                    }
                ]
            },
            "Neurobiology": {
                "axiom": {
                    "subClassOf": [
                        "Biomedical science"
                    ]
                },
                "description": "Neurobiology is a subclass of Biomedical science, focused on the study of the nervous system and brain, including their anatomy, physiology, and functional aspects. This class encompasses research and knowledge relating to how nervous tissue develops, operates, and influences behavior and health.",
                "CQ": [
                    {
                        "axiom": "Neurobiology subClassOf Biomedical science",
                        "CQ": [
                            "Is Neurobiology classified as a subset of Biomedical science?",
                            "What disciplines are categorized under Biomedical science, specifically including Neurobiology?",
                            "Which higher-level scientific categories encompass Neurobiology?"
                        ]
                    }
                ]
            },
            "Gene name": {
                "axiom": {
                    "subClassOf": [
                        "Name",
                        "Gene identifier"
                    ]
                },
                "description": "Gene name is defined as a subclass of both Name and Gene identifier. It refers to the name of a gene, typically assigned by a person or according to a specific naming scheme. Gene names are generally more intuitive and readable than gene symbols, may include whitespace, and are often used to identify similar genes across different species or to help derive gene symbols.",
                "CQ": [
                    {
                        "axiom": "Gene name subClassOf Name",
                        "CQ": [
                            "Does Gene name represent a specialized form of Name?",
                            "Which categories does Gene name inherit properties from within the ontology?",
                            "What kinds of Name include Gene name as a more specific type?"
                        ]
                    },
                    {
                        "axiom": "Gene name subClassOf Gene identifier",
                        "CQ": [
                            "Is Gene identifier a broader classification encompassing Gene name?",
                            "Which entities are categorized as more specific types under Gene identifier, such as Gene name?",
                            "To which higher-level categories does Gene name conceptually relate within the ontology?"
                        ]
                    }
                ]
            },
            "Pascal": {
                "axiom": {
                    "subClassOf": [
                        "programming language"
                    ]
                },
                "description": "Pascal is defined as a subclass of programming language. This specifies that every instance of Pascal is inherently a programming language, inheriting all general characteristics and constraints of programming languages. No additional property restrictions or distinctions are currently asserted for this class.",
                "CQ": [
                    {
                        "axiom": "Pascal subClassOf programming language",
                        "CQ": [
                            "Is Pascal categorized as a type of programming language?",
                            "Which programming languages have Pascal as a specific example?",
                            "What broader classes include Pascal as a member?"
                        ]
                    }
                ]
            },
            "GPCR coupling selectivity prediction": {
                "axiom": {
                    "subClassOf": [
                        "Protein interaction prediction",
                        "Protein property calculation (from sequence)",
                        "GPCR analysis"
                    ],
                    "propertyRestrictions": [
                        "[has output some Protein report]"
                    ]
                },
                "description": "GPCR coupling selectivity prediction is a class defined as a subclass of Protein interaction prediction, Protein property calculation (from sequence), and GPCR analysis. It is characterized by producing at least one Protein report as output. This class focuses on the prediction of G-protein coupled receptor (GPCR) coupling selectivity, identifying which types of G-proteins a GPCR preferentially interacts with, based on sequence-derived properties and protein interaction analysis.",
                "CQ": [
                    {
                        "axiom": "GPCR coupling selectivity prediction subClassOf Protein interaction prediction",
                        "CQ": [
                            "Is GPCR coupling selectivity prediction categorized under Protein interaction prediction?",
                            "Which prediction types are encompassed by Protein interaction prediction, including GPCR coupling selectivity prediction?",
                            "What higher-level prediction categories does GPCR coupling selectivity prediction fall into?"
                        ]
                    },
                    {
                        "axiom": "GPCR coupling selectivity prediction subClassOf Protein property calculation (from sequence)",
                        "CQ": [
                            "Does GPCR coupling selectivity prediction fall under the category of Protein property calculation (from sequence)?",
                            "Which concepts are classified as subclasses of Protein property calculation (from sequence), including GPCR coupling selectivity prediction?",
                            "What are the broader categories that encompass GPCR coupling selectivity prediction?"
                        ]
                    },
                    {
                        "axiom": "GPCR coupling selectivity prediction subClassOf GPCR analysis",
                        "CQ": [
                            "Is GPCR analysis the immediate superclass of GPCR coupling selectivity prediction?",
                            "Which specific approaches are classified under GPCR analysis, such as GPCR coupling selectivity prediction?",
                            "What are the broader conceptual categories that encompass GPCR coupling selectivity prediction?"
                        ]
                    },
                    {
                        "axiom": "GPCR coupling selectivity prediction propertyRestrictions [has output some Protein report]",
                        "CQ": [
                            "Does every instance of GPCR coupling selectivity prediction necessarily produce at least one output that is a Protein report?",
                            "Is it required that GPCR coupling selectivity prediction has an output related to a Protein report?",
                            "Can a GPCR coupling selectivity prediction exist without producing a Protein report as output?"
                        ]
                    }
                ]
            },
            "Sequence cutting": {
                "axiom": {
                    "subClassOf": [
                        "Sequence editing"
                    ]
                },
                "description": "Sequence cutting is defined as a subclass of Sequence editing, representing an operation that involves cutting or removing characters or a specific region from a molecular sequence. This class specifically captures the molecular sequence alteration process where a segment is excised, aligning with its role as a specialized form of sequence editing.",
                "CQ": [
                    {
                        "axiom": "Sequence cutting subClassOf Sequence editing",
                        "CQ": [
                            "Does Sequence cutting fall under the general category of Sequence editing?",
                            "What specific subtypes are encompassed within Sequence editing, including Sequence cutting?",
                            "Which higher-level classes contain Sequence cutting as a subclass?"
                        ]
                    }
                ]
            },
            "Physicochemical property data processing": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Physicochemical property data processing is defined as a subclass of Obsolete concept (EDAM), representing processes that involve reading and/or writing data related to the physicochemical properties of molecules. This class is considered obsolete, meaning it is no longer recommended for use in current ontological frameworks.",
                "CQ": [
                    {
                        "axiom": "Physicochemical property data processing subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Physicochemical property data processing classified as a type of Obsolete concept (EDAM)?",
                            "Which specific concepts are categorized under Obsolete concept (EDAM), including Physicochemical property data processing?",
                            "To which higher-level categories does Physicochemical property data processing belong?"
                        ]
                    }
                ]
            },
            "Sequence motif format": {
                "axiom": {
                    "subClassOf": [
                        "Format (typed)"
                    ],
                    "propertyRestrictions": [
                        "[is format of some Sequence motif]"
                    ]
                },
                "description": "Sequence motif format is a subclass of Format (typed), representing formats specifically used to describe sequence motifs. Every instance of Sequence motif format is constrained by the property that it must be a format of at least one Sequence motif. This ensures that Sequence motif formats are exclusively intended for representing or storing sequence motif data, distinguishing them from other format types with different content foci.",
                "CQ": [
                    {
                        "axiom": "Sequence motif format subClassOf Format (typed)",
                        "CQ": [
                            "Is Sequence motif format a specialized form of Format (typed)?",
                            "Which Format (typed) subclasses encompass Sequence motif format?",
                            "What more general classes does Sequence motif format belong to?"
                        ]
                    },
                    {
                        "axiom": "Sequence motif format propertyRestrictions [is format of some Sequence motif]",
                        "CQ": [
                            "Is every Sequence motif required to be the format for at least one format property?",
                            "Does there exist a format property that is the format of a Sequence motif?",
                            "Must each Sequence motif be associated with a specific format through the 'is format of' relationship?"
                        ]
                    }
                ]
            },
            "metahdep": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[implements some Bayesian Model]",
                        "[is encoded in some R language]",
                        "[is published by hasValue Bioconductor]",
                        "[has specified data output some (Graph plot and [has format specification only R data frame])]",
                        "[has specified data input some Gene expression dataset]"
                    ]
                },
                "description": "metahdep is a subclass of software, characterized by several specific property restrictions. It implements at least one Bayesian Model and must be encoded in the R programming language. Additionally, metahdep is published exclusively by Bioconductor. In terms of data handling, it requires a gene expression dataset as input and produces graph plots as outputs, with these outputs specifically formatted as R data frames. This formalization ensures that any software classified as metahdep aligns with these ontological and technical specifications.",
                "CQ": [
                    {
                        "axiom": "metahdep subClassOf software",
                        "CQ": [
                            "Is metahdep classified under the broader category of software?",
                            "What are the subclasses encompassed by software, including metahdep?",
                            "Which superordinate categories does metahdep fall under?"
                        ]
                    },
                    {
                        "axiom": "metahdep propertyRestrictions [implements some Bayesian Model]",
                        "CQ": [
                            "Is every instance of metahdep required to implement at least one Bayesian Model?",
                            "Does metahdep necessarily have an implementation that is a Bayesian Model?",
                            "Can metahdep exist without implementing a Bayesian Model?"
                        ]
                    },
                    {
                        "axiom": "metahdep propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is it required that every metahdep is encoded in at least one R language?",
                            "Can a metahdep exist without being encoded in any R language?",
                            "Does metahdep necessarily involve having an encoding relation to some R language?"
                        ]
                    },
                    {
                        "axiom": "metahdep propertyRestrictions [is published by hasValue Bioconductor]",
                        "CQ": [
                            "Is it necessary for a metahdep to be published exclusively by Bioconductor?",
                            "Does the property restriction on metahdep imply that Bioconductor must always be its publisher?",
                            "Can a metahdep be considered valid if it is published by any entity other than Bioconductor?"
                        ]
                    },
                    {
                        "axiom": "metahdep propertyRestrictions [has specified data output some (Graph plot and [has format specification only R data frame])]",
                        "CQ": [
                            "Is every data output of metahdep required to be a graph plot that is formatted exclusively as an R data frame?",
                            "Can metahdep produce any specified data output other than a graph plot with a format restriction of only R data frames?",
                            "Does metahdep necessarily restrict its specified data outputs to items that are both graph plots and have format specification limited to R data frames?"
                        ]
                    },
                    {
                        "axiom": "metahdep propertyRestrictions [has specified data input some Gene expression dataset]",
                        "CQ": [
                            "Does metahdep necessarily require at least one specified data input that is a gene expression dataset?",
                            "Can metahdep exist without having any specified data input of type gene expression dataset?",
                            "Is it possible for metahdep to have specified data inputs that are not gene expression datasets?"
                        ]
                    }
                ]
            },
            "GenePix Pro [Axon Instruments]": {
                "axiom": {
                    "subClassOf": [
                        "GenePix Pro"
                    ]
                },
                "description": "GenePix Pro [Axon Instruments] is defined as a subclass of GenePix Pro. This indicates that it inherits all characteristics and constraints of GenePix Pro, but may also include additional specific features or distinctions related to the Axon Instruments variant. No further disjointness or property restrictions are specified for this class.",
                "CQ": [
                    {
                        "axiom": "GenePix Pro [Axon Instruments] subClassOf GenePix Pro",
                        "CQ": [
                            "Is GenePix Pro [Axon Instruments] classified under the broader category of GenePix Pro?",
                            "Which software tools are specialized types of GenePix Pro, such as GenePix Pro [Axon Instruments]?",
                            "What higher-level categories include GenePix Pro [Axon Instruments] as a member?"
                        ]
                    }
                ]
            },
            "Locus ID (MMP)": {
                "axiom": {
                    "subClassOf": [
                        "Locus ID"
                    ]
                },
                "description": "Locus ID (MMP) is defined as a subclass of Locus ID, representing identifiers specifically assigned to loci within the Maize Mapping Project. These identifiers uniquely reference genetic loci mapped in the context of this project, ensuring precise identification and integration with broader genetic resources.",
                "CQ": [
                    {
                        "axiom": "Locus ID (MMP) subClassOf Locus ID",
                        "CQ": [
                            "What distinguishes Locus ID (MMP) as a specialized form of Locus ID?",
                            "Which instances are classified under Locus ID (MMP) within the overall set of Locus ID?",
                            "What hierarchical categories encompass Locus ID (MMP)?"
                        ]
                    }
                ]
            },
            "Scanning software G2565AA version A6.3.1": {
                "axiom": {
                    "subClassOf": [
                        "scanning software"
                    ],
                    "propertyRestrictions": [
                        "[is developed by hasValue Agilent Technologies]"
                    ]
                },
                "description": "Scanning software G2565AA version A6.3.1 is defined as a subclass of scanning software, and is characterized by being developed specifically by Agilent Technologies. Any individual instance of this class must be a scanning software product with this version identifier and origin. This formalization prevents classification of scanning software from other developers or different versions under this class.",
                "CQ": [
                    {
                        "axiom": "Scanning software G2565AA version A6.3.1 subClassOf scanning software",
                        "CQ": [
                            "Is scanning software G2565AA version A6.3.1 classified under scanning software?",
                            "What specific types are encompassed by the scanning software category, including G2565AA version A6.3.1?",
                            "Which broader categories does scanning software G2565AA version A6.3.1 fall under?"
                        ]
                    },
                    {
                        "axiom": "Scanning software G2565AA version A6.3.1 propertyRestrictions [is developed by hasValue Agilent Technologies]",
                        "CQ": [
                            "Is Scanning software G2565AA version A6.3.1 necessarily developed by Agilent Technologies?",
                            "Can Scanning software G2565AA version A6.3.1 have a developer other than Agilent Technologies?",
                            "Does the property restriction require that Agilent Technologies is assigned as the developer for Scanning software G2565AA version A6.3.1?"
                        ]
                    }
                ]
            },
            "Reaction ID (SABIO-RK)": {
                "axiom": {
                    "subClassOf": [
                        "Reaction ID"
                    ]
                },
                "description": "Reaction ID (SABIO-RK) is defined as a subclass of Reaction ID and functions as an identifier for biological reactions specifically sourced from the SABIO-RK reactions database. This class ensures that any instance categorized as Reaction ID (SABIO-RK) serves to uniquely identify a biological reaction entry within the SABIO-RK database.",
                "CQ": [
                    {
                        "axiom": "Reaction ID (SABIO-RK) subClassOf Reaction ID",
                        "CQ": [
                            "Does Reaction ID (SABIO-RK) belong to the more general class of Reaction ID?",
                            "Which specific types of Reaction ID encompass Reaction ID (SABIO-RK)?",
                            "What broader categories can Reaction ID (SABIO-RK) be classified under?"
                        ]
                    }
                ]
            },
            "RNA secondary structure visualisation": {
                "axiom": {
                    "subClassOf": [
                        "RNA secondary structure analysis",
                        "Visualisation"
                    ],
                    "propertyRestrictions": [
                        "[has input some RNA secondary structure]"
                    ]
                },
                "description": "RNA secondary structure visualisation is defined as a subclass of both RNA secondary structure analysis and Visualisation. It represents processes or tools that specifically visualize RNA secondary structures, including features such as knots and pseudoknots. Members of this class operate with at least one RNA secondary structure as input, ensuring the visualization pertains directly to RNA configurations. This class formalizes the role of visualization within the broader context of RNA structure analysis.",
                "CQ": [
                    {
                        "axiom": "RNA secondary structure visualisation subClassOf RNA secondary structure analysis",
                        "CQ": [
                            "Is RNA secondary structure visualisation classified as a type of RNA secondary structure analysis?",
                            "What specialised activities fall under RNA secondary structure analysis, including RNA secondary structure visualisation?",
                            "Which broader categories encompass RNA secondary structure visualisation?"
                        ]
                    },
                    {
                        "axiom": "RNA secondary structure visualisation subClassOf Visualisation",
                        "CQ": [
                            "Does RNA secondary structure visualisation fall under the category of Visualisation?",
                            "What are the specific types of Visualisation that include RNA secondary structure visualisation?",
                            "Which broader visualisation categories encompass RNA secondary structure visualisation?"
                        ]
                    },
                    {
                        "axiom": "RNA secondary structure visualisation propertyRestrictions [has input some RNA secondary structure]",
                        "CQ": [
                            "Is it required that an RNA secondary structure visualisation has at least one input that is an RNA secondary structure?",
                            "Can an RNA secondary structure visualisation exist if it does not have any RNA secondary structure as input?",
                            "Does every RNA secondary structure visualisation necessarily operate on some RNA secondary structure as its input?"
                        ]
                    }
                ]
            },
            "xls": {
                "axiom": {
                    "subClassOf": [
                        "XML",
                        "Document format"
                    ]
                },
                "description": "xls is defined as a subclass of both XML and Document format, indicating that it is a type of document format that utilizes XML technology. It specifically refers to the Microsoft Excel spreadsheet format, which is used for storing, organizing, and exchanging tabular data in Excel.",
                "CQ": [
                    {
                        "axiom": "xls subClassOf XML",
                        "CQ": [
                            "Is xls classified as a type of XML?",
                            "Which file types are more specific variations of XML, such as xls?",
                            "What broader categories include xls in their classification hierarchy?"
                        ]
                    },
                    {
                        "axiom": "xls subClassOf Document format",
                        "CQ": [
                            "Is xls classified under the broader group of Document format?",
                            "Which formats fall under the category of Document format, specifically including xls?",
                            "What broader format categories encompass xls as a type?"
                        ]
                    }
                ]
            },
            "InChI": {
                "axiom": {
                    "subClassOf": [
                        "Chemical formula format",
                        "Textual format"
                    ]
                },
                "description": "InChI is defined as a subclass of both Chemical formula format and Textual format, representing a chemical structure described using the IUPAC International Chemical Identifier (InChI) line notation. This class characterizes textual representations of chemical structures in a standardized, machine-readable format as specified by IUPAC guidelines.",
                "CQ": [
                    {
                        "axiom": "InChI subClassOf Chemical formula format",
                        "CQ": [
                            "Is InChI classified as a more specific type of Chemical formula format?",
                            "What chemical formula formats encompass InChI as a subset?",
                            "Which broader categories does InChI, as a format, fall under?"
                        ]
                    },
                    {
                        "axiom": "InChI subClassOf Textual format",
                        "CQ": [
                            "Does InChI fall under the broader classification of Textual format?",
                            "Which formats are considered specialized forms within the category of Textual format, including InChI?",
                            "What are the more general categories that encompass InChI as a type?"
                        ]
                    }
                ]
            },
            "Phylip character frequencies format": {
                "axiom": {
                    "subClassOf": [
                        "Textual format",
                        "Phylogenetic continuous quantitative character format"
                    ]
                },
                "description": "Phylip character frequencies format is a subclass of both Textual format and Phylogenetic continuous quantitative character format. It is defined as a PHYLIP file format specifically intended to represent character frequency data within phylogenetic analyses. Members of this class are textual file formats designed to encode continuous quantitative character frequencies, supporting data exchange and processing in phylogenetic studies.",
                "CQ": [
                    {
                        "axiom": "Phylip character frequencies format subClassOf Textual format",
                        "CQ": [
                            "Is Phylip character frequencies format classified under the broader group of Textual format?",
                            "Which formats are specified as subcategories of Textual format, including Phylip character frequencies format?",
                            "What higher-level categories encompass Phylip character frequencies format?"
                        ]
                    },
                    {
                        "axiom": "Phylip character frequencies format subClassOf Phylogenetic continuous quantitative character format",
                        "CQ": [
                            "Is Phylogenetic continuous quantitative character format a broader category that includes Phylip character frequencies format?",
                            "Which specific formats fall under the category of Phylogenetic continuous quantitative character format, such as Phylip character frequencies format?",
                            "What higher-level format classifications encompass Phylip character frequencies format?"
                        ]
                    }
                ]
            },
            "Sequence alignment ID": {
                "axiom": {
                    "subClassOf": [
                        "Identifier (typed)",
                        "Accession"
                    ],
                    "propertyRestrictions": [
                        "[is identifier of some Sequence alignment]"
                    ]
                },
                "description": "Sequence alignment ID is defined as a subclass of both Identifier (typed) and Accession, and is restricted such that it serves as an identifier for some Sequence alignment instance. It is used as the identifier of a molecular sequence alignment, for example a record from an alignment database. This formalization ensures that any instance of Sequence alignment ID uniquely identifies a sequence alignment, and maintains compatibility with identifier and accession structures in related ontologies.",
                "CQ": [
                    {
                        "axiom": "Sequence alignment ID subClassOf Identifier (typed)",
                        "CQ": [
                            "Is Sequence alignment ID classified as a specific kind of Identifier?",
                            "What identifiers encompass Sequence alignment ID as a more specialized form?",
                            "Which broader categories include Sequence alignment ID within the Identifier hierarchy?"
                        ]
                    },
                    {
                        "axiom": "Sequence alignment ID subClassOf Accession",
                        "CQ": [
                            "Is Sequence alignment ID categorized as a type of Accession?",
                            "Which specific identifiers are subclasses of Accession, including Sequence alignment ID?",
                            "To which broader ontological group does Sequence alignment ID belong?"
                        ]
                    },
                    {
                        "axiom": "Sequence alignment ID propertyRestrictions [is identifier of some Sequence alignment]",
                        "CQ": [
                            "Is it required for an identifier to always refer to at least one sequence alignment?",
                            "Does every value of the sequence alignment ID property correspond to a sequence alignment instance?",
                            "Can a sequence alignment ID exist without being the identifier of any sequence alignment?"
                        ]
                    }
                ]
            },
            "outline document format": {
                "axiom": {
                    "subClassOf": [
                        "data format specification"
                    ]
                },
                "description": "outline document format is defined as a subclass of data format specification. This means it represents a specific type of data format specification focused on encoding or structuring outline documents, distinguishing it from other forms of data format specifications.",
                "CQ": [
                    {
                        "axiom": "outline document format subClassOf data format specification",
                        "CQ": [
                            "Is outline document format classified under data format specification?",
                            "Which types are encompassed by data format specification, such as outline document format?",
                            "What higher-level categories does outline document format fall within?"
                        ]
                    }
                ]
            },
            "Local-pooled-error": {
                "axiom": {
                    "subClassOf": [
                        "algorithm"
                    ]
                },
                "description": "Local-pooled-error is defined as a subclass of algorithm, indicating that it represents a specific type of algorithm. No further restrictions or distinguishing axioms are specified, so any instance of local-pooled-error must also be an instance of algorithm.",
                "CQ": [
                    {
                        "axiom": "Local-pooled-error subClassOf algorithm",
                        "CQ": [
                            "Does Local-pooled-error fall under the general category of algorithm?",
                            "What are the specific types of algorithm that include Local-pooled-error?",
                            "To which broader classes does Local-pooled-error belong in the ontology hierarchy?"
                        ]
                    }
                ]
            },
            "Gene ID (JCVI)": {
                "axiom": {
                    "subClassOf": [
                        "Gene ID"
                    ]
                },
                "description": "Gene ID (JCVI) is a subclass of Gene ID and represents a unique identifier assigned to a gene by the J. Craig Venter Institute (JCVI). This ensures distinct identification and referencing of genes specifically annotated by JCVI within biological databases.",
                "CQ": [
                    {
                        "axiom": "Gene ID (JCVI) subClassOf Gene ID",
                        "CQ": [
                            "Does Gene ID (JCVI) represent a specialized form of Gene ID?",
                            "What specific identifiers are encompassed by the broader category Gene ID, such as Gene ID (JCVI)?",
                            "To which general identifier classes does Gene ID (JCVI) belong?"
                        ]
                    }
                ]
            },
            "Nucleic acid property": {
                "axiom": {
                    "subClassOf": [
                        "Molecular property"
                    ]
                },
                "description": "Nucleic acid property is a subclass of Molecular property, representing reports that primarily describe intrinsic physical, chemical, or other properties of nucleic acid molecules, rather than their position in a sequence. This class encompasses broad data types, typically based on the analysis of nucleic acid sequence or structural data, and serves as a placeholder for more specific nucleic acid property types.",
                "CQ": [
                    {
                        "axiom": "Nucleic acid property subClassOf Molecular property",
                        "CQ": [
                            "Does every Nucleic acid property fall under the broader group of Molecular properties?",
                            "What specific properties are categorized under Molecular property, such as Nucleic acid property?",
                            "Which higher-level classes encompass the Nucleic acid property category?"
                        ]
                    }
                ]
            },
            "Secondary structure processing": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Secondary structure processing is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer in active use within the EDAM ontology. This class refers to processes involving the reading and/or writing of molecular secondary structure, encompassing the handling or manipulation of such structural information.",
                "CQ": [
                    {
                        "axiom": "Secondary structure processing subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Secondary structure processing categorized under Obsolete concept (EDAM)?",
                            "Which concepts are defined as subclasses of Obsolete concept (EDAM)?",
                            "To what higher-level groupings does Secondary structure processing belong?"
                        ]
                    }
                ]
            },
            "Affymetrix probe sets library file": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Affymetrix probe sets library file is defined as a subclass of Obsolete concept (EDAM). This class refers to an Affymetrix library file containing information about which probes belong to which probe set. As it is classified under obsolete concepts, it is considered deprecated within the ontology.",
                "CQ": [
                    {
                        "axiom": "Affymetrix probe sets library file subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Affymetrix probe sets library file classified as an instance of the broader Obsolete concept (EDAM)?",
                            "Which specific concepts are categorized under Obsolete concept (EDAM), such as Affymetrix probe sets library file?",
                            "What broader conceptual groups include Affymetrix probe sets library file?"
                        ]
                    }
                ]
            },
            "Reference map name (SWISS-2DPAGE)": {
                "axiom": {
                    "subClassOf": [
                        "Name",
                        "Gel ID"
                    ]
                },
                "description": "Reference map name (SWISS-2DPAGE) is defined as a subclass of both Name and Gel ID, indicating it inherits characteristics from these classes. It specifically refers to the name assigned to a reference map gel within the SWISS-2DPAGE database, uniquely identifying such gels for reference and data integration purposes.",
                "CQ": [
                    {
                        "axiom": "Reference map name (SWISS-2DPAGE) subClassOf Name",
                        "CQ": [
                            "Is Reference map name (SWISS-2DPAGE) classified as a type of Name?",
                            "Which specific subclasses are encompassed by the Name category, such as Reference map name (SWISS-2DPAGE)?",
                            "What broader categories include Reference map name (SWISS-2DPAGE) as a subclass?"
                        ]
                    },
                    {
                        "axiom": "Reference map name (SWISS-2DPAGE) subClassOf Gel ID",
                        "CQ": [
                            "Does Reference map name (SWISS-2DPAGE) fall under the category of Gel ID?",
                            "Which types are classified as more specific than Gel ID, such as Reference map name (SWISS-2DPAGE)?",
                            "To which broader class or classes does Reference map name (SWISS-2DPAGE) belong?"
                        ]
                    }
                ]
            },
            "NCBI taxonomy ID": {
                "axiom": {
                    "subClassOf": [
                        "Ontology concept ID",
                        "Organism accession"
                    ]
                },
                "description": "NCBI taxonomy ID is defined as a subclass of both Ontology concept ID and Organism accession. This class represents a stable, unique identifier assigned to each taxonomic group (such as species, family, order, or any other rank) in the NCBI taxonomy database. It provides a persistent and distinct reference for organisms within the taxonomy framework.",
                "CQ": [
                    {
                        "axiom": "NCBI taxonomy ID subClassOf Ontology concept ID",
                        "CQ": [
                            "Is the NCBI taxonomy ID classified as a type of Ontology concept ID?",
                            "Which identifiers are subclasses of Ontology concept ID, including NCBI taxonomy ID?",
                            "What broader categories encompass the NCBI taxonomy ID as a subclass?"
                        ]
                    },
                    {
                        "axiom": "NCBI taxonomy ID subClassOf Organism accession",
                        "CQ": [
                            "Is every NCBI taxonomy ID classified under Organism accession?",
                            "Which specific types are encompassed by Organism accession, including NCBI taxonomy ID?",
                            "Under which broader categories is NCBI taxonomy ID organized?"
                        ]
                    }
                ]
            },
            "Sequence-profile alignment (Domainatrix signature)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Sequence-profile alignment (Domainatrix signature) is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer in active use or recommended for current applications. This class represents the alignment of molecular sequences to a Domainatrix signature, where the signature itself embodies a sequence alignment. This concept is retained for historical or reference purposes within the ontology.",
                "CQ": [
                    {
                        "axiom": "Sequence-profile alignment (Domainatrix signature) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Sequence-profile alignment (Domainatrix signature) classified under the broader category of Obsolete concept (EDAM)?",
                            "What are the more specific concepts included within Obsolete concept (EDAM), such as Sequence-profile alignment (Domainatrix signature)?",
                            "Which higher-level categories does Sequence-profile alignment (Domainatrix signature) fall under?"
                        ]
                    }
                ]
            },
            "Primer3 internal oligo mishybridizing library": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Primer3 internal oligo mishybridizing library is a subclass of Obsolete concept (EDAM). It represents a library of nucleotide sequences specifically designated to be avoided during hybridization events involving internal oligos. The purpose of this library is to prevent internal oligos from hybridizing to these sequences, rather than initiating priming from them. The library data is provided in a restricted FASTA format. As a member of the \"Obsolete concept (EDAM)\" category, this concept is no longer recommended for current use.",
                "CQ": [
                    {
                        "axiom": "Primer3 internal oligo mishybridizing library subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Does Primer3 internal oligo mishybridizing library fall under the general classification of Obsolete concept (EDAM)?",
                            "What specialized concepts are subsumed by Obsolete concept (EDAM), including Primer3 internal oligo mishybridizing library?",
                            "Which broader classes include Primer3 internal oligo mishybridizing library as a member?"
                        ]
                    }
                ]
            },
            "Calculation": {
                "axiom": {
                    "subClassOf": [
                        "Analysis"
                    ]
                },
                "description": "Calculation is defined as a subclass of Analysis. This class encompasses mathematical determinations of the value of something, typically a property of a molecule. Any individual of this class represents a process or act in which a quantitative or qualitative property—especially of a molecule—is derived through mathematical means, reflecting its analytical role within the ontology.",
                "CQ": [
                    {
                        "axiom": "Calculation subClassOf Analysis",
                        "CQ": [
                            "Is Calculation categorized as a specific type of Analysis?",
                            "What specialized concepts fall under the broader class of Analysis, such as Calculation?",
                            "Which broader classes does Calculation belong to within the ontology?"
                        ]
                    }
                ]
            },
            "genomeIntervals": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[is executed in some descriptive statistical calculation]",
                        "[is published by hasValue Bioconductor]",
                        "[has specified data output some [has format specification only R data frame]]",
                        "[is encoded in some R language]",
                        "[has specified data input some [has format specification only (GFF and R data frame)]]"
                    ]
                },
                "description": "genomeIntervals is defined as a subclass of software, specifically designed for execution in descriptive statistical calculations within genomics contexts. Instances of this class are published exclusively by Bioconductor, and are encoded in the R programming language. They accept input data strictly in GFF or R data frame formats, and produce output data solely as R data frames. This formalization ensures that any genomeIntervals resource adheres to Bioconductor's publication standards, operates within the R ecosystem, and supports defined data interoperability via precise input/output format restrictions.",
                "CQ": [
                    {
                        "axiom": "genomeIntervals subClassOf software",
                        "CQ": [
                            "Are genomeIntervals categorized under the broader class of software?",
                            "What software subclasses include genomeIntervals as a type?",
                            "Which general classifications encompass genomeIntervals besides software?"
                        ]
                    },
                    {
                        "axiom": "genomeIntervals propertyRestrictions [is executed in some descriptive statistical calculation]",
                        "CQ": [
                            "Is it required that genome intervals participate in at least one descriptive statistical calculation?",
                            "Does every instance of genome intervals engage in a descriptive statistical calculation through the 'is executed in' property?",
                            "Can a genome interval exist without being executed in any descriptive statistical calculation?"
                        ]
                    },
                    {
                        "axiom": "genomeIntervals propertyRestrictions [is published by hasValue Bioconductor]",
                        "CQ": [
                            "Must every genome interval be published exclusively by Bioconductor?",
                            "Is it required that genome intervals have the publishing source set only to Bioconductor?",
                            "Are genome intervals allowed to be published by any entity other than Bioconductor according to this restriction?"
                        ]
                    },
                    {
                        "axiom": "genomeIntervals propertyRestrictions [has specified data output some [has format specification only R data frame]]",
                        "CQ": [
                            "Must every data output specified by genomeIntervals be in the format of an R data frame?",
                            "Is it required that the specified data output for genomeIntervals includes at least one output which only takes the format of an R data frame?",
                            "Can genomeIntervals have specified data outputs that are not restricted solely to the R data frame format?"
                        ]
                    },
                    {
                        "axiom": "genomeIntervals propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Must every genome interval be encoded in at least one entity of type R language?",
                            "Is it a requirement for genome intervals to possess an encoding relationship with something classified as R language?",
                            "Can a genome interval exist without being associated through 'is encoded in' to any instance of R language?"
                        ]
                    },
                    {
                        "axiom": "genomeIntervals propertyRestrictions [has specified data input some [has format specification only (GFF and R data frame)]]",
                        "CQ": [
                            "Is it required that genomeIntervals has at least one specified data input whose format specification includes both GFF and R data frame?",
                            "Can a genomeIntervals entity have a specified data input with a format specification that is not restricted to both GFF and R data frame?",
                            "Does the property restriction mean that all specified data inputs for genomeIntervals must satisfy the condition of having both GFF and R data frame as their format specification?"
                        ]
                    }
                ]
            },
            "Python 2.6": {
                "axiom": {
                    "subClassOf": [
                        "Python"
                    ],
                    "propertyRestrictions": [
                        "[has version hasValue Python version 2.6]"
                    ]
                },
                "description": "Python 2.6 is defined as a subclass of Python and is distinguished by having the property 'has version' with the specific value 'Python version 2.6'. Any individual belonging to this class must be a Python entity whose version is explicitly set to 2.6. This formalization unambiguously identifies entities representing the Python 2.6 release.",
                "CQ": [
                    {
                        "axiom": "Python 2.6 subClassOf Python",
                        "CQ": [
                            "Does Python 2.6 fall under the broader classification of Python?",
                            "Which versions or variants are subclasses of Python, including Python 2.6?",
                            "Of which higher-level software languages is Python 2.6 a specific instance?"
                        ]
                    },
                    {
                        "axiom": "Python 2.6 propertyRestrictions [has version hasValue Python version 2.6]",
                        "CQ": [
                            "Does Python 2.6 necessarily have the property 'has version' with the value Python version 2.6?",
                            "Can a system described as Python 2.6 have a 'has version' property relating to any value besides Python version 2.6?",
                            "Is it required that all instances of Python 2.6 are uniquely associated with the version value 'Python version 2.6' through the 'has version' property?"
                        ]
                    }
                ]
            },
            "Quadruplex formation site detection": {
                "axiom": {
                    "subClassOf": [
                        "Nucleic acid sequence feature detection"
                    ],
                    "propertyRestrictions": [
                        "[has topic some Nucleic acid structure prediction]",
                        "[has output some Nucleic acid structure report]"
                    ]
                },
                "description": "Quadruplex formation site detection is a subclass of nucleic acid sequence feature detection, specifically focused on identifying regions within nucleotide sequences capable of forming quadruplex (4-stranded) structures. These quadruplexes, typically arising from guanine-rich regions, play important roles in biological processes and are potential therapeutic targets. The class is characterized by its association with nucleic acid structure prediction as a topic and the output of nucleic acid structure reports, ensuring that any instance of this class involves the detection and reporting of quadruplex-forming motifs.",
                "CQ": [
                    {
                        "axiom": "Quadruplex formation site detection subClassOf Nucleic acid sequence feature detection",
                        "CQ": [
                            "Is Nucleic acid sequence feature detection a broader class that encompasses Quadruplex formation site detection?",
                            "Which types of Nucleic acid sequence feature detection include subclasses such as Quadruplex formation site detection?",
                            "What higher-level detection categories does Quadruplex formation site detection fall under?"
                        ]
                    },
                    {
                        "axiom": "Quadruplex formation site detection propertyRestrictions [has topic some Nucleic acid structure prediction]",
                        "CQ": [
                            "Is it required that a quadruplex formation site detection involves a topic related to nucleic acid structure prediction?",
                            "Can a quadruplex formation site detection be associated with topics outside of nucleic acid structure prediction?",
                            "Does every quadruplex formation site detection reference at least one nucleic acid structure prediction topic?"
                        ]
                    },
                    {
                        "axiom": "Quadruplex formation site detection propertyRestrictions [has output some Nucleic acid structure report]",
                        "CQ": [
                            "Does the detection of a quadruplex formation site require producing at least one nucleic acid structure report as output?",
                            "Is it necessary that any output generated by quadruplex formation site detection includes a nucleic acid structure report?",
                            "Can the output of quadruplex formation site detection be something other than a nucleic acid structure report?"
                        ]
                    }
                ]
            },
            "MIRIAM data type name": {
                "axiom": {
                    "subClassOf": [
                        "Data resource definition name"
                    ],
                    "propertyRestrictions": [
                        "[is identifier of some Database metadata]"
                    ]
                },
                "description": "MIRIAM data type name is a subclass of Data resource definition name, representing the name of a data type sourced from the MIRIAM database. Additionally, each instance serves as an identifier for some Database metadata. This ensures that every MIRIAM data type name uniquely references metadata within a database context, as per the definition from MIRIAM.",
                "CQ": [
                    {
                        "axiom": "MIRIAM data type name subClassOf Data resource definition name",
                        "CQ": [
                            "Does MIRIAM data type name fall under the category of Data resource definition name?",
                            "Which data type names are included as subtypes of Data resource definition name?",
                            "What higher-level classifications include the MIRIAM data type name?"
                        ]
                    },
                    {
                        "axiom": "MIRIAM data type name propertyRestrictions [is identifier of some Database metadata]",
                        "CQ": [
                            "Does every MIRIAM data type name have the property 'is identifier of' with at least one Database metadata?",
                            "Is it necessary for a MIRIAM data type name to serve as an identifier for some Database metadata?",
                            "Can a MIRIAM data type name exist without being an identifier for any Database metadata?"
                        ]
                    }
                ]
            },
            "cghMCR": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[is published by hasValue Bioconductor]",
                        "[is executed in some data normalization]",
                        "[has specified data output some (Graph plot and [has format specification only R data frame])]",
                        "[is encoded in some R language]",
                        "[implements some MCR algorithm]",
                        "[has specified data input some [has format specification only R data frame]]"
                    ]
                },
                "description": "cghMCR is defined as a subclass of software, specifically characterized by implementation of some MCR (Minimum Common Regions) algorithm. Instances of this class are published exclusively by Bioconductor and are implemented in the R programming language. cghMCR operates within data normalization processes, requiring as input data with the format specification of an R data frame, and outputs either graphical plots or data conforming to the R data frame format. This ensures that cghMCR software tools conform to standardized input/output requirements and are integrated with Bioconductor’s platform for bioinformatics analysis.",
                "CQ": [
                    {
                        "axiom": "cghMCR subClassOf software",
                        "CQ": [
                            "Is cghMCR categorized under the broader class of software?",
                            "Which entities are specified as subclasses of software, such as cghMCR?",
                            "To what parent classes is cghMCR directly associated in the ontology?"
                        ]
                    },
                    {
                        "axiom": "cghMCR propertyRestrictions [is published by hasValue Bioconductor]",
                        "CQ": [
                            "Is cghMCR always published by Bioconductor?",
                            "Can cghMCR be published by any publisher other than Bioconductor?",
                            "Is it required that cghMCR is associated with the publisher Bioconductor?"
                        ]
                    },
                    {
                        "axiom": "cghMCR propertyRestrictions [is executed in some data normalization]",
                        "CQ": [
                            "Does every cghMCR instance require execution within a data normalization process?",
                            "Is it necessary for cghMCR to be associated with at least one occurrence of data normalization execution?",
                            "Can a cghMCR exist without being linked to any data normalization activity?"
                        ]
                    },
                    {
                        "axiom": "cghMCR propertyRestrictions [has specified data output some (Graph plot and [has format specification only R data frame])]",
                        "CQ": [
                            "Does every data output specified by cghMCR necessarily include both a graph plot and a format limited exclusively to R data frames?",
                            "Can cghMCR provide a data output that is a graph plot in a format other than an R data frame?",
                            "Is it required that the specified data output of cghMCR comprises a graph plot formatted only as an R data frame, without allowance for other output types or formats?"
                        ]
                    },
                    {
                        "axiom": "cghMCR propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is it required that every cghMCR is encoded in at least one R language?",
                            "Can a cghMCR exist without being encoded in an R language?",
                            "Does the existence of a cghMCR imply the presence of an associated R language encoding?"
                        ]
                    },
                    {
                        "axiom": "cghMCR propertyRestrictions [implements some MCR algorithm]",
                        "CQ": [
                            "Is it required that cghMCR implements at least one MCR algorithm?",
                            "Can there exist a cghMCR instance that does not implement any MCR algorithm?",
                            "Does every cghMCR necessarily establish an implementation relation with some MCR algorithm?"
                        ]
                    },
                    {
                        "axiom": "cghMCR propertyRestrictions [has specified data input some [has format specification only R data frame]]",
                        "CQ": [
                            "Is it required that a cghMCR property restriction must only have data input in the format of an R data frame?",
                            "Can a cghMCR property restriction involve specified data input in any format other than R data frame?",
                            "Must every specified data input for cghMCR property restrictions comply exclusively with the 'has format specification' of R data frame?"
                        ]
                    }
                ]
            },
            "ChipReader 3.1": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[output of some (software publishing process and [has participant hasValue Bio-Rad Laboratories, Inc.])]"
                    ]
                },
                "description": "ChipReader 3.1 is defined as a subclass of software. Any instance of ChipReader 3.1 is the output of at least one software publishing process in which Bio-Rad Laboratories, Inc. is a participant. This formalization captures the provenance of ChipReader 3.1, ensuring that each instance is uniquely associated with publishing activities involving Bio-Rad Laboratories, Inc.",
                "CQ": [
                    {
                        "axiom": "ChipReader 3.1 subClassOf software",
                        "CQ": [
                            "Is ChipReader 3.1 classified under the category of software?",
                            "What are the specific subclasses that fall within software, such as ChipReader 3.1?",
                            "Which broader classes encompass ChipReader 3.1?"
                        ]
                    },
                    {
                        "axiom": "ChipReader 3.1 propertyRestrictions [output of some (software publishing process and [has participant hasValue Bio-Rad Laboratories, Inc.])]",
                        "CQ": [
                            "Does a ChipReader always produce output from at least one software publishing process that involves Bio-Rad Laboratories, Inc. as a participant?",
                            "Can a ChipReader generate any output without being linked to a software publishing process in which Bio-Rad Laboratories, Inc. participates?",
                            "Is it necessary for every ChipReader output to originate from a software publishing process that includes Bio-Rad Laboratories, Inc. as a participant?"
                        ]
                    }
                ]
            },
            "Strain data format": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Strain data format is defined as a subclass of the obsolete concept (EDAM), indicating that it is no longer actively maintained or recommended for use. It refers to the format used for reports on organism strain data or cell lines. This classification suggests that while historically relevant, this data format is now superseded or discouraged in current practices.",
                "CQ": [
                    {
                        "axiom": "Strain data format subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Strain data format classified as a type of Obsolete concept (EDAM)?",
                            "Which data formats fall under the broader category of Obsolete concept (EDAM)?",
                            "What more general categories include Strain data format within the ontology?"
                        ]
                    }
                ]
            },
            "Distribution clause": {
                "axiom": {
                    "subClassOf": [
                        "license clause"
                    ]
                },
                "description": "Distribution clause is defined as a subclass of license clause, indicating that it represents a specific type or aspect of licensing terms. Any individual of Distribution clause inherently possesses all characteristics of a license clause, but with additional specialization relevant to distribution-related conditions within a license.",
                "CQ": [
                    {
                        "axiom": "Distribution clause subClassOf license clause",
                        "CQ": [
                            "Is a distribution clause categorized as a type of license clause?",
                            "What broader classes encompass a distribution clause, such as license clause?",
                            "Which specific clauses fall under the classification of license clause, including distribution clause?"
                        ]
                    }
                ]
            },
            "DNDC": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[has interface some graphical user interface]",
                        "[has website homepage hasValue ns15:dndc.html]",
                        "[has specified data input some (data and [has format specification some tab delimited file format])]",
                        "[output of some (software development process and [has participant hasValue University of New Hampshire])]",
                        "[has interface some command-line interface]",
                        "[is executed in some modelling]",
                        "[has website homepage hasValue http://www.dndc.sr.unh.edu/]"
                    ]
                },
                "description": "DNDC is a subclass of software, specifically described as a Soil Chemistry Model. It is characterized by having both graphical user interface (GUI) and command-line interface (CLI) options for user interaction. The software is accessible online, with its homepage given as both ns15:dndc.html and http://www.dndc.sr.unh.edu/. DNDC requires as input data that conforms to a tab-delimited file format. The output of DNDC results from a software development process involving the University of New Hampshire as a participant. Furthermore, DNDC is used within the context of modelling.",
                "CQ": [
                    {
                        "axiom": "DNDC subClassOf software",
                        "CQ": [
                            "Is DNDC classified under the broader category of software?",
                            "Which entities are specific instances within the software class, such as DNDC?",
                            "What higher-level categories encompass DNDC in the ontology?"
                        ]
                    },
                    {
                        "axiom": "DNDC propertyRestrictions [has interface some graphical user interface]",
                        "CQ": [
                            "Is every DNDC instance required to have at least one graphical user interface as an interface?",
                            "Can DNDC possess an interface type that is not a graphical user interface?",
                            "Is the existence of a graphical user interface mandatory for every DNDC interface relationship?"
                        ]
                    },
                    {
                        "axiom": "DNDC propertyRestrictions [has website homepage hasValue ns15:dndc.html]",
                        "CQ": [
                            "Must every instance of DNDC have the website homepage property set specifically to ns15:dndc.html?",
                            "Can the website homepage of a DNDC instance be assigned any value other than ns15:dndc.html?",
                            "Is ns15:dndc.html the exclusive value permitted for the website homepage property of DNDC?"
                        ]
                    },
                    {
                        "axiom": "DNDC propertyRestrictions [has specified data input some (data and [has format specification some tab delimited file format])]",
                        "CQ": [
                            "Is every DNDC required to have at least one specified data input that is a data entity with a format specification of tab delimited file format?",
                            "Does DNDC necessitate that its specified data input includes a data object whose format specification involves tab delimited file format?",
                            "Can DNDC have a specified data input which is not a data entity formatted as a tab delimited file format?"
                        ]
                    },
                    {
                        "axiom": "DNDC propertyRestrictions [output of some (software development process and [has participant hasValue University of New Hampshire])]",
                        "CQ": [
                            "Does DNDC necessarily output something that is a software development process involving the University of New Hampshire as a participant?",
                            "Is every output of DNDC required to be both a software development process and to have the University of New Hampshire as a participant?",
                            "Can DNDC produce any output that does not correspond to a software development process with the University of New Hampshire as a participant?"
                        ]
                    },
                    {
                        "axiom": "DNDC propertyRestrictions [has interface some command-line interface]",
                        "CQ": [
                            "Is it required that every DNDC has at least one command-line interface?",
                            "Can a DNDC exist without being associated with any command-line interface?",
                            "Does the DNDC entity necessarily provide access through a command-line interface?"
                        ]
                    },
                    {
                        "axiom": "DNDC propertyRestrictions [is executed in some modelling]",
                        "CQ": [
                            "Must every instance of DNDC be executed in at least one modelling process?",
                            "Is it required that DNDC is associated with execution in some form of modelling?",
                            "Does the ontology entail that DNDC cannot exist without being executed in a modelling activity?"
                        ]
                    },
                    {
                        "axiom": "DNDC propertyRestrictions [has website homepage hasValue http://www.dndc.sr.unh.edu/]",
                        "CQ": [
                            "Must every instance of DNDC have its website homepage set to http://www.dndc.sr.unh.edu/?",
                            "Is it required that DNDC's website homepage is exclusively http://www.dndc.sr.unh.edu/?",
                            "Can DNDC reference any other website homepage value besides http://www.dndc.sr.unh.edu/?"
                        ]
                    }
                ]
            },
            "Protein sites and features": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Protein sites and features is defined as a subclass of the obsolete concept (EDAM), indicating that this class is deprecated and should not be used for new annotation. It refers to topics concerning the detection, identification, and analysis of positional features in proteins, such as functional sites. This class is preserved for historic or compatibility purposes rather than active use in current ontology models.",
                "CQ": [
                    {
                        "axiom": "Protein sites and features subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Are all protein sites and features categorized under the obsolete concept in EDAM?",
                            "Which specific subclasses fall within the obsolete concept (EDAM), including protein sites and features?",
                            "What broader ontology classes encompass protein sites and features in EDAM?"
                        ]
                    }
                ]
            },
            "Gene ID (MIPS Maize)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Gene ID (MIPS Maize) is defined as an identifier for genetic elements specific to the MIPS Maize database. This class is a subclass of Obsolete concept (EDAM), indicating that it is no longer recommended for use in contemporary ontological modeling or data annotation. Its usage is primarily historical or for legacy data referencing within the scope of MIPS Maize genetic element identification.",
                "CQ": [
                    {
                        "axiom": "Gene ID (MIPS Maize) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Does Gene ID (MIPS Maize) fall under the broader classification of Obsolete concept (EDAM)?",
                            "Which concepts are directly classified as Obsolete concept (EDAM) and include Gene ID (MIPS Maize)?",
                            "What are the parent classes associated with Gene ID (MIPS Maize)?"
                        ]
                    }
                ]
            },
            "Ensembl ID ('Monodelphis domestica')": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Ensembl ID ('Monodelphis domestica') is defined as a subclass of Obsolete concept (EDAM). This class represents identifiers for entries such as exons, genes, transcripts, or proteins from the Ensembl 'core' database specific to the 'Monodelphis domestica' division. The obsolete status indicates that this identifier or concept is no longer recommended for current use.",
                "CQ": [
                    {
                        "axiom": "Ensembl ID ('Monodelphis domestica') subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Monodelphis domestica Ensembl ID classified under the category of Obsolete concept in EDAM?",
                            "Which Ensembl IDs are designated as subclasses of Obsolete concept (EDAM)?",
                            "What broader EDAM concepts encompass the Ensembl ID for Monodelphis domestica?"
                        ]
                    }
                ]
            },
            "Feature Extraction Software": {
                "axiom": {
                    "subClassOf": [
                        "Affymetrix GeneChip Operating Software"
                    ],
                    "propertyRestrictions": [
                        "[is executed in some feature extraction]"
                    ]
                },
                "description": "Feature Extraction Software is defined as a subclass of Affymetrix GeneChip Operating Software. Members of this class are characterized by their involvement in the execution of at least one feature extraction process. This ensures that any instance of Feature Extraction Software is specialized for or utilized in performing feature extraction tasks within the context of Affymetrix GeneChip operations.",
                "CQ": [
                    {
                        "axiom": "Feature Extraction Software subClassOf Affymetrix GeneChip Operating Software",
                        "CQ": [
                            "Is Feature Extraction Software classified under Affymetrix GeneChip Operating Software?",
                            "What specific types of software are encompassed by Affymetrix GeneChip Operating Software, including Feature Extraction Software?",
                            "Which broader software categories does Feature Extraction Software fall within?"
                        ]
                    },
                    {
                        "axiom": "Feature Extraction Software propertyRestrictions [is executed in some feature extraction]",
                        "CQ": [
                            "Must every Feature Extraction Software be associated with at least one instance of execution within a feature extraction process?",
                            "Is it a requirement that Feature Extraction Software instances operate within some kind of feature extraction context?",
                            "Can Feature Extraction Software exist without being executed in any feature extraction activity?"
                        ]
                    }
                ]
            },
            "Phylogenetic tree distances calculation": {
                "axiom": {
                    "subClassOf": [
                        "Phylogenetic tree comparison"
                    ],
                    "propertyRestrictions": [
                        "[has output some Phylogenetic tree distances]"
                    ]
                },
                "description": "Phylogenetic tree distances calculation is a subclass of Phylogenetic tree comparison, representing the process of comparing two or more phylogenetic trees specifically to calculate distances between them. Any instance of this class must have at least one output that is a type of Phylogenetic tree distances. This formalizes the concept of measuring differences or similarities between phylogenetic trees by producing quantitative distance values as results.",
                "CQ": [
                    {
                        "axiom": "Phylogenetic tree distances calculation subClassOf Phylogenetic tree comparison",
                        "CQ": [
                            "Is phylogenetic tree distances calculation classified under the broader activity of phylogenetic tree comparison?",
                            "What are the specific methods that fall within phylogenetic tree comparison, such as phylogenetic tree distances calculation?",
                            "Which general categories encompass phylogenetic tree distances calculation?"
                        ]
                    },
                    {
                        "axiom": "Phylogenetic tree distances calculation propertyRestrictions [has output some Phylogenetic tree distances]",
                        "CQ": [
                            "Does every instance of 'Phylogenetic tree distances calculation propertyRestrictions' necessarily produce at least one output of type 'Phylogenetic tree distances'?",
                            "Is it required that a 'Phylogenetic tree distances calculation propertyRestrictions' process has an output that is a 'Phylogenetic tree distances' entity?",
                            "Can a 'Phylogenetic tree distances calculation propertyRestrictions' exist without generating any 'Phylogenetic tree distances' as output?"
                        ]
                    }
                ]
            },
            "Free": {
                "axiom": {
                    "subClassOf": [
                        "Purchase cost"
                    ]
                },
                "description": "Free is defined as a subclass of Purchase cost, representing instances where the cost of software is zero. This class exclusively addresses the price aspect of software and does not pertain to the broader definition of \"free software\" as established by the GNU Project, which emphasizes user freedoms and community rights. The scope of this class is limited solely to monetary cost, clarifying that \"free\" in this context means no purchase payment is required for the software.",
                "CQ": [
                    {
                        "axiom": "Free subClassOf Purchase cost",
                        "CQ": [
                            "Is Free regarded as a specialized form of Purchase cost?",
                            "Which specific purchase costs include Free as an instance or subclass?",
                            "Under what broader purchase cost categories does Free fall?"
                        ]
                    }
                ]
            },
            "Alignment format (XML)": {
                "axiom": {
                    "subClassOf": [
                        "Alignment format"
                    ]
                },
                "description": "Alignment format (XML) is a subclass of Alignment format, specifically representing the XML-based standard used for encoding molecular sequence alignment information. This class formalizes alignment data expressed in XML format, ensuring structured, standardized representation and exchange within bioinformatics workflows.",
                "CQ": [
                    {
                        "axiom": "Alignment format (XML) subClassOf Alignment format",
                        "CQ": [
                            "Is Alignment format (XML) categorized as a kind of Alignment format?",
                            "What are the direct subclasses found under Alignment format, including Alignment format (XML)?",
                            "Which higher-level classification groups include Alignment format (XML)?"
                        ]
                    }
                ]
            },
            "Proteolytic digest": {
                "axiom": {
                    "subClassOf": [
                        "Sequence set (protein)"
                    ],
                    "propertyRestrictions": [
                        "[has topic some Proteomics]"
                    ]
                },
                "description": "Proteolytic digest is defined as a subclass of Sequence set (protein), where each instance is characterized by having some association with the topic of Proteomics. According to its description, a proteolytic digest consists of a protein sequence that has been cleaved into peptide fragments—either enzymatically or chemically—with known fragment masses. This class formalization ensures that any proteolytic digest is a specialized set of protein sequences relevant to studies or analyses in proteomics.",
                "CQ": [
                    {
                        "axiom": "Proteolytic digest subClassOf Sequence set (protein)",
                        "CQ": [
                            "Is Proteolytic digest classified under the broader category of Sequence set (protein)?",
                            "Which subclasses are encompassed by Sequence set (protein), including Proteolytic digest?",
                            "What general categories does Proteolytic digest fall under within the ontology?"
                        ]
                    },
                    {
                        "axiom": "Proteolytic digest propertyRestrictions [has topic some Proteomics]",
                        "CQ": [
                            "Is every proteolytic digest associated with at least one topic in proteomics?",
                            "Must a proteolytic digest necessarily have a topic that relates to proteomics?",
                            "Can a proteolytic digest exist without being linked to proteomics as a topic?"
                        ]
                    }
                ]
            },
            "Virus annotation (taxonomy)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Virus annotation (taxonomy) is defined as a subclass of Obsolete concept (EDAM), indicating that it is considered outdated within the context of the ontology. It is described as an informative report on the taxonomy of a specific virus, providing taxonomic classification details relevant to viral species.",
                "CQ": [
                    {
                        "axiom": "Virus annotation (taxonomy) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Virus annotation (taxonomy) categorized under Obsolete concept (EDAM)?",
                            "Which concepts are specialized forms of Obsolete concept (EDAM), such as Virus annotation (taxonomy)?",
                            "What broader classifications encompass Virus annotation (taxonomy) within the ontology?"
                        ]
                    }
                ]
            },
            "Databank": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Databank is defined as a subclass of the obsolete concept (EDAM), indicating that it represents a concept no longer in active use. It is described as a flat-file (textual) data archive, typically meaning a structured collection of data stored in plain text format, rather than in a relational database or other advanced data management system. This class formalizes the notion of simple, text-based data repositories that have since been superseded by more modern data management paradigms.",
                "CQ": [
                    {
                        "axiom": "Databank subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Databank classified as a type of Obsolete concept (EDAM)?",
                            "Which concepts are categorized under Obsolete concept (EDAM), including Databank?",
                            "What more general concepts encompass Databank within the ontology?"
                        ]
                    }
                ]
            },
            "Mass spectrometry experiment": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Mass spectrometry experiment is a subclass of Obsolete concept (EDAM), indicating that it represents a topic or category that is now considered outdated within the EDAM framework. It is defined as a topic concerning mass spectrometry experiments, relating to experimental procedures or studies utilizing mass spectrometry techniques.",
                "CQ": [
                    {
                        "axiom": "Mass spectrometry experiment subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Mass spectrometry experiment classified under the broader group of Obsolete concept (EDAM)?",
                            "Which specific experimental types fall within the category of Obsolete concept (EDAM)?",
                            "What higher-level concepts encompass Mass spectrometry experiment in this ontology?"
                        ]
                    }
                ]
            },
            "Sequence composition calculation (nucleic acid)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Sequence composition calculation (nucleic acid) is defined as a subclass of Obsolete concept (EDAM). It refers to methods or processes used to calculate the base frequency or word (oligonucleotide) composition within a nucleotide sequence. This concept is considered obsolete in the EDAM ontology.",
                "CQ": [
                    {
                        "axiom": "Sequence composition calculation (nucleic acid) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Sequence composition calculation (nucleic acid) categorized under Obsolete concept (EDAM)?",
                            "Which specific concepts fall under the Obsolete concept (EDAM) category, including Sequence composition calculation (nucleic acid)?",
                            "What broader category does Sequence composition calculation (nucleic acid) belong to within the ontology?"
                        ]
                    }
                ]
            },
            "RefSeq accession": {
                "axiom": {
                    "subClassOf": [
                        "Sequence accession (hybrid)"
                    ]
                },
                "description": "RefSeq accession is defined as a subclass of Sequence accession (hybrid) and represents an accession number uniquely identifying a database entry in the RefSeq database. This class ensures traceability and standard reference across biological sequence data as captured within RefSeq records.",
                "CQ": [
                    {
                        "axiom": "RefSeq accession subClassOf Sequence accession (hybrid)",
                        "CQ": [
                            "Does the RefSeq accession category fall under the broader group of Sequence accession?",
                            "Which accessions are recognized as more specific types within Sequence accession, including RefSeq accession?",
                            "To what higher-level class does RefSeq accession belong within the sequence accession hierarchy?"
                        ]
                    }
                ]
            },
            "Secondary structure alignment": {
                "axiom": {
                    "subClassOf": [
                        "Alignment"
                    ]
                },
                "description": "Secondary structure alignment is defined as a subclass of Alignment. It refers specifically to the alignment of the one-dimensional representations of the secondary structure elements of two or more molecules. This class restricts members to those alignments that are based on comparing features such as alpha helices and beta strands, rather than primary sequence or three-dimensional structure.",
                "CQ": [
                    {
                        "axiom": "Secondary structure alignment subClassOf Alignment",
                        "CQ": [
                            "Is Secondary structure alignment categorized under the broader concept of Alignment?",
                            "Which types of Alignment include Secondary structure alignment as a more specialized form?",
                            "What general classifications encompass Secondary structure alignment as a subcategory?"
                        ]
                    }
                ]
            },
            "Agilent Technologies Software": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "equivalentClass": [
                        "[output of some (software publishing process and [has participant hasValue Agilent Technologies])]"
                    ]
                },
                "description": "Agilent Technologies Software is defined as a subclass of software, formally equivalent to any software that is the output of at least one software publishing process involving Agilent Technologies as a participant. This means that every individual in this class is a software product published with the involvement of Agilent Technologies.",
                "CQ": [
                    {
                        "axiom": "Agilent Technologies Software subClassOf software",
                        "CQ": [
                            "Does Agilent Technologies Software fall under the broader classification of software?",
                            "Which specific categories are encompassed within the software class, such as Agilent Technologies Software?",
                            "What higher-level groups include Agilent Technologies Software as a member?"
                        ]
                    },
                    {
                        "axiom": "Agilent Technologies Software equivalentClass [output of some (software publishing process and [has participant hasValue Agilent Technologies])]",
                        "CQ": [
                            "Is every Agilent Technologies Software necessarily an output of a software publishing process involving Agilent Technologies as a participant?",
                            "Is Agilent Technologies Software equivalent to any software that results from a publishing process where Agilent Technologies is involved?",
                            "Does the definition of Agilent Technologies Software require being the output of a software publishing process with Agilent Technologies as a participant?"
                        ]
                    }
                ]
            },
            "GIF": {
                "axiom": {
                    "subClassOf": [
                        "Binary format",
                        "raster image format"
                    ]
                },
                "description": "GIF (Graphics Interchange Format) is a binary format and a type of raster image format. As a subclass of both 'Binary format' and 'raster image format', GIF files encode images in a way suitable for binary data storage and manipulation, and specifically for raster-based rendering. This class defines digital image files that use the GIF specification for encoding, widely recognized for supporting simple graphics and animations.",
                "CQ": [
                    {
                        "axiom": "GIF subClassOf Binary format",
                        "CQ": [
                            "Is GIF classified as a type of Binary format?",
                            "Which file formats are categorized under Binary format, including GIF?",
                            "What broader format categories does GIF fall under in the ontology?"
                        ]
                    },
                    {
                        "axiom": "GIF subClassOf raster image format",
                        "CQ": [
                            "Is GIF classified under the group of raster image formats?",
                            "Which image formats are specified as subtypes of raster image format, and does GIF appear among them?",
                            "What broader format categories does GIF belong to within the image format hierarchy?"
                        ]
                    }
                ]
            },
            "Genotype and phenotype data": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Genotype and phenotype data is classified as a subclass of the Obsolete concept (EDAM), indicating that it is deprecated in the ontology. The class refers to data pertaining to a particular genotype, phenotype, or the relationship between a genotype and phenotype. This classification clarifies that any instance must represent information about genetic makeup, observable traits, or their associations, but the use of this class is discouraged in favor of more current concepts.",
                "CQ": [
                    {
                        "axiom": "Genotype and phenotype data subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Does Genotype and phenotype data fall under the broader classification of Obsolete concept (EDAM)?",
                            "Which specific data types are included as subclasses beneath Obsolete concept (EDAM), such as Genotype and phenotype data?",
                            "What are the broader conceptual categories to which Genotype and phenotype data is assigned in this context?"
                        ]
                    }
                ]
            },
            "Phylogenetic tree generation (from molecular sequences)": {
                "axiom": {
                    "subClassOf": [
                        "Sequence analysis",
                        "Phylogenetic tree generation (data centric)"
                    ]
                },
                "description": "Phylogenetic tree generation (from molecular sequences) is defined as a subclass of both Sequence analysis and Phylogenetic tree generation (data centric). This class encompasses methods that construct phylogenetic trees by comparing multiple molecular sequences, estimating evolutionary distances, and inferring relationships. The process is used to elucidate gene families or make functional predictions based on sequence data, focusing specifically on the use of molecular sequence information to infer evolutionary histories.",
                "CQ": [
                    {
                        "axiom": "Phylogenetic tree generation (from molecular sequences) subClassOf Sequence analysis",
                        "CQ": [
                            "Is phylogenetic tree generation (from molecular sequences) included within the scope of sequence analysis?",
                            "What are the distinct types of sequence analysis activities, including phylogenetic tree generation (from molecular sequences)?",
                            "Which higher-level analytical processes encompass phylogenetic tree generation (from molecular sequences) as a more specific method?"
                        ]
                    },
                    {
                        "axiom": "Phylogenetic tree generation (from molecular sequences) subClassOf Phylogenetic tree generation (data centric)",
                        "CQ": [
                            "Is Phylogenetic tree generation (data centric) a parent category of Phylogenetic tree generation (from molecular sequences)?",
                            "Which types of Phylogenetic tree generation (data centric) methods include the molecular sequence-based approach?",
                            "To what broader methodological categories does Phylogenetic tree generation (from molecular sequences) belong?"
                        ]
                    }
                ]
            },
            "Sequence type": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Sequence type is a subclass of Obsolete concept (EDAM). It refers to a label (text token) describing a type of molecular sequence, which may reflect either the molecule (such as protein, nucleic acid, etc.) or characteristics of the sequence itself (such as being gapped or ambiguous). This concept is retained for reference but is categorized as obsolete within the EDAM ontology.",
                "CQ": [
                    {
                        "axiom": "Sequence type subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Sequence type categorized under the broader class of Obsolete concept (EDAM)?",
                            "Which subclasses fall under Obsolete concept (EDAM), including Sequence type?",
                            "What higher-level classes encompass Sequence type within the ontology?"
                        ]
                    }
                ]
            },
            "usage non commercial only": {
                "axiom": {
                    "subClassOf": [
                        "Usage restricted"
                    ]
                },
                "description": "The class usage non commercial only is defined as a subclass of Usage restricted, indicating that its members are subject to usage limitations. Specifically, individuals in this class are permitted to use the associated resource only for non-commercial purposes, excluding any commercial exploitation or profit-making activities. This formalization ensures that any resource labeled with usage non commercial only inherits all general usage restrictions while explicitly prohibiting commercial use.",
                "CQ": [
                    {
                        "axiom": "usage non commercial only subClassOf Usage restricted",
                        "CQ": [
                            "Is usage non commercial only classified under the broader category of Usage restricted?",
                            "What types fall under Usage restricted, including usage non commercial only?",
                            "Which overarching restrictions encompass usage non commercial only?"
                        ]
                    }
                ]
            },
            "DNA translation": {
                "axiom": {
                    "subClassOf": [
                        "Sequence conversion"
                    ],
                    "propertyRestrictions": [
                        "[has topic some Protein expression]"
                    ]
                },
                "description": "DNA translation is defined as a subclass of Sequence conversion, where the process involves converting one type of biological sequence into another. It is further characterized by having the topic of Protein expression, indicating its role in the generation of proteins. The class is described as the process that translates a DNA sequence into a protein, formalizing its biological role in interpreting genetic information to produce functional proteins.",
                "CQ": [
                    {
                        "axiom": "DNA translation subClassOf Sequence conversion",
                        "CQ": [
                            "Is DNA translation classified under the broader category of Sequence conversion?",
                            "Which specific types of Sequence conversion include DNA translation?",
                            "What are the general categories that encompass DNA translation?"
                        ]
                    },
                    {
                        "axiom": "DNA translation propertyRestrictions [has topic some Protein expression]",
                        "CQ": [
                            "Does DNA translation always have the topic of protein expression?",
                            "Is it necessary for DNA translation to be associated with some aspect of protein expression?",
                            "Can an instance of DNA translation exist without being linked to protein expression through the 'has topic' property?"
                        ]
                    }
                ]
            },
            "NCBI gene report format": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "NCBI gene report format is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer actively used or maintained. It refers to the entry (gene) format used by the NCBI database. Members of this class pertain to the data structure or template formerly applied for representing gene records in NCBI, but its classification as obsolete implies supersession by alternative formats or standards.",
                "CQ": [
                    {
                        "axiom": "NCBI gene report format subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is NCBI gene report format classified under the broader category of Obsolete concept (EDAM)?",
                            "Which report formats are subclasses of Obsolete concept (EDAM), including NCBI gene report format?",
                            "To which obsolete conceptual categories does NCBI gene report format belong?"
                        ]
                    }
                ]
            },
            "Cardiology": {
                "axiom": {
                    "subClassOf": [
                        "Medicine"
                    ]
                },
                "description": "Cardiology is defined as a subclass of Medicine concerned with the study, diagnosis, and treatment of diseases and abnormalities of the heart and circulatory system. This class represents a medical specialty focused on cardiovascular health within the broader domain of medicine.",
                "CQ": [
                    {
                        "axiom": "Cardiology subClassOf Medicine",
                        "CQ": [
                            "Does Cardiology fall under the broader discipline of Medicine?",
                            "Which academic fields are more specialized than Medicine, such as Cardiology?",
                            "Under which major domains is Cardiology classified?"
                        ]
                    }
                ]
            },
            "TIGRFam entry format": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "TIGRFam entry format is defined as a subclass of Obsolete concept (EDAM). It refers to the entry format used in the TIGRFam protein secondary database. This class is considered obsolete, indicating that it is no longer in active use or has been replaced in the relevant ontology or database context.",
                "CQ": [
                    {
                        "axiom": "TIGRFam entry format subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is TIGRFam entry format classified under the broader concept of Obsolete concept (EDAM)?",
                            "What formats are recognized as more specific instances of Obsolete concept (EDAM), such as TIGRFam entry format?",
                            "Which higher-level categories encompass TIGRFam entry format within the ontology?"
                        ]
                    }
                ]
            },
            "Systems medicine": {
                "axiom": {
                    "subClassOf": [
                        "Medicine"
                    ]
                },
                "description": "Systems medicine is formally defined as a subclass of Medicine. It is an interdisciplinary field focused on understanding the dynamic systems of the human body as an integrated whole, incorporating biochemical, physiological, and environmental interactions essential to sustaining life. This classification emphasizes its foundational connection to Medicine while highlighting its systems-based, integrative approach.",
                "CQ": [
                    {
                        "axiom": "Systems medicine subClassOf Medicine",
                        "CQ": [
                            "Does Systems medicine fall under the broader classification of Medicine?",
                            "Which subfields are encompassed by Medicine, including Systems medicine?",
                            "What higher-level categories include Systems medicine within their scope?"
                        ]
                    }
                ]
            },
            "Genetic code identifier": {
                "axiom": {
                    "subClassOf": [
                        "Identifier (typed)"
                    ],
                    "propertyRestrictions": [
                        "[is identifier of some Genetic code]"
                    ]
                },
                "description": "Genetic code identifier is defined as a subclass of Identifier (typed) and is characterized by the property that it acts as an identifier of some Genetic code. Members of this class are used to uniquely identify genetic codes, ensuring precise association between the identifier and the represented genetic code. This formalization supports the role of such identifiers within ontological and bioinformatics contexts.",
                "CQ": [
                    {
                        "axiom": "Genetic code identifier subClassOf Identifier (typed)",
                        "CQ": [
                            "Does Genetic code identifier represent a more specific type within the overarching class of Identifier?",
                            "Which identifiers include Genetic code identifier as a particular example?",
                            "What general classification does Genetic code identifier fall under in the context of identifiers?"
                        ]
                    },
                    {
                        "axiom": "Genetic code identifier propertyRestrictions [is identifier of some Genetic code]",
                        "CQ": [
                            "Is every genetic code identifier necessarily associated with at least one genetic code?",
                            "Can a genetic code identifier exist without identifying a genetic code?",
                            "Are there genetic entities other than genetic codes that may be identified by a genetic code identifier?"
                        ]
                    }
                ]
            },
            "Gene name (ASPGD)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Gene name (ASPGD) is defined as a subclass of Obsolete concept (EDAM), indicating it represents an outdated or retired concept within the ontology. It specifically refers to the name of a gene recorded in the Aspergillus Genome Database.",
                "CQ": [
                    {
                        "axiom": "Gene name (ASPGD) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Can Gene name (ASPGD) be classified under the broader category of Obsolete concept (EDAM)?",
                            "Which subclasses fall under Obsolete concept (EDAM), and does Gene name (ASPGD) appear among them?",
                            "What are the direct superclasses of Gene name (ASPGD)?"
                        ]
                    }
                ]
            },
            "GeneticsDesign": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[has specified data output some (Text data set and [has format specification some Textual format])]",
                        "[has specified data input some (data and [has format specification some R data frame])]",
                        "[is encoded in some R language]"
                    ]
                },
                "description": "GeneticsDesign is a subclass of software, characterized by its input and output specifications and its implementation language. Specifically, any instance of GeneticsDesign must accept as input data that is in the form of an R data frame (with an associated format specification), produce as output a text data set (constrained to specified textual formats), and be encoded in the R programming language. This formalization ensures standardized interoperability and data handling within the class's defined domain.",
                "CQ": [
                    {
                        "axiom": "GeneticsDesign subClassOf software",
                        "CQ": [
                            "Is GeneticsDesign classified as a type of software?",
                            "What general categories does GeneticsDesign belong to within the ontology?",
                            "Which specific kinds of software include GeneticsDesign as a subclass?"
                        ]
                    },
                    {
                        "axiom": "GeneticsDesign propertyRestrictions [has specified data output some (Text data set and [has format specification some Textual format])]",
                        "CQ": [
                            "Does every GeneticsDesign require at least one specified data output that is both a Text data set and has some format specification of Textual format?",
                            "Is it necessary for a GeneticsDesign to have a data output linked by the specified data output property, and must this output be a Text data set with an associated Textual format specification?",
                            "Can a GeneticsDesign have specified data outputs that do not include both a Text data set and a corresponding format specification of Textual format?"
                        ]
                    },
                    {
                        "axiom": "GeneticsDesign propertyRestrictions [has specified data input some (data and [has format specification some R data frame])]",
                        "CQ": [
                            "Does a GeneticsDesign require at least one specified data input that is both a data entity and has a format specification of R data frame?",
                            "Is it necessary that every specified data input for a GeneticsDesign be a data object with R data frame as its format specification?",
                            "Can a GeneticsDesign include a specified data input that does not meet the criteria of being both data and having an R data frame format specification?"
                        ]
                    },
                    {
                        "axiom": "GeneticsDesign propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is every GeneticsDesign necessarily encoded in at least one instance of R language?",
                            "Can a GeneticsDesign exist without being encoded in R language?",
                            "Does the ontology require that each GeneticsDesign is linked to some R language?"
                        ]
                    }
                ]
            },
            "File format name": {
                "axiom": {
                    "subClassOf": [
                        "Name",
                        "Format identifier"
                    ]
                },
                "description": "File format name is defined as a subclass of both Name and Format identifier, representing a name that serves as an identifier for a file format. Members of this class denote the names of various file formats, such as HTML, PNG, PDF, EMBL, or GenBank. This class captures terms used specifically to identify different file formats within digital systems.",
                "CQ": [
                    {
                        "axiom": "File format name subClassOf Name",
                        "CQ": [
                            "Does File format name qualify as a specialized type of Name?",
                            "Which specific names fall under the category of Name, such as File format name?",
                            "What are the broader conceptual categories that encompass File format name?"
                        ]
                    },
                    {
                        "axiom": "File format name subClassOf Format identifier",
                        "CQ": [
                            "Does File format name fall under the broader class of Format identifier?",
                            "Which entities are classified as more specific instances of Format identifier, such as File format name?",
                            "What higher-level categories does File format name belong to within this ontology?"
                        ]
                    }
                ]
            },
            "averaging": {
                "axiom": {
                    "subClassOf": [
                        "information processing"
                    ]
                },
                "description": "averaging is defined as a subclass of information processing. This means that averaging is considered a specific type of information processing activity. Any instance of averaging inherits all characteristics of information processing, but is more specifically concerned with the methods or processes by which multiple values are combined to produce a representative value.",
                "CQ": [
                    {
                        "axiom": "averaging subClassOf information processing",
                        "CQ": [
                            "Is averaging classified under the broader category of information processing?",
                            "Which subcategories fall within information processing, particularly including averaging?",
                            "What higher-level concepts encompass averaging within the ontology?"
                        ]
                    }
                ]
            },
            "Protein folding, stability and design": {
                "axiom": {
                    "subClassOf": [
                        "Protein structure analysis"
                    ]
                },
                "description": "Protein folding, stability and design is a subclass of Protein structure analysis. It concerns the study of protein stability, the folding of proteins in three-dimensional space, and the relationships between protein sequence, structure, and function. This class includes topics such as the analysis of inter-atomic or inter-residue interactions within protein structures, investigation of the effects of mutations on protein stability or function, and the rational design of proteins with specific properties, often accomplished by introducing targeted changes to existing proteins (e.g., via site-directed mutagenesis).",
                "CQ": [
                    {
                        "axiom": "Protein folding, stability and design subClassOf Protein structure analysis",
                        "CQ": [
                            "Is Protein structure analysis a broader category that encompasses Protein folding, stability and design?",
                            "Which specialized topics fall under Protein structure analysis, such as Protein folding, stability and design?",
                            "What higher-level classes does Protein folding, stability and design belong to within the protein research domain?"
                        ]
                    }
                ]
            },
            "Microbiology": {
                "axiom": {
                    "subClassOf": [
                        "Biomedical science"
                    ]
                },
                "description": "Microbiology is defined as a subclass of biomedical science, focusing on the biology of microorganisms. This class encompasses scientific study and research related to microorganisms, such as bacteria, viruses, fungi, and protozoa, within the broader context of biomedical sciences.",
                "CQ": [
                    {
                        "axiom": "Microbiology subClassOf Biomedical science",
                        "CQ": [
                            "Is Microbiology categorized under the broader field of Biomedical science?",
                            "Which specialized disciplines fall under Biomedical science, including Microbiology?",
                            "Under which parent scientific domains is Microbiology classified?"
                        ]
                    }
                ]
            },
            "Amino acid index (hydropathy)": {
                "axiom": {
                    "subClassOf": [
                        "Amino acid index"
                    ]
                },
                "description": "Amino acid index (hydropathy) is a subclass of Amino acid index that refers to hydrophobic, hydrophilic, or charge properties of amino acids. Members of this class specifically characterize amino acids based on their tendency to interact with water or carry a charge, reflecting fundamental chemical and physical attributes important for protein structure and function.",
                "CQ": [
                    {
                        "axiom": "Amino acid index (hydropathy) subClassOf Amino acid index",
                        "CQ": [
                            "Is Amino acid index (hydropathy) classified as a type of Amino acid index?",
                            "Which specific indices are covered under the broader category of Amino acid index, including hydropathy?",
                            "To what broader index classes does Amino acid index (hydropathy) pertain?"
                        ]
                    }
                ]
            },
            "Phylogenetic tree generation (maximum likelihood and Bayesian methods)": {
                "axiom": {
                    "subClassOf": [
                        "Phylogenetic tree generation (method centric)"
                    ]
                },
                "description": "Phylogenetic tree generation (maximum likelihood and Bayesian methods) is a subclass of Phylogenetic tree generation (method centric). This class encompasses computational approaches for constructing phylogenetic trees by relating sequence data to hypothetical tree topologies through models of sequence evolution. Specifically, maximum likelihood methods identify the tree topology that maximizes the likelihood function based on the given data and model, while Bayesian analysis estimates the probability distribution of possible trees (including branch lengths and topology), often employing Monte Carlo algorithms for inference.",
                "CQ": [
                    {
                        "axiom": "Phylogenetic tree generation (maximum likelihood and Bayesian methods) subClassOf Phylogenetic tree generation (method centric)",
                        "CQ": [
                            "Is phylogenetic tree generation using maximum likelihood and Bayesian methods classified under method-centric phylogenetic tree generation?",
                            "Which specialized approaches belong to the category of method-centric phylogenetic tree generation, such as maximum likelihood and Bayesian methods?",
                            "What are the broader categories that encompass phylogenetic tree generation with maximum likelihood and Bayesian methods?"
                        ]
                    }
                ]
            },
            "Prediction and recognition (protein)": {
                "axiom": {
                    "subClassOf": [
                        "Prediction and recognition"
                    ]
                },
                "description": "Prediction and recognition (protein) is a subclass of Prediction and recognition, defined by its role in predicting, recognising, detecting, or identifying properties specific to proteins. This class encompasses processes, methods, or functions aimed at analyzing and determining various attributes or characteristics of proteins, such as structure, function, or presence.",
                "CQ": [
                    {
                        "axiom": "Prediction and recognition (protein) subClassOf Prediction and recognition",
                        "CQ": [
                            "Is Prediction and recognition (protein) classified under Prediction and recognition?",
                            "Which specific classes are included within Prediction and recognition, such as Prediction and recognition (protein)?",
                            "What broader categories does Prediction and recognition (protein) fall under?"
                        ]
                    }
                ]
            },
            "unambiguous sequence": {
                "axiom": {
                    "subClassOf": [
                        "Textual format",
                        "Raw sequence format"
                    ]
                },
                "description": "unambiguous sequence is a subclass of both Textual format and Raw sequence format. It represents a molecular sequence expressed using an alphabet that may include unknown positions but explicitly excludes any ambiguity characters. This ensures that while some sequence positions can be unspecified, there is no use of letters or codes that represent multiple possible residues or bases at a single position.",
                "CQ": [
                    {
                        "axiom": "unambiguous sequence subClassOf Textual format",
                        "CQ": [
                            "Is unambiguous sequence categorized under the broader class of Textual format?",
                            "Which types are directly more general than unambiguous sequence, specifically including Textual format?",
                            "What specific subcategories does Textual format encompass, such as unambiguous sequence?"
                        ]
                    },
                    {
                        "axiom": "unambiguous sequence subClassOf Raw sequence format",
                        "CQ": [
                            "Is unambiguous sequence classified as a specific type of Raw sequence format?",
                            "Which Raw sequence format subclasses include unambiguous sequence?",
                            "What broader categories does unambiguous sequence fall under within Raw sequence format?"
                        ]
                    }
                ]
            },
            "Secondary structure alignment generation": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Secondary structure alignment generation is classified as a subclass of Obsolete concept (EDAM), indicating it is no longer in active use within the ontology. This class refers to the process of aligning molecular secondary structures represented as 1D strings, but its deprecated status suggests newer or alternative methods are now preferred.",
                "CQ": [
                    {
                        "axiom": "Secondary structure alignment generation subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Obsolete concept (EDAM) a direct superclass of Secondary structure alignment generation?",
                            "What specialized processes are classified under Obsolete concept (EDAM), such as Secondary structure alignment generation?",
                            "Which overarching categories encompass Secondary structure alignment generation?"
                        ]
                    }
                ]
            },
            "ILLUMINA data": {
                "axiom": {
                    "subClassOf": [
                        "data"
                    ]
                },
                "description": "ILLUMINA data is defined as a subclass of data, meaning it represents a specific type or category of data within the broader class of data. There are no additional property restrictions or disjointness axioms specified, so ILLUMINA data inherits all characteristics of the general data class, while being distinguished as data generated by ILLUMINA technologies or platforms.",
                "CQ": [
                    {
                        "axiom": "ILLUMINA data subClassOf data",
                        "CQ": [
                            "Is ILLUMINA data classified as a specific type of data?",
                            "What are the specialized categories that fall under data, such as ILLUMINA data?",
                            "Which overarching types does ILLUMINA data inherit from?"
                        ]
                    }
                ]
            },
            "Gap opening penalty": {
                "axiom": {
                    "subClassOf": [
                        "Gap penalty"
                    ]
                },
                "description": "Gap opening penalty is defined as a subclass of Gap penalty. It specifically refers to a penalty applied for opening a gap in an alignment, as part of sequence alignment scoring schemes. This class represents a particular type of gap penalty, distinguishing the cost incurred at the initiation of a gap from other potential gap-related penalties.",
                "CQ": [
                    {
                        "axiom": "Gap opening penalty subClassOf Gap penalty",
                        "CQ": [
                            "Is Gap penalty a broader classification that includes Gap opening penalty?",
                            "Which specific penalty types fall under the Gap penalty category, such as Gap opening penalty?",
                            "What are the higher-level categories that encompass Gap opening penalty?"
                        ]
                    }
                ]
            },
            "Amino acid identifier format": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Amino acid identifier format is a subclass of Obsolete concept (EDAM), indicating it is no longer in active use. It is defined as a text format used to represent amino acid residues, specifying how amino acids are notated or encoded in text-based data representations.",
                "CQ": [
                    {
                        "axiom": "Amino acid identifier format subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Does Amino acid identifier format fall under the category of Obsolete concept (EDAM)?",
                            "Which formats are specified as subclasses of Obsolete concept (EDAM), including Amino acid identifier format?",
                            "What are the parent classes of Amino acid identifier format in the ontology?"
                        ]
                    }
                ]
            },
            "MHC Class II epitopes report": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "MHC Class II epitopes report is defined as a subclass of Obsolete concept (EDAM). It represents a report on predicted epitopes that bind to MHC class II molecules, but is currently considered obsolete within the ontology.",
                "CQ": [
                    {
                        "axiom": "MHC Class II epitopes report subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is MHC Class II epitopes report categorized under the obsolete concepts defined in EDAM?",
                            "Which obsolete concepts in EDAM have MHC Class II epitopes report as a specific instance?",
                            "For which more general concept in EDAM is MHC Class II epitopes report a specific subtype?"
                        ]
                    }
                ]
            },
            "Amino acid index (van der Waals radii)": {
                "axiom": {
                    "subClassOf": [
                        "Amino acid index"
                    ]
                },
                "description": "Amino acid index (van der Waals radii) is a subclass of Amino acid index that represents data on the van der Waals radii of atoms in different amino acid residues. This class is used to characterize the steric properties of amino acids by capturing the effective size of their constituent atoms, as reflected by van der Waals radii.",
                "CQ": [
                    {
                        "axiom": "Amino acid index (van der Waals radii) subClassOf Amino acid index",
                        "CQ": [
                            "Does Amino acid index (van der Waals radii) fall under the broader class of Amino acid index?",
                            "Which specialized indices are categorized under Amino acid index, such as Amino acid index (van der Waals radii)?",
                            "What general classes is Amino acid index (van der Waals radii) a member of?"
                        ]
                    }
                ]
            },
            "Sequence assembly report": {
                "axiom": {
                    "subClassOf": [
                        "Sequence alignment report"
                    ]
                },
                "description": "Sequence assembly report is defined as a subclass of Sequence alignment report, representing an informative report about a DNA sequence assembly. This report includes an overall quality assessment of the assembly and provides summary statistics such as counts, average length, and number of bases related to reads, matches, non-matches, contigs, and reads in pairs.",
                "CQ": [
                    {
                        "axiom": "Sequence assembly report subClassOf Sequence alignment report",
                        "CQ": [
                            "Does the Sequence assembly report fall under the broader category of Sequence alignment report?",
                            "Which specific reports are classified as subclasses of Sequence alignment report?",
                            "What higher-level categories does Sequence assembly report belong to?"
                        ]
                    }
                ]
            },
            "Nucleic acid features report (microsatellite)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Nucleic acid features report (microsatellite) is a subclass of Obsolete concept (EDAM), indicating that it represents a topic or conceptual category that is no longer in active use within the EDAM ontology. It focuses specifically on the subject of microsatellite polymorphism in a DNA sequence, describing topics related to the identification and analysis of repeated DNA sequences (microsatellites) and their variability.",
                "CQ": [
                    {
                        "axiom": "Nucleic acid features report (microsatellite) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Does Nucleic acid features report (microsatellite) fall under the broader category of Obsolete concept (EDAM)?",
                            "Which specific concepts are classified as subclasses of Obsolete concept (EDAM), such as Nucleic acid features report (microsatellite)?",
                            "What general categories encompass Nucleic acid features report (microsatellite) within the ontology?"
                        ]
                    }
                ]
            },
            "EPS": {
                "axiom": {
                    "subClassOf": [
                        "Textual format"
                    ]
                },
                "description": "EPS is defined as a subclass of Textual format and refers specifically to Encapsulated PostScript format. This indicates that EPS files are considered a type of textual file format, characterized by their structure as encapsulated PostScript documents typically used for graphics and document exchange.",
                "CQ": [
                    {
                        "axiom": "EPS subClassOf Textual format",
                        "CQ": [
                            "Is EPS categorized under the general class of Textual format?",
                            "Which formats are specialized forms of Textual format, with EPS as an example?",
                            "In what broader format classifications does EPS reside?"
                        ]
                    }
                ]
            },
            "ChipSkipper": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[output of some (software publishing process and [has participant hasValue EMBL])]"
                    ]
                },
                "description": "ChipSkipper is defined as a subclass of software. Members of this class are characterized by being outputs of at least one software publishing process in which EMBL is a participant. This formalization ensures that any instance of ChipSkipper is not only software but is specifically associated with publishing activities involving the EMBL organization.",
                "CQ": [
                    {
                        "axiom": "ChipSkipper subClassOf software",
                        "CQ": [
                            "Is ChipSkipper categorized as a kind of software?",
                            "Which types of software include ChipSkipper as a subclass?",
                            "What broader categories encompass ChipSkipper within the ontology?"
                        ]
                    },
                    {
                        "axiom": "ChipSkipper propertyRestrictions [output of some (software publishing process and [has participant hasValue EMBL])]",
                        "CQ": [
                            "Is every output of a ChipSkipper software publishing process required to have EMBL as a participant?",
                            "Does the software publishing process output by ChipSkipper always involve EMBL as one of its participants?",
                            "Can a ChipSkipper software publishing process produce any output without the involvement of EMBL as a participant?"
                        ]
                    }
                ]
            },
            "codata": {
                "axiom": {
                    "subClassOf": [
                        "Textual format",
                        "Sequence record format (text)"
                    ]
                },
                "description": "codata is defined as a subclass of both Textual format and Sequence record format (text), indicating that it is a text-based file format specifically designed for representing sequence records. It is referenced as the \"Codata entry format,\" meaning that its primary use is to encode and store sequence data in a structured text format, consistent with conventions of both its parent classes.",
                "CQ": [
                    {
                        "axiom": "codata subClassOf Textual format",
                        "CQ": [
                            "Does codata represent a specific kind of Textual format?",
                            "Which Textual format subclasses include codata?",
                            "What are the broader format categories that codata is associated with?"
                        ]
                    },
                    {
                        "axiom": "codata subClassOf Sequence record format (text)",
                        "CQ": [
                            "Is codata a specialization of Sequence record format?",
                            "Which record formats are classified as types of Sequence record format, including codata?",
                            "What broader record format categories encompass codata?"
                        ]
                    }
                ]
            },
            "Protein binding site prediction (from structure)": {
                "axiom": {
                    "subClassOf": [
                        "Protein structural motif recognition",
                        "Protein binding site prediction"
                    ]
                },
                "description": "Protein binding site prediction (from structure) is defined as a subclass of both Protein structural motif recognition and Protein binding site prediction. This class encompasses methods or processes that identify or predict catalytic residues, active sites, or other ligand-binding sites within the three-dimensional structures of proteins. It focuses on structural analysis to locate functional regions involved in molecular interactions.",
                "CQ": [
                    {
                        "axiom": "Protein binding site prediction (from structure) subClassOf Protein structural motif recognition",
                        "CQ": [
                            "Is Protein structural motif recognition the direct superclass of Protein binding site prediction (from structure)?",
                            "Which specific recognition methods are classified under Protein structural motif recognition?",
                            "To which broader recognition categories does Protein binding site prediction (from structure) belong?"
                        ]
                    },
                    {
                        "axiom": "Protein binding site prediction (from structure) subClassOf Protein binding site prediction",
                        "CQ": [
                            "Does Protein binding site prediction (from structure) fall under the broader group of Protein binding site prediction?",
                            "Which methods are more specific than Protein binding site prediction, such as Protein binding site prediction (from structure)?",
                            "What broader categories does Protein binding site prediction (from structure) belong to?"
                        ]
                    }
                ]
            },
            "iHOP symbol": {
                "axiom": {
                    "subClassOf": [
                        "Gene ID",
                        "Identifier (hybrid)",
                        "Protein accession"
                    ]
                },
                "description": "iHOP symbol is defined as a unique identifier of a protein or gene used in the iHOP database. Formally, this class is a subclass of Gene ID, Identifier (hybrid), and Protein accession, indicating that any iHOP symbol instance can be considered a specialized identifier spanning gene and protein contexts. This class captures identifiers with hybrid characteristics, linking gene and protein entities within the iHOP database.",
                "CQ": [
                    {
                        "axiom": "iHOP symbol subClassOf Gene ID",
                        "CQ": [
                            "Is iHOP symbol classified under the broader category of Gene ID?",
                            "Which identifiers are more specific classifications within Gene ID, such as iHOP symbol?",
                            "What general types does iHOP symbol fall under in the context of biological identifiers?"
                        ]
                    },
                    {
                        "axiom": "iHOP symbol subClassOf Identifier (hybrid)",
                        "CQ": [
                            "Does iHOP symbol belong to the broader class of Identifier?",
                            "Which subclasses fall under the Identifier category, such as iHOP symbol?",
                            "What are the superclass categories for the concept iHOP symbol?"
                        ]
                    },
                    {
                        "axiom": "iHOP symbol subClassOf Protein accession",
                        "CQ": [
                            "Is Protein accession a broader category that encompasses iHOP symbol as a more specific type?",
                            "Which subclasses fall under the category of Protein accession, such as iHOP symbol?",
                            "What are the more general categories to which iHOP symbol belongs?"
                        ]
                    }
                ]
            },
            "Date": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Date is defined as a subclass of \"Obsolete concept (EDAM)\", indicating it is considered outdated in the current ontology context. It is described as a temporal date, referring to a specific point or period in time. This classification signals that although the concept refers to dates or points in time, its use is deprecated within the EDAM ontology.",
                "CQ": [
                    {
                        "axiom": "Date subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Date classified as a kind of Obsolete concept in the EDAM ontology?",
                            "Which concepts are more specific than Obsolete concept (EDAM), specifically including Date?",
                            "What broader conceptual categories does Date fall under within the EDAM ontology?"
                        ]
                    }
                ]
            },
            "Ensembl ID ('Gasterosteus aculeatus')": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Ensembl ID ('Gasterosteus aculeatus') is defined as a subclass of Obsolete concept (EDAM). It represents an identifier assigned to entries such as exons, genes, transcripts, or proteins in the Ensembl 'core' database for the Gasterosteus aculeatus division. This class is considered obsolete in the ontology.",
                "CQ": [
                    {
                        "axiom": "Ensembl ID ('Gasterosteus aculeatus') subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Ensembl ID ('Gasterosteus aculeatus') classified under the category of Obsolete concept (EDAM)?",
                            "Which identifiers are categorized as specializations of Obsolete concept (EDAM), including Ensembl ID ('Gasterosteus aculeatus')?",
                            "What higher-level concepts encompass Ensembl ID ('Gasterosteus aculeatus') in the ontology?"
                        ]
                    }
                ]
            },
            "Protein interaction networks": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)",
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Protein interaction networks is a class categorized as an obsolete concept in EDAM, indicating that it is no longer in active use or has been retired in favor of more precise terminology. The class concerns topics related to networks representing interactions between proteins. Although previously used to describe the study or organization of protein-protein interactions, this concept now falls under obsolete classifications and is not recommended for new use.",
                "CQ": [
                    {
                        "axiom": "Protein interaction networks subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Protein interaction networks classified within the broader category of Obsolete concept (EDAM)?",
                            "Which more specific concepts are encompassed under Obsolete concept (EDAM), including Protein interaction networks?",
                            "To which higher-level categories does Protein interaction networks belong according to EDAM?"
                        ]
                    }
                ]
            },
            "Viruses": {
                "axiom": {
                    "subClassOf": [
                        "Organisms"
                    ]
                },
                "description": "Viruses are defined as a subclass of organisms, encompassing any entity that is or pertains to a virus or group of viruses. This class includes topics such as viral sequence and structural data, interactions among viral proteins, and viral genomes with their associated molecular sequences, genes, and annotations. The scope covers resources specific to individual viruses, groups of viruses, or viruses in general.",
                "CQ": [
                    {
                        "axiom": "Viruses subClassOf Organisms",
                        "CQ": [
                            "Are all Viruses categorized under the broader class of Organisms?",
                            "Which subclasses are encompassed by Organisms, such as Viruses?",
                            "What higher-level classes include Viruses as members?"
                        ]
                    }
                ]
            },
            "Sequence alignment validation": {
                "axiom": {
                    "subClassOf": [
                        "Sequence alignment analysis",
                        "Validation"
                    ]
                },
                "description": "Sequence alignment validation is defined as a subclass of both Sequence alignment analysis and Validation. This class encompasses processes that evaluate the accuracy of molecular sequence alignments. Evaluations may be based solely on sequence data or may incorporate structural information. The formalization ensures that Sequence alignment validation is recognized as both a form of analysis specific to sequence alignments and as a validation procedure within broader biological contexts.",
                "CQ": [
                    {
                        "axiom": "Sequence alignment validation subClassOf Sequence alignment analysis",
                        "CQ": [
                            "Is Sequence alignment analysis a parent category that includes Sequence alignment validation as a specific type?",
                            "Which specialized tasks fall under Sequence alignment analysis, such as Sequence alignment validation?",
                            "To which broader analysis domains does Sequence alignment validation conceptually belong?"
                        ]
                    },
                    {
                        "axiom": "Sequence alignment validation subClassOf Validation",
                        "CQ": [
                            "Is Sequence alignment validation categorized as a type of Validation?",
                            "Which Validation subclasses include Sequence alignment validation?",
                            "What broader groups does Sequence alignment validation fall under within the Validation hierarchy?"
                        ]
                    }
                ]
            },
            "Gene ID (HGNC)": {
                "axiom": {
                    "subClassOf": [
                        "Gene ID"
                    ]
                },
                "description": "Gene ID (HGNC) is defined as a subclass of Gene ID. It represents an identifier specifically assigned to a gene that has been approved by the HUGO Gene Nomenclature Committee (HGNC). This ensures that each gene is uniquely and consistently identified according to HGNC standards.",
                "CQ": [
                    {
                        "axiom": "Gene ID (HGNC) subClassOf Gene ID",
                        "CQ": [
                            "Is Gene ID (HGNC) classified as a more specific form of Gene ID?",
                            "Which identifiers are subclasses under Gene ID, such as Gene ID (HGNC)?",
                            "What broader identifier classes does Gene ID (HGNC) fall under?"
                        ]
                    }
                ]
            },
            "Ramachandran plot validation": {
                "axiom": {
                    "subClassOf": [
                        "Dihedral angle validation"
                    ],
                    "propertyRestrictions": [
                        "[has input some Ramachandran plot]",
                        "[has output some Protein structural quality report]"
                    ]
                },
                "description": "Ramachandran plot validation is a subclass of Dihedral angle validation, defined as the process of validating a Ramachandran plot for a protein structure. Instances of this class take a Ramachandran plot as input and produce a Protein structural quality report as output. This validation assesses the conformational quality of protein structures based on their dihedral angles, supporting rigorous structural bioinformatics analyses.",
                "CQ": [
                    {
                        "axiom": "Ramachandran plot validation subClassOf Dihedral angle validation",
                        "CQ": [
                            "Is Ramachandran plot validation classified under the broader category of Dihedral angle validation?",
                            "What are the specific types of Dihedral angle validation that include Ramachandran plot validation?",
                            "Which higher-level validation methods does Ramachandran plot validation fall under?"
                        ]
                    },
                    {
                        "axiom": "Ramachandran plot validation propertyRestrictions [has input some Ramachandran plot]",
                        "CQ": [
                            "Is it required that Ramachandran plot validation always has at least one input which is a Ramachandran plot?",
                            "Can a Ramachandran plot validation exist without any associated Ramachandran plot as input?",
                            "Must every instance of Ramachandran plot validation utilize some Ramachandran plot as its input?"
                        ]
                    },
                    {
                        "axiom": "Ramachandran plot validation propertyRestrictions [has output some Protein structural quality report]",
                        "CQ": [
                            "Is it required that a Ramachandran plot validation always produces at least one Protein structural quality report as output?",
                            "Can every output generated by a Ramachandran plot validation be classified as a Protein structural quality report?",
                            "Does a Ramachandran plot validation ever produce an output that is not a Protein structural quality report?"
                        ]
                    }
                ]
            },
            "Tool identifier": {
                "axiom": {
                    "subClassOf": [
                        "Identifier (typed)"
                    ]
                },
                "description": "Tool identifier is defined as a subclass of Identifier (typed), specifically representing an identifier assigned to a bioinformatics tool such as an application or web service. This class ensures that every Tool identifier is a type of typed identifier, explicitly intended for uniquely distinguishing bioinformatics tools.",
                "CQ": [
                    {
                        "axiom": "Tool identifier subClassOf Identifier (typed)",
                        "CQ": [
                            "Is Tool identifier regarded as a specific kind of Identifier?",
                            "Which identifiers include Tool identifier as a more specialized type?",
                            "What broader categories encompass Tool identifier within the ontology?"
                        ]
                    }
                ]
            },
            "HMMER3": {
                "axiom": {
                    "subClassOf": [
                        "HMMER format"
                    ]
                },
                "description": "HMMER3 is defined as a subclass of HMMER format, representing profile HMM files specifically used with HMMER software versions 3.x. This class characterizes files formatted for compatibility with the HMMER3 suite, distinguishing them from other HMMER file versions or formats.",
                "CQ": [
                    {
                        "axiom": "HMMER3 subClassOf HMMER format",
                        "CQ": [
                            "Does HMMER3 fall under the general category of HMMER format?",
                            "What types are covered as subclasses of HMMER format, specifically including HMMER3?",
                            "To which higher-level classes is HMMER3 directly related?"
                        ]
                    }
                ]
            },
            "Misspelling": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Misspelling is defined as a subclass of the obsolete concept (EDAM), indicating that it is no longer an actively maintained or recommended concept within the ontology. It refers to a common misspelling of a word, formally capturing instances where a word is not spelled correctly according to standard conventions.",
                "CQ": [
                    {
                        "axiom": "Misspelling subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Does Misspelling fall under the overarching category of Obsolete concept (EDAM)?",
                            "What specific subclasses are encompassed by the Obsolete concept (EDAM) category, including Misspelling?",
                            "To which higher-level concepts is Misspelling hierarchically related within EDAM?"
                        ]
                    }
                ]
            },
            "NCBI locus tag": {
                "axiom": {
                    "subClassOf": [
                        "Locus ID"
                    ]
                },
                "description": "NCBI locus tag is defined as a subclass of Locus ID, representing identifiers specifically assigned to loci in the NCBI database. This class is used to designate and reference unique loci within the NCBI data framework, ensuring standardized identification and organization of genetic loci in NCBI resources.",
                "CQ": [
                    {
                        "axiom": "NCBI locus tag subClassOf Locus ID",
                        "CQ": [
                            "Is NCBI locus tag classified under the broader category of Locus ID?",
                            "What subclasses are encompassed by Locus ID, and does this include NCBI locus tag?",
                            "Which higher-level identifiers does NCBI locus tag fall under?"
                        ]
                    }
                ]
            },
            "unambiguous pure rna sequence": {
                "axiom": {
                    "subClassOf": [
                        "unambiguous pure",
                        "rna"
                    ]
                },
                "description": "unambiguous pure rna sequence is a subclass of both unambiguous pure and rna. Members of this class are defined as RNA sequences composed strictly of the characters A, C, G, and U, allowing for possible unknown positions but excluding any ambiguity or non-sequence characters. This ensures that all instances represent RNA sequences that are both unambiguous and free from characters outside the canonical RNA alphabet.",
                "CQ": [
                    {
                        "axiom": "unambiguous pure rna sequence subClassOf unambiguous pure",
                        "CQ": [
                            "Is unambiguous pure a direct superclass of unambiguous pure rna sequence?",
                            "Which subclasses fall under the category of unambiguous pure, such as unambiguous pure rna sequence?",
                            "What are the broader classes that include unambiguous pure rna sequence?"
                        ]
                    },
                    {
                        "axiom": "unambiguous pure rna sequence subClassOf rna",
                        "CQ": [
                            "Is unambiguous pure rna sequence classified as a type of rna?",
                            "Which subclasses are found under rna, specifically including unambiguous pure rna sequence?",
                            "What are the parent classes that unambiguous pure rna sequence is associated with?"
                        ]
                    }
                ]
            },
            "RMA++": {
                "axiom": {
                    "subClassOf": [
                        "algorithm"
                    ]
                },
                "description": "RMA++ is defined as a subclass of algorithm, indicating that it represents a specific type or instance of algorithm. No additional restrictions or distinctions are specified, so any entity classified as RMA++ is inherently an algorithm by definition.",
                "CQ": [
                    {
                        "axiom": "RMA++ subClassOf algorithm",
                        "CQ": [
                            "Is RMA++ classified under the broader grouping of algorithm?",
                            "What specific types are encompassed within the category of algorithm, and does RMA++ appear among them?",
                            "Which broader conceptual categories include RMA++ based on its classification?"
                        ]
                    }
                ]
            },
            "process": {
                "axiom": {
                    "disjointWith": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "process is a class that is explicitly disjoint with 'Obsolete concept (EDAM)', meaning no individual can be simultaneously classified as both a process and an obsolete concept. This distinction ensures clarity in categorization by separating active processes from deprecated or outdated conceptual entities.",
                "CQ": [
                    {
                        "axiom": "process disjointWith Obsolete concept (EDAM)",
                        "CQ": [
                            "Is there any overlap defined between process and Obsolete concept (EDAM) in the ontology?",
                            "Can an entity be simultaneously classified as both a process and an Obsolete concept (EDAM)?",
                            "Which concepts are declared as disjoint with process in the ontology?"
                        ]
                    }
                ]
            },
            "TAIR accession": {
                "axiom": {
                    "subClassOf": [
                        "Accession",
                        "Identifier (hybrid)"
                    ]
                },
                "description": "TAIR accession is a subclass of both Accession and Identifier (hybrid). It represents an identifier specifically assigned to entries within the TAIR database, ensuring that each entry in the TAIR database can be uniquely and formally referenced using this identifier.",
                "CQ": [
                    {
                        "axiom": "TAIR accession subClassOf Accession",
                        "CQ": [
                            "Is TAIR accession categorized as a kind of Accession?",
                            "Which specific types of Accession include TAIR accession?",
                            "To what higher-level classes does TAIR accession belong?"
                        ]
                    },
                    {
                        "axiom": "TAIR accession subClassOf Identifier (hybrid)",
                        "CQ": [
                            "What identifiers are classified under the category of TAIR accession?",
                            "Is Identifier a direct parent class of TAIR accession?",
                            "Which broader classes encompass TAIR accession as their subclass?"
                        ]
                    }
                ]
            },
            "Gene regulatory network report": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Gene regulatory network report is defined as a subclass of Obsolete concept (EDAM). It is described as a report that typically includes a map or diagram of a gene regulatory network, providing an overview of the regulatory interactions among genes. This class is considered obsolete within the EDAM ontology context.",
                "CQ": [
                    {
                        "axiom": "Gene regulatory network report subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Does the category Obsolete concept (EDAM) encompass gene regulatory network reports?",
                            "Which types are more specific than Obsolete concept (EDAM), such as gene regulatory network report?",
                            "Under which higher-level groupings would a gene regulatory network report be classified?"
                        ]
                    }
                ]
            },
            "Ensembl": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ]
                },
                "description": "Ensembl is defined as a subclass of software, indicating that it represents a type of software application or platform. This classification establishes Ensembl within the broader software category, without further restrictions or specified properties.",
                "CQ": [
                    {
                        "axiom": "Ensembl subClassOf software",
                        "CQ": [
                            "Is Ensembl classified as a type of software?",
                            "Which specific instances or subclasses fall under the category of software, such as Ensembl?",
                            "What broader classes does Ensembl belong to in the ontology?"
                        ]
                    }
                ]
            },
            "HMMER profile alignment (sequences versus HMMs)": {
                "axiom": {
                    "subClassOf": [
                        "Textual format",
                        "Sequence-profile alignment format"
                    ]
                },
                "description": "HMMER profile alignment (sequences versus HMMs) is a subclass of both Textual format and Sequence-profile alignment format. It is defined as a format used by the HMMER package for aligning biological sequences against hidden Markov model (HMM) databases. This class characterizes file formats that explicitly describe the alignment between input sequences and HMM profiles, supporting bioinformatics analyses where sequence-to-profile comparisons are necessary.",
                "CQ": [
                    {
                        "axiom": "HMMER profile alignment (sequences versus HMMs) subClassOf Textual format",
                        "CQ": [
                            "Does HMMER profile alignment (sequences versus HMMs) fall within the scope of Textual format?",
                            "What specific formats are categorized under Textual format, including HMMER profile alignment (sequences versus HMMs)?",
                            "Which higher-level categories encompass HMMER profile alignment (sequences versus HMMs)?"
                        ]
                    },
                    {
                        "axiom": "HMMER profile alignment (sequences versus HMMs) subClassOf Sequence-profile alignment format",
                        "CQ": [
                            "Does HMMER profile alignment (sequences versus HMMs) fall under the category of Sequence-profile alignment format?",
                            "What specific alignment formats are classified as types of Sequence-profile alignment format, including HMMER profile alignment (sequences versus HMMs)?",
                            "Which broader alignment format categories does HMMER profile alignment (sequences versus HMMs) inherit from?"
                        ]
                    }
                ]
            },
            "spML": {
                "axiom": {
                    "subClassOf": [
                        "XML",
                        "Experiment annotation format"
                    ]
                },
                "description": "spML is a standardized format, defined as a subclass of both XML and experiment annotation format, specifically designed for the description of proteomics sample processing methods excluding the use of gels, prior to mass spectrometric protein identification. The standardization is overseen by HUPO PSI PS, and beyond proteomics, spML may also be applicable in the context of metabolomics.",
                "CQ": [
                    {
                        "axiom": "spML subClassOf XML",
                        "CQ": [
                            "Is spML classified as a more specific type of XML?",
                            "Which markup languages are categorized under XML, such as spML?",
                            "To what higher-level language categories does spML belong?"
                        ]
                    },
                    {
                        "axiom": "spML subClassOf Experiment annotation format",
                        "CQ": [
                            "Is spML categorized as a type of Experiment annotation format?",
                            "What are the more specific kinds of Experiment annotation format, including spML?",
                            "Which broader annotation format categories contain spML?"
                        ]
                    }
                ]
            },
            "Enzyme ID (BioCyc)": {
                "axiom": {
                    "subClassOf": [
                        "Enzyme ID",
                        "BioCyc ID"
                    ]
                },
                "description": "Enzyme ID (BioCyc) is a subclass of both Enzyme ID and BioCyc ID, representing unique identifiers assigned to enzymes within the BioCyc database. It is used to reference specific enzymes in BioCyc’s enzyme database and facilitates the integration and retrieval of enzyme-related information.",
                "CQ": [
                    {
                        "axiom": "Enzyme ID (BioCyc) subClassOf Enzyme ID",
                        "CQ": [
                            "Is every Enzyme ID (BioCyc) instance categorized under Enzyme ID?",
                            "Which identifiers are more specific forms of Enzyme ID, such as Enzyme ID (BioCyc)?",
                            "To what broader identifier types does Enzyme ID (BioCyc) belong?"
                        ]
                    },
                    {
                        "axiom": "Enzyme ID (BioCyc) subClassOf BioCyc ID",
                        "CQ": [
                            "Is an Enzyme ID (BioCyc) classified under the broader identifier category of BioCyc ID?",
                            "Which identifier types are included as specializations of BioCyc ID, such as Enzyme ID (BioCyc)?",
                            "What hierarchical categories does Enzyme ID (BioCyc) fall under within the scope of BioCyc identifiers?"
                        ]
                    }
                ]
            },
            "BasReader 3.01": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[output of some (software publishing process and [has participant hasValue Raytest])]"
                    ]
                },
                "description": "BasReader 3.01 is defined as a subclass of software. Members of this class are exclusively characterized as outputs produced by a software publishing process in which the participant Raytest is involved. This formalization ensures that BasReader 3.01 instances are software entities resulting from processes that specifically include Raytest as a participant.",
                "CQ": [
                    {
                        "axiom": "BasReader 3.01 subClassOf software",
                        "CQ": [
                            "Does BasReader 3.01 fall under the general classification of software?",
                            "Which specialized types of software include BasReader 3.01?",
                            "What broader categories encompass BasReader 3.01 besides software?"
                        ]
                    },
                    {
                        "axiom": "BasReader 3.01 propertyRestrictions [output of some (software publishing process and [has participant hasValue Raytest])]",
                        "CQ": [
                            "Must any output of the BasReader 3.01 propertyRestrictions include results from a software publishing process that involves Raytest as a participant?",
                            "Is it necessary that BasReader 3.01 propertyRestrictions only produce outputs related to a software publishing process where Raytest is involved?",
                            "Can an output of BasReader 3.01 propertyRestrictions exist without stemming from a software publishing process in which Raytest is a participant?"
                        ]
                    }
                ]
            },
            "HMM emission and transition counts": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "HMM emission and transition counts are defined as a subclass of Obsolete concept (EDAM). This class represents the emission and transition counts within a hidden Markov model, which are generated after the model has been determined—such as following the assignment of residues or gaps to match, delete, and insert states. This classification denotes that the concept is considered obsolete in the EDAM ontology.",
                "CQ": [
                    {
                        "axiom": "HMM emission and transition counts subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Are HMM emission and transition counts classified under the broader concept of Obsolete concept (EDAM)?",
                            "Which concepts are subsumed by Obsolete concept (EDAM), including HMM emission and transition counts?",
                            "What higher-level categories encompass HMM emission and transition counts in the ontology?"
                        ]
                    }
                ]
            },
            "Sequence file editing": {
                "axiom": {
                    "subClassOf": [
                        "Sequence analysis",
                        "Sequence editing"
                    ]
                },
                "description": "Sequence file editing is a subclass of both Sequence analysis and Sequence editing. It encompasses basic, non-analytical operations performed on sequence files or reports (potentially including sequence features). Such operations include concatenating files, removing or reordering sequences, and creating subsets or new sequence files. Sequence file editing does not include analytical transformations but is focused on managing and organizing sequence data within files.",
                "CQ": [
                    {
                        "axiom": "Sequence file editing subClassOf Sequence analysis",
                        "CQ": [
                            "Does Sequence file editing fall under the broader category of Sequence analysis?",
                            "What kinds of Sequence analysis include Sequence file editing as a more specific type?",
                            "To which higher-level analyses is Sequence file editing related as a subtype?"
                        ]
                    },
                    {
                        "axiom": "Sequence file editing subClassOf Sequence editing",
                        "CQ": [
                            "Is Sequence file editing categorized under the broader class of Sequence editing?",
                            "Which editing processes are subtypes of Sequence editing, including Sequence file editing?",
                            "To which higher-level categories does Sequence file editing pertain?"
                        ]
                    }
                ]
            },
            "globaltest": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[is encoded in some R language]",
                        "[is published by hasValue Bioconductor]",
                        "[is executed in some descriptive statistical calculation]",
                        "[has specified data output some (Graph plot and [has format specification only R data frame])]",
                        "[implements some globaltest]",
                        "[has specified data input some Gene expression dataset]"
                    ]
                },
                "description": "globaltest is defined as a subclass of software with several specific characteristics. It is encoded in the R programming language and is published by Bioconductor. Instances of this class are designed to be executed within the context of descriptive statistical calculations. A globaltest implementation must have specified data input in the form of a gene expression dataset and produces specified data output, which can be either a graph plot or an R data frame (and only in the R data frame format). The class also includes a restriction that it implements the globaltest method. This formalization captures the essential features and functional requirements of the globaltest software component within a bioinformatics or statistical analysis context.",
                "CQ": [
                    {
                        "axiom": "globaltest subClassOf software",
                        "CQ": [
                            "Is globaltest classified under the broader category of software?",
                            "Which entities are more specific than software, such as globaltest?",
                            "What higher-level categories encompass globaltest within the ontology?"
                        ]
                    },
                    {
                        "axiom": "globaltest propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is it required that every globaltest instance is encoded in at least one R language?",
                            "Are all encodings of globaltest necessarily restricted to R language only?",
                            "Can a globaltest be encoded in a language other than R?"
                        ]
                    },
                    {
                        "axiom": "globaltest propertyRestrictions [is published by hasValue Bioconductor]",
                        "CQ": [
                            "Is every instance of globaltest necessarily published by Bioconductor?",
                            "Can globaltest ever be published by an organization other than Bioconductor?",
                            "Must the publishing entity for globaltest always be restricted to Bioconductor?"
                        ]
                    },
                    {
                        "axiom": "globaltest propertyRestrictions [is executed in some descriptive statistical calculation]",
                        "CQ": [
                            "Is every instance of 'globaltest' required to be executed in at least one descriptive statistical calculation?",
                            "Does the definition of 'globaltest' allow it to be associated exclusively with descriptive statistical calculations through the 'is executed in' property?",
                            "Can 'globaltest' exist without being linked to any descriptive statistical calculation via the 'is executed in' relationship?"
                        ]
                    },
                    {
                        "axiom": "globaltest propertyRestrictions [has specified data output some (Graph plot and [has format specification only R data frame])]",
                        "CQ": [
                            "Must every globaltest propertyRestriction include at least one specified data output that is a Graph plot and exclusively has a format specification of R data frame?",
                            "Is it required for a globaltest propertyRestriction to have a specified data output that is both a Graph plot and formatted solely as an R data frame?",
                            "Can a globaltest propertyRestriction’s specified data output be a Graph plot if its format specification is not restricted only to R data frame?"
                        ]
                    },
                    {
                        "axiom": "globaltest propertyRestrictions [implements some globaltest]",
                        "CQ": [
                            "Is it required that all entities with 'propertyRestrictions' implement at least one 'globaltest'?",
                            "Can an entity with 'propertyRestrictions' exist without implementing any 'globaltest'?",
                            "Does every instance of 'propertyRestrictions' have an implementation relationship with some 'globaltest'?"
                        ]
                    },
                    {
                        "axiom": "globaltest propertyRestrictions [has specified data input some Gene expression dataset]",
                        "CQ": [
                            "Is it required for a globaltest propertyRestrictions instance to have at least one specified data input that is a Gene expression dataset?",
                            "Can a globaltest propertyRestrictions entity exist without a specified data input of the Gene expression dataset type?",
                            "Does globaltest propertyRestrictions necessarily involve having a specified data input related to Gene expression datasets?"
                        ]
                    }
                ]
            },
            "Sequence features": {
                "axiom": {
                    "subClassOf": [
                        "data"
                    ]
                },
                "description": "Sequence features is defined as a subclass of data, representing the annotation of positional features on molecular sequences that can be specifically mapped to positions within the sequence. This class includes standardized feature tables and general reports documenting sequence features, potentially requiring internal conversion for integration. Sequence features facilitate the structured description and reporting of specific regions or attributes along molecular sequences.",
                "CQ": [
                    {
                        "axiom": "Sequence features subClassOf data",
                        "CQ": [
                            "Is Sequence features categorized as a subset of data?",
                            "Which classes are more specific than data, such as Sequence features?",
                            "Under which broader classes does Sequence features fall?"
                        ]
                    }
                ]
            },
            "RNA-Seq alignment": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "RNA-Seq alignment is defined as a subclass of the Obsolete concept (EDAM), indicating that it is considered outdated within the ontology. It concerns the alignment of large numbers of short RNA sequence reads to a reference genome—a process that has unique challenges due to the complexities introduced by RNA splicing. As a specialized topic within the broader category of sequence alignment, RNA-Seq alignment addresses issues specific to transcriptomic data, such as handling spliced reads.",
                "CQ": [
                    {
                        "axiom": "RNA-Seq alignment subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is RNA-Seq alignment classified as an instance within the wider class of Obsolete concept (EDAM)?",
                            "Which concepts are narrower in scope than Obsolete concept (EDAM), particularly including RNA-Seq alignment?",
                            "To which upper-level categories does RNA-Seq alignment fall, considering its status as Obsolete concept (EDAM)?"
                        ]
                    }
                ]
            },
            "DNA nucleotide sequence": {
                "axiom": {
                    "subClassOf": [
                        "biological sequence data"
                    ]
                },
                "description": "DNA nucleotide sequence is defined as a subclass of biological sequence data. It represents linear data sequences composed specifically of DNA nucleotides (adenine, thymine, cytosine, and guanine). This class formalizes the concept that any DNA nucleotide sequence is a type of biological sequence data, typically used to describe genetic information at the molecular level.",
                "CQ": [
                    {
                        "axiom": "DNA nucleotide sequence subClassOf biological sequence data",
                        "CQ": [
                            "Is DNA nucleotide sequence considered a specific type of biological sequence data?",
                            "Which biological sequence data subclasses include DNA nucleotide sequence?",
                            "What are the broader categories encompassing DNA nucleotide sequence?"
                        ]
                    }
                ]
            },
            "Protein-protein interaction prediction (from protein structure)": {
                "axiom": {
                    "subClassOf": [
                        "Protein structure analysis",
                        "Protein feature detection",
                        "Protein-protein interaction prediction"
                    ]
                },
                "description": "Protein-protein interaction prediction (from protein structure) is a subclass of Protein structure analysis, Protein feature detection, and Protein-protein interaction prediction. Members of this class are concerned with identifying or predicting protein-protein interactions, interfaces, binding sites, and related features directly from protein structural data. This class integrates analytic and predictive methodologies, focusing specifically on inferring protein interaction characteristics based on structural information.",
                "CQ": [
                    {
                        "axiom": "Protein-protein interaction prediction (from protein structure) subClassOf Protein structure analysis",
                        "CQ": [
                            "Is protein-protein interaction prediction (from protein structure) categorized under protein structure analysis?",
                            "Which analysis methods are recognized as more specific forms of protein structure analysis, such as protein-protein interaction prediction (from protein structure)?",
                            "What broader analytical categories encompass protein-protein interaction prediction (from protein structure)?"
                        ]
                    },
                    {
                        "axiom": "Protein-protein interaction prediction (from protein structure) subClassOf Protein feature detection",
                        "CQ": [
                            "Is protein-protein interaction prediction (from protein structure) classified under the broader category of protein feature detection?",
                            "Which specialized types of protein feature detection include protein-protein interaction prediction (from protein structure)?",
                            "What hierarchical categories encompass protein-protein interaction prediction (from protein structure)?"
                        ]
                    },
                    {
                        "axiom": "Protein-protein interaction prediction (from protein structure) subClassOf Protein-protein interaction prediction",
                        "CQ": [
                            "Is protein-protein interaction prediction (from protein structure) classified under the broader category of protein-protein interaction prediction?",
                            "Which prediction methods are specific instances of protein-protein interaction prediction, including those based on protein structure?",
                            "What broader classes encompass protein-protein interaction prediction (from protein structure)?"
                        ]
                    }
                ]
            },
            "Gene expression QTL analysis": {
                "axiom": {
                    "subClassOf": [
                        "Gene expression data analysis"
                    ],
                    "propertyRestrictions": [
                        "[has output some Pathway or network report]"
                    ]
                },
                "description": "Gene expression QTL analysis is defined as a subclass of Gene expression data analysis, characterized by combining classical quantitative trait loci (QTL) analysis with gene expression profiling to identify cis- and trans-regulatory elements influencing the expression of phenotype-associated genes. Members of this class are further defined by the requirement that their analysis outputs include either a Pathway or network report, reflecting the integrative nature of the results produced.",
                "CQ": [
                    {
                        "axiom": "Gene expression QTL analysis subClassOf Gene expression data analysis",
                        "CQ": [
                            "Is Gene expression QTL analysis classified as a type of Gene expression data analysis?",
                            "Which types of analyses are considered subclasses of Gene expression data analysis, including Gene expression QTL analysis?",
                            "What higher-level analysis categories does Gene expression QTL analysis fall under?"
                        ]
                    },
                    {
                        "axiom": "Gene expression QTL analysis propertyRestrictions [has output some Pathway or network report]",
                        "CQ": [
                            "Does every Gene expression QTL analysis necessarily produce at least one output that is either a Pathway report or a Network report?",
                            "Is it possible for the output of a Gene expression QTL analysis to be something other than a Pathway report or Network report?",
                            "Are Pathway and Network reports the only required types of outputs generated by Gene expression QTL analysis?"
                        ]
                    }
                ]
            },
            "Taxonomy": {
                "axiom": {
                    "subClassOf": [
                        "data",
                        "Evolutionary biology"
                    ],
                    "propertyRestrictions": [
                        "[has topic some Phylogeny]"
                    ]
                },
                "description": "Taxonomy is defined as a subclass of data and evolutionary biology, focusing specifically on topics related to phylogeny. Members of this class involve the classification, identification, and naming of organisms, ensuring a systematic approach to understanding biological diversity and evolutionary relationships. The class is formally restricted to instances that are concerned with at least some aspect of phylogeny, aligning with its central role in evolutionary studies.",
                "CQ": [
                    {
                        "axiom": "Taxonomy subClassOf data",
                        "CQ": [
                            "Does Taxonomy fall under the broader classification of data?",
                            "Which categories within data include Taxonomy as a specialized concept?",
                            "What are the immediate superclasses of Taxonomy according to the ontology?"
                        ]
                    },
                    {
                        "axiom": "Taxonomy subClassOf Evolutionary biology",
                        "CQ": [
                            "Is Taxonomy considered a specific area within Evolutionary biology?",
                            "What broader scientific domains encompass Taxonomy?",
                            "Which specialized fields fall under the category of Evolutionary biology?"
                        ]
                    },
                    {
                        "axiom": "Taxonomy propertyRestrictions [has topic some Phylogeny]",
                        "CQ": [
                            "Is it required that any Taxonomy has at least one topic related to Phylogeny?",
                            "Does every instance of Taxonomy necessarily include a topic concerning Phylogeny?",
                            "Can a Taxonomy exist without having any topic involving Phylogeny?"
                        ]
                    }
                ]
            },
            "Phylogenetic tree report (tree stratigraphic)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Phylogenetic tree report (tree stratigraphic) is defined as a subclass of Obsolete concept (EDAM). It refers to molecular clock and stratigraphic (age) data derived from phylogenetic tree analysis. This class is considered obsolete in the EDAM ontology, indicating it is no longer recommended for current usage or annotation.",
                "CQ": [
                    {
                        "axiom": "Phylogenetic tree report (tree stratigraphic) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Can Phylogenetic tree report (tree stratigraphic) be classified as an instance of Obsolete concept (EDAM)?",
                            "What are the subclasses identified under Obsolete concept (EDAM), including Phylogenetic tree report (tree stratigraphic)?",
                            "Which higher-level concept encompasses Phylogenetic tree report (tree stratigraphic)?"
                        ]
                    }
                ]
            },
            "Peptide identifier": {
                "axiom": {
                    "subClassOf": [
                        "Molecule identifier"
                    ]
                },
                "description": "Peptide identifier is defined as a subclass of Molecule identifier. It represents an identifier assigned specifically to a peptide chain, distinguishing it from other types of molecular identifiers by its exclusive association with peptides. This class formalizes the concept of uniquely referencing peptide chains within molecular datasets or systems.",
                "CQ": [
                    {
                        "axiom": "Peptide identifier subClassOf Molecule identifier",
                        "CQ": [
                            "Is every Peptide identifier classified under the broader category of Molecule identifier?",
                            "Which identifier categories encompass Peptide identifier as a specific instance?",
                            "What specific types of identifiers are included within the class of Molecule identifier?"
                        ]
                    }
                ]
            },
            "pcaMethods": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[is encoded in some R language]",
                        "[implements some (Bayesian Model and Expectation-Maximization(EM) algorithm and Nonlinear Estimation by Iterative Partial Least Squares and SVDimpute algorithm)]",
                        "[is published by hasValue Bioconductor]",
                        "[has specified data output some Graph plot]",
                        "[is executed in some (data visualization and cross validation)]",
                        "[has specified data input some [has format specification only R data frame]]"
                    ]
                },
                "description": "pcaMethods is a subclass of software designed for data analysis. It is encoded in the R language and published by Bioconductor. This class implements several algorithms, including Bayesian Model, Expectation-Maximization (EM) algorithm, Nonlinear Estimation by Iterative Partial Least Squares, and the SVDimpute algorithm. It operates within contexts of data visualization and cross-validation. The software requires data inputs strictly in R data frame format, and its outputs specifically include graphical plots.",
                "CQ": [
                    {
                        "axiom": "pcaMethods subClassOf software",
                        "CQ": [
                            "Are pcaMethods classified under the general category of software?",
                            "Which specific methods are subclasses of software, such as pcaMethods?",
                            "What broader classes does pcaMethods fall under within the ontology?"
                        ]
                    },
                    {
                        "axiom": "pcaMethods propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is it required that every PCA method implementation is encoded using the R language?",
                            "Can a PCA method exist without being encoded in the R language?",
                            "Does the ontology restrict PCA methods to only those that are encoded in the R language?"
                        ]
                    },
                    {
                        "axiom": "pcaMethods propertyRestrictions [implements some (Bayesian Model and Expectation-Maximization(EM) algorithm and Nonlinear Estimation by Iterative Partial Least Squares and SVDimpute algorithm)]",
                        "CQ": [
                            "Does every pcaMethods instance necessarily implement at least one method that belongs to the intersection of Bayesian Model, Expectation-Maximization (EM) algorithm, Nonlinear Estimation by Iterative Partial Least Squares, and SVDimpute algorithm?",
                            "Is it required for pcaMethods to implement a technique that simultaneously satisfies the criteria of Bayesian Model, EM algorithm, Nonlinear Estimation by Iterative Partial Least Squares, and SVDimpute algorithm?",
                            "Can a pcaMethods instance exist without implementing a method that is characterized by all of Bayesian Model, EM algorithm, Nonlinear Estimation by Iterative Partial Least Squares, and SVDimpute algorithm?"
                        ]
                    },
                    {
                        "axiom": "pcaMethods propertyRestrictions [is published by hasValue Bioconductor]",
                        "CQ": [
                            "Are all PCA methods required to be published by Bioconductor?",
                            "Is it necessary that every PCA method is associated with a publication from Bioconductor?",
                            "Can a PCA method be considered valid if it is published by an entity other than Bioconductor?"
                        ]
                    },
                    {
                        "axiom": "pcaMethods propertyRestrictions [has specified data output some Graph plot]",
                        "CQ": [
                            "Is it required that PCA methods have at least one specified data output that is a graph plot?",
                            "Are there cases where PCA methods must produce a graph plot as a data output?",
                            "Does every PCA method necessarily specify a data output of the type graph plot?"
                        ]
                    },
                    {
                        "axiom": "pcaMethods propertyRestrictions [is executed in some (data visualization and cross validation)]",
                        "CQ": [
                            "Is it required that pcaMethods always execute in either data visualization or cross validation contexts?",
                            "Must every instance of pcaMethods be associated with execution in at least one of data visualization or cross validation?",
                            "Can pcaMethods be executed only in cases involving data visualization, cross validation, or both, but not outside these scenarios?"
                        ]
                    },
                    {
                        "axiom": "pcaMethods propertyRestrictions [has specified data input some [has format specification only R data frame]]",
                        "CQ": [
                            "Does every data input specified for pcaMethods necessarily have a format specification restricted only to R data frames?",
                            "Can a data input provided to pcaMethods have any format specification other than R data frame?",
                            "Is the format specification of data inputs for pcaMethods limited exclusively to R data frames for all relevant cases?"
                        ]
                    }
                ]
            },
            "TraML": {
                "axiom": {
                    "subClassOf": [
                        "XML",
                        "Mass spectrometry data format"
                    ]
                },
                "description": "TraML (Transition Markup Language) is a standardized format established by HUPO PSI MSS for representing mass spectrometry transitions. In the ontology, TraML is defined as a subclass of both XML and Mass spectrometry data format, situating it as a specialized XML-based data format specifically for encoding transition information within the mass spectrometry domain.",
                "CQ": [
                    {
                        "axiom": "TraML subClassOf XML",
                        "CQ": [
                            "Does TraML fall under the broader grouping of XML formats?",
                            "Which specific formats are categorized beneath XML, including TraML?",
                            "What higher-level classes does TraML inherit from within the ontology?"
                        ]
                    },
                    {
                        "axiom": "TraML subClassOf Mass spectrometry data format",
                        "CQ": [
                            "Is TraML classified under the broader category of Mass spectrometry data format?",
                            "Which data formats are narrower in scope than Mass spectrometry data format, such as TraML?",
                            "What higher-level categories include TraML as a member format?"
                        ]
                    }
                ]
            },
            "Sequence checksum generation": {
                "axiom": {
                    "subClassOf": [
                        "Generation"
                    ],
                    "propertyRestrictions": [
                        "[has input some Sequence]",
                        "[has topic some Data acquisition]"
                    ]
                },
                "description": "Sequence checksum generation is defined as a subclass of Generation. It requires, via property restrictions, that it has input some Sequence and is related to the topic of Data acquisition. Individuals of this class involve processes where a checksum is generated for a molecular sequence, serving as a method for verifying data integrity in the context of molecular data acquisition.",
                "CQ": [
                    {
                        "axiom": "Sequence checksum generation subClassOf Generation",
                        "CQ": [
                            "Is Sequence checksum generation classified under the broader category of Generation?",
                            "What are the subclasses encompassed by Generation, specifically including Sequence checksum generation?",
                            "Which more general classes does Sequence checksum generation belong to?"
                        ]
                    },
                    {
                        "axiom": "Sequence checksum generation propertyRestrictions [has input some Sequence]",
                        "CQ": [
                            "Does sequence checksum generation necessarily require at least one input of type Sequence?",
                            "Can sequence checksum generation occur without having any Sequence as an input?",
                            "Is every instance that has a Sequence as input associated with sequence checksum generation?"
                        ]
                    },
                    {
                        "axiom": "Sequence checksum generation propertyRestrictions [has topic some Data acquisition]",
                        "CQ": [
                            "Must every sequence checksum generation be associated with at least one data acquisition topic?",
                            "Is it possible for sequence checksum generation to have a topic other than data acquisition?",
                            "Does sequence checksum generation necessarily involve the property 'has topic' connecting it to data acquisition?"
                        ]
                    }
                ]
            },
            "TCoffee": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[is executed in some multiple sequence alignment]"
                    ]
                },
                "description": "TCoffee is defined as a subclass of software and is characterized by its essential role in executing at least one multiple sequence alignment. This means that any instance of TCoffee is a software application specifically involved in performing multiple sequence alignment tasks.",
                "CQ": [
                    {
                        "axiom": "TCoffee subClassOf software",
                        "CQ": [
                            "Is TCoffee categorized as a type of software?",
                            "Which software subclasses include TCoffee?",
                            "What are the parent classes of TCoffee?"
                        ]
                    },
                    {
                        "axiom": "TCoffee propertyRestrictions [is executed in some multiple sequence alignment]",
                        "CQ": [
                            "Is it necessary for TCoffee to be executed in a multiple sequence alignment?",
                            "Does TCoffee always participate in at least one multiple sequence alignment process?",
                            "Can TCoffee exist without being executed in a multiple sequence alignment?"
                        ]
                    }
                ]
            },
            "IntAct accession number": {
                "axiom": {
                    "subClassOf": [
                        "Protein interaction ID"
                    ]
                },
                "description": "IntAct accession number is defined as a subclass of Protein interaction ID, representing an accession number assigned to entries in the IntAct database. This class identifies unique entries documenting protein interactions within the IntAct database, ensuring standardized referencing and integration with protein interaction data resources.",
                "CQ": [
                    {
                        "axiom": "IntAct accession number subClassOf Protein interaction ID",
                        "CQ": [
                            "Is every IntAct accession number classified under Protein interaction ID?",
                            "Which identifier categories encompass IntAct accession number as a specialized type?",
                            "What distinct subclasses are included within Protein interaction ID?"
                        ]
                    }
                ]
            },
            "Protein chemical modifications": {
                "axiom": {
                    "subClassOf": [
                        "Protein sites, features and motifs"
                    ]
                },
                "description": "Protein chemical modifications is defined as a subclass of Protein sites, features and motifs. It refers to the topic concerning the chemical modification of a protein, encompassing alterations that affect specific protein sites or motifs. This class formalizes the grouping of all concepts related to protein chemical modifications within the broader context of protein features.",
                "CQ": [
                    {
                        "axiom": "Protein chemical modifications subClassOf Protein sites, features and motifs",
                        "CQ": [
                            "Are protein chemical modifications classified under the broader category of protein sites, features and motifs?",
                            "What specific subclasses exist within protein sites, features and motifs, including protein chemical modifications?",
                            "Which higher-level classes encompass protein chemical modifications?"
                        ]
                    }
                ]
            },
            "Microsatellites": {
                "axiom": {
                    "subClassOf": [
                        "DNA polymorphism"
                    ]
                },
                "description": "Microsatellites are a subclass of DNA polymorphism characterized by very short sequences of nucleotides, specifically repeats of cytosine and adenosine, that occur in tandem and vary in repeat number among individuals. These polymorphisms are notable for their variability in the number of sequence repeats, making them useful markers in genetic studies. The class definition centers on the presence of repeated short DNA sequences within a DNA molecule, with emphasis on their role in genetic diversity.",
                "CQ": [
                    {
                        "axiom": "Microsatellites subClassOf DNA polymorphism",
                        "CQ": [
                            "Are microsatellites recognized as a form of DNA polymorphism?",
                            "Which types of DNA polymorphism include microsatellites as a specific example?",
                            "What broader classifications does microsatellite fall under within the context of DNA polymorphism?"
                        ]
                    }
                ]
            },
            "Medicine": {
                "axiom": {
                    "subClassOf": [
                        "Topic"
                    ]
                },
                "description": "Medicine is defined as a subclass of Topic and is formally described as a subject concerned with research supporting healing through the diagnosis, treatment, and prevention of disease. This classification positions Medicine within the broader category of Topics, emphasizing its focus on health-related research and practices aimed at promoting healing and disease management.",
                "CQ": [
                    {
                        "axiom": "Medicine subClassOf Topic",
                        "CQ": [
                            "Is Medicine classified as a subset of Topic?",
                            "Which categories are broader than Medicine in the hierarchy?",
                            "What specific types fall under the category of Topic, including Medicine?"
                        ]
                    }
                ]
            },
            "Protein property calculation (from sequence)": {
                "axiom": {
                    "subClassOf": [
                        "Protein property calculation",
                        "Protein sequence analysis"
                    ]
                },
                "description": "Protein property calculation (from sequence) is defined as a subclass of both Protein property calculation and Protein sequence analysis. This class encompasses methods that calculate or predict physical or chemical properties—specifically non-positional properties—of a protein by processing its molecular sequence. The class focuses on deriving such properties based solely on sequence analysis, enabling the assessment of overall protein characteristics without reference to specific positional residues.",
                "CQ": [
                    {
                        "axiom": "Protein property calculation (from sequence) subClassOf Protein property calculation",
                        "CQ": [
                            "Is Protein property calculation (from sequence) categorized under the broader class of Protein property calculation?",
                            "Which specific methods are encompassed by Protein property calculation, including those derived from sequence information?",
                            "What general calculation classes does Protein property calculation (from sequence) fall under?"
                        ]
                    },
                    {
                        "axiom": "Protein property calculation (from sequence) subClassOf Protein sequence analysis",
                        "CQ": [
                            "Is Protein property calculation (from sequence) classified as a form of Protein sequence analysis?",
                            "Which analyses fall under Protein sequence analysis, including Protein property calculation (from sequence)?",
                            "To what higher-level analytical category does Protein property calculation (from sequence) belong?"
                        ]
                    }
                ]
            },
            "'domainsignatures'": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[implements some Gene-Set Enrichment Analysis]",
                        "[is encoded in some R language]",
                        "[has specified data input some Gene list]",
                        "[has specified data output some Graph plot]",
                        "[is executed in some descriptive statistical calculation]"
                    ]
                },
                "description": "domainsignatures is defined as a subclass of software, characterized by several functional and technical properties. Any instance of domainsignatures must implement some form of Gene-Set Enrichment Analysis, be encoded in the R language, and require a Gene list as its specified data input. Its output is defined as some kind of Graph plot, and its operation involves execution within the context of descriptive statistical calculation. This formalization positions domainsignatures within software applications focused on statistical interpretation and graphical presentation of gene enrichment data.",
                "CQ": [
                    {
                        "axiom": "'domainsignatures' subClassOf software",
                        "CQ": [
                            "Is every domainsignatures instance categorized under software?",
                            "Which specialized forms fall under the software class, such as domainsignatures?",
                            "What are the direct superclasses for domainsignatures?"
                        ]
                    },
                    {
                        "axiom": "'domainsignatures' propertyRestrictions [implements some Gene-Set Enrichment Analysis]",
                        "CQ": [
                            "Does every domainsignatures instance implement at least one Gene-Set Enrichment Analysis?",
                            "Is it required that domainsignatures are linked to the implementation of a Gene-Set Enrichment Analysis?",
                            "Must any domainsignatures entity have a relationship through 'implements' with some Gene-Set Enrichment Analysis?"
                        ]
                    },
                    {
                        "axiom": "'domainsignatures' propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is every domainsignature required to be encoded in at least one R language?",
                            "Are there any domainsignatures that must only be encoded in an R language and not in any other language?",
                            "Can a domainsignature exist without being encoded in an R language?"
                        ]
                    },
                    {
                        "axiom": "'domainsignatures' propertyRestrictions [has specified data input some Gene list]",
                        "CQ": [
                            "Is it required for 'domainsignatures' to have at least one specified data input that is a Gene list?",
                            "Can 'domainsignatures' possess a specified data input that is not a Gene list?",
                            "Does every 'domainsignatures' entity necessarily involve a specified data input related to Gene list?"
                        ]
                    },
                    {
                        "axiom": "'domainsignatures' propertyRestrictions [has specified data output some Graph plot]",
                        "CQ": [
                            "Is it required that domainsignatures have a specified data output of at least one Graph plot?",
                            "Can domainsignatures exist without producing any Graph plot as a specified data output?",
                            "Does every domainsignatures instance necessarily generate some data output classified as a Graph plot?"
                        ]
                    },
                    {
                        "axiom": "'domainsignatures' propertyRestrictions [is executed in some descriptive statistical calculation]",
                        "CQ": [
                            "Is every instance related by the 'domainsignatures' property required to be involved in at least one descriptive statistical calculation?",
                            "Must all uses of the 'domainsignatures' property refer to activities classified as descriptive statistical calculation?",
                            "Does the 'domainsignatures' property necessarily link entities to processes that are descriptive statistical calculations?"
                        ]
                    }
                ]
            },
            "GeneSNP ID": {
                "axiom": {
                    "subClassOf": [
                        "Sequence variation ID"
                    ]
                },
                "description": "GeneSNP ID is defined as a subclass of Sequence variation ID, representing an identifier specifically assigned to entries within the GeneSNP database. This class is intended to capture unique identifiers associated with sequence variations cataloged in the GeneSNP resource.",
                "CQ": [
                    {
                        "axiom": "GeneSNP ID subClassOf Sequence variation ID",
                        "CQ": [
                            "Is Sequence variation ID a broader class that encompasses GeneSNP ID?",
                            "Which identifiers fall under the category of Sequence variation ID, such as GeneSNP ID?",
                            "What more general identifier types does GeneSNP ID inherit from?"
                        ]
                    }
                ]
            },
            "Codon usage bias calculation": {
                "axiom": {
                    "subClassOf": [
                        "Codon usage analysis"
                    ],
                    "propertyRestrictions": [
                        "[has output some Codon usage bias]"
                    ]
                },
                "description": "Codon usage bias calculation is defined as a subclass of codon usage analysis. It is characterized by the production of at least one codon usage bias result as output. Members of this class specifically perform the calculation of codon usage bias, formally ensuring that any process or method classified here must output some form of codon usage bias metric as part of its analysis.",
                "CQ": [
                    {
                        "axiom": "Codon usage bias calculation subClassOf Codon usage analysis",
                        "CQ": [
                            "Is codon usage bias calculation classified as a type of codon usage analysis?",
                            "Which analysis methods are specialized forms of codon usage analysis, such as codon usage bias calculation?",
                            "To what broader analytical categories does codon usage bias calculation pertain?"
                        ]
                    },
                    {
                        "axiom": "Codon usage bias calculation propertyRestrictions [has output some Codon usage bias]",
                        "CQ": [
                            "Does every calculation of codon usage bias necessarily produce at least one output of the type Codon usage bias?",
                            "Is it required that a codon usage bias calculation yields an output within the Codon usage bias category?",
                            "Can a codon usage bias calculation exist without generating any Codon usage bias as output?"
                        ]
                    }
                ]
            },
            "Clustal": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[is executed in some multiple sequence alignment]"
                    ]
                },
                "description": "Clustal is defined as a subclass of software, specifically characterized by the requirement that it is executed in at least one multiple sequence alignment process. This formalization indicates that any instance of Clustal must play a role in the execution of multiple sequence alignment tasks, reflecting its intended use as an alignment software tool within bioinformatics applications.",
                "CQ": [
                    {
                        "axiom": "Clustal subClassOf software",
                        "CQ": [
                            "Is Clustal classified as a form of software?",
                            "Which software subclasses include Clustal?",
                            "What higher-level categories does Clustal fall under in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Clustal propertyRestrictions [is executed in some multiple sequence alignment]",
                        "CQ": [
                            "Is Clustal required to be executed in at least one multiple sequence alignment?",
                            "Does the execution of Clustal always involve a multiple sequence alignment process?",
                            "Can Clustal exist without being executed in any multiple sequence alignment?"
                        ]
                    }
                ]
            },
            "nexusnon": {
                "axiom": {
                    "subClassOf": [
                        "Textual format",
                        "Alignment format (text)",
                        "Sequence record format (text)"
                    ]
                },
                "description": "nexusnon is a textual sequence record format, formally defined as a subclass of \"Textual format\", \"Alignment format (text)\", and \"Sequence record format (text)\". It specifically refers to the Nexus/PAUP non-interleaved sequence format, which organizes sequence data in a non-interleaved manner for phylogenetic analyses and alignments.",
                "CQ": [
                    {
                        "axiom": "nexusnon subClassOf Textual format",
                        "CQ": [
                            "Is nexusnon classified as a more specific instance within the broader class of Textual format?",
                            "Which subclasses fall under Textual format, including nexusnon?",
                            "To which higher-level classes does nexusnon belong in the hierarchy?"
                        ]
                    },
                    {
                        "axiom": "nexusnon subClassOf Alignment format (text)",
                        "CQ": [
                            "Is nexusnon categorized under the broader class of Alignment format?",
                            "Which Alignment format subclasses are defined, including nexusnon?",
                            "To which superordinate classes does nexusnon belong within the Alignment format hierarchy?"
                        ]
                    },
                    {
                        "axiom": "nexusnon subClassOf Sequence record format (text)",
                        "CQ": [
                            "Is nexusnon categorized as a type of Sequence record format (text)?",
                            "What specific formats fall under the Sequence record format (text) category, including nexusnon?",
                            "Which broader format categories encompass nexusnon?"
                        ]
                    }
                ]
            },
            "Sequence composition calculation (protein)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Sequence composition calculation (protein) is a subclass of Obsolete concept (EDAM). This class represents calculations that determine the amino acid frequency or the word composition within a protein sequence, typically used to analyze sequence characteristics. As an obsolete concept, it indicates that this analytical function is outdated or has been superseded in the relevant ontology or domain context.",
                "CQ": [
                    {
                        "axiom": "Sequence composition calculation (protein) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Sequence composition calculation (protein) categorized under Obsolete concept (EDAM)?",
                            "Which concepts fall under the Obsolete concept (EDAM) category, such as Sequence composition calculation (protein)?",
                            "What broader class does Sequence composition calculation (protein) belong to in the ontology?"
                        ]
                    }
                ]
            },
            "PolyA signal detection": {
                "axiom": {
                    "subClassOf": [
                        "Nucleic acid sequence feature detection"
                    ]
                },
                "description": "PolyA signal detection is defined as a subclass of nucleic acid sequence feature detection. It refers specifically to the process of identifying polyadenylation signals within nucleotide sequences. This class inherits all characteristics of nucleic acid sequence feature detection and is distinguished by its focus on the detection of polyA signals, which are critical regulatory elements in gene expression and mRNA processing.",
                "CQ": [
                    {
                        "axiom": "PolyA signal detection subClassOf Nucleic acid sequence feature detection",
                        "CQ": [
                            "Is PolyA signal detection categorized as a type of Nucleic acid sequence feature detection?",
                            "Which detection methods are more specific than Nucleic acid sequence feature detection, including PolyA signal detection?",
                            "What higher-level detection categories does PolyA signal detection belong to?"
                        ]
                    }
                ]
            },
            "OrderedList": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[has specified data input some (Gene expression dataset and [has format specification some data format specification])]",
                        "[implements some Similarity score]",
                        "[is encoded in some R language]",
                        "[is executed in some differential expression analysis]",
                        "[has specified data output some (Gene list and [has format specification some data format specification])]"
                    ]
                },
                "description": "OrderedList is a subclass of software designed for differential expression analysis. It requires as input a gene expression dataset with an associated data format specification, and outputs a gene list, also accompanied by a format specification. OrderedList is implemented in the R programming language, executes within a differential expression analysis context, and provides similarity scoring functionality. These axioms define OrderedList as specialized analysis software with well-defined input/output standards and analytical capabilities, constrained to the context of gene expression data.",
                "CQ": [
                    {
                        "axiom": "OrderedList subClassOf software",
                        "CQ": [
                            "Does OrderedList fall under the broader category of software?",
                            "What categories encompass OrderedList as a subclass?",
                            "Which types of software include OrderedList as a more specific instance?"
                        ]
                    },
                    {
                        "axiom": "OrderedList propertyRestrictions [has specified data input some (Gene expression dataset and [has format specification some data format specification])]",
                        "CQ": [
                            "Is every OrderedList required to have at least one specified data input that is both a Gene expression dataset and has a format specification?",
                            "Can an OrderedList possess a specified data input only if it qualifies as a Gene expression dataset with an associated data format specification?",
                            "Does the property restriction enforce that OrderedLists reference data inputs that are both categorized as Gene expression datasets and constrained by a format specification?"
                        ]
                    },
                    {
                        "axiom": "OrderedList propertyRestrictions [implements some Similarity score]",
                        "CQ": [
                            "Is every OrderedList required to have at least one implementation with a Similarity score?",
                            "Can an OrderedList exist without implementing any Similarity score?",
                            "Does the ontology permit OrderedList to implement properties other than Similarity score?"
                        ]
                    },
                    {
                        "axiom": "OrderedList propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Must every OrderedList be encoded in at least one R language?",
                            "Is it possible for an OrderedList to exist without being encoded in any R language?",
                            "Does the encoding property of OrderedList necessarily involve some relationship with an R language?"
                        ]
                    },
                    {
                        "axiom": "OrderedList propertyRestrictions [is executed in some differential expression analysis]",
                        "CQ": [
                            "Is every OrderedList instance required to participate in at least one differential expression analysis through the is executed in property?",
                            "Can an OrderedList be present without being associated with any differential expression analysis via is executed in?",
                            "Which analyses must an OrderedList be involved in through the is executed in relationship?"
                        ]
                    },
                    {
                        "axiom": "OrderedList propertyRestrictions [has specified data output some (Gene list and [has format specification some data format specification])]",
                        "CQ": [
                            "Is it required that an OrderedList always has at least one specified data output that consists of a Gene list with some data format specification?",
                            "Can an OrderedList possess a specified data output only if it is both a Gene list and has a data format specification?",
                            "Does the property restriction enforce that any specified data output from an OrderedList is restricted to entities that qualify as both Gene list and conform to a data format specification?"
                        ]
                    }
                ]
            },
            "Gene name (Genolist)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Gene name (Genolist) is defined as a subclass of the Obsolete concept (EDAM), indicating that it is no longer actively used or maintained. This class represents the name assigned to a gene entry from the Genolist genes database.",
                "CQ": [
                    {
                        "axiom": "Gene name (Genolist) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Gene name (Genolist) classified as a kind of Obsolete concept (EDAM)?",
                            "What specific concepts fall under Obsolete concept (EDAM), including Gene name (Genolist)?",
                            "Which general types encompass Gene name (Genolist) within the ontology?"
                        ]
                    }
                ]
            },
            "Sequence composition plot": {
                "axiom": {
                    "subClassOf": [
                        "Sequence composition report",
                        "Plot"
                    ]
                },
                "description": "Sequence composition plot is defined as a subclass of both Sequence composition report and Plot, indicating that it inherits characteristics of compositional analysis reports and graphical representations. It represents a plot visualizing the character or word composition or their frequency within a molecular sequence, serving as a graphical summary of sequence content.",
                "CQ": [
                    {
                        "axiom": "Sequence composition plot subClassOf Sequence composition report",
                        "CQ": [
                            "Is Sequence composition plot classified as a type under Sequence composition report?",
                            "Which specific reports fall under Sequence composition report, such as Sequence composition plot?",
                            "Under which broader report categories is Sequence composition plot organized?"
                        ]
                    },
                    {
                        "axiom": "Sequence composition plot subClassOf Plot",
                        "CQ": [
                            "Is every Sequence composition plot categorized as a type of Plot?",
                            "Which Plot subclasses include Sequence composition plot?",
                            "What broader categories encompass Sequence composition plot?"
                        ]
                    }
                ]
            },
            "Gene ID (SGN)": {
                "axiom": {
                    "subClassOf": [
                        "Gene ID"
                    ]
                },
                "description": "Gene ID (SGN) is defined as a subclass of Gene ID and specifically refers to a gene identifier originating from the Sol Genomics Network. This class represents identifiers uniquely assigned to genes within the SGN resource, distinguishing them as a subset within the broader category of gene identifiers.",
                "CQ": [
                    {
                        "axiom": "Gene ID (SGN) subClassOf Gene ID",
                        "CQ": [
                            "Is every instance classified as Gene ID (SGN) also recognized under Gene ID?",
                            "What identifiers are categorized under Gene ID, specifically including Gene ID (SGN)?",
                            "Which higher-level identifier types encompass Gene ID (SGN)?"
                        ]
                    }
                ]
            },
            "Plugin": {
                "axiom": {
                    "subClassOf": [
                        "role"
                    ]
                },
                "description": "Plugin is defined as a subclass of role, indicating that it represents a specific type of role within the ontology. No additional property restrictions or disjointness axioms are present, so its characterization is currently limited to inheriting all features and constraints of the role class.",
                "CQ": [
                    {
                        "axiom": "Plugin subClassOf role",
                        "CQ": [
                            "Is Plugin categorized as a type of role?",
                            "Which entities are classified under the broader category of role, including Plugin?",
                            "To which higher-level categories does Plugin belong within the ontology?"
                        ]
                    }
                ]
            },
            "Restriction enzyme name": {
                "axiom": {
                    "subClassOf": [
                        "Enzyme name"
                    ]
                },
                "description": "Restriction enzyme name is a subclass of Enzyme name. It refers specifically to the name assigned to a restriction enzyme, a type of enzyme that recognizes and cuts DNA at specific sequences. This class is formally situated within the broader category of enzyme names, distinguishing names of restriction enzymes from other enzyme types.",
                "CQ": [
                    {
                        "axiom": "Restriction enzyme name subClassOf Enzyme name",
                        "CQ": [
                            "Is Restriction enzyme name classified under the broader category of Enzyme name?",
                            "What specific enzyme names are classified as subclasses of Enzyme name, including Restriction enzyme name?",
                            "Which general categories encompass Restriction enzyme name within the enzyme classification?"
                        ]
                    }
                ]
            },
            "Nucleic acid features (siRNA)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Nucleic acid features (siRNA) is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer an active or recommended term within the ontology. According to its definition, this class refers to a report on siRNA duplexes in mRNA. This formalization designates the class as representing obsolete concepts specifically related to the documentation of siRNA duplex features in messenger RNA.",
                "CQ": [
                    {
                        "axiom": "Nucleic acid features (siRNA) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Obsolete concept (EDAM) a broader category that includes Nucleic acid features (siRNA)?",
                            "Which concepts are more specific than Obsolete concept (EDAM), such as Nucleic acid features (siRNA)?",
                            "To which higher-level classifications does Nucleic acid features (siRNA) belong?"
                        ]
                    }
                ]
            },
            "Pairwise protein tertiary structure alignment (all atoms)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Pairwise protein tertiary structure alignment (all atoms) is an obsolete concept, classified as a subclass of Obsolete concept (EDAM). It refers to the alignment (superimposition) of exactly two protein tertiary (3D) structures, where all atoms are considered in the comparison. This class is no longer in active use, as indicated by its placement under the obsolete category.",
                "CQ": [
                    {
                        "axiom": "Pairwise protein tertiary structure alignment (all atoms) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Pairwise protein tertiary structure alignment (all atoms) classified as an instance of the broader Obsolete concept (EDAM)?",
                            "Which specific concepts are classified under Obsolete concept (EDAM), including Pairwise protein tertiary structure alignment (all atoms)?",
                            "To which upper-level categories does Pairwise protein tertiary structure alignment (all atoms) belong?"
                        ]
                    }
                ]
            },
            "SVG": {
                "axiom": {
                    "subClassOf": [
                        "vector image format"
                    ]
                },
                "description": "SVG is defined as a subclass of vector image format, indicating that every SVG is a type of vector image format. This classification situates SVG within the broader category of digital graphics that encode images using geometric and vector-based representations rather than rasterized pixels.",
                "CQ": [
                    {
                        "axiom": "SVG subClassOf vector image format",
                        "CQ": [
                            "Does SVG fall under the broader classification of vector image format?",
                            "Which image formats are included as subclasses within vector image format, such as SVG?",
                            "Of which more general categories is SVG a member according to the ontology?"
                        ]
                    }
                ]
            },
            "Dotplot": {
                "axiom": {
                    "subClassOf": [
                        "Sequence alignment report"
                    ]
                },
                "description": "Dotplot is defined as a subclass of Sequence alignment report. It represents a report or graphical representation that depicts sequence similarities, typically identified through word-matching or character comparison methods. Members of this class provide visual summaries to highlight regions of similarity between biological sequences, facilitating the analysis of alignment patterns.",
                "CQ": [
                    {
                        "axiom": "Dotplot subClassOf Sequence alignment report",
                        "CQ": [
                            "Is Dotplot categorized under the broader class of Sequence alignment report?",
                            "Which report types are more specific than Sequence alignment report, such as Dotplot?",
                            "To which general categories does Dotplot belong within the context of sequence alignment documentation?"
                        ]
                    }
                ]
            },
            "Systems biology": {
                "axiom": {
                    "subClassOf": [
                        "Biology"
                    ]
                },
                "description": "Systems biology is defined as a subclass of Biology, focused on the holistic modeling and analysis of complex biological systems and their interactions. This class includes resources such as databases of models and methods used to construct or analyze these models, emphasizing an integrative approach to understanding biological complexity.",
                "CQ": [
                    {
                        "axiom": "Systems biology subClassOf Biology",
                        "CQ": [
                            "Is Systems biology classified as a specialized field within Biology?",
                            "What specific branches are encompassed by Biology, including Systems biology?",
                            "To which higher-level categories does Systems biology pertain?"
                        ]
                    }
                ]
            },
            "Sequence image": {
                "axiom": {
                    "subClassOf": [
                        "Sequence report",
                        "Image"
                    ]
                },
                "description": "Sequence image is defined as a subclass of both Sequence report and Image, indicating that it possesses characteristics of both categories. It represents an image depicting a molecular sequence, which may also display specific sequence features or properties. This formalization ensures that any individual classified as a Sequence image is simultaneously considered both a type of Sequence report and an Image, and specifically serves to visually convey molecular sequence information and its associated annotations.",
                "CQ": [
                    {
                        "axiom": "Sequence image subClassOf Sequence report",
                        "CQ": [
                            "Is Sequence report a generalization of Sequence image?",
                            "Which specific types fall under the category of Sequence report, including Sequence image?",
                            "What broader concepts encompass Sequence image in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Sequence image subClassOf Image",
                        "CQ": [
                            "Does Sequence image fall under the broader classification of Image?",
                            "Which specific types are encompassed by the category Image, such as Sequence image?",
                            "What higher-level categories does Sequence image pertain to within the ontology?"
                        ]
                    }
                ]
            },
            "newick": {
                "axiom": {
                    "subClassOf": [
                        "Textual format",
                        "Phylogenetic tree format (text)"
                    ]
                },
                "description": "newick is defined as a subclass of both Textual format and Phylogenetic tree format (text). It represents a specific text-based notation for encoding phylogenetic trees, commonly referred to as the Newick format. This formalization positions newick within the hierarchy of textual data formats, specifically those used to represent phylogenetic tree structures.",
                "CQ": [
                    {
                        "axiom": "newick subClassOf Textual format",
                        "CQ": [
                            "Does newick fall under the general category of Textual format?",
                            "Which formats are subclassified beneath Textual format, such as newick?",
                            "What broader classifications encompass newick as a specific type?"
                        ]
                    },
                    {
                        "axiom": "newick subClassOf Phylogenetic tree format (text)",
                        "CQ": [
                            "Is newick a specific type of format under Phylogenetic tree format (text)?",
                            "What formats are classified as specializations of Phylogenetic tree format (text), such as newick?",
                            "Which general format classes encompass newick?"
                        ]
                    }
                ]
            },
            "Codon usage table": {
                "axiom": {
                    "subClassOf": [
                        "data"
                    ],
                    "propertyRestrictions": [
                        "[has topic some Gene expression]"
                    ]
                },
                "description": "Codon usage table is a subclass of data that specifically pertains to gene expression. It represents a structured table containing codon usage data calculated from one or more nucleic acid sequences. Such a table typically includes its name, optional comments, and columns listing codons alongside their corresponding usage data. Additionally, a codon usage table can be used to extract or represent a genetic code, providing valuable insights into the patterns of codon utilization associated with gene expression.",
                "CQ": [
                    {
                        "axiom": "Codon usage table subClassOf data",
                        "CQ": [
                            "Is Codon usage table classified as a type of data?",
                            "Which entities are more specific forms under data, such as Codon usage table?",
                            "What broader categories encompass Codon usage table within the ontology?"
                        ]
                    },
                    {
                        "axiom": "Codon usage table propertyRestrictions [has topic some Gene expression]",
                        "CQ": [
                            "Is it required that every Codon usage table is associated with some aspect of Gene expression through the has topic property?",
                            "Can a Codon usage table exist without referencing Gene expression as a topic?",
                            "Does the presence of a 'has topic' relationship to Gene expression define Codon usage tables?"
                        ]
                    }
                ]
            },
            "Dihedral angle validation": {
                "axiom": {
                    "subClassOf": [
                        "Protein model validation"
                    ]
                },
                "description": "Dihedral angle validation is a subclass of protein model validation. It is defined as the process of identifying, for each residue in a protein structure, any improper dihedral (phi/psi) angles. This class characterizes validation approaches focused specifically on assessing the correctness of backbone torsion angles in protein models.",
                "CQ": [
                    {
                        "axiom": "Dihedral angle validation subClassOf Protein model validation",
                        "CQ": [
                            "Does Dihedral angle validation fall under the broader classification of Protein model validation?",
                            "Which validation methods are categorized as more specific types of Protein model validation, such as Dihedral angle validation?",
                            "What are the overarching validation categories that encompass Dihedral angle validation?"
                        ]
                    }
                ]
            },
            "InterPro architecture image": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "InterPro architecture image is defined as a subclass of Obsolete concept (EDAM). It represents an image that visually depicts the arrangement of InterPro domains within a protein sequence, illustrating domain architecture as a series of non-overlapping domains. Such images may be generated from sequences screened against InterPro or derived directly from InterPro entry sequences. This class is considered obsolete.",
                "CQ": [
                    {
                        "axiom": "InterPro architecture image subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is InterPro architecture image categorized under Obsolete concept (EDAM)?",
                            "Which specific concepts are subclasses of Obsolete concept (EDAM), including InterPro architecture image?",
                            "Under which broader concept does InterPro architecture image fall?"
                        ]
                    }
                ]
            },
            "Reaction ID (KEGG)": {
                "axiom": {
                    "subClassOf": [
                        "KEGG object identifier",
                        "Reaction ID"
                    ]
                },
                "description": "Reaction ID (KEGG) is defined as a subclass of both KEGG object identifier and Reaction ID. It denotes a unique identifier assigned to a biological reaction within the KEGG reactions database. This class is used to represent and reference specific biological reactions catalogued by KEGG through a standardized identifier.",
                "CQ": [
                    {
                        "axiom": "Reaction ID (KEGG) subClassOf KEGG object identifier",
                        "CQ": [
                            "Is Reaction ID (KEGG) classified as a type of KEGG object identifier?",
                            "Which entities are more specific than KEGG object identifier, such as Reaction ID (KEGG)?",
                            "What broader identifier classes include Reaction ID (KEGG)?"
                        ]
                    },
                    {
                        "axiom": "Reaction ID (KEGG) subClassOf Reaction ID",
                        "CQ": [
                            "Are all Reaction ID (KEGG) instances classified under Reaction ID?",
                            "Which identifiers constitute subclasses of Reaction ID, specifically including Reaction ID (KEGG)?",
                            "Which upper-level categories include Reaction ID (KEGG) as a subclass?"
                        ]
                    }
                ]
            },
            "CRAM": {
                "axiom": {
                    "subClassOf": [
                        "Binary format",
                        "Alignment format (pair only)"
                    ]
                },
                "description": "CRAM is a subclass of both Binary format and Alignment format (pair only), representing a file format used for storing pairwise alignments in a compressed binary representation. It is defined by its use of reference-based compression to efficiently encode alignment data, distinguishing it from other binary or alignment formats.",
                "CQ": [
                    {
                        "axiom": "CRAM subClassOf Binary format",
                        "CQ": [
                            "Is CRAM classified under the general category of Binary format?",
                            "What are the specific subtypes encompassed by Binary format, such as CRAM?",
                            "Which broader categories does CRAM fall into within the ontology?"
                        ]
                    },
                    {
                        "axiom": "CRAM subClassOf Alignment format (pair only)",
                        "CQ": [
                            "Is CRAM classified as a type of Alignment format (pair only)?",
                            "Which specific formats are categorized under Alignment format (pair only), and does this include CRAM?",
                            "What are the broader categories encompassing CRAM within alignment format classification?"
                        ]
                    }
                ]
            },
            "organization": {
                "axiom": {
                    "subClassOf": [
                        "material entity"
                    ]
                },
                "description": "organization is defined as a subclass of material entity, indicating that every organization is regarded as a physical or material entity within the ontology. There are currently no further property restrictions or disjointness axioms specified for this class, so its definition is limited to its position as a specialized type of material entity.",
                "CQ": [
                    {
                        "axiom": "organization subClassOf material entity",
                        "CQ": [
                            "Is an organization categorized as a type of material entity?",
                            "Which entities are classified as more specific forms of material entity, such as organization?",
                            "To what higher-level categories does organization belong according to the ontology?"
                        ]
                    }
                ]
            },
            "Protein cleavage sites": {
                "axiom": {
                    "subClassOf": [
                        "Protein sites, features and motifs"
                    ]
                },
                "description": "Protein cleavage sites is a subclass of Protein sites, features and motifs, representing locations within a protein sequence where cleavage by a proteolytic enzyme or agent occurs. This class specifically captures the sites of proteolytic processing, which are essential for understanding post-translational modifications and protein maturation.",
                "CQ": [
                    {
                        "axiom": "Protein cleavage sites subClassOf Protein sites, features and motifs",
                        "CQ": [
                            "Are protein cleavage sites included as a specific type within protein sites, features and motifs?",
                            "What specialized categories exist under protein sites, features and motifs, such as protein cleavage sites?",
                            "Which broader classes encompass the concept of protein cleavage sites?"
                        ]
                    }
                ]
            },
            "URN": {
                "axiom": {
                    "subClassOf": [
                        "URI"
                    ]
                },
                "description": "URN is defined as a subclass of URI, indicating that every URN is also a URI. It represents a Uniform Resource Name, which is a specific type of URI intended to serve as a unique, persistent identifier for a resource, independent of its location.",
                "CQ": [
                    {
                        "axiom": "URN subClassOf URI",
                        "CQ": [
                            "Is URN categorized as a type of URI?",
                            "Which entities are classified under the URI category, including URN?",
                            "To what higher-level class does the concept of URN belong?"
                        ]
                    }
                ]
            },
            "Bayesian Model": {
                "axiom": {
                    "subClassOf": [
                        "algorithm"
                    ]
                },
                "description": "Bayesian Model is defined as a subclass of algorithm, indicating that it is a specialized form of algorithm. Members of this class use principles of Bayesian inference to update probabilities or model parameters based on observed data, aligning with the general approach of algorithms in processing and decision-making.",
                "CQ": [
                    {
                        "axiom": "Bayesian Model subClassOf algorithm",
                        "CQ": [
                            "Is Bayesian Model classified as a specific type of algorithm?",
                            "What are the direct subclasses of algorithm, such as Bayesian Model?",
                            "For which parent categories does Bayesian Model qualify as a member?"
                        ]
                    }
                ]
            },
            "bigBed": {
                "axiom": {
                    "subClassOf": [
                        "Binary format",
                        "Sequence annotation track format"
                    ]
                },
                "description": "bigBed is a subclass of both Binary format and Sequence annotation track format, representing a file format used to store large-scale sequence annotation tracks. It is defined as a binary embodiment of the textual BED format, designed for efficient storage and access to extensive genomic annotation data.",
                "CQ": [
                    {
                        "axiom": "bigBed subClassOf Binary format",
                        "CQ": [
                            "Is bigBed categorized under Binary format?",
                            "Which data formats are classified as more specific types of Binary format, such as bigBed?",
                            "To which broader format categories does bigBed belong?"
                        ]
                    },
                    {
                        "axiom": "bigBed subClassOf Sequence annotation track format",
                        "CQ": [
                            "Is bigBed classified under the general category of Sequence annotation track format?",
                            "What formats are considered specializations of Sequence annotation track format, such as bigBed?",
                            "Which higher-level track format categories include bigBed as a member?"
                        ]
                    }
                ]
            },
            "Standardization and normalization": {
                "axiom": {
                    "subClassOf": [
                        "Analysis"
                    ]
                },
                "description": "Standardization and normalization is a subclass of Analysis, focusing specifically on processes designed to standardize or normalize data. Members of this class represent analytical procedures or techniques whose primary purpose is to bring data into a common format or scale, ensuring comparability and consistency across datasets.",
                "CQ": [
                    {
                        "axiom": "Standardization and normalization subClassOf Analysis",
                        "CQ": [
                            "Is Standardization and normalization categorized under the broader class of Analysis?",
                            "What types of Analysis include Standardization and normalization as a subclass?",
                            "Which general classes encompass Standardization and normalization?"
                        ]
                    }
                ]
            },
            "Job metadata": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Job metadata is a subclass of Obsolete concept (EDAM) and represents textual metadata associated with a submitted or completed job. This class encapsulates descriptive information pertaining to job instances, but is considered obsolete within the EDAM ontology context.",
                "CQ": [
                    {
                        "axiom": "Job metadata subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Job metadata an instance of the broader category Obsolete concept (EDAM)?",
                            "What concepts are categorized as subclasses of Obsolete concept (EDAM)?",
                            "Which broader categories encompass Job metadata?"
                        ]
                    }
                ]
            },
            "Platform unrestricted": {
                "axiom": {
                    "subClassOf": [
                        "Platform clause"
                    ]
                },
                "description": "Platform unrestricted is defined as a subclass of Platform clause. This means every instance of Platform unrestricted is also a Platform clause, inheriting all its properties and relationships, but may have no additional restrictions or specific platform-related constraints imposed by its definition.",
                "CQ": [
                    {
                        "axiom": "Platform unrestricted subClassOf Platform clause",
                        "CQ": [
                            "Does Platform unrestricted fall under the classification of Platform clause?",
                            "Which specific types are encompassed by the Platform clause class, such as Platform unrestricted?",
                            "What are the broader classes to which Platform unrestricted is assigned?"
                        ]
                    }
                ]
            },
            "Cellular process pathways report": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Cellular process pathways report is defined as a subclass of the obsolete concept (EDAM), indicating that it represents a topic that is no longer in active use or is deprecated. According to its definition, it concerns topics related to cellular process pathways—mechanisms and interactions that occur within cells. This class should not be used for new classifications due to its obsolete status.",
                "CQ": [
                    {
                        "axiom": "Cellular process pathways report subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Cellular process pathways report classified under the broader category of Obsolete concept (EDAM)?",
                            "What are the specific concepts that fall within Obsolete concept (EDAM), such as Cellular process pathways report?",
                            "Which higher-level categories does Cellular process pathways report belong to?"
                        ]
                    }
                ]
            },
            "TIGRFam ID": {
                "axiom": {
                    "subClassOf": [
                        "Protein family accession"
                    ]
                },
                "description": "TIGRFam ID is defined as a subclass of Protein family accession. It represents the accession number assigned to an entry (family) within the TIGRFam database, serving as a unique identifier for protein families curated in this resource.",
                "CQ": [
                    {
                        "axiom": "TIGRFam ID subClassOf Protein family accession",
                        "CQ": [
                            "Is TIGRFam ID classified as a specific type of Protein family accession?",
                            "What kinds of identifiers are encompassed under the category of Protein family accession?",
                            "To which broader accession categories does TIGRFam ID pertain?"
                        ]
                    }
                ]
            },
            "Affymetrix probe sets information library file": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Affymetrix probe sets information library file is defined as a subclass of the obsolete concept (EDAM), indicating it is no longer considered current or maintained. This class represents Affymetrix library files that contain information about probe sets, including details such as the gene name associated with each probe set.",
                "CQ": [
                    {
                        "axiom": "Affymetrix probe sets information library file subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Does Affymetrix probe sets information library file fall under the category of Obsolete concept (EDAM)?",
                            "Which concepts are subclasses of Obsolete concept (EDAM), including Affymetrix probe sets information library file?",
                            "What higher-level classifications include Affymetrix probe sets information library file?"
                        ]
                    }
                ]
            },
            "Data security": {
                "axiom": {
                    "subClassOf": [
                        "Data management"
                    ]
                },
                "description": "Data security is defined as a subclass of Data management, focusing specifically on the protection of data assets. According to its current description, it addresses the safeguarding of data—including sensitive information such as patient health data—against unauthorized access, use, disclosure, disruption, modification, or destruction. This class thus captures all concepts and measures related to maintaining the confidentiality, integrity, and availability of data within broader data management practices.",
                "CQ": [
                    {
                        "axiom": "Data security subClassOf Data management",
                        "CQ": [
                            "Is Data security categorized as a type of Data management?",
                            "Which concepts are defined as narrower than Data management, including Data security?",
                            "What broader classifications does Data security fall under?"
                        ]
                    }
                ]
            },
            "ARACNE algorithm": {
                "axiom": {
                    "subClassOf": [
                        "algorithm"
                    ]
                },
                "description": "ARACNE algorithm is defined as a subclass of algorithm. As an algorithm, it inherits the general properties and characteristics associated with computational procedures or problem-solving methods. No further axioms or distinguishing features are specified, so the class represents the set of algorithms known as ARACNE, without additional constraints or relations.",
                "CQ": [
                    {
                        "axiom": "ARACNE algorithm subClassOf algorithm",
                        "CQ": [
                            "Is the ARACNE algorithm encompassed under the general class of algorithms?",
                            "Which algorithms includes ARACNE algorithm as a specialized subclass?",
                            "What broader categories in the ontology does ARACNE algorithm fall under?"
                        ]
                    }
                ]
            },
            "Sequence composition table": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Sequence composition table is defined as a subclass of Obsolete concept (EDAM). It represents a table that summarizes the composition or frequency of characters or words in a molecular sequence. This class is considered obsolete within the EDAM ontology.",
                "CQ": [
                    {
                        "axiom": "Sequence composition table subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Sequence composition table categorized under Obsolete concept (EDAM)?",
                            "Which concepts are defined as subclasses of Obsolete concept (EDAM), including Sequence composition table?",
                            "What broader categories encompass Sequence composition table in the ontology?"
                        ]
                    }
                ]
            },
            "Data retrieval (database cross-reference)": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Data retrieval (database cross-reference) is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer in active use within the ontology. It refers to the action of searching a database to retrieve all relevant references to a particular entity or entry. This class has been deprecated and should be replaced with more current practices or concepts in data retrieval and database referencing.",
                "CQ": [
                    {
                        "axiom": "Data retrieval (database cross-reference) subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Data retrieval (database cross-reference) categorized as a kind of Obsolete concept (EDAM)?",
                            "Which concepts are classified as subclasses of Obsolete concept (EDAM), including Data retrieval (database cross-reference)?",
                            "What more general types does Data retrieval (database cross-reference) belong to within the ontology?"
                        ]
                    }
                ]
            },
            "Protein structural motif": {
                "axiom": {
                    "subClassOf": [
                        "Protein structure"
                    ]
                },
                "description": "Protein structural motif is a subclass of Protein structure, representing a 3D coordinate and associated data for a protein (3D) structural motif. It refers to any group of contiguous or non-contiguous amino acid residues, typically forming a feature with a structural or functional role within the protein. This class captures structural motifs that are defined by their spatial configuration and functional or structural significance within protein architecture.",
                "CQ": [
                    {
                        "axiom": "Protein structural motif subClassOf Protein structure",
                        "CQ": [
                            "Is every Protein structural motif included within the collection of Protein structures?",
                            "Which types fall under the category of Protein structure, such as Protein structural motif?",
                            "What broader classifications does Protein structural motif belong to?"
                        ]
                    }
                ]
            },
            "Staden format": {
                "axiom": {
                    "subClassOf": [
                        "Textual format",
                        "Sequence record format (text)"
                    ]
                },
                "description": "Staden format is a type of sequence record format represented in text, and is a subclass of both Textual format and Sequence record format (text). It is specifically used by the Staden suite, providing a structured means to record biological sequence data in a textual form.",
                "CQ": [
                    {
                        "axiom": "Staden format subClassOf Textual format",
                        "CQ": [
                            "Does Staden format fall under the broader classification of Textual format?",
                            "Which specific formats are classified as subtypes of Textual format, such as Staden format?",
                            "What general categories encompass Staden format within the hierarchy?"
                        ]
                    },
                    {
                        "axiom": "Staden format subClassOf Sequence record format (text)",
                        "CQ": [
                            "Is every Staden format classified under Sequence record format?",
                            "Which sequence record formats encompass Staden format as a more specific type?",
                            "Under which broader record format categories is Staden format organized?"
                        ]
                    }
                ]
            },
            "ChEBI concept ID": {
                "axiom": {
                    "subClassOf": [
                        "Ontology concept ID"
                    ]
                },
                "description": "ChEBI concept ID is defined as a subclass of Ontology concept ID. It represents an identifier assigned to a concept within the ChEBI ontology, used for uniquely referencing entities in the ChEBI (Chemical Entities of Biological Interest) ontology.",
                "CQ": [
                    {
                        "axiom": "ChEBI concept ID subClassOf Ontology concept ID",
                        "CQ": [
                            "Which ontology concepts are superclasses of ChEBI concept IDs?",
                            "What specific ChEBI concept IDs are categorized under a given ontology concept ID?",
                            "Is every ChEBI concept ID necessarily included in an ontology concept ID category?"
                        ]
                    }
                ]
            },
            "ClustalW format": {
                "axiom": {
                    "subClassOf": [
                        "Textual format",
                        "Alignment format (text)"
                    ]
                },
                "description": "ClustalW format is a type of textual format that is also classified as an alignment format (text), meaning it is intended for representing sequence alignments in a human-readable text form. It is specifically defined for aligned biological sequences, as described in its definition, and inherits structural properties from both the general category of textual formats and the more specific alignment formats.",
                "CQ": [
                    {
                        "axiom": "ClustalW format subClassOf Textual format",
                        "CQ": [
                            "Is ClustalW format classified under the broader class of Textual format?",
                            "What specific formats are categorized as subtypes of Textual format, including ClustalW format?",
                            "To which higher-level categories is ClustalW format hierarchically related?"
                        ]
                    },
                    {
                        "axiom": "ClustalW format subClassOf Alignment format (text)",
                        "CQ": [
                            "Is ClustalW format categorized under Alignment format?",
                            "Which formats fall into the subclass category of Alignment format?",
                            "What broader format classifications encompass ClustalW format?"
                        ]
                    }
                ]
            },
            "Structural data": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Structural data is a subclass of Obsolete concept (EDAM), serving as a broad data type intended as a placeholder for more specific data types. It encompasses data related to molecular structural information, although its classification as an obsolete concept indicates it has been superseded by more precise categories within the domain.",
                "CQ": [
                    {
                        "axiom": "Structural data subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Structural data classified under the Obsolete concept (EDAM) category?",
                            "Which more specific concepts are encompassed by Obsolete concept (EDAM), such as Structural data?",
                            "What broader ontological groups include Structural data within the EDAM schema?"
                        ]
                    }
                ]
            },
            "gct": {
                "axiom": {
                    "subClassOf": [
                        "tab delimited file format"
                    ]
                },
                "description": "gct is defined as a subclass of tab delimited file format. This means that every gct instance is a specific type of tab delimited file format, inheriting all characteristics of tab-delimited file formats while possibly adding further constraints or conventions unique to gct.",
                "CQ": [
                    {
                        "axiom": "gct subClassOf tab delimited file format",
                        "CQ": [
                            "Is gct categorized under tab delimited file format?",
                            "Which file formats are classified as specializations of tab delimited file format, such as gct?",
                            "What broader file format categories encompass gct?"
                        ]
                    }
                ]
            },
            "Protein structural motifs and surfaces": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)",
                        "Protein structure analysis",
                        "Protein sites, features and motifs"
                    ]
                },
                "description": "Protein structural motifs and surfaces is a subclass of Obsolete concept (EDAM), Protein structure analysis, and Protein sites, features and motifs. This class encompasses conserved substructures, geometry of secondary structure elements, and spatial arrangements within protein backbones. It also includes aspects related to solvent-exposed surfaces and internal cavities, addressing analyses of shape, hydropathy, electrostatic patches, and related roles and functions. The class captures topics concerning three-dimensional structural features or common 3D motifs in proteins, as well as functional surface regions such as biological interfaces with other molecules.",
                "CQ": [
                    {
                        "axiom": "Protein structural motifs and surfaces subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Are Protein structural motifs and surfaces categorized as a type of Obsolete concept (EDAM)?",
                            "Which concepts fall under the broader classification of Obsolete concept (EDAM), including Protein structural motifs and surfaces?",
                            "What higher-level categories encompass Protein structural motifs and surfaces within the ontology?"
                        ]
                    },
                    {
                        "axiom": "Protein structural motifs and surfaces subClassOf Protein structure analysis",
                        "CQ": [
                            "Are protein structural motifs and surfaces encompassed within the scope of protein structure analysis?",
                            "Which analysis types are hierarchically subordinate to protein structure analysis, such as protein structural motifs and surfaces?",
                            "Under which umbrella categories is protein structural motifs and surfaces classified?"
                        ]
                    },
                    {
                        "axiom": "Protein structural motifs and surfaces subClassOf Protein sites, features and motifs",
                        "CQ": [
                            "Is \"Protein structural motifs and surfaces\" classified under the broader group \"Protein sites, features and motifs\"?",
                            "Which entities are defined as more specific components within \"Protein sites, features and motifs\"?",
                            "What broader categories encompass \"Protein structural motifs and surfaces\"?"
                        ]
                    }
                ]
            },
            "TreeCon format": {
                "axiom": {
                    "subClassOf": [
                        "Textual format",
                        "Phylogenetic tree format (text)"
                    ]
                },
                "description": "TreeCon format is a type of phylogenetic tree format represented in text form. It is defined as a subclass of both Textual format and Phylogenetic tree format (text). The TreeCon format is specifically used for representing phylogenetic trees in a textual notation.",
                "CQ": [
                    {
                        "axiom": "TreeCon format subClassOf Textual format",
                        "CQ": [
                            "Is TreeCon format considered a specialized kind of Textual format?",
                            "What are the different subtypes classified under Textual format, including TreeCon format?",
                            "Which broader formats encompass TreeCon format as a member?"
                        ]
                    },
                    {
                        "axiom": "TreeCon format subClassOf Phylogenetic tree format (text)",
                        "CQ": [
                            "Is TreeCon format categorized under the broader class of Phylogenetic tree format?",
                            "What specific formats fall under Phylogenetic tree format, such as TreeCon format?",
                            "Which higher-level format classes does TreeCon format belong to?"
                        ]
                    }
                ]
            },
            "'t-test'": {
                "axiom": {
                    "subClassOf": [
                        "algorithm"
                    ]
                },
                "description": "t-test is defined as a subclass of algorithm, indicating that it is a type of statistical procedure within the broader category of algorithms. This class represents methods used to determine if there is a significant difference between the means of two groups, commonly used in statistical hypothesis testing.",
                "CQ": [
                    {
                        "axiom": "'t-test' subClassOf algorithm",
                        "CQ": [
                            "Is 't-test' categorized as a specific type of algorithm?",
                            "Which types fall under the broader class of algorithm, such as 't-test'?",
                            "What overarching classes include 't-test' as a member?"
                        ]
                    }
                ]
            },
            "Sequence cluster ID (UniRef)": {
                "axiom": {
                    "subClassOf": [
                        "Sequence cluster ID"
                    ]
                },
                "description": "Sequence cluster ID (UniRef) is a subclass of Sequence cluster ID and is defined as the unique identifier of an entry from the UniRef database. This identifier is used to reference specific sequence clusters within the UniRef resource, ensuring precise and standardized access to cluster information.",
                "CQ": [
                    {
                        "axiom": "Sequence cluster ID (UniRef) subClassOf Sequence cluster ID",
                        "CQ": [
                            "Is Sequence cluster ID (UniRef) classified under the general category of Sequence cluster ID?",
                            "Which identifiers are more specific types of Sequence cluster ID, such as Sequence cluster ID (UniRef)?",
                            "What broader identifier categories does Sequence cluster ID (UniRef) fall under?"
                        ]
                    }
                ]
            },
            "Pathway ID (PharmGKB)": {
                "axiom": {
                    "subClassOf": [
                        "Pathway or network accession",
                        "PharmGKB ID"
                    ]
                },
                "description": "Pathway ID (PharmGKB) is defined as an identifier for pathways specifically within the PharmGKB database, which focuses on pharmacogenetics and pharmacogenomics. This class is a subclass of both ‘Pathway or network accession’ and ‘PharmGKB ID’, situating it as a specialized identifier that uniquely refers to biochemical pathways catalogued by PharmGKB.",
                "CQ": [
                    {
                        "axiom": "Pathway ID (PharmGKB) subClassOf Pathway or network accession",
                        "CQ": [
                            "Is Pathway ID (PharmGKB) classified as a kind of Pathway or network accession?",
                            "Which identifiers are encompassed under Pathway or network accession, including Pathway ID (PharmGKB)?",
                            "To which higher-level accession categories does Pathway ID (PharmGKB) belong?"
                        ]
                    },
                    {
                        "axiom": "Pathway ID (PharmGKB) subClassOf PharmGKB ID",
                        "CQ": [
                            "Is Pathway ID (PharmGKB) classified under PharmGKB ID?",
                            "Which identifier types are encompassed by PharmGKB ID, including Pathway ID (PharmGKB)?",
                            "What broader identifier categories include Pathway ID (PharmGKB)?"
                        ]
                    }
                ]
            },
            "IRanges": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[is executed in some data normalization]",
                        "[has specified data input some (data and [has format specification some R data frame])]",
                        "[is executed in some decision tree induction]",
                        "[is encoded in some R language]",
                        "[has specified data output some (data and [has format specification some R data frame])]"
                    ]
                },
                "description": "IRanges is defined as a subclass of software characterized by several key properties. It is encoded in the R language and operates in the context of data normalization and decision tree induction processes. IRanges requires input data in the form of an R data frame and produces output data also formatted as an R data frame. These property restrictions specify the technical environment and data formats integral to IRanges, emphasizing its role in R-based data workflows and its utility in data preprocessing and machine learning tasks.",
                "CQ": [
                    {
                        "axiom": "IRanges subClassOf software",
                        "CQ": [
                            "Can IRanges be classified as a type of software?",
                            "What instances are included within the subclasses of software, such as IRanges?",
                            "Which broader classes encompass IRanges?"
                        ]
                    },
                    {
                        "axiom": "IRanges propertyRestrictions [is executed in some data normalization]",
                        "CQ": [
                            "Does every IRanges entity participate in at least one execution within a data normalization process?",
                            "Is it mandatory for IRanges to have the property 'is executed in' linked to some instance of data normalization?",
                            "Can any IRanges exist without being associated, via 'is executed in', to a data normalization activity?"
                        ]
                    },
                    {
                        "axiom": "IRanges propertyRestrictions [has specified data input some (data and [has format specification some R data frame])]",
                        "CQ": [
                            "Does every IRanges entity have at least one specified data input that is a data entity with a format specification as an R data frame?",
                            "Is it necessary for the specified data input of an IRanges object to include a data element formatted as an R data frame?",
                            "Are IRanges instances required to be linked via specified data input to data that has a format specification of R data frame?"
                        ]
                    },
                    {
                        "axiom": "IRanges propertyRestrictions [is executed in some decision tree induction]",
                        "CQ": [
                            "Is it required that IRanges instances are executed in at least one decision tree induction?",
                            "Can any IRanges exist without being executed in a decision tree induction process?",
                            "Do all IRanges have an association to some decision tree induction through the execution property?"
                        ]
                    },
                    {
                        "axiom": "IRanges propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is every instance of IRanges required to be encoded in at least one R language?",
                            "Can IRanges exist without being associated with any R language encoding?",
                            "Does the definition of IRanges demand that it must have an encoding exclusively in an R language?"
                        ]
                    },
                    {
                        "axiom": "IRanges propertyRestrictions [has specified data output some (data and [has format specification some R data frame])]",
                        "CQ": [
                            "Does every IRanges entity necessarily produce at least one data output that is both 'data' and has the format specified as an R data frame?",
                            "Is it required that each data output from IRanges includes a format specification designating it as an R data frame?",
                            "Can an IRanges object have a specified data output that lacks either the attribute 'data' or the format specification of an R data frame?"
                        ]
                    }
                ]
            },
            "CGD gene report format": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "CGD gene report format is an entry format associated with the Candida Genome Database, specifically designed for representing gene-related information. It is defined as a subclass of \"Obsolete concept (EDAM)\", indicating that this format is no longer in active use or has been replaced.",
                "CQ": [
                    {
                        "axiom": "CGD gene report format subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is CGD gene report format classified under the broader category of Obsolete concept (EDAM)?",
                            "What specific formats are categorized as subclasses of Obsolete concept (EDAM), including CGD gene report format?",
                            "Which general types encompass CGD gene report format according to the ontology?"
                        ]
                    }
                ]
            },
            "Protein sequence properties plot": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "Protein sequence properties plot is defined as a subclass of Obsolete concept (EDAM), indicating that it is no longer recommended for use within the ontology. It represents a plot illustrating the general physicochemical properties of a protein sequence, such as hydrophobicity, charge, or molecular weight distribution. This class is retained for historical reference and should not be used for new annotations.",
                "CQ": [
                    {
                        "axiom": "Protein sequence properties plot subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Is Protein sequence properties plot classified under the category of Obsolete concept (EDAM)?",
                            "What concepts are specified as subclasses of Obsolete concept (EDAM), such as Protein sequence properties plot?",
                            "Which broader conceptual group contains Protein sequence properties plot within the EDAM ontology?"
                        ]
                    }
                ]
            },
            "search engine": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "equivalentClass": [
                        "(software and [is executed in some web content search])"
                    ]
                },
                "description": "search engine is defined as a subclass of software, and is formally equivalent to software that is executed in the context of web content search. This means that any instance of search engine must be a kind of software that operates specifically to facilitate the searching of web-based content.",
                "CQ": [
                    {
                        "axiom": "search engine subClassOf software",
                        "CQ": [
                            "Is search engine classified as a specialized type of software?",
                            "What broader software categories encompass search engine?",
                            "Which subtypes of software include search engine as an instance?"
                        ]
                    },
                    {
                        "axiom": "search engine equivalentClass (software and [is executed in some web content search])",
                        "CQ": [
                            "Is every search engine necessarily a type of software that is executed in at least one web content search?",
                            "Can a search engine be precisely defined as the intersection of software and those entities executed within a web content search?",
                            "Is the class of search engines equivalent to software with the additional condition of being executed in some web content search?"
                        ]
                    }
                ]
            },
            "'codelink'": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[has specified data input some (XML or Text data set)]",
                        "[has specified data output some (Text data set and Graph plot)]",
                        "[is encoded in some R language]",
                        "[is executed in some (background correction and data normalization and descriptive statistical calculation and differential expression analysis)]"
                    ]
                },
                "description": "codelink is defined as a subclass of software, specifically characterized by several property restrictions. It operates on specified data inputs that are XML or text data sets, and produces outputs in the form of text data sets and graph plots. codelink implementations are encoded in the R programming language and are used for executing background correction, data normalization, descriptive statistical calculation, and differential expression analysis. This formal definition ensures that codelink refers to R-based software tools designed for advanced data processing and statistical analysis workflows with defined input and output requirements.",
                "CQ": [
                    {
                        "axiom": "'codelink' subClassOf software",
                        "CQ": [
                            "Is codelink classified as a type of software?",
                            "Which specific subclasses are encompassed under the category of software, including codelink?",
                            "What broader classes does codelink fall under in the ontology hierarchy?"
                        ]
                    },
                    {
                        "axiom": "'codelink' propertyRestrictions [has specified data input some (XML or Text data set)]",
                        "CQ": [
                            "Is it necessary for a codelink to have at least one specified data input that is either an XML or a Text data set?",
                            "Can a codelink reference specified data input types other than XML or Text data set?",
                            "Does the property restriction for codelink require that all specified data inputs be XML or Text data sets, or is it sufficient for at least one to be of these types?"
                        ]
                    },
                    {
                        "axiom": "'codelink' propertyRestrictions [has specified data output some (Text data set and Graph plot)]",
                        "CQ": [
                            "Is every specified data output of a codelink required to include both a text data set and a graph plot?",
                            "Does a codelink necessarily generate at least one output that is simultaneously a text data set and a graph plot?",
                            "Is it possible for the specified data output of a codelink to lack either the text data set or the graph plot characteristic?"
                        ]
                    },
                    {
                        "axiom": "'codelink' propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is it required for every codelink to be associated with at least one encoding in the R language?",
                            "Can a codelink exist without being encoded in the R language?",
                            "Are all instances of codelink necessarily linked to some resource in the R programming language?"
                        ]
                    },
                    {
                        "axiom": "'codelink' propertyRestrictions [is executed in some (background correction and data normalization and descriptive statistical calculation and differential expression analysis)]",
                        "CQ": [
                            "Does every codelink involve execution in background correction, data normalization, descriptive statistical calculation, and differential expression analysis?",
                            "Is it required for a codelink to be executed in all of the processes: background correction, data normalization, descriptive statistical calculation, and differential expression analysis?",
                            "Can a codelink exist without being executed in one or more of background correction, data normalization, descriptive statistical calculation, or differential expression analysis?"
                        ]
                    }
                ]
            },
            "Drug structure": {
                "axiom": {
                    "subClassOf": [
                        "Small molecule structure"
                    ]
                },
                "description": "Drug structure is defined as a subclass of Small molecule structure, representing the 3D coordinates and associated data describing the three-dimensional structure of a drug. This class specifically captures structural information essential for understanding the spatial and chemical configuration of drug molecules.",
                "CQ": [
                    {
                        "axiom": "Drug structure subClassOf Small molecule structure",
                        "CQ": [
                            "Is Drug structure classified under the broader category of Small molecule structure?",
                            "Which structures are recognized as subtypes of Small molecule structure, including Drug structure?",
                            "What higher-level structural categories encompass Drug structure?"
                        ]
                    }
                ]
            },
            "NMTRAN": {
                "axiom": {
                    "subClassOf": [
                        "programming language"
                    ]
                },
                "description": "NMTRAN is defined as a subclass of programming language, representing a specific type of language used for instructing computers. This classification indicates that NMTRAN shares all fundamental properties of programming languages, but possesses additional characteristics that distinguish it within this broader category.",
                "CQ": [
                    {
                        "axiom": "NMTRAN subClassOf programming language",
                        "CQ": [
                            "Is NMTRAN recognized as a kind of programming language?",
                            "Which programming languages encompass specializations such as NMTRAN?",
                            "What higher-level classifications does NMTRAN fall under within programming languages?"
                        ]
                    }
                ]
            },
            "Protein residue 3D cluster": {
                "axiom": {
                    "subClassOf": [
                        "Protein residue interactions"
                    ]
                },
                "description": "Protein residue 3D cluster is defined as a subclass of Protein residue interactions, representing groups of contacting residues within protein structures. These clusters highlight key structural residue networks, capturing the spatial and interactive organization of amino acids that contribute to the protein’s architecture and function.",
                "CQ": [
                    {
                        "axiom": "Protein residue 3D cluster subClassOf Protein residue interactions",
                        "CQ": [
                            "Is Protein residue 3D cluster classified as a kind of Protein residue interactions?",
                            "Which subclasses are encompassed within Protein residue interactions, including Protein residue 3D cluster?",
                            "What broader classes does Protein residue 3D cluster fall under?"
                        ]
                    }
                ]
            },
            "Position weight matrix (PWM )": {
                "axiom": {
                    "subClassOf": [
                        "algorithm"
                    ]
                },
                "description": "Position weight matrix (PWM) is defined as a subclass of algorithm. PWMs are computational tools used in bioinformatics to represent motifs, such as transcription factor binding sites, by quantifying the preference for each nucleotide at every position in a sequence. As an algorithm, PWM systematically assigns weights based on observed frequencies, enabling efficient motif detection in genomic sequences.",
                "CQ": [
                    {
                        "axiom": "Position weight matrix (PWM ) subClassOf algorithm",
                        "CQ": [
                            "Is Position weight matrix (PWM) categorized as a type of algorithm?",
                            "Which algorithm subclasses include Position weight matrix (PWM)?",
                            "What are the parent categories for Position weight matrix (PWM) in the classification hierarchy?"
                        ]
                    }
                ]
            },
            "Peptide ID": {
                "axiom": {
                    "subClassOf": [
                        "Peptide identifier",
                        "Molecule accession"
                    ]
                },
                "description": "Peptide ID is defined as a subclass of both Peptide identifier and Molecule accession. It represents the accession assigned to a peptide, as deposited in a database. This classification indicates that Peptide ID serves as a unique molecular identifier specifically for peptides within database systems, inheriting the properties and constraints of both broader parent classes.",
                "CQ": [
                    {
                        "axiom": "Peptide ID subClassOf Peptide identifier",
                        "CQ": [
                            "Is Peptide identifier a broader classification that includes Peptide ID as a more specific type?",
                            "Which identifiers are considered subclasses of Peptide identifier, such as Peptide ID?",
                            "What are the parent classes of the Peptide ID concept in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Peptide ID subClassOf Molecule accession",
                        "CQ": [
                            "Is Peptide ID classified as a type of Molecule accession?",
                            "Which identifiers are narrower in scope than Molecule accession, such as Peptide ID?",
                            "What broader categories include Peptide ID as a member?"
                        ]
                    }
                ]
            },
            "'MI'": {
                "axiom": {
                    "subClassOf": [
                        "algorithm"
                    ]
                },
                "description": "MI is defined as a subclass of algorithm, indicating that every instance of MI is also recognized as an algorithm. No additional constraints or distinguishing characteristics are specified beyond its classification as an algorithm.",
                "CQ": [
                    {
                        "axiom": "'MI' subClassOf algorithm",
                        "CQ": [
                            "Is MI categorized as a specific type of algorithm?",
                            "Which algorithms have subclasses that include MI?",
                            "What are the more general categories that MI is a part of?"
                        ]
                    }
                ]
            },
            "Chi-square": {
                "axiom": {
                    "subClassOf": [
                        "algorithm"
                    ]
                },
                "description": "Chi-square is defined as a subclass of algorithm, indicating that it is a specific type of algorithm. No further disjointness or property restrictions are specified, so any individual of this class is understood solely as an algorithm, with no additional constraints or differentiating features provided in the current axiom.",
                "CQ": [
                    {
                        "axiom": "Chi-square subClassOf algorithm",
                        "CQ": [
                            "Is Chi-square an instance of the broader category algorithm?",
                            "Which classes are classified under algorithm and include Chi-square?",
                            "What are the direct superclasses of Chi-square within the ontology?"
                        ]
                    }
                ]
            },
            "spikeLI": {
                "axiom": {
                    "subClassOf": [
                        "software"
                    ],
                    "propertyRestrictions": [
                        "[implements some Langmuir Isotherm]",
                        "[is executed in some (descriptive statistical calculation and differential expression analysis)]",
                        "[is encoded in some R language]",
                        "[has specified data input some Gene expression dataset]",
                        "[has specified data output some Graph plot]"
                    ]
                },
                "description": "spikeLI is defined as a subclass of software characterized by its implementation of some version of the Langmuir Isotherm. It is executed as part of both descriptive statistical calculation and differential expression analysis workflows. spikeLI is specifically encoded in the R language, accepts as input a gene expression dataset, and produces a graph plot as its specified output. This formalization captures spikeLI’s role as a specialized software tool for processing gene expression data and visualizing results through graphical plots.",
                "CQ": [
                    {
                        "axiom": "spikeLI subClassOf software",
                        "CQ": [
                            "Is spikeLI categorized as a type of software?",
                            "Which entities are classified as subclasses of software, including spikeLI?",
                            "What broader categories encompass spikeLI within the ontology?"
                        ]
                    },
                    {
                        "axiom": "spikeLI propertyRestrictions [implements some Langmuir Isotherm]",
                        "CQ": [
                            "Must every spikeLI implement at least one Langmuir Isotherm?",
                            "Is the presence of a Langmuir Isotherm implementation required for an entity to be classified as spikeLI?",
                            "Does spikeLI necessarily implement a Langmuir Isotherm as part of its definition?"
                        ]
                    },
                    {
                        "axiom": "spikeLI propertyRestrictions [is executed in some (descriptive statistical calculation and differential expression analysis)]",
                        "CQ": [
                            "Is it required that spikeLI is executed in at least one process that is both a descriptive statistical calculation and a differential expression analysis?",
                            "Does spikeLI need to be associated with an instance where both descriptive statistical calculation and differential expression analysis are performed together?",
                            "Must every execution context of spikeLI involve the intersection of descriptive statistical calculation and differential expression analysis activities?"
                        ]
                    },
                    {
                        "axiom": "spikeLI propertyRestrictions [is encoded in some R language]",
                        "CQ": [
                            "Is it required that SpikeLI must be represented using at least one encoding in the R language?",
                            "Can SpikeLI exist without being encoded in any R language?",
                            "Does the representation of SpikeLI necessarily involve an association with an R language encoding?"
                        ]
                    },
                    {
                        "axiom": "spikeLI propertyRestrictions [has specified data input some Gene expression dataset]",
                        "CQ": [
                            "Does a spikeLI require at least one specified data input that is a Gene expression dataset?",
                            "Is it necessary for every spikeLI to have a specified data input drawn from Gene expression datasets?",
                            "Can an instance of spikeLI lack a specified data input of the type Gene expression dataset?"
                        ]
                    },
                    {
                        "axiom": "spikeLI propertyRestrictions [has specified data output some Graph plot]",
                        "CQ": [
                            "Is it required that a spikeLI instance produces at least one data output that is a Graph plot?",
                            "Can a spikeLI ever have a specified data output that is not a Graph plot?",
                            "Are all specified data outputs of spikeLI necessarily instances of Graph plot?"
                        ]
                    }
                ]
            },
            "Sequence record format": {
                "axiom": {
                    "subClassOf": [
                        "Format (typed)"
                    ],
                    "propertyRestrictions": [
                        "[is format of some Sequence record]"
                    ]
                },
                "description": "Sequence record format is defined as a subclass of Format (typed) and is used specifically for representing a molecular sequence record. By axiom, every Sequence record format must be a format of at least one Sequence record. This class formalizes data formats that encode and store molecular sequence records, capturing the structural and representational standards utilized in molecular sequence data management.",
                "CQ": [
                    {
                        "axiom": "Sequence record format subClassOf Format (typed)",
                        "CQ": [
                            "Is Sequence record format categorized under the general class of Format (typed)?",
                            "Which types are included in the Format (typed) class, specifically Sequence record format?",
                            "What broader classification does Sequence record format fall under within the ontology?"
                        ]
                    },
                    {
                        "axiom": "Sequence record format propertyRestrictions [is format of some Sequence record]",
                        "CQ": [
                            "Is every sequence record format necessarily associated with at least one sequence record via the 'is format of' property?",
                            "Does the existence of the 'is format of' relation from a sequence record format imply the presence of a linked sequence record?",
                            "Can a sequence record format be valid without being the format of any sequence record?"
                        ]
                    }
                ]
            },
            "Sequence generation (protein)": {
                "axiom": {
                    "subClassOf": [
                        "Protein analysis",
                        "Sequence generation"
                    ]
                },
                "description": "Sequence generation (protein) is defined as a subclass of both Protein analysis and Sequence generation. Members of this class are characterized by the process of generating a protein sequence by some means, reflecting activities or methods that result in the creation or determination of a protein’s amino acid sequence within the broader context of protein analysis and sequence generation tasks.",
                "CQ": [
                    {
                        "axiom": "Sequence generation (protein) subClassOf Protein analysis",
                        "CQ": [
                            "Is sequence generation (protein) a more specific type within the domain of protein analysis?",
                            "What forms of protein analysis include sequence generation (protein) as a specialized method?",
                            "Under which higher-level analytical techniques does sequence generation (protein) fall?"
                        ]
                    },
                    {
                        "axiom": "Sequence generation (protein) subClassOf Sequence generation",
                        "CQ": [
                            "Is Sequence generation (protein) classified under the broader category of Sequence generation?",
                            "What more specific types fall under Sequence generation, including Sequence generation (protein)?",
                            "To which higher-level categories does Sequence generation (protein) belong?"
                        ]
                    }
                ]
            },
            "Protein sequence (raw)": {
                "axiom": {
                    "subClassOf": [
                        "Protein sequence",
                        "Raw sequence"
                    ]
                },
                "description": "Protein sequence (raw) is defined as a subclass of both Protein sequence and Raw sequence, representing protein sequences in their unprocessed, primary form. Members of this class are characterized by being a string of characters that encode the raw sequence of amino acids without any modifications or annotations. This definition reflects the unaltered, direct representation of protein data.",
                "CQ": [
                    {
                        "axiom": "Protein sequence (raw) subClassOf Protein sequence",
                        "CQ": [
                            "Does Protein sequence (raw) belong to the category of Protein sequence?",
                            "Which conceptual categories include Protein sequence (raw) as a more specific type?",
                            "What types fall under Protein sequence, including Protein sequence (raw)?"
                        ]
                    },
                    {
                        "axiom": "Protein sequence (raw) subClassOf Raw sequence",
                        "CQ": [
                            "Is Protein sequence (raw) classified under the broader group of Raw sequence?",
                            "What are the more specific types of Raw sequence, including Protein sequence (raw)?",
                            "To which higher-level categories does Protein sequence (raw) belong?"
                        ]
                    }
                ]
            },
            "DNA-Seq": {
                "axiom": {
                    "subClassOf": [
                        "Obsolete concept (EDAM)"
                    ]
                },
                "description": "DNA-Seq is defined as a subclass of the Obsolete concept (EDAM) class. It refers to high-throughput sequencing techniques applied to randomly fragmented genomic DNA. This approach is commonly used in whole-genome sequencing and resequencing, as well as in studies involving SNP discovery and the identification of copy number variations and chromosomal rearrangements. The class is marked obsolete in the EDAM ontology, indicating it is deprecated for current use.",
                "CQ": [
                    {
                        "axiom": "DNA-Seq subClassOf Obsolete concept (EDAM)",
                        "CQ": [
                            "Does DNA-Seq fall under the category of Obsolete concept (EDAM)?",
                            "Which concepts are categorized as more specific types of Obsolete concept (EDAM), including DNA-Seq?",
                            "What broader classifications encompass DNA-Seq within the ontology?"
                        ]
                    }
                ]
            },
            "Gene features (coding region) format": {
                "axiom": {
                    "subClassOf": [
                        "Gene annotation format"
                    ]
                },
                "description": "Gene features (coding region) format is a subclass of Gene annotation format, specifically designated for representing reports on coding regions within nucleotide sequences. This class formalizes formats that are used to annotate and convey information about regions of genetic sequences that code for proteins, emphasizing their role in gene annotation workflows.",
                "CQ": [
                    {
                        "axiom": "Gene features (coding region) format subClassOf Gene annotation format",
                        "CQ": [
                            "Is Gene annotation format a more general category than Gene features (coding region) format?",
                            "Which annotation formats classify as specializations of Gene annotation format, such as Gene features (coding region) format?",
                            "To what higher-level annotation formats does Gene features (coding region) format belong?"
                        ]
                    }
                ]
            },
            "Locus ID (Tropgene)": {
                "axiom": {
                    "subClassOf": [
                        "Locus ID"
                    ]
                },
                "description": "Locus ID (Tropgene) is a subclass of Locus ID and serves as an identifier specifically assigned to a locus within the Tropgene database. This class represents locus identifiers that are uniquely sourced from Tropgene, thereby distinguishing them from locus IDs in other repositories.",
                "CQ": [
                    {
                        "axiom": "Locus ID (Tropgene) subClassOf Locus ID",
                        "CQ": [
                            "Is Locus ID (Tropgene) classified as a type of Locus ID?",
                            "What specific identifiers are recognized under the broader class of Locus ID, such as Locus ID (Tropgene)?",
                            "Which higher-level identifier categories include Locus ID (Tropgene) as a member?"
                        ]
                    }
                ]
            },
            "Representative sequence identification": {
                "axiom": {
                    "subClassOf": [
                        "Sequence comparison"
                    ],
                    "propertyRestrictions": [
                        "[has topic some Sequence comparison]"
                    ]
                },
                "description": "Representative sequence identification is defined as a subclass of Sequence comparison. Individuals in this class are related to at least one topic involving sequence comparison (as specified by the property restriction: has topic some Sequence comparison). This class is concerned with the process of identifying a representative sequence from a set of sequences, generally utilizing pair-wise alignment scores or other sequence comparison methods.",
                "CQ": [
                    {
                        "axiom": "Representative sequence identification subClassOf Sequence comparison",
                        "CQ": [
                            "Does Representative sequence identification fall under the category of Sequence comparison?",
                            "Which specific methods are classified as subtypes of Sequence comparison, such as Representative sequence identification?",
                            "What higher-level categories encompass Representative sequence identification?"
                        ]
                    },
                    {
                        "axiom": "Representative sequence identification propertyRestrictions [has topic some Sequence comparison]",
                        "CQ": [
                            "Is it necessary for a Representative sequence identification to have the property 'has topic' associated with Sequence comparison?",
                            "Does every Representative sequence identification instance relate to at least one Sequence comparison through the 'has topic' property?",
                            "Can a Representative sequence identification exist without having 'has topic' connected to a Sequence comparison?"
                        ]
                    }
                ]
            },
            "Molecular medicine": {
                "axiom": {
                    "subClassOf": [
                        "Translational medicine"
                    ]
                },
                "description": "Molecular medicine is defined as a subclass of translational medicine, focusing on the identification of molecular and genetic causes of diseases. It encompasses research and interventions aimed at correcting molecular-level abnormalities that lead to disease, thereby bridging fundamental molecular discoveries with clinical applications and patient care.",
                "CQ": [
                    {
                        "axiom": "Molecular medicine subClassOf Translational medicine",
                        "CQ": [
                            "Is Translational medicine a broader category that includes Molecular medicine as a type?",
                            "Which specific subtypes within Translational medicine encompass Molecular medicine?",
                            "What higher-level categories does Molecular medicine fall under?"
                        ]
                    }
                ]
            }
        },
        "properties": {
            "is topic of": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "Topic"
                    ],
                    "range": [
                        "(data or information processing)"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": [
                        "has topic"
                    ]
                },
                "description": "The property \"is topic of\" relates an instance of 'Topic' (the subject) to an instance of 'data or information processing' (the object), indicating that the topic is the subject or scope of the referenced data or process. The domain is restricted to 'Topic', while the range includes data or information processing entities. There are no declared property characteristics, super-properties, or sub-properties. The inverse property is 'has topic'. In EDAM, this property is not used directly between EDAM concepts; instead, the inverse 'has topic' is applied. The property asserts that a topic A is the topic of object B, establishing a scope relationship.",
                "CQ": [
                    {
                        "axiom": "is topic of domain Topic",
                        "CQ": [
                            "Can the property 'is topic of' be used with subjects other than a Topic?",
                            "Is every subject for the property 'is topic of' necessarily a Topic?",
                            "What types of entities can serve as the domain for the property 'is topic of'?"
                        ]
                    },
                    {
                        "axiom": "is topic of range (data or information processing)",
                        "CQ": [
                            "Can the property 'is topic of' have a range other than 'data or information processing'?",
                            "Is every entity in the range of 'is topic of' required to be a 'data or information processing' item?",
                            "What types of entities can serve as the range for the property 'is topic of'?"
                        ]
                    },
                    {
                        "axiom": "is topic of inverseOf has topic",
                        "CQ": [
                            "What is the inverse property of ‘is topic of’ in this ontology?",
                            "If an entity A is the topic of entity B, does this entail that B has topic A?",
                            "How are the properties ‘is topic of’ and ‘has topic’ related in terms of logical inverse within the ontology?"
                        ]
                    }
                ]
            },
            "is executed in": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "software"
                    ],
                    "range": [
                        "information processing"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"is executed in\" relates instances of the class \"software\" to instances of \"information processing.\" It has no explicitly defined characteristics, super-properties, or inverse property. The domain restriction specifies that the subject must be software, and the range restriction specifies that the object must be information processing. This property is used to indicate the information processing context or environment in which a software entity operates.",
                "CQ": [
                    {
                        "axiom": "is executed in domain software",
                        "CQ": [
                            "Can the property 'is executed in' be applied to subjects other than software?",
                            "Are all objects used with the property 'is executed in' necessarily domains?",
                            "What types of entities are permitted to serve as the range when using 'is executed in'?"
                        ]
                    },
                    {
                        "axiom": "is executed in range information processing",
                        "CQ": [
                            "Is information processing the only type of entity that can be in the range of 'is executed in'?",
                            "Can 'is executed in' relate to anything outside the scope of information processing as its range?",
                            "What entities may serve as the range for the property 'is executed in'?"
                        ]
                    }
                ]
            },
            "has specified data input": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "software"
                    ],
                    "range": [
                        "data"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"has specified data input\" links instances of software (domain) to data (range). It has no explicitly defined characteristics, super-properties, or inverse properties. This property specifies the particular data input required or accepted by a software entity. See also http://softwareontology.wordpress.com/2011/04/15/ins-and-outs-of-software/ for further reference.",
                "CQ": [
                    {
                        "axiom": "has specified data input domain software",
                        "CQ": [
                            "Can entities other than software be subjects of the property 'has specified data input'?",
                            "Is it mandatory that every subject using 'has specified data input' belongs to the class software?",
                            "Which types of entities are permitted as the domain of the property 'has specified data input'?"
                        ]
                    },
                    {
                        "axiom": "has specified data input range data",
                        "CQ": [
                            "Does the property 'has specified data input' have a range other than 'data'?",
                            "Is there any instance of 'data' that cannot be a value for the property 'has specified data input'?",
                            "What types of entities are permitted as the data input for 'has specified data input'?"
                        ]
                    }
                ]
            },
            "is version of": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "version name"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"is version of\" has no explicitly defined characteristics or super-properties. It has a domain restricted to \"version name\" and no specified range. This property is intended to relate version names to the entities they are versions of, as referenced by the external resource: http://softwareontology.wordpress.com/2012/06/20/versioning-in-swo/. No inverse property is specified.",
                "CQ": [
                    {
                        "axiom": "is version of domain version name",
                        "CQ": [
                            "Can the property 'is version of' have a subject that is not a version?",
                            "Is every object used with the property 'is version of' required to be a version name?",
                            "What entities are permitted as the domain for the property 'is version of'?"
                        ]
                    },
                    {
                        "axiom": "is version of range None",
                        "CQ": [
                            "What entities can serve as the range for the property 'is version of'?",
                            "Is it accurate that the property 'is version of' does not require a range?",
                            "Can 'is version of' link to any type of entity, or should its range be restricted?"
                        ]
                    }
                ]
            },
            "followed by": {
                "axiom": {
                    "characteristics": [
                        "Transitive"
                    ],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "owl:topObjectProperty"
                    ],
                    "inverseOf": [
                        "preceded by"
                    ]
                },
                "description": "The property \"followed by\" is defined as a transitive object property and a sub-property of owl:topObjectProperty. Its domain and range are unrestricted. The inverse property is \"preceded by.\" According to the current description, this property is based on relations used in RO and BFO ontologies and is assumed to represent the transitive form, though not yet incorporated into BFO2.",
                "CQ": [
                    {
                        "axiom": "followed by characteristics Transitive",
                        "CQ": [
                            "Is followedBy a transitive property, such that if entity A is followed by entity B and entity B is followed by entity C, then entity A is also followed by entity C?",
                            "Does the transitive nature of followedBy imply that direct and indirect relationships through followedBy are inferred between individuals?",
                            "Can the ontology infer that entity X is followed by entity Z given that X is followed by Y and Y is followed by Z via the followedBy property?"
                        ]
                    },
                    {
                        "axiom": "followed by domain None",
                        "CQ": [
                            "What types of subjects can the property 'hasBase' be applied to?",
                            "Is it accurate that the property 'hasBase' does not have a defined domain?",
                            "Which entities are permitted as domains for the property 'hasBase'?"
                        ]
                    },
                    {
                        "axiom": "followed by range None",
                        "CQ": [
                            "Is it correct that the property 'hasBase' does not have a range specified?",
                            "What entities can occur as the range of the property 'hasBase'?",
                            "Can 'hasBase' relate a Pizza to an entity that is not defined as its range?"
                        ]
                    },
                    {
                        "axiom": "followed by subPropertyOf owl:topObjectProperty",
                        "CQ": [
                            "Is followed by classified as a subproperty under owl:topObjectProperty in the ontology?",
                            "What superproperties does followed by inherit from according to the property hierarchy?",
                            "Which properties within the ontology are defined as subproperties of owl:topObjectProperty?"
                        ]
                    },
                    {
                        "axiom": "followed by inverseOf preceded by",
                        "CQ": [
                            "What is the inverse property of 'followed by' in the ontology?",
                            "If entity A is followed by entity B, does it necessarily mean that B is preceded by A?",
                            "How do the properties 'followed by' and 'preceded by' correspond to each other within the ontology?"
                        ]
                    }
                ]
            },
            "is published by": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "(data format specification or software)"
                    ],
                    "range": [
                        "organization"
                    ],
                    "subPropertyOf": [
                        "owl:topObjectProperty"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"is published by\" relates data format specifications or software to organizations, indicating the publishing organization responsible for these entities. It has no explicitly defined characteristics or inverse properties. The property is a sub-property of owl:topObjectProperty, making it a general object property. Its domain includes data format specifications or software, and its range is restricted to organizations.",
                "CQ": [
                    {
                        "axiom": "is published by domain (data format specification or software)",
                        "CQ": [
                            "Can the property 'is published by' have a subject other than a data format specification or software?",
                            "What types of entities can be the domain for the 'is published by' property?",
                            "Are all instances used with the 'is published by' property required to be either data format specifications or software as subjects?"
                        ]
                    },
                    {
                        "axiom": "is published by range organization",
                        "CQ": [
                            "Is every value used with the property 'is published by' required to be an organization?",
                            "Can the property 'is published by' have a range other than organization?",
                            "What types of entities can serve as the range for the property 'is published by'?"
                        ]
                    },
                    {
                        "axiom": "is published by subPropertyOf owl:topObjectProperty",
                        "CQ": [
                            "Is \"is published by\" considered a subproperty of the top object property in the ontology?",
                            "What superproperties does \"is published by\" have within the property hierarchy?",
                            "Which properties are directly more general than \"is published by\"?"
                        ]
                    }
                ]
            },
            "has format specification": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "information content entity"
                    ],
                    "range": [
                        "data format specification"
                    ],
                    "subPropertyOf": [
                        "is encoded in"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"has format specification\" relates an information content entity to a data format specification, indicating the format in which the entity is encoded or represented. It has no additional logical characteristics or specified inverse. The domain is restricted to information content entities, and the range to data format specifications. It is a sub-property of \"is encoded in.\"",
                "CQ": [
                    {
                        "axiom": "has format specification domain information content entity",
                        "CQ": [
                            "Can the property 'has format specification' be used with subjects other than 'information content entity'?",
                            "Is it permissible for an entity that is not an 'information content entity' to have a 'format specification'?",
                            "Which types of entities are allowed as the domain of the 'has format specification' property?"
                        ]
                    },
                    {
                        "axiom": "has format specification range data format specification",
                        "CQ": [
                            "Can entities other than 'format specification' be subjects for the property 'has format specification'?",
                            "Is it necessary that all objects of the property 'has format specification' are instances of 'data format specification'?",
                            "What classes are permitted as the range for the property 'has format specification'?"
                        ]
                    },
                    {
                        "axiom": "has format specification subPropertyOf is encoded in",
                        "CQ": [
                            "Is every use of the has format specification property also an instance of the is encoded in property?",
                            "Which subproperties are defined under the is encoded in property, including has format specification?",
                            "What are the superproperties of the has format specification property within the ontology?"
                        ]
                    }
                ]
            },
            "has license": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "software license"
                    ],
                    "subPropertyOf": [
                        "is about"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"has license\" has no special characteristics or domain restriction. Its range is specified as \"software license,\" indicating it links subjects to software license entities. It is a sub-property of \"is about,\" meaning every \"has license\" assertion implies an \"is about\" relation. No inverse property is specified.",
                "CQ": [
                    {
                        "axiom": "has license domain None",
                        "CQ": [
                            "What can be the domain of the property 'has license'?",
                            "Is it correct that the property 'has license' does not have a defined domain?",
                            "Are there any entities that can be associated as subjects with the property 'has license'?"
                        ]
                    },
                    {
                        "axiom": "has license range software license",
                        "CQ": [
                            "Does the property 'has license' ever have a range different from 'software license'?",
                            "Is every entity linked by the 'has license' property required to be a 'software license'?",
                            "What types of resources can appear as the range for the 'has license' property?"
                        ]
                    },
                    {
                        "axiom": "has license subPropertyOf is about",
                        "CQ": [
                            "Which properties are defined as subproperties of is about?",
                            "Does the use of has license always entail the use of is about?",
                            "Is has license restricted to contexts where is about is applicable?"
                        ]
                    }
                ]
            },
            "is input of": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "data"
                    ],
                    "range": [
                        "information processing"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": [
                        "has input"
                    ]
                },
                "description": "The property \"is input of\" relates an entity classified as \"data\" (domain) to an \"information processing\" activity (range). It has no explicitly defined characteristics or super-properties, and its inverse is \"has input.\" According to its current definition, \"'A is_input_of B' specifies that subject A is a necessary or actual input or input argument to object B,\" where A may be any data entity and B is an information processing operation. In the EDAM ontology, \"is_input_of\" is typically not asserted between concepts, but its inverse—\"has_input\"—is defined.",
                "CQ": [
                    {
                        "axiom": "is input of domain data",
                        "CQ": [
                            "Is it possible for a property with 'is input of' to have a domain different from 'data'?",
                            "Are all instances of 'data' eligible to be the subject of the 'is input of' property?",
                            "What entities are permitted as the domain of the 'is input of' property?"
                        ]
                    },
                    {
                        "axiom": "is input of range information processing",
                        "CQ": [
                            "Can the property 'is input of' be used with objects other than 'information processing' as its range?",
                            "Is it necessary that the value associated with 'is input of' always be an 'information processing' instance?",
                            "What types of entities are permitted as the range for the property 'is input of'?"
                        ]
                    },
                    {
                        "axiom": "is input of inverseOf has input",
                        "CQ": [
                            "How are the properties ‘is input of’ and ‘has input’ connected in the ontology?",
                            "If entity X is input of process Y, does it follow that process Y has input X?",
                            "Which property acts as the inverse of ‘is input of’?"
                        ]
                    }
                ]
            },
            "output of": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "participates in"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"output of\" does not have explicitly defined characteristics, domain, or range restrictions. It is a sub-property of \"participates in,\" indicating that it represents a more specific relationship within the broader context of participation. No inverse property is specified.",
                "CQ": [
                    {
                        "axiom": "output of domain None",
                        "CQ": [
                            "What types of entities can serve as the domain of the property 'hasBase'?",
                            "Is it accurate that the property 'hasBase' has no specified domain?",
                            "Are there any constraints on what can appear as the subject when using the 'hasBase' property?"
                        ]
                    },
                    {
                        "axiom": "output of range None",
                        "CQ": [
                            "Is it correct that the property 'hasBase' does not have a specified range?",
                            "What types of entities can serve as the range for the property 'hasBase'?",
                            "Can 'hasBase' relate a Pizza to something that is not a PizzaBase, given the unspecified range?"
                        ]
                    },
                    {
                        "axiom": "output of subPropertyOf participates in",
                        "CQ": [
                            "Is every output of a property that is a subproperty of output also considered to participate in some activity or process?",
                            "Which properties are included as subproperties under output and thereby inherit the participates in relationship?",
                            "What are the superproperties of output based on its subPropertyOf relationship with participates in?"
                        ]
                    }
                ]
            }
        }
    },
    "exchangemodel": {
        "classes": {
            "Accelerometer": {
                "axiom": {
                    "subClassOf": [
                        "WearableSensor"
                    ]
                },
                "description": "Accelerometer is defined as a subclass of WearableSensor. This means that every accelerometer is considered a wearable sensor, inheriting all characteristics of wearable sensors. Accelerometers are specialized sensors used in wearable devices to measure acceleration forces, which can be used to detect motion, orientation, and activity levels. No additional axioms further constrain the class.",
                "CQ": [
                    {
                        "axiom": "Accelerometer subClassOf WearableSensor",
                        "CQ": [
                            "Is Accelerometer categorized under WearableSensor?",
                            "Which other types of sensors are classified as WearableSensor alongside Accelerometer?",
                            "What broader sensor groups does Accelerometer belong to?"
                        ]
                    }
                ]
            },
            "DTI-2": {
                "axiom": {
                    "subClassOf": [
                        "WearableSensor"
                    ]
                },
                "description": "DTI-2 is defined as a subclass of WearableSensor, indicating that it inherits all characteristics of wearable sensors. This means any instance of DTI-2 is necessarily a wearable sensor, though no further distinguishing properties or restrictions are specified.",
                "CQ": [
                    {
                        "axiom": "DTI-2 subClassOf WearableSensor",
                        "CQ": [
                            "Does DTI-2 fall under the category of WearableSensor?",
                            "Which sensor types are more specific than WearableSensor, specifically including DTI-2?",
                            "To which parent categories does DTI-2 conceptually belong?"
                        ]
                    }
                ]
            },
            "WearableMicrophone": {
                "axiom": {
                    "subClassOf": [
                        "WearableSensor"
                    ]
                },
                "description": "WearableMicrophone is defined as a subclass of WearableSensor. This class represents microphones that are designed to be worn on the body, distinguishing them from other types of wearable sensors by their specific function of capturing audio signals. Members of this class inherit all attributes and behaviors of wearable sensors, with a focus on audio data acquisition.",
                "CQ": [
                    {
                        "axiom": "WearableMicrophone subClassOf WearableSensor",
                        "CQ": [
                            "Does WearableMicrophone fall under the broader class of WearableSensor?",
                            "Which types of WearableSensor include WearableMicrophone as a more specific subclass?",
                            "Into what higher-level classes can the WearableMicrophone entity be grouped?"
                        ]
                    }
                ]
            },
            "WearableVideoCamera": {
                "axiom": {
                    "subClassOf": [
                        "WearableSensor"
                    ]
                },
                "description": "WearableVideoCamera is defined as a subclass of WearableSensor. This means any instance of WearableVideoCamera is also an instance of WearableSensor, inheriting all characteristics of wearable sensors. WearableVideoCamera specifically refers to sensors that are worn on the body and are capable of capturing video data.",
                "CQ": [
                    {
                        "axiom": "WearableVideoCamera subClassOf WearableSensor",
                        "CQ": [
                            "Is WearableVideoCamera classified as a kind of WearableSensor?",
                            "Which sensor types are considered more specific instances of WearableSensor, such as WearableVideoCamera?",
                            "To which broader sensor categories does WearableVideoCamera belong according to the ontology?"
                        ]
                    }
                ]
            },
            "Alert": {
                "axiom": {
                    "subClassOf": [
                        "Feedback"
                    ]
                },
                "description": "Alert is defined as a subclass of Feedback, meaning every instance of Alert is also considered an instance of Feedback. This class captures specific types of feedback events characterized as alerts, distinguishing them from other forms of feedback. No additional property restrictions or disjointness axioms are specified.",
                "CQ": [
                    {
                        "axiom": "Alert subClassOf Feedback",
                        "CQ": [
                            "Is Alert classified as a type of Feedback?",
                            "What are all subclasses categorized under Feedback, such as Alert?",
                            "Which higher-level categories does Alert fall under?"
                        ]
                    }
                ]
            },
            "Ambient2DVideoCamera": {
                "axiom": {
                    "subClassOf": [
                        "FixedSensor"
                    ]
                },
                "description": "Ambient2DVideoCamera is defined as a subclass of FixedSensor, indicating that every Ambient2DVideoCamera is a type of sensor with a fixed position. This class represents video cameras designed to capture ambient, two-dimensional visual information from a stationary location.",
                "CQ": [
                    {
                        "axiom": "Ambient2DVideoCamera subClassOf FixedSensor",
                        "CQ": [
                            "Does Ambient2DVideoCamera fall under the category of FixedSensor?",
                            "Which sensor types are categorized as subclasses of FixedSensor, such as Ambient2DVideoCamera?",
                            "What parent classes are associated with Ambient2DVideoCamera?"
                        ]
                    }
                ]
            },
            "_3DVideoCamera": {
                "axiom": {
                    "subClassOf": [
                        "FixedSensor"
                    ]
                },
                "description": "_3DVideoCamera is defined as a subclass of FixedSensor, indicating that every instance of _3DVideoCamera is a type of sensor that operates in a fixed position. This class represents cameras capable of capturing three-dimensional video data, inheriting all characteristics of fixed sensors.",
                "CQ": [
                    {
                        "axiom": "_3DVideoCamera subClassOf FixedSensor",
                        "CQ": [
                            "Does the category FixedSensor include more specific types such as 3DVideoCamera?",
                            "Which sensor types are subclasses of FixedSensor, with reference to 3DVideoCamera?",
                            "To which higher-level classes does 3DVideoCamera belong within this ontology?"
                        ]
                    }
                ]
            },
            "Detection": {
                "axiom": {
                    "subClassOf": [
                        "Observation"
                    ],
                    "propertyRestrictions": [
                        "[describes only (event:AtomicActivity or event:ObjectEvent)]",
                        "[providedBy only ProcessingComponent]"
                    ]
                },
                "description": "Detection is defined as a subclass of Observation. Individuals classified as Detection must only describe either an event of type AtomicActivity or ObjectEvent, and are restricted to being provided exclusively by a ProcessingComponent. This ensures that each Detection instance is specifically tied to these event types, and clearly attributed to a particular processing component within the system.",
                "CQ": [
                    {
                        "axiom": "Detection subClassOf Observation",
                        "CQ": [
                            "Is Detection encompassed by the broader category of Observation?",
                            "Which Observation subclasses are present in the ontology, such as Detection?",
                            "What more general categories is Detection a part of within the ontology?"
                        ]
                    },
                    {
                        "axiom": "Detection propertyRestrictions [describes only (event:AtomicActivity or event:ObjectEvent)]",
                        "CQ": [
                            "Is the Detection propertyRestriction limited to describing only AtomicActivity or ObjectEvent types of events?",
                            "Can Detection propertyRestrictions ever describe something that is not categorized as AtomicActivity or ObjectEvent?",
                            "Are all descriptions provided by Detection propertyRestrictions necessarily about AtomicActivity, ObjectEvent, or both?"
                        ]
                    },
                    {
                        "axiom": "Detection propertyRestrictions [providedBy only ProcessingComponent]",
                        "CQ": [
                            "Is it required that the provider of Detection is always a ProcessingComponent?",
                            "Can Detection have any provider other than a ProcessingComponent?",
                            "Are all sources supplying Detection instances necessarily classified as ProcessingComponent?"
                        ]
                    }
                ]
            },
            "Measurement": {
                "axiom": {
                    "subClassOf": [
                        "Observation"
                    ],
                    "propertyRestrictions": [
                        "[describes only event:Measurement]",
                        "[providedBy only (event:Person or Sensor)]"
                    ]
                },
                "description": "Measurement is defined as a subclass of Observation. Every Measurement instance formally describes only entities classified as event:Measurement, ensuring it cannot describe other types of events. Additionally, each Measurement must be provided by either an event:Person or a Sensor, restricting its provenance to these two sources. This specification captures the nature of measurements as observational entities exclusively linked to specific events and originating strictly from people or sensor devices.",
                "CQ": [
                    {
                        "axiom": "Measurement subClassOf Observation",
                        "CQ": [
                            "Is Measurement classified as a narrower concept under Observation?",
                            "Which specialized forms of Observation does Measurement represent?",
                            "What broader categories encompass Measurement within the context of Observation?"
                        ]
                    },
                    {
                        "axiom": "Measurement propertyRestrictions [describes only event:Measurement]",
                        "CQ": [
                            "Is every instance described by the Measurement property necessarily an event:Measurement?",
                            "Can Measurement describe anything other than event:Measurement entities?",
                            "Does the Measurement property exclusively reference individuals classified as event:Measurement?"
                        ]
                    },
                    {
                        "axiom": "Measurement propertyRestrictions [providedBy only (event:Person or Sensor)]",
                        "CQ": [
                            "Are measurements permitted to be provided exclusively by persons or sensors?",
                            "Is it required that only a person or a sensor can be the provider of a measurement?",
                            "Does the measurement class preclude any provider that is not classified as either a person or a sensor?"
                        ]
                    }
                ]
            },
            "Recognition": {
                "axiom": {
                    "subClassOf": [
                        "Observation"
                    ],
                    "propertyRestrictions": [
                        "[describes only event:ComplexActivity]",
                        "[providedBy only (event:Person or ProcessingComponent)]"
                    ]
                },
                "description": "Recognition is defined as a subclass of Observation. It is characterized by two key property restrictions: it can only describe instances of ComplexActivity events, and recognitions must be provided exclusively by either a Person or a ProcessingComponent. This ensures that all individuals of the Recognition class represent observations describing complex activities, with clear provenance limited to human or automated sources.",
                "CQ": [
                    {
                        "axiom": "Recognition subClassOf Observation",
                        "CQ": [
                            "Does Recognition fall under the broader classification of Observation?",
                            "Which categories are more specific than Observation and encompass Recognition?",
                            "What higher-level classes does Recognition conceptually fit within?"
                        ]
                    },
                    {
                        "axiom": "Recognition propertyRestrictions [describes only event:ComplexActivity]",
                        "CQ": [
                            "Does the Recognition property only describe events classified as ComplexActivity?",
                            "Is it required that Recognition property never describes any event other than those of type ComplexActivity?",
                            "Can Recognition property refer to events not categorized as ComplexActivity under this restriction?"
                        ]
                    },
                    {
                        "axiom": "Recognition propertyRestrictions [providedBy only (event:Person or ProcessingComponent)]",
                        "CQ": [
                            "Can Recognition have its providedBy property associated exclusively with either an event:Person or a ProcessingComponent?",
                            "Is it possible for Recognition to be providedBy any entity other than event:Person and ProcessingComponent?",
                            "Does the ontology constrain providedBy for Recognition solely to event:Person and ProcessingComponent instances?"
                        ]
                    }
                ]
            },
            "FixedSensor": {
                "axiom": {
                    "subClassOf": [
                        "Sensor"
                    ]
                },
                "description": "FixedSensor is defined as a subclass of Sensor. This indicates that every FixedSensor is a type of Sensor, inheriting all characteristics of the Sensor class. No additional constraints or distinguishing axioms are specified beyond this hierarchical relationship, meaning FixedSensors share the essential properties of Sensors.",
                "CQ": [
                    {
                        "axiom": "FixedSensor subClassOf Sensor",
                        "CQ": [
                            "Is FixedSensor classified within the broader group of Sensor?",
                            "Which types are directly categorized under Sensor, such as FixedSensor?",
                            "What more general groupings include FixedSensor as a member?"
                        ]
                    }
                ]
            },
            "WearableSensor": {
                "axiom": {
                    "subClassOf": [
                        "Sensor"
                    ]
                },
                "description": "WearableSensor is defined as a subclass of Sensor. This means that every instance of WearableSensor is also considered an instance of Sensor, inheriting its general properties and behaviors. WearableSensor typically refers to a sensor designed to be worn on the human body for the purpose of monitoring physiological signals, activity, or environmental parameters.",
                "CQ": [
                    {
                        "axiom": "WearableSensor subClassOf Sensor",
                        "CQ": [
                            "Does the category WearableSensor fall under the broader classification of Sensor?",
                            "Which entities are defined as more specific types within Sensor, such as WearableSensor?",
                            "What higher-level groups does WearableSensor belong to in the ontology?"
                        ]
                    }
                ]
            },
            "Observation": {
                "axiom": {
                    "propertyRestrictions": [
                        "[describes only event:Event]",
                        "[providedBy only (event:Person or ProcessingComponent or Sensor)]",
                        "[providedBy exactly 1 (event:Person or ProcessingComponent or Sensor)]",
                        "[describes exactly 1 event:Event]",
                        "[hasPlausibilityMetric only xsd:double]",
                        "[hasReportingTime only time:Instant]",
                        "[hasReportingTime exactly 1 time:Instant]",
                        "[hasPlausibilityMetric exactly 1 xsd:double]"
                    ]
                },
                "description": "Observation is a class characterized by its formal linkage to a single event, as indicated by the restriction that each Observation describes exactly one event:Event. Each Observation is provided by exactly one provider, restricted to being either a event:Person, a ProcessingComponent, or a Sensor. Observations are further annotated with precisely one plausibility metric (hasPlausibilityMetric exactly 1 xsd:double) and exactly one reporting time (hasReportingTime exactly 1 time:Instant). These formal restrictions ensure that an Observation instance unambiguously refers to a specific event, has a single well-defined provider, includes a quantitative plausibility assessment, and records the precise time at which the observation was reported.",
                "CQ": [
                    {
                        "axiom": "Observation propertyRestrictions [describes only event:Event]",
                        "CQ": [
                            "Is it required that every Observation describes only instances of event:Event?",
                            "Can an Observation describe anything other than an event:Event according to the property restriction?",
                            "Do the property restrictions on Observation ensure exclusivity to the event:Event class for the 'describes' property?"
                        ]
                    },
                    {
                        "axiom": "Observation propertyRestrictions [providedBy only (event:Person or ProcessingComponent or Sensor)]",
                        "CQ": [
                            "Is an observation allowed to be provided by any entity other than a person, a processing component, or a sensor?",
                            "Does every observation require its provider to be either a person, processing component, or sensor?",
                            "Are the possible providers of observations strictly limited to the set comprising person, processing component, and sensor?"
                        ]
                    },
                    {
                        "axiom": "Observation propertyRestrictions [providedBy exactly 1 (event:Person or ProcessingComponent or Sensor)]",
                        "CQ": [
                            "Is each Observation required to have exactly one provider, which must be either an event:Person, a ProcessingComponent, or a Sensor?",
                            "Can an Observation ever have its providedBy property assigned to more than one instance among event:Person, ProcessingComponent, or Sensor?",
                            "Does the property restriction for providedBy on Observation exclude all providers except event:Person, ProcessingComponent, or Sensor?"
                        ]
                    },
                    {
                        "axiom": "Observation propertyRestrictions [describes exactly 1 event:Event]",
                        "CQ": [
                            "Is each Observation restricted to describing exactly one Event?",
                            "Can an Observation be valid if it describes more than one Event or none at all?",
                            "Must every instance of Observation have one and only one Event that it describes?"
                        ]
                    },
                    {
                        "axiom": "Observation propertyRestrictions [hasPlausibilityMetric only xsd:double]",
                        "CQ": [
                            "Are the plausibility metrics associated with an Observation exclusively of datatype xsd:double?",
                            "Can an Observation have a plausibility metric that is not represented as an xsd:double value?",
                            "Is it only permissible for an Observation’s hasPlausibilityMetric property to reference values of type xsd:double?"
                        ]
                    },
                    {
                        "axiom": "Observation propertyRestrictions [hasReportingTime only time:Instant]",
                        "CQ": [
                            "Is every reporting time associated with an observation necessarily of type time:Instant?",
                            "Can an observation be linked to a reporting time that is not an instance of time:Instant?",
                            "Are observations restricted exclusively to having reporting times that are time:Instant rather than other temporal types?"
                        ]
                    },
                    {
                        "axiom": "Observation propertyRestrictions [hasReportingTime exactly 1 time:Instant]",
                        "CQ": [
                            "Does every Observation have exactly one value for the property 'hasReportingTime' associated with a time instant?",
                            "Can there be more than one 'hasReportingTime' for a single Observation instance?",
                            "Is it possible for an Observation to exist without a specified 'hasReportingTime'?"
                        ]
                    },
                    {
                        "axiom": "Observation propertyRestrictions [hasPlausibilityMetric exactly 1 xsd:double]",
                        "CQ": [
                            "Does every Observation require exactly one value for the property hasPlausibilityMetric of type xsd:double?",
                            "Can an Observation have more than one hasPlausibilityMetric value assigned to it?",
                            "Is it possible for an Observation to exist without a specified hasPlausibilityMetric value?"
                        ]
                    }
                ]
            },
            "Report": {
                "axiom": {
                    "propertyRestrictions": [
                        "[hasPlausibilityMetric exactly 1 xsd:double]",
                        "[hasPlausibilityMetric only xsd:double]",
                        "[describes only (home:Questionnaire or lab:ClinicalRecord or lab:DemographicCharacteristicsRecord)]",
                        "[providedBy exactly 1 event:Person]",
                        "[hasReportingTime exactly 1 time:Instant]",
                        "[providedBy only event:Person]",
                        "[hasReportingTime only time:Instant]",
                        "[describes exactly 1 (home:Questionnaire or lab:ClinicalRecord or lab:DemographicCharacteristicsRecord)]"
                    ]
                },
                "description": "Report is a class defined by a set of strict property restrictions: each instance must be provided by exactly one event:Person and must refer to exactly one instance of either home:Questionnaire, lab:ClinicalRecord, or lab:DemographicCharacteristicsRecord. Additionally, every Report must have exactly one hasPlausibilityMetric value of type xsd:double and exactly one hasReportingTime value of type time:Instant, with no other values permitted for these properties. The class definition ensures that each Report is uniquely associated with one provider, one time of reporting, a plausibility metric, and one described source record, reflecting a precise and singular reporting activity.",
                "CQ": [
                    {
                        "axiom": "Report propertyRestrictions [hasPlausibilityMetric exactly 1 xsd:double]",
                        "CQ": [
                            "Is it required that a Report must have exactly one value for the property 'hasPlausibilityMetric' of type xsd:double?",
                            "Can a Report have more than one or zero 'hasPlausibilityMetric' values assigned?",
                            "Does every Report necessarily include one and only one 'hasPlausibilityMetric' property with a datatype of xsd:double?"
                        ]
                    },
                    {
                        "axiom": "Report propertyRestrictions [hasPlausibilityMetric only xsd:double]",
                        "CQ": [
                            "Is every reported plausibility metric required to be exclusively of data type xsd:double?",
                            "Can a report have a plausibility metric with any datatype other than xsd:double?",
                            "Are all values permitted for the property 'hasPlausibilityMetric' in a report necessarily restricted to xsd:double?"
                        ]
                    },
                    {
                        "axiom": "Report propertyRestrictions [describes only (home:Questionnaire or lab:ClinicalRecord or lab:DemographicCharacteristicsRecord)]",
                        "CQ": [
                            "Are reports allowed to describe any resource other than Questionnaire, Clinical Record, or Demographic Characteristics Record?",
                            "Is a report's describes property strictly limited to Questionnaire, Clinical Record, or Demographic Characteristics Record?",
                            "Does every report exclusively describe either a Questionnaire, Clinical Record, or Demographic Characteristics Record?"
                        ]
                    },
                    {
                        "axiom": "Report propertyRestrictions [providedBy exactly 1 event:Person]",
                        "CQ": [
                            "Is a report required to be provided by exactly one individual who is classified as an event:Person?",
                            "Can a report ever have more or fewer than one event:Person as its provider?",
                            "Does the specification of report provision restrict providers exclusively to a single event:Person?"
                        ]
                    },
                    {
                        "axiom": "Report propertyRestrictions [hasReportingTime exactly 1 time:Instant]",
                        "CQ": [
                            "Is it mandatory that each Report has exactly one hasReportingTime property pointing to a time:Instant?",
                            "Can a Report possess more than one hasReportingTime value, or is it strictly limited to one time:Instant?",
                            "Does the ontology exclude the possibility of a Report having zero or multiple hasReportingTime assignments?"
                        ]
                    },
                    {
                        "axiom": "Report propertyRestrictions [providedBy only event:Person]",
                        "CQ": [
                            "Are all providers of a Report necessarily individuals classified as event:Person?",
                            "Can a Report have a provider that is not an event:Person?",
                            "Is it required that no Report is provided by any entity except those of type event:Person?"
                        ]
                    },
                    {
                        "axiom": "Report propertyRestrictions [hasReportingTime only time:Instant]",
                        "CQ": [
                            "Is every reporting time associated with a Report necessarily an instance of time:Instant?",
                            "Can a Report have a reporting time that is not of type time:Instant?",
                            "Are all possible values for the hasReportingTime property of a Report restricted exclusively to time:Instant?"
                        ]
                    },
                    {
                        "axiom": "Report propertyRestrictions [describes exactly 1 (home:Questionnaire or lab:ClinicalRecord or lab:DemographicCharacteristicsRecord)]",
                        "CQ": [
                            "Is a Report required to describe exactly one entity that is either a Questionnaire, Clinical Record, or Demographic Characteristics Record?",
                            "Can a Report describe more than one or none of the following: Questionnaire, Clinical Record, or Demographic Characteristics Record?",
                            "Does the axiom restrict each Report to be associated with a single instance from the set: Questionnaire, Clinical Record, or Demographic Characteristics Record?"
                        ]
                    }
                ]
            },
            "Result": {
                "axiom": {
                    "propertyRestrictions": [
                        "[providedBy exactly 1 (event:Person or ProcessingComponent)]",
                        "[hasReportingTime exactly 1 time:Instant]",
                        "[hasReportingTime only time:Instant]",
                        "[describes only (home:DaySummary or home:Problem)]",
                        "[hasPlausibilityMetric exactly 1 xsd:double]",
                        "[providedBy only (event:Person or ProcessingComponent)]",
                        "[hasPlausibilityMetric only xsd:double]",
                        "[describes exactly 1 (home:DaySummary or home:Problem)]"
                    ]
                },
                "description": "Result is defined as a class whose instances must be described by exactly one home:DaySummary or home:Problem, and may only describe such entities. Each Result must be provided by exactly one agent, which must be either an event:Person or a ProcessingComponent, and cannot be provided by any other type. Every Result must have a reporting time, which must be exactly one instance of time:Instant, and no other type is allowed. Additionally, each Result must have exactly one plausibility metric, which must be of datatype xsd:double. This formalization ensures that every Result precisely links to its provenance, timing, evaluation, and what it represents within the domain.",
                "CQ": [
                    {
                        "axiom": "Result propertyRestrictions [providedBy exactly 1 (event:Person or ProcessingComponent)]",
                        "CQ": [
                            "Is it required for each Result to be provided by exactly one entity, which must be either an event:Person or a ProcessingComponent?",
                            "Can a Result ever have more than one provider or a provider that is not an event:Person or ProcessingComponent?",
                            "Does the constraint ensure that a Result cannot be associated with entities outside of event:Person or ProcessingComponent as its sole provider?"
                        ]
                    },
                    {
                        "axiom": "Result propertyRestrictions [hasReportingTime exactly 1 time:Instant]",
                        "CQ": [
                            "Is a Result required to have exactly one hasReportingTime value of type time:Instant?",
                            "Can a Result ever have either no hasReportingTime or more than one such property value?",
                            "Does the ontology restrict each Result instance to be associated with one and only one reporting time instant?"
                        ]
                    },
                    {
                        "axiom": "Result propertyRestrictions [hasReportingTime only time:Instant]",
                        "CQ": [
                            "Is every Result required to have its reporting time specified exclusively as an instance of time:Instant?",
                            "Can a Result have the hasReportingTime property pointing to any value other than those classified as time:Instant?",
                            "Does the ontology restrict the hasReportingTime property of Result solely to entities of type time:Instant?"
                        ]
                    },
                    {
                        "axiom": "Result propertyRestrictions [describes only (home:DaySummary or home:Problem)]",
                        "CQ": [
                            "Is every instance of Result restricted to only describing either a DaySummary or a Problem?",
                            "Can Result describe entities other than DaySummary or Problem according to the model?",
                            "Does the ontology prevent Result from describing anything outside the categories of DaySummary and Problem?"
                        ]
                    },
                    {
                        "axiom": "Result propertyRestrictions [hasPlausibilityMetric exactly 1 xsd:double]",
                        "CQ": [
                            "Is each Result entity associated with exactly one plausibility metric value of type xsd:double?",
                            "Can a Result have more than one plausibility metric assigned to it?",
                            "Is it possible for a Result to lack a plausibility metric of type xsd:double?"
                        ]
                    },
                    {
                        "axiom": "Result propertyRestrictions [providedBy only (event:Person or ProcessingComponent)]",
                        "CQ": [
                            "Is the provider of a Result always limited to either a Person or a ProcessingComponent?",
                            "Can a Result ever be provided by something other than a Person or a ProcessingComponent?",
                            "Must every entity listed as a provider for a Result belong exclusively to the categories Person or ProcessingComponent?"
                        ]
                    },
                    {
                        "axiom": "Result propertyRestrictions [hasPlausibilityMetric only xsd:double]",
                        "CQ": [
                            "Is every plausibility metric value for Result constrained exclusively to the xsd:double datatype?",
                            "Can a Result have any plausibility metric that is not an xsd:double data value?",
                            "Must all plausibility metrics associated with Result be of the xsd:double type, without exception?"
                        ]
                    },
                    {
                        "axiom": "Result propertyRestrictions [describes exactly 1 (home:DaySummary or home:Problem)]",
                        "CQ": [
                            "Is a Result required to describe either exactly one DaySummary or exactly one Problem, but not both or any other type?",
                            "Can a Result provide a description that is limited strictly to one instance among DaySummary or Problem?",
                            "Does the ontology enforce that each Result corresponds to one and only one entity of the DaySummary or Problem categories?"
                        ]
                    }
                ]
            },
            "Sensor": {
                "axiom": {
                    "propertyRestrictions": [
                        "[attachedTo exactly 1 event:Entity]",
                        "[attachedTo only event:Entity]"
                    ]
                },
                "description": "Sensor is a class characterized by the restriction that every instance must be attached to exactly one entity from the event:Entity class; no sensor can be attached to more than one, nor to any entity outside of event:Entity. This ensures a one-to-one association between each sensor and an event entity.",
                "CQ": [
                    {
                        "axiom": "Sensor propertyRestrictions [attachedTo exactly 1 event:Entity]",
                        "CQ": [
                            "Is every Sensor required to be attached to exactly one Entity?",
                            "Can a Sensor ever be attached to more than one Entity at the same time?",
                            "Is it possible for a Sensor to exist without being attached to any Entity?"
                        ]
                    },
                    {
                        "axiom": "Sensor propertyRestrictions [attachedTo only event:Entity]",
                        "CQ": [
                            "Is it required that every Sensor be attached only to instances of event:Entity?",
                            "Can a Sensor ever be attached to something other than an event:Entity?",
                            "Does the ontology restrict a Sensor’s attachedTo property exclusively to event:Entity instances?"
                        ]
                    }
                ]
            }
        },
        "properties": {
            "roomLocalisation": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"roomLocalisation\" has no explicitly defined domain, range, or characteristics, and is not specified as a sub-property or inverse of any other property. In the absence of further axioms or existing description, its use and related entities remain unspecified.",
                "CQ": [
                    {
                        "axiom": "roomLocalisation domain None",
                        "CQ": [
                            "What entities can serve as the domain for the property 'roomLocalisation'?",
                            "Is it correct that the property 'roomLocalisation' has no domain specified?",
                            "Can 'roomLocalisation' be associated with subjects of any type due to the lack of a specified domain?"
                        ]
                    },
                    {
                        "axiom": "roomLocalisation range None",
                        "CQ": [
                            "What kinds of entities can be in the range of the property 'roomLocalisation'?",
                            "Is it correct that the property 'roomLocalisation' has no range defined?",
                            "Can 'roomLocalisation' relate to any specific type of value as its object?"
                        ]
                    }
                ]
            },
            "hasParticipant": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"hasParticipant\" has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. It can be used to relate any two individuals in the ontology without restriction. No additional description or constraints are provided by the axioms.",
                "CQ": [
                    {
                        "axiom": "hasParticipant domain None",
                        "CQ": [
                            "Is it correct that the property 'hasParticipant' does not specify any domain?",
                            "What types of entities are permitted as subjects of the 'hasParticipant' property?",
                            "Could 'hasParticipant' be used with any subject type, or should its domain be restricted?"
                        ]
                    },
                    {
                        "axiom": "hasParticipant range None",
                        "CQ": [
                            "What kinds of entities can appear as the value of the 'hasParticipant' property?",
                            "Is it correct that the property 'hasParticipant' has no defined range?",
                            "Can the property 'hasParticipant' be used with objects of any class as its range?"
                        ]
                    }
                ]
            },
            "hasQuality": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"hasQuality\" has no explicitly defined characteristics, domain, or range restrictions. It does not specify any super-properties or inverse properties. This property is generally intended to associate an entity with a quality but its precise usage is not restricted by axioms.",
                "CQ": [
                    {
                        "axiom": "hasQuality domain None",
                        "CQ": [
                            "What can be the domain of the property 'hasQuality'?",
                            "Is it correct that the property 'hasQuality' does not have a specified domain?",
                            "Can 'hasQuality' be used with any type of subject entity?"
                        ]
                    },
                    {
                        "axiom": "hasQuality range None",
                        "CQ": [
                            "Is it correct that the property 'hasQuality' does not specify a range?",
                            "What entities can appear as the value of the 'hasQuality' property?",
                            "Can anything be considered the range of 'hasQuality', or should it be restricted?"
                        ]
                    }
                ]
            },
            "hasAgent": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"hasAgent\" does not have asserted characteristics, domain, or range restrictions. It is not defined as a sub-property of any other property and has no specified inverse. This property is intended to relate entities to their agents, but its usage is not formally constrained by ontology axioms.",
                "CQ": [
                    {
                        "axiom": "hasAgent domain None",
                        "CQ": [
                            "Is it correct that the property 'hasAgent' does not have a specified domain?",
                            "Which types of entities, if any, can appear as subjects of the 'hasAgent' property?",
                            "What are the possible domains for the property 'hasAgent'?"
                        ]
                    },
                    {
                        "axiom": "hasAgent range None",
                        "CQ": [
                            "What can be the range of the property 'hasAgent'?",
                            "Is it correct that the property 'hasAgent' does not have a specified range?",
                            "Are there any entities that cannot be a value for the property 'hasAgent'?"
                        ]
                    }
                ]
            },
            "providedBy": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"providedBy\" has no specified characteristics, domain, or range, and is not defined as a sub-property of or inverse to any other property. Its use and applicable classes are unrestricted, indicating a general-purpose relationship for associating entities with their providers.",
                "CQ": [
                    {
                        "axiom": "providedBy domain None",
                        "CQ": [
                            "Is it appropriate that the property 'providedBy' does not have a specified domain?",
                            "Which types of subjects can 'providedBy' be used with?",
                            "What are the possible domains for the property 'providedBy'?"
                        ]
                    },
                    {
                        "axiom": "providedBy range None",
                        "CQ": [
                            "Is it correct that the property 'providedBy' does not have a specified range?",
                            "What can serve as the range for the property 'providedBy'?",
                            "Can any type of entity be used as the range of 'providedBy'?"
                        ]
                    }
                ]
            },
            "duration": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"duration\" has no explicitly defined characteristics, domain, or range restrictions, and does not specify any super-properties or inverse properties. It is used to relate entities to their duration, but the types of subjects or objects are not formally constrained.",
                "CQ": [
                    {
                        "axiom": "duration domain None",
                        "CQ": [
                            "Is it correct that the property 'duration' does not have a specified domain?",
                            "What types of entities can serve as the domain for the 'duration' property?",
                            "Can 'duration' be applied to any subject, or should it be restricted to specific classes?"
                        ]
                    },
                    {
                        "axiom": "duration range None",
                        "CQ": [
                            "What types of entities can be used as the range for the property 'duration'?",
                            "Is it correct that the property 'duration' does not have a specified range in the ontology?",
                            "Can 'duration' have any type of value as its range, or should it be restricted to a specific class?"
                        ]
                    }
                ]
            },
            "hasPlausibilityMetric": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"hasPlausibilityMetric\" has no explicitly defined characteristics, domain, or range constraints. It is not specified as a sub-property of any other property and has no defined inverse. The purpose of this property is not currently described and would depend on its intended use within the ontology.",
                "CQ": [
                    {
                        "axiom": "hasPlausibilityMetric domain None",
                        "CQ": [
                            "Is it correct that the property 'hasPlausibilityMetric' does not specify a domain?",
                            "What classes or entities can appear as the subject of the property 'hasPlausibilityMetric'?",
                            "Are there any restrictions on what can serve as the domain for the property 'hasPlausibilityMetric'?"
                        ]
                    },
                    {
                        "axiom": "hasPlausibilityMetric range None",
                        "CQ": [
                            "What entities are permissible as the range for the property 'hasPlausibilityMetric'?",
                            "Is it correct that 'hasPlausibilityMetric' has no defined range in the ontology?",
                            "Are there any constraints limiting the range of values for 'hasPlausibilityMetric'?"
                        ]
                    }
                ]
            },
            "attachedTo": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"attachedTo\" has no explicitly defined characteristics, domain, or range restrictions and is not specified as a sub-property or an inverse of any other property. This indicates that \"attachedTo\" is a general-purpose property intended to express an unspecified attachment relationship between entities.",
                "CQ": [
                    {
                        "axiom": "attachedTo domain None",
                        "CQ": [
                            "What can be the domain of the property 'attachedTo'?",
                            "Is it appropriate for 'attachedTo' to have no specified domain?",
                            "Are there any classes that should be designated as the domain of 'attachedTo'?"
                        ]
                    },
                    {
                        "axiom": "attachedTo range None",
                        "CQ": [
                            "Is there any range specified for the property 'attachedTo'?",
                            "What kinds of entities can appear as the object when using the property 'attachedTo'?",
                            "Is it correct that the property 'attachedTo' does not have a specified range?"
                        ]
                    }
                ]
            },
            "startTime": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"startTime\" has no explicitly defined characteristics, domain, or range restrictions. It is not specified as a sub-property of any other property and has no inverse property declared. Its intended usage is not further detailed by current axioms or description.",
                "CQ": [
                    {
                        "axiom": "startTime domain None",
                        "CQ": [
                            "What entities can serve as the domain for the property 'startTime'?",
                            "Is it correct that the property 'startTime' has no specified domain?",
                            "Are there classes besides the unspecified domain that could be linked to the property 'startTime'?"
                        ]
                    },
                    {
                        "axiom": "startTime range None",
                        "CQ": [
                            "Can the property 'startTime' be associated with any specific type of value as its range?",
                            "Is it correct that the property 'startTime' does not have a defined range?",
                            "What entities or data types are allowed as the range of the property 'startTime'?"
                        ]
                    }
                ]
            },
            "refersTo": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"refersTo\" has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. This indicates its use is unconstrained with respect to the types of entities it connects, allowing it to relate any two individuals without restriction.",
                "CQ": [
                    {
                        "axiom": "refersTo domain None",
                        "CQ": [
                            "What entities can serve as the domain of the property 'refersTo'?",
                            "Is it appropriate that the property 'refersTo' lacks a specified domain?",
                            "Can 'refersTo' have subjects that do not belong to any particular class?"
                        ]
                    },
                    {
                        "axiom": "refersTo range None",
                        "CQ": [
                            "Is it correct that the property 'refersTo' is not restricted to any particular range?",
                            "What types of entities can appear as the object of the 'refersTo' property?",
                            "Can 'refersTo' take as its value any class, or should its range be specified?"
                        ]
                    }
                ]
            },
            "describes": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"describes\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. It is a general property intended to associate one entity with another in a descriptive relationship, without restrictions on the types of entities it connects.",
                "CQ": [
                    {
                        "axiom": "describes domain None",
                        "CQ": [
                            "Is it correct that the property 'describes' has no specified domain?",
                            "What types of entities, if any, can act as the subject for the 'describes' property?",
                            "Are there constraints on what can be the domain of the 'describes' property?"
                        ]
                    },
                    {
                        "axiom": "describes range None",
                        "CQ": [
                            "What can be the range of the property 'describes'?",
                            "Is it correct that the property 'describes' has no specified range?",
                            "Can the property 'describes' relate to any entity as its range?"
                        ]
                    }
                ]
            },
            "hasReportingTime": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"hasReportingTime\" has no explicitly defined characteristics, domain, or range restrictions. It is not specified as a subproperty of any other property and does not have an inverse property. No additional description or constraints are currently provided, indicating that its intended usage and value type are not restricted by the ontology at this stage.",
                "CQ": [
                    {
                        "axiom": "hasReportingTime domain None",
                        "CQ": [
                            "What types of entities can have the property 'hasReportingTime' as their domain?",
                            "Is it correct that the property 'hasReportingTime' does not specify any domain?",
                            "Can 'hasReportingTime' be used with subjects of any class, or are there restrictions?"
                        ]
                    },
                    {
                        "axiom": "hasReportingTime range None",
                        "CQ": [
                            "Is it correct that the property 'hasReportingTime' has no range defined?",
                            "What kinds of entities, if any, can be used as the value of the property 'hasReportingTime'?",
                            "Can a range be specified for 'hasReportingTime', and if so, what should it be?"
                        ]
                    }
                ]
            }
        }
    },
    "pizza": {
        "classes": {
            "American": {
                "axiom": {
                    "subClassOf": [
                        "NamedPizza"
                    ],
                    "disjointWith": [
                        "Mushroom",
                        "LaReine",
                        "Napoletana",
                        "Veneziana",
                        "AmericanHot",
                        "UnclosedPizza",
                        "PrinceCarlo",
                        "Capricciosa",
                        "FruttiDiMare",
                        "Siciliana",
                        "Cajun",
                        "Margherita",
                        "SloppyGiuseppe",
                        "Caprina",
                        "Soho",
                        "Parmense",
                        "PolloAdAstra",
                        "Fiorentina",
                        "Rosa",
                        "QuattroFormaggi",
                        "Giardiniera",
                        "FourSeasons"
                    ],
                    "propertyRestrictions": [
                        "[hasTopping some TomatoTopping]",
                        "[hasTopping some PeperoniSausageTopping]",
                        "[hasCountryOfOrigin hasValue America]",
                        "[hasTopping some MozzarellaTopping]",
                        "[hasTopping only (MozzarellaTopping or PeperoniSausageTopping or TomatoTopping)]"
                    ]
                },
                "description": "American is defined as a subclass of NamedPizza and is explicitly disjoint from several other specific pizza types, such as Mushroom, LaReine, Napoletana, and others, ensuring that an individual cannot simultaneously belong to more than one of these classes. Members of the American class must have the following toppings: tomato topping, pepperoni sausage topping, and mozzarella topping. Furthermore, they can have only mozzarella, pepperoni sausage, or tomato as toppings—no other toppings are permitted. Additionally, the country of origin for this pizza is specified as America. This formalization distinguishes the American pizza by its unique combination of toppings and origin, while preventing any overlap with the other named pizzas.",
                "CQ": [
                    {
                        "axiom": "American subClassOf NamedPizza",
                        "CQ": [
                            "Is American categorized as a specific type of NamedPizza?",
                            "Which pizzas are classified under the broader group NamedPizza?",
                            "What overarching categories does American fall under in the pizza hierarchy?"
                        ]
                    },
                    {
                        "axiom": "American disjointWith Mushroom",
                        "CQ": [
                            "What type of separation is defined between American and Mushroom in the ontology?",
                            "Is it allowed for an entity to be classified as both American and Mushroom?",
                            "Which additional classes are specified as disjoint with Mushroom?"
                        ]
                    },
                    {
                        "axiom": "American disjointWith LaReine",
                        "CQ": [
                            "What formal separation is defined between American and LaReine in the ontology?",
                            "Is it possible for a pizza to belong to both the American and LaReine classes simultaneously?",
                            "Which classes are specified as disjoint with LaReine?"
                        ]
                    },
                    {
                        "axiom": "American disjointWith Napoletana",
                        "CQ": [
                            "What logical separation is specified between American and Napoletana in the ontology?",
                            "Can an entity be classified as both American and Napoletana simultaneously?",
                            "Which classes are defined as disjoint with Napoletana?"
                        ]
                    },
                    {
                        "axiom": "American disjointWith Veneziana",
                        "CQ": [
                            "What is the ontology-specified relationship between American and Veneziana?",
                            "Is there any instance that can belong to both American and Veneziana pizza classes?",
                            "Which classes are defined as disjoint with American in the current ontology?"
                        ]
                    },
                    {
                        "axiom": "American disjointWith AmericanHot",
                        "CQ": [
                            "Are the classes American and AmericanHot mutually exclusive within the ontology?",
                            "Can an individual belong to both the American and AmericanHot pizza categories?",
                            "Which other classes are explicitly stated to be disjoint with AmericanHot?"
                        ]
                    },
                    {
                        "axiom": "American disjointWith UnclosedPizza",
                        "CQ": [
                            "What formal separation exists between American and UnclosedPizza within the ontology?",
                            "Is there any pizza that can be classified as both American and UnclosedPizza?",
                            "Which classes are specified as disjoint with UnclosedPizza?"
                        ]
                    },
                    {
                        "axiom": "American disjointWith PrinceCarlo",
                        "CQ": [
                            "Is there any logical relationship specified between American and PrinceCarlo in the ontology?",
                            "Could an individual be classified as both American and PrinceCarlo at once?",
                            "Which classes are marked as mutually exclusive with PrinceCarlo?"
                        ]
                    },
                    {
                        "axiom": "American disjointWith Capricciosa",
                        "CQ": [
                            "How does the ontology delineate the categories American and Capricciosa in relation to each other?",
                            "Is it permissible for a pizza to be classified as both American and Capricciosa?",
                            "Which classes are formally marked as disjoint with Capricciosa in the ontology?"
                        ]
                    },
                    {
                        "axiom": "American disjointWith FruttiDiMare",
                        "CQ": [
                            "How does the ontology specify exclusivity between American and FruttiDiMare pizza types?",
                            "Is it allowable for a pizza to belong simultaneously to both American and FruttiDiMare categories?",
                            "Which pizza varieties are asserted as disjoint with FruttiDiMare?"
                        ]
                    },
                    {
                        "axiom": "American disjointWith Siciliana",
                        "CQ": [
                            "How does the ontology represent the separation between American and Siciliana pizza types?",
                            "Is any pizza instance permitted to belong to both the American and Siciliana categories simultaneously?",
                            "Which classes are formally specified as mutually exclusive with Siciliana within the ontology?"
                        ]
                    },
                    {
                        "axiom": "American disjointWith Cajun",
                        "CQ": [
                            "How are American and Cajun classes differentiated in the ontology?",
                            "Is it allowed for an entity to be classified as both American and Cajun?",
                            "Which classes are identified as mutually exclusive with Cajun?"
                        ]
                    },
                    {
                        "axiom": "American disjointWith Margherita",
                        "CQ": [
                            "What is the logical relationship defined between American and Margherita pizzas in the ontology?",
                            "Can a single pizza instance belong to both the American and Margherita categories?",
                            "Which pizza types are formally specified as mutually exclusive with Margherita?"
                        ]
                    },
                    {
                        "axiom": "American disjointWith SloppyGiuseppe",
                        "CQ": [
                            "How are American and SloppyGiuseppe classified in relation to each other within the ontology?",
                            "Is it allowed for a pizza to belong to both the American and SloppyGiuseppe categories?",
                            "Which other types of pizza are specified as disjoint from SloppyGiuseppe?"
                        ]
                    },
                    {
                        "axiom": "American disjointWith Caprina",
                        "CQ": [
                            "What formal distinction is made between American and Caprina in the ontology?",
                            "Is an entity permitted to be classified as both American and Caprina?",
                            "Which classes are specified as disjoint with Caprina?"
                        ]
                    },
                    {
                        "axiom": "American disjointWith Soho",
                        "CQ": [
                            "What is the formal distinction between the classes American and Soho in the ontology?",
                            "Is any entity permitted to be classified as both American and Soho simultaneously?",
                            "Which classes are specified as disjoint with Soho?"
                        ]
                    },
                    {
                        "axiom": "American disjointWith Parmense",
                        "CQ": [
                            "What ontological relationship exists between American and Parmense?",
                            "Can an individual be classified as both American and Parmense?",
                            "Which classes are defined as mutually exclusive with Parmense?"
                        ]
                    },
                    {
                        "axiom": "American disjointWith PolloAdAstra",
                        "CQ": [
                            "Are there any instances that can belong to both the American and PolloAdAstra pizza classes?",
                            "Which pizza categories are declared mutually exclusive with American in the ontology?",
                            "What ontological separation exists between American and PolloAdAstra pizza classes?"
                        ]
                    },
                    {
                        "axiom": "American disjointWith Fiorentina",
                        "CQ": [
                            "What logical separation is present between American and Fiorentina within the ontology?",
                            "Is it conceivable for a pizza to be classified as both American and Fiorentina simultaneously?",
                            "Which classes are specified as disjoint with Fiorentina?"
                        ]
                    },
                    {
                        "axiom": "American disjointWith Rosa",
                        "CQ": [
                            "What ontological separation is defined between American and Rosa?",
                            "Is there any entity that can simultaneously be classified as both American and Rosa?",
                            "Which classes are specified as disjoint with Rosa within the ontology?"
                        ]
                    },
                    {
                        "axiom": "American disjointWith QuattroFormaggi",
                        "CQ": [
                            "How does the ontology differentiate between American and QuattroFormaggi pizzas?",
                            "Is there any scenario where a pizza could belong to both American and QuattroFormaggi categories?",
                            "Which pizza types are specified as mutually exclusive with QuattroFormaggi?"
                        ]
                    },
                    {
                        "axiom": "American disjointWith Giardiniera",
                        "CQ": [
                            "How does the ontology differentiate between the classes American and Giardiniera?",
                            "Is there any instance that can simultaneously belong to both American and Giardiniera categories?",
                            "Which classes are identified as mutually exclusive with American?"
                        ]
                    },
                    {
                        "axiom": "American disjointWith FourSeasons",
                        "CQ": [
                            "What ontological separation is specified between American and FourSeasons?",
                            "Is it allowable for an individual instance to be both American and FourSeasons simultaneously?",
                            "Which classes are stated as disjoint with FourSeasons in the ontology?"
                        ]
                    },
                    {
                        "axiom": "American propertyRestrictions [hasTopping some TomatoTopping]",
                        "CQ": [
                            "Is it necessary for an American pizza to have at least one topping that is a TomatoTopping?",
                            "Can an American pizza exist without any TomatoTopping included as a topping?",
                            "Does every instance classified as American have at least one relationship via hasTopping to TomatoTopping?"
                        ]
                    },
                    {
                        "axiom": "American propertyRestrictions [hasTopping some PeperoniSausageTopping]",
                        "CQ": [
                            "Does an American pizza necessarily include at least one Peperoni Sausage topping?",
                            "Is the presence of Peperoni Sausage topping required for something to be classified as American pizza?",
                            "Can an American pizza exist without having any Peperoni Sausage toppings?"
                        ]
                    },
                    {
                        "axiom": "American propertyRestrictions [hasCountryOfOrigin hasValue America]",
                        "CQ": [
                            "Does every American item necessarily have 'America' as its country of origin?",
                            "Are there any American entities that originate from a country other than America?",
                            "Is 'America' the sole country of origin permitted for things classified as American?"
                        ]
                    },
                    {
                        "axiom": "American propertyRestrictions [hasTopping some MozzarellaTopping]",
                        "CQ": [
                            "Is it required for an American pizza to have at least one Mozzarella topping?",
                            "Can an American pizza exist without any Mozzarella topping present?",
                            "Does every American pizza necessarily include Mozzarella as one of its toppings?"
                        ]
                    },
                    {
                        "axiom": "American propertyRestrictions [hasTopping only (MozzarellaTopping or PeperoniSausageTopping or TomatoTopping)]",
                        "CQ": [
                            "Are all toppings on an American pizza limited exclusively to Mozzarella, Peperoni Sausage, or Tomato?",
                            "Can an American pizza include any topping apart from Mozzarella, Peperoni Sausage, and Tomato?",
                            "Is it a requirement that every topping found on an American pizza be either Mozzarella, Peperoni Sausage, or Tomato?"
                        ]
                    }
                ]
            },
            "AmericanHot": {
                "axiom": {
                    "subClassOf": [
                        "NamedPizza"
                    ],
                    "disjointWith": [
                        "Mushroom",
                        "LaReine",
                        "Napoletana",
                        "Veneziana",
                        "UnclosedPizza",
                        "PrinceCarlo",
                        "Capricciosa",
                        "FruttiDiMare",
                        "Siciliana",
                        "Cajun",
                        "Margherita",
                        "American",
                        "SloppyGiuseppe",
                        "Caprina",
                        "Soho",
                        "Parmense",
                        "PolloAdAstra",
                        "Fiorentina",
                        "Rosa",
                        "QuattroFormaggi",
                        "Giardiniera",
                        "FourSeasons"
                    ],
                    "propertyRestrictions": [
                        "[hasTopping some HotGreenPepperTopping]",
                        "[hasTopping some JalapenoPepperTopping]",
                        "[hasTopping some TomatoTopping]",
                        "[hasCountryOfOrigin hasValue America]",
                        "[hasTopping some PeperoniSausageTopping]",
                        "[hasTopping some MozzarellaTopping]",
                        "[hasTopping only (MozzarellaTopping or PeperoniSausageTopping or JalapenoPepperTopping or TomatoTopping or HotGreenPepperTopping)]"
                    ]
                },
                "description": "AmericanHot is defined as a subclass of NamedPizza, distinguished by the requirement that it has toppings including hot green pepper, jalapeno pepper, tomato, peperoni sausage, and mozzarella. Its origin is specified as America. AmericanHot pizzas are explicitly disjoint from numerous other pizza classes, ensuring no individual pizza can simultaneously belong to these groups. The pizza is further characterized by a topping restriction: it may only have mozzarella, peperoni sausage, jalapeno pepper, tomato, or hot green pepper as toppings. This formalization enforces a precise set of permissible toppings and uniquely identifies AmericanHot within the ontology of named pizzas.",
                "CQ": [
                    {
                        "axiom": "AmericanHot subClassOf NamedPizza",
                        "CQ": [
                            "Is AmericanHot classified under the broader category of NamedPizza?",
                            "Which pizzas are specific types within the NamedPizza category, including AmericanHot?",
                            "What higher-level categories encompass AmericanHot?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot disjointWith Mushroom",
                        "CQ": [
                            "What is the ontological separation between AmericanHot and Mushroom?",
                            "Is there any instance that can be classified as both AmericanHot and Mushroom simultaneously?",
                            "Which other classes are asserted to be disjoint with Mushroom?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot disjointWith LaReine",
                        "CQ": [
                            "How does the ontology specify the incompatibility between AmericanHot and LaReine?",
                            "Is it allowed for an entity to be classified as both AmericanHot and LaReine?",
                            "Which classes are defined as disjoint from LaReine in the ontology?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot disjointWith Napoletana",
                        "CQ": [
                            "How are AmericanHot and Napoletana related in the ontology?",
                            "Is there any pizza instance that can belong to both AmericanHot and Napoletana classes?",
                            "Which classes are specified as mutually exclusive with Napoletana?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot disjointWith Veneziana",
                        "CQ": [
                            "What is the formal separation defined between AmericanHot and Veneziana?",
                            "Is there any instance that can simultaneously belong to both AmericanHot and Veneziana classes?",
                            "Which classes are explicitly specified as mutually exclusive with Veneziana?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot disjointWith UnclosedPizza",
                        "CQ": [
                            "What logical constraint separates AmericanHot from UnclosedPizza according to the ontology?",
                            "Is it allowable for an instance of pizza to belong to both AmericanHot and UnclosedPizza classes?",
                            "Which classes are defined as disjoint with AmericanHot?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot disjointWith PrinceCarlo",
                        "CQ": [
                            "How does the ontology define the connection between AmericanHot and PrinceCarlo pizza types?",
                            "Is any pizza classified simultaneously as AmericanHot and PrinceCarlo according to the ontology?",
                            "Which pizza classes are modeled as mutually exclusive with PrinceCarlo?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot disjointWith Capricciosa",
                        "CQ": [
                            "What is the ontological distinction between AmericanHot and Capricciosa?",
                            "Is it allowable for an individual pizza to be classified as both AmericanHot and Capricciosa?",
                            "Which pizza classes are stated to be disjoint with AmericanHot?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot disjointWith FruttiDiMare",
                        "CQ": [
                            "How does the ontology represent the mutual exclusivity between AmericanHot and FruttiDiMare?",
                            "Is there any scenario in which an entity could belong to both AmericanHot and FruttiDiMare simultaneously?",
                            "What other classes are asserted as being disjoint with FruttiDiMare?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot disjointWith Siciliana",
                        "CQ": [
                            "How are AmericanHot and Siciliana pizzas logically separated in the ontology?",
                            "Is it allowed for an entity to be classified as both AmericanHot and Siciliana pizza simultaneously?",
                            "Which classes share a disjointness relationship with Siciliana pizza within the ontology?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot disjointWith Cajun",
                        "CQ": [
                            "What logical separation is specified between AmericanHot and Cajun within the ontology?",
                            "Is it feasible for an entity to belong to both the AmericanHot and Cajun classes?",
                            "Which classes are explicitly defined as mutually exclusive with AmericanHot?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot disjointWith Margherita",
                        "CQ": [
                            "How is AmericanHot class logically separated from Margherita class in the ontology?",
                            "Is it permissible for an individual to be instance of both AmericanHot and Margherita simultaneously?",
                            "Which classes are specified as disjoint with Margherita according to the ontology?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot disjointWith American",
                        "CQ": [
                            "How does the ontology specify the separation between AmericanHot and American?",
                            "Is there any entity that can simultaneously belong to both AmericanHot and American categories?",
                            "Which classes are declared to have no overlap with AmericanHot?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot disjointWith SloppyGiuseppe",
                        "CQ": [
                            "What logical separation is established between AmericanHot and SloppyGiuseppe in the ontology?",
                            "Could a single pizza instance ever be both AmericanHot and SloppyGiuseppe?",
                            "Which pizza types are defined as disjoint from SloppyGiuseppe?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot disjointWith Caprina",
                        "CQ": [
                            "How does the ontology formally distinguish between AmericanHot and Caprina classes?",
                            "Is it allowable for an individual pizza to be a member of both AmericanHot and Caprina?",
                            "Which classes are specified as being disjoint with Caprina?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot disjointWith Soho",
                        "CQ": [
                            "What formal constraint exists between AmericanHot and Soho within the ontology?",
                            "Is there any overlap between the membership of AmericanHot and Soho?",
                            "Which pizza types are specifically defined as mutually exclusive with Soho?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot disjointWith Parmense",
                        "CQ": [
                            "How does the ontology represent the separation between AmericanHot and Parmense pizza types?",
                            "Is there any instance that can belong to both AmericanHot and Parmense categories simultaneously?",
                            "Which pizza types are defined as mutually exclusive with Parmense?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot disjointWith PolloAdAstra",
                        "CQ": [
                            "How does the ontology formally separate AmericanHot from PolloAdAstra?",
                            "Is there any pizza instance that could belong to both AmericanHot and PolloAdAstra simultaneously?",
                            "Which other pizza types, if any, are specified as mutually exclusive with PolloAdAstra?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot disjointWith Fiorentina",
                        "CQ": [
                            "What formal separation is specified between AmericanHot and Fiorentina in the ontology?",
                            "Is there any instance that can be classified as both AmericanHot and Fiorentina?",
                            "Which classes are defined as mutually exclusive with Fiorentina?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot disjointWith Rosa",
                        "CQ": [
                            "What formal incompatibility is defined between AmericanHot and Rosa in the ontology?",
                            "Is it allowed for a pizza to be classified as both AmericanHot and Rosa?",
                            "Which classes are identified as disjoint with AmericanHot?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot disjointWith QuattroFormaggi",
                        "CQ": [
                            "What is the formal distinction between AmericanHot and QuattroFormaggi in the ontology?",
                            "Is it allowed for a pizza to belong to both the AmericanHot and QuattroFormaggi categories?",
                            "Which pizza classes, besides QuattroFormaggi, are defined as mutually exclusive with AmericanHot?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot disjointWith Giardiniera",
                        "CQ": [
                            "What is the formal distinction between AmericanHot and Giardiniera within the ontology?",
                            "Is it logically permissible for a pizza to be classified as both AmericanHot and Giardiniera?",
                            "Which pizza types are specified as disjoint from AmericanHot?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot disjointWith FourSeasons",
                        "CQ": [
                            "How does the ontology express the incompatibility between AmericanHot and FourSeasons pizza types?",
                            "Can a pizza instance belong to both AmericanHot and FourSeasons classes simultaneously?",
                            "Which classes in the ontology are specified as being mutually exclusive with FourSeasons pizza?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot propertyRestrictions [hasTopping some HotGreenPepperTopping]",
                        "CQ": [
                            "Is it necessary for an AmericanHot pizza to have at least one HotGreenPepperTopping as a topping?",
                            "Can an AmericanHot pizza be classified as such without containing any HotGreenPepperTopping?",
                            "Does every instance of AmericanHot require the inclusion of HotGreenPepperTopping among its toppings?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot propertyRestrictions [hasTopping some JalapenoPepperTopping]",
                        "CQ": [
                            "Is it necessary for an AmericanHot pizza to include at least one jalapeno pepper topping?",
                            "Does every instance of AmericanHot have a topping that is a jalapeno pepper?",
                            "Are AmericanHot pizzas defined by the presence of some jalapeno pepper topping?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot propertyRestrictions [hasTopping some TomatoTopping]",
                        "CQ": [
                            "Is it required for an AmericanHot pizza to have at least one TomatoTopping as a topping?",
                            "Can an AmericanHot pizza exist without including any TomatoTopping among its toppings?",
                            "Does every AmericanHot pizza necessarily possess a topping that is a type of TomatoTopping?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot propertyRestrictions [hasCountryOfOrigin hasValue America]",
                        "CQ": [
                            "Must AmericanHot have its country of origin specified as America?",
                            "Is it required that the country of origin for AmericanHot is exclusively America?",
                            "Can AmericanHot have any country of origin other than America?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot propertyRestrictions [hasTopping some PeperoniSausageTopping]",
                        "CQ": [
                            "Is it necessary for an AmericanHot pizza to have at least one PeperoniSausageTopping as a topping?",
                            "Can an AmericanHot pizza be classified as such if it does not include PeperoniSausageTopping among its toppings?",
                            "Does every AmericanHot pizza require the presence of PeperoniSausageTopping through the hasTopping property?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot propertyRestrictions [hasTopping some MozzarellaTopping]",
                        "CQ": [
                            "Is it required that every AmericanHot pizza includes at least one MozzarellaTopping as a topping?",
                            "Can there be an AmericanHot pizza without any MozzarellaTopping present?",
                            "Does the existence of MozzarellaTopping on a pizza suffice for it to be classified as AmericanHot?"
                        ]
                    },
                    {
                        "axiom": "AmericanHot propertyRestrictions [hasTopping only (MozzarellaTopping or PeperoniSausageTopping or JalapenoPepperTopping or TomatoTopping or HotGreenPepperTopping)]",
                        "CQ": [
                            "Does an AmericanHot pizza only include Mozzarella, Peperoni Sausage, Jalapeno Pepper, Tomato, or Hot Green Pepper as toppings?",
                            "Is the presence of any topping outside Mozzarella, Peperoni Sausage, Jalapeno Pepper, Tomato, or Hot Green Pepper incompatible with the definition of AmericanHot?",
                            "Are all possible toppings on an AmericanHot pizza necessarily restricted to the five specified types without exception?"
                        ]
                    }
                ]
            },
            "Cajun": {
                "axiom": {
                    "subClassOf": [
                        "NamedPizza"
                    ],
                    "disjointWith": [
                        "Mushroom",
                        "LaReine",
                        "Napoletana",
                        "Veneziana",
                        "AmericanHot",
                        "UnclosedPizza",
                        "PrinceCarlo",
                        "Capricciosa",
                        "FruttiDiMare",
                        "Siciliana",
                        "Margherita",
                        "American",
                        "SloppyGiuseppe",
                        "Caprina",
                        "Soho",
                        "Parmense",
                        "PolloAdAstra",
                        "Fiorentina",
                        "Rosa",
                        "QuattroFormaggi",
                        "Giardiniera",
                        "FourSeasons"
                    ],
                    "propertyRestrictions": [
                        "[hasTopping some TomatoTopping]",
                        "[hasTopping some TobascoPepperSauce]",
                        "[hasTopping only (PrawnsTopping or TobascoPepperSauce or MozzarellaTopping or TomatoTopping or OnionTopping or PeperonataTopping)]",
                        "[hasTopping some MozzarellaTopping]",
                        "[hasTopping some OnionTopping]",
                        "[hasTopping some PeperonataTopping]",
                        "[hasTopping some PrawnsTopping]"
                    ]
                },
                "description": "Cajun is defined as a subclass of NamedPizza and is explicitly disjoint with a variety of other pizza types, ensuring that no pizza can belong to Cajun and any of the disjoint classes simultaneously. Each Cajun pizza must have, as toppings, tomato, Tobasco pepper sauce, mozzarella, onion, peperonata, and prawns. Furthermore, the only allowed toppings on a Cajun pizza are prawn, Tobasco pepper sauce, mozzarella, tomato, onion, and peperonata. This formalization strictly characterizes Cajun pizzas by both required and exclusive toppings, distinguishing them from other named pizzas.",
                "CQ": [
                    {
                        "axiom": "Cajun subClassOf NamedPizza",
                        "CQ": [
                            "Does Cajun fall under the classification of NamedPizza?",
                            "What are the specialized types categorized within NamedPizza, including Cajun?",
                            "Which broader groups does Cajun belong to in the ontology hierarchy?"
                        ]
                    },
                    {
                        "axiom": "Cajun disjointWith Mushroom",
                        "CQ": [
                            "How does the ontology distinguish between Cajun and Mushroom classes?",
                            "Is an entity allowed to belong to both Cajun and Mushroom categories simultaneously?",
                            "Which classes are explicitly stated as disjoint with Cajun in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Cajun disjointWith LaReine",
                        "CQ": [
                            "How does the ontology represent the exclusivity between Cajun and LaReine?",
                            "Is it permitted for a pizza to belong to both Cajun and LaReine categories?",
                            "Which pizza types are specified as incompatible with LaReine?"
                        ]
                    },
                    {
                        "axiom": "Cajun disjointWith Napoletana",
                        "CQ": [
                            "Are Cajun and Napoletana considered mutually exclusive pizza types in the ontology?",
                            "Is there any pizza instance that can belong to both Cajun and Napoletana categories?",
                            "What other pizza classes are specified as disjoint with Cajun?"
                        ]
                    },
                    {
                        "axiom": "Cajun disjointWith Veneziana",
                        "CQ": [
                            "What is the formal separation defined between Cajun and Veneziana in the ontology?",
                            "Is it allowed for an individual to be classified as both Cajun and Veneziana?",
                            "Which classes are declared incompatible with Veneziana?"
                        ]
                    },
                    {
                        "axiom": "Cajun disjointWith AmericanHot",
                        "CQ": [
                            "What is the ontological separation between Cajun and AmericanHot?",
                            "Can any entity be classified as both Cajun and AmericanHot?",
                            "Which classes are declared as disjoint with Cajun in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Cajun disjointWith UnclosedPizza",
                        "CQ": [
                            "How does the ontology differentiate Cajun pizzas from UnclosedPizzas?",
                            "Is there any overlap permitted between the classes Cajun and UnclosedPizza?",
                            "Which pizza varieties are formally incompatible with being classified as an UnclosedPizza?"
                        ]
                    },
                    {
                        "axiom": "Cajun disjointWith PrinceCarlo",
                        "CQ": [
                            "What type of differentiation is specified between Cajun and PrinceCarlo classes?",
                            "Is there an instance that can belong to both Cajun and PrinceCarlo simultaneously according to the ontology?",
                            "Which classes are formally asserted as disjoint from PrinceCarlo?"
                        ]
                    },
                    {
                        "axiom": "Cajun disjointWith Capricciosa",
                        "CQ": [
                            "How are the classes Cajun and Capricciosa related in terms of disjointness within the ontology?",
                            "Is it possible for a pizza to belong to both the Cajun and Capricciosa categories simultaneously?",
                            "Which other pizza classes, besides Capricciosa, are specified as disjoint with Cajun?"
                        ]
                    },
                    {
                        "axiom": "Cajun disjointWith FruttiDiMare",
                        "CQ": [
                            "What formal separation exists between Cajun and FruttiDiMare in the ontology?",
                            "Is any item classified as both Cajun and FruttiDiMare simultaneously?",
                            "Which classes are specified as mutually exclusive with FruttiDiMare?"
                        ]
                    },
                    {
                        "axiom": "Cajun disjointWith Siciliana",
                        "CQ": [
                            "How are Cajun and Siciliana defined in terms of class exclusivity within the ontology?",
                            "Is it permitted for an individual to belong to both Cajun and Siciliana classes simultaneously?",
                            "Which classes are formally stated as disjoint with Cajun?"
                        ]
                    },
                    {
                        "axiom": "Cajun disjointWith Margherita",
                        "CQ": [
                            "What logical separation is established between Cajun and Margherita in the ontology?",
                            "Is there any individual that can be classified as both Cajun and Margherita?",
                            "Which classes are defined as disjoint with Margherita?"
                        ]
                    },
                    {
                        "axiom": "Cajun disjointWith American",
                        "CQ": [
                            "What logical separation exists between Cajun and American in the ontology?",
                            "Is there any entity that can simultaneously belong to both Cajun and American categories?",
                            "Which classes are formally disjoint from Cajun according to the ontology?"
                        ]
                    },
                    {
                        "axiom": "Cajun disjointWith SloppyGiuseppe",
                        "CQ": [
                            "What formal separation exists between Cajun and SloppyGiuseppe within the ontology?",
                            "Can a pizza instance belong to both Cajun and SloppyGiuseppe classes?",
                            "Which classes are explicitly stated as disjoint with Cajun?"
                        ]
                    },
                    {
                        "axiom": "Cajun disjointWith Caprina",
                        "CQ": [
                            "What logical separation is established between Cajun and Caprina in the ontology?",
                            "Is any entity allowed to be classified simultaneously as both Cajun and Caprina?",
                            "Which classes are formally stated as mutually exclusive with Caprina?"
                        ]
                    },
                    {
                        "axiom": "Cajun disjointWith Soho",
                        "CQ": [
                            "How does the ontology specify the incompatibility between Cajun and Soho?",
                            "Is any individual allowed to belong to both the Cajun and Soho categories simultaneously?",
                            "Which classes are defined as disjoint with Soho?"
                        ]
                    },
                    {
                        "axiom": "Cajun disjointWith Parmense",
                        "CQ": [
                            "How does the ontology define the separation between Cajun and Parmense?",
                            "Is there any entity that can be classified as both Cajun and Parmense?",
                            "Which ontology classes are specified as mutually exclusive with Parmense?"
                        ]
                    },
                    {
                        "axiom": "Cajun disjointWith PolloAdAstra",
                        "CQ": [
                            "What is the formal distinction between Cajun and PolloAdAstra classes in the ontology?",
                            "Can an instance belong to both Cajun and PolloAdAstra simultaneously?",
                            "Which classes are declared disjoint with PolloAdAstra?"
                        ]
                    },
                    {
                        "axiom": "Cajun disjointWith Fiorentina",
                        "CQ": [
                            "What is the formal relationship specified between Cajun and Fiorentina in the ontology?",
                            "Is it allowed for an individual to be classified as both Cajun and Fiorentina simultaneously?",
                            "Which classes are explicitly defined as incompatible with Fiorentina?"
                        ]
                    },
                    {
                        "axiom": "Cajun disjointWith Rosa",
                        "CQ": [
                            "What logical separation is asserted between Cajun and Rosa within the ontology?",
                            "Is it feasible for an instance to belong simultaneously to both Cajun and Rosa?",
                            "Which classes are formally incompatible with Rosa according to the ontology?"
                        ]
                    },
                    {
                        "axiom": "Cajun disjointWith QuattroFormaggi",
                        "CQ": [
                            "How are the classes Cajun and QuattroFormaggi distinguished in the ontology?",
                            "Is an individual allowed to be classified under both Cajun and QuattroFormaggi simultaneously?",
                            "Which classes are specified as disjoint with QuattroFormaggi?"
                        ]
                    },
                    {
                        "axiom": "Cajun disjointWith Giardiniera",
                        "CQ": [
                            "How does the ontology specify the separation between Cajun and Giardiniera?",
                            "Is any individual allowed to be classified as both Cajun and Giardiniera?",
                            "What are the classes that are stated as mutually exclusive with Giardiniera?"
                        ]
                    },
                    {
                        "axiom": "Cajun disjointWith FourSeasons",
                        "CQ": [
                            "How does the ontology express the relationship between Cajun and FourSeasons pizza types?",
                            "Is an individual pizza allowed to belong to both the Cajun and FourSeasons categories simultaneously?",
                            "Which classes are specified as disjoint with FourSeasons in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Cajun propertyRestrictions [hasTopping some TomatoTopping]",
                        "CQ": [
                            "Is it required for a Cajun pizza to have at least one topping that is a TomatoTopping?",
                            "Does the definition of Cajun ensure the existence of some TomatoTopping among its toppings?",
                            "Can a pizza be classified as Cajun if it does not have any TomatoTopping?"
                        ]
                    },
                    {
                        "axiom": "Cajun propertyRestrictions [hasTopping some TobascoPepperSauce]",
                        "CQ": [
                            "Is it necessary for a Cajun pizza to have at least one topping of Tobasco Pepper Sauce?",
                            "Does every Cajun pizza include the hasTopping relation with Tobasco Pepper Sauce in at least one instance?",
                            "Can a pizza qualify as Cajun if it does not have Tobasco Pepper Sauce as a topping?"
                        ]
                    },
                    {
                        "axiom": "Cajun propertyRestrictions [hasTopping only (PrawnsTopping or TobascoPepperSauce or MozzarellaTopping or TomatoTopping or OnionTopping or PeperonataTopping)]",
                        "CQ": [
                            "Is a Cajun pizza restricted to having only Prawns, Tobasco Pepper Sauce, Mozzarella, Tomato, Onion, or Peperonata as its toppings?",
                            "Can any topping other than Prawns, Tobasco Pepper Sauce, Mozzarella, Tomato, Onion, or Peperonata be present on a Cajun pizza?",
                            "Does every instance of hasTopping for a Cajun pizza necessarily relate to either Prawns, Tobasco Pepper Sauce, Mozzarella, Tomato, Onion, or Peperonata toppings only?"
                        ]
                    },
                    {
                        "axiom": "Cajun propertyRestrictions [hasTopping some MozzarellaTopping]",
                        "CQ": [
                            "Is it required for Cajun to have at least one MozzarellaTopping as a topping?",
                            "Can a pizza be classified as Cajun without having any MozzarellaTopping?",
                            "Does every Cajun necessarily include some MozzarellaTopping among its toppings?"
                        ]
                    },
                    {
                        "axiom": "Cajun propertyRestrictions [hasTopping some OnionTopping]",
                        "CQ": [
                            "Is it required that a Cajun pizza has at least one OnionTopping as a topping?",
                            "Can a pizza be classified as Cajun if it does not have any OnionTopping among its toppings?",
                            "Does the definition of Cajun pizza specify the presence of OnionTopping in its list of toppings?"
                        ]
                    },
                    {
                        "axiom": "Cajun propertyRestrictions [hasTopping some PeperonataTopping]",
                        "CQ": [
                            "Is it required for a Cajun pizza to have at least one topping that is PeperonataTopping?",
                            "Can a Cajun pizza exist without containing any PeperonataTopping among its toppings?",
                            "Does every instance of Cajun pizza necessarily include PeperonataTopping as one of its toppings?"
                        ]
                    },
                    {
                        "axiom": "Cajun propertyRestrictions [hasTopping some PrawnsTopping]",
                        "CQ": [
                            "Is it required that a Cajun pizza has at least one topping of Prawns?",
                            "Can a pizza be classified as Cajun without having any PrawnsTopping?",
                            "Does every Cajun pizza necessarily include the hasTopping property linked to PrawnsTopping?"
                        ]
                    }
                ]
            },
            "Capricciosa": {
                "axiom": {
                    "subClassOf": [
                        "NamedPizza"
                    ],
                    "disjointWith": [
                        "Mushroom",
                        "LaReine",
                        "Napoletana",
                        "Veneziana",
                        "AmericanHot",
                        "UnclosedPizza",
                        "PrinceCarlo",
                        "FruttiDiMare",
                        "Siciliana",
                        "Cajun",
                        "Margherita",
                        "American",
                        "SloppyGiuseppe",
                        "Caprina",
                        "Soho",
                        "Parmense",
                        "PolloAdAstra",
                        "Fiorentina",
                        "Rosa",
                        "QuattroFormaggi",
                        "Giardiniera",
                        "FourSeasons"
                    ],
                    "propertyRestrictions": [
                        "[hasTopping some TomatoTopping]",
                        "[hasTopping some HamTopping]",
                        "[hasTopping only (AnchoviesTopping or MozzarellaTopping or TomatoTopping or PeperonataTopping or HamTopping or CaperTopping or OliveTopping)]",
                        "[hasTopping some OliveTopping]",
                        "[hasTopping some MozzarellaTopping]",
                        "[hasTopping some AnchoviesTopping]",
                        "[hasTopping some PeperonataTopping]",
                        "[hasTopping some CaperTopping]"
                    ]
                },
                "description": "Capricciosa is defined as a subclass of NamedPizza, and is explicitly disjoint from a range of other specified pizza types, ensuring no individual can simultaneously belong to Capricciosa and any of those classes. Members of Capricciosa must have at least one topping each of tomato, ham, olive, mozzarella, anchovies, peperonata, and caper. Additionally, their toppings are strictly limited to only anchovies, mozzarella, tomato, peperonata, ham, caper, or olive—no other toppings are permitted. This formalization ensures a precise and consistent definition for Capricciosa pizza within the ontology.",
                "CQ": [
                    {
                        "axiom": "Capricciosa subClassOf NamedPizza",
                        "CQ": [
                            "Is Capricciosa classified under the broader category of NamedPizza?",
                            "What specific pizza types are encompassed by NamedPizza, including Capricciosa?",
                            "Which higher-level pizza classifications does Capricciosa fall under?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa disjointWith Mushroom",
                        "CQ": [
                            "How is the incompatibility between Capricciosa and Mushroom represented in the ontology?",
                            "Is there any class instance that can simultaneously belong to both Capricciosa and Mushroom?",
                            "Which classes are formally specified as mutually exclusive with Capricciosa?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa disjointWith LaReine",
                        "CQ": [
                            "What ontological separation exists between Capricciosa and LaReine?",
                            "Is there any scenario where a pizza can be considered both Capricciosa and LaReine?",
                            "Which pizza classes are declared to have no overlap with LaReine?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa disjointWith Napoletana",
                        "CQ": [
                            "What ontological separation is defined between Capricciosa and Napoletana?",
                            "Is any individual classified as both Capricciosa and Napoletana within the ontology?",
                            "Which classes are specified as disjoint with Capricciosa?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa disjointWith Veneziana",
                        "CQ": [
                            "What logical separation is established between Capricciosa and Veneziana within the ontology?",
                            "Is it allowable for an individual pizza to be both Capricciosa and Veneziana?",
                            "Which other classes are defined as incompatible with Veneziana?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa disjointWith AmericanHot",
                        "CQ": [
                            "How does the ontology differentiate between Capricciosa and AmericanHot pizza types?",
                            "Is there any instance that can be classified as both Capricciosa and AmericanHot?",
                            "Which pizza classes are identified as mutually exclusive with Capricciosa?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa disjointWith UnclosedPizza",
                        "CQ": [
                            "What kind of separation is specified between Capricciosa and UnclosedPizza in the ontology?",
                            "Is it permissible for a pizza to be classified as both Capricciosa and UnclosedPizza?",
                            "Which classes are formally declared disjoint with Capricciosa?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa disjointWith PrinceCarlo",
                        "CQ": [
                            "What is the formal distinction between Capricciosa and PrinceCarlo as defined in the ontology?",
                            "Can an individual pizza instance be classified as both Capricciosa and PrinceCarlo simultaneously?",
                            "Which pizza categories, apart from Capricciosa, are declared as disjoint with PrinceCarlo?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa disjointWith FruttiDiMare",
                        "CQ": [
                            "What ontological separation is defined between Capricciosa and FruttiDiMare?",
                            "Is there any circumstance where a pizza can be classified as both Capricciosa and FruttiDiMare?",
                            "Which classes are specified as mutually exclusive with Capricciosa in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa disjointWith Siciliana",
                        "CQ": [
                            "What ontological constraint separates Capricciosa from Siciliana?",
                            "Does the ontology allow an instance to be both Capricciosa and Siciliana simultaneously?",
                            "Which classes are declared as disjoint with Capricciosa?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa disjointWith Cajun",
                        "CQ": [
                            "What is the ontological contrast between Capricciosa and Cajun?",
                            "Is any entity classified as both Capricciosa and Cajun simultaneously?",
                            "Which pizza types are explicitly marked as incompatible with Cajun?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa disjointWith Margherita",
                        "CQ": [
                            "How are Capricciosa and Margherita represented in terms of mutual exclusivity within the ontology?",
                            "Is it allowed for a single pizza to be an instance of both Capricciosa and Margherita?",
                            "Which other pizza types are formally specified as disjoint with Margherita?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa disjointWith American",
                        "CQ": [
                            "How does the ontology formally distinguish between Capricciosa and American pizzas?",
                            "Is it allowable for a pizza to be classified as both Capricciosa and American simultaneously?",
                            "Which named pizza classes are specified as being disjoint with Capricciosa in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa disjointWith SloppyGiuseppe",
                        "CQ": [
                            "How does the ontology formally distinguish between Capricciosa and SloppyGiuseppe?",
                            "Is there any instance that can belong to both Capricciosa and SloppyGiuseppe categories?",
                            "Which other pizza types are specified as disjoint with Capricciosa in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa disjointWith Caprina",
                        "CQ": [
                            "What formal separation is specified between Capricciosa and Caprina in the ontology?",
                            "Is any pizza instance classified as both Capricciosa and Caprina permitted by the ontology?",
                            "Which other pizza types are declared as mutually exclusive with Caprina?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa disjointWith Soho",
                        "CQ": [
                            "How are Capricciosa and Soho pizzas differentiated within the ontology?",
                            "Can an individual pizza instance be classified as both Capricciosa and Soho?",
                            "Which pizza types are formally specified as mutually exclusive with Capricciosa?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa disjointWith Parmense",
                        "CQ": [
                            "How is the exclusivity between Capricciosa and Parmense represented in the ontology?",
                            "Is there any pizza that can be classified as both Capricciosa and Parmense?",
                            "Which pizza varieties are explicitly marked as incompatible with Parmense?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa disjointWith PolloAdAstra",
                        "CQ": [
                            "What ontological separation is declared between Capricciosa and PolloAdAstra?",
                            "Can an individual pizza instance belong simultaneously to both the Capricciosa and PolloAdAstra classes?",
                            "Which classes, other than PolloAdAstra, are asserted as disjoint with Capricciosa in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa disjointWith Fiorentina",
                        "CQ": [
                            "How does the ontology delineate the distinction between Capricciosa and Fiorentina?",
                            "Is there any instance that can belong to both Capricciosa and Fiorentina classes according to the ontology?",
                            "Which classes are specified as mutually exclusive with Fiorentina in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa disjointWith Rosa",
                        "CQ": [
                            "How does the ontology specify the connection or separation between Capricciosa and Rosa?",
                            "Is there any scenario in which an individual can be classified as both Capricciosa and Rosa?",
                            "What classes are formally stated as disjoint with Capricciosa according to the ontology?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa disjointWith QuattroFormaggi",
                        "CQ": [
                            "What formal separation is asserted between Capricciosa and QuattroFormaggi in the ontology?",
                            "Is it permissible for a pizza to belong to both Capricciosa and QuattroFormaggi categories?",
                            "Which classes are specified as being mutually exclusive with Capricciosa?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa disjointWith Giardiniera",
                        "CQ": [
                            "What formal separation is specified between Capricciosa and Giardiniera within the ontology?",
                            "Is there any individual that can simultaneously belong to both Capricciosa and Giardiniera classes?",
                            "Which classes are defined as mutually exclusive with Giardiniera?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa disjointWith FourSeasons",
                        "CQ": [
                            "How does the ontology define the separation between Capricciosa and FourSeasons?",
                            "Is there an instance that could be classified as both Capricciosa and FourSeasons?",
                            "Which pizza categories are specified as mutually exclusive with Capricciosa?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa propertyRestrictions [hasTopping some TomatoTopping]",
                        "CQ": [
                            "Is it required for a Capricciosa pizza to have at least one TomatoTopping among its toppings?",
                            "Can a pizza be considered Capricciosa if it does not include any TomatoTopping?",
                            "Does every Capricciosa pizza necessarily feature TomatoTopping as one of its toppings?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa propertyRestrictions [hasTopping some HamTopping]",
                        "CQ": [
                            "Is it required for a Capricciosa pizza to have at least one HamTopping as a topping?",
                            "Can a pizza be classified as Capricciosa if it does not include HamTopping among its toppings?",
                            "Does every Capricciosa pizza necessarily possess the hasTopping property with some instance of HamTopping?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa propertyRestrictions [hasTopping only (AnchoviesTopping or MozzarellaTopping or TomatoTopping or PeperonataTopping or HamTopping or CaperTopping or OliveTopping)]",
                        "CQ": [
                            "Are the toppings on a Capricciosa pizza limited exclusively to Anchovies, Mozzarella, Tomato, Peperonata, Ham, Caper, and Olive toppings?",
                            "Would a pizza with any topping outside the specified seven be excluded from being classified as Capricciosa?",
                            "Does the definition of Capricciosa ensure that it can have any combination of the seven listed toppings, but never any other topping type?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa propertyRestrictions [hasTopping some OliveTopping]",
                        "CQ": [
                            "Is it required for every Capricciosa pizza to have at least one OliveTopping as a topping?",
                            "Must Capricciosa pizzas include the hasTopping property linking them to an OliveTopping?",
                            "Can a Capricciosa pizza be defined without the presence of OliveTopping through the hasTopping relation?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa propertyRestrictions [hasTopping some MozzarellaTopping]",
                        "CQ": [
                            "Must a Capricciosa pizza always have at least one MozzarellaTopping as a topping?",
                            "Is it required that every pizza classified as Capricciosa contains some MozzarellaTopping?",
                            "Can a pizza be Capricciosa if it lacks any MozzarellaTopping?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa propertyRestrictions [hasTopping some AnchoviesTopping]",
                        "CQ": [
                            "Is it required for a Capricciosa pizza to have at least one topping of anchovies?",
                            "Must every Capricciosa have the property 'hasTopping' linked to AnchoviesTopping?",
                            "Can a pizza be considered Capricciosa without containing any AnchoviesTopping?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa propertyRestrictions [hasTopping some PeperonataTopping]",
                        "CQ": [
                            "Is it required for a Capricciosa pizza to have at least one topping that is Peperonata?",
                            "Must every instance of Capricciosa include hasTopping relation to PeperonataTopping?",
                            "Can a Capricciosa exist without any PeperonataTopping among its toppings?"
                        ]
                    },
                    {
                        "axiom": "Capricciosa propertyRestrictions [hasTopping some CaperTopping]",
                        "CQ": [
                            "Is it required for a Capricciosa to include at least one CaperTopping as a topping?",
                            "Does the presence of CaperTopping determine whether a pizza qualifies as Capricciosa?",
                            "Can a Capricciosa exist without having any CaperTopping among its toppings?"
                        ]
                    }
                ]
            },
            "Caprina": {
                "axiom": {
                    "subClassOf": [
                        "NamedPizza"
                    ],
                    "disjointWith": [
                        "Mushroom",
                        "LaReine",
                        "Napoletana",
                        "Veneziana",
                        "AmericanHot",
                        "UnclosedPizza",
                        "PrinceCarlo",
                        "Capricciosa",
                        "FruttiDiMare",
                        "Siciliana",
                        "Cajun",
                        "Margherita",
                        "American",
                        "SloppyGiuseppe",
                        "Soho",
                        "Parmense",
                        "PolloAdAstra",
                        "Fiorentina",
                        "Rosa",
                        "QuattroFormaggi",
                        "Giardiniera",
                        "FourSeasons"
                    ],
                    "propertyRestrictions": [
                        "[hasTopping some TomatoTopping]",
                        "[hasTopping some SundriedTomatoTopping]",
                        "[hasTopping some MozzarellaTopping]",
                        "[hasTopping only (MozzarellaTopping or TomatoTopping or SundriedTomatoTopping or GoatsCheeseTopping)]",
                        "[hasTopping some GoatsCheeseTopping]"
                    ]
                },
                "description": "Caprina is defined as a subclass of NamedPizza and is explicitly disjoint from a diverse set of other named pizzas, ensuring that no individual pizza can simultaneously be a Caprina and any of the pizzas listed (such as Mushroom, LaReine, etc.). Members of the Caprina class are characterized by their toppings: each Caprina must have at least one instance each of tomato topping, sundried tomato topping, mozzarella topping, and goat’s cheese topping. Additionally, Caprina pizzas can only have mozzarella, tomato, sundried tomato, or goat’s cheese as toppings—no other toppings are permitted. This formalization guarantees a specific and exclusive combination of ingredients for any pizza classified as Caprina.",
                "CQ": [
                    {
                        "axiom": "Caprina subClassOf NamedPizza",
                        "CQ": [
                            "Is Caprina classified as a type of NamedPizza?",
                            "Which varieties fall under the category of NamedPizza, specifically including Caprina?",
                            "What broader groups include Caprina as a member?"
                        ]
                    },
                    {
                        "axiom": "Caprina disjointWith Mushroom",
                        "CQ": [
                            "How does the ontology specify the interaction between Caprina and Mushroom classes?",
                            "Is there any entity that can be an instance of both Caprina and Mushroom simultaneously?",
                            "Which classes are defined as mutually exclusive with Mushroom?"
                        ]
                    },
                    {
                        "axiom": "Caprina disjointWith LaReine",
                        "CQ": [
                            "How does the ontology differentiate between Caprina and LaReine?",
                            "Is any entity allowed to be classified as both Caprina and LaReine simultaneously?",
                            "Which classes are identified as disjoint with Caprina?"
                        ]
                    },
                    {
                        "axiom": "Caprina disjointWith Napoletana",
                        "CQ": [
                            "How does the ontology formally separate Caprina from Napoletana?",
                            "Is there any instance that can be classified as both Caprina and Napoletana?",
                            "Which classes are identified as disjoint with Napoletana in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Caprina disjointWith Veneziana",
                        "CQ": [
                            "What kind of incompatibility is asserted between Caprina and Veneziana?",
                            "Is there any instance that can simultaneously belong to both Caprina and Veneziana classes?",
                            "Which pizza types are formally specified as being mutually exclusive with Veneziana?"
                        ]
                    },
                    {
                        "axiom": "Caprina disjointWith AmericanHot",
                        "CQ": [
                            "What is the ontological separation between Caprina and AmericanHot?",
                            "Is there any entity that can be classified simultaneously as Caprina and AmericanHot?",
                            "Which classes are specified to be incompatible with Caprina?"
                        ]
                    },
                    {
                        "axiom": "Caprina disjointWith UnclosedPizza",
                        "CQ": [
                            "What logical separation is defined between Caprina and UnclosedPizza within the ontology?",
                            "Is any pizza instance allowed to be both Caprina and UnclosedPizza simultaneously?",
                            "Which classes are declared disjoint with Caprina in the current ontology model?"
                        ]
                    },
                    {
                        "axiom": "Caprina disjointWith PrinceCarlo",
                        "CQ": [
                            "How does the ontology distinguish between Caprina and PrinceCarlo?",
                            "Is there any individual that can simultaneously belong to both the Caprina and PrinceCarlo classes?",
                            "Which classes within the ontology are declared as disjoint with Caprina?"
                        ]
                    },
                    {
                        "axiom": "Caprina disjointWith Capricciosa",
                        "CQ": [
                            "How does the ontology differentiate between Caprina and Capricciosa pizzas?",
                            "Is there any scenario where a pizza can belong to both Caprina and Capricciosa categories?",
                            "Which pizza types are marked as incompatible with Caprina in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Caprina disjointWith FruttiDiMare",
                        "CQ": [
                            "What formal separation is defined between Caprina and FruttiDiMare within the ontology?",
                            "Is it allowed for an instance to be classified as both Caprina and FruttiDiMare?",
                            "Which classes are specified as disjoint with FruttiDiMare?"
                        ]
                    },
                    {
                        "axiom": "Caprina disjointWith Siciliana",
                        "CQ": [
                            "What formal separation is asserted between Caprina and Siciliana in the ontology?",
                            "Can an individual instance be classified as both Caprina and Siciliana?",
                            "Which classes are defined as being disjoint with Caprina?"
                        ]
                    },
                    {
                        "axiom": "Caprina disjointWith Cajun",
                        "CQ": [
                            "What logical constraint separates Caprina and Cajun classes in the ontology?",
                            "Is it allowed for an instance to be classified as both Caprina and Cajun?",
                            "Which classes are formally specified as disjoint with Caprina?"
                        ]
                    },
                    {
                        "axiom": "Caprina disjointWith Margherita",
                        "CQ": [
                            "What ontological separation is specified between Caprina and Margherita?",
                            "Can an individual pizza instance belong to both Caprina and Margherita categories?",
                            "Which classes are identified as disjoint with Margherita in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Caprina disjointWith American",
                        "CQ": [
                            "How does the ontology represent the exclusivity between Caprina and American?",
                            "Is any instance permitted to belong to both Caprina and American categories simultaneously?",
                            "What classes, excluding American, are specified as disjoint with Caprina?"
                        ]
                    },
                    {
                        "axiom": "Caprina disjointWith SloppyGiuseppe",
                        "CQ": [
                            "What logical separation is defined between Caprina and SloppyGiuseppe within the ontology?",
                            "Is a single entity permitted to be both Caprina and SloppyGiuseppe simultaneously?",
                            "Which classes are explicitly stated as disjoint with Caprina?"
                        ]
                    },
                    {
                        "axiom": "Caprina disjointWith Soho",
                        "CQ": [
                            "What kind of formal separation is defined between Caprina and Soho classes?",
                            "Is it allowed for an entity to be an instance of both Caprina and Soho simultaneously?",
                            "Which classes are specified as mutually exclusive with Soho?"
                        ]
                    },
                    {
                        "axiom": "Caprina disjointWith Parmense",
                        "CQ": [
                            "What logical separation is established between Caprina and Parmense in the ontology?",
                            "Is any individual permitted to belong to both Caprina and Parmense categories simultaneously?",
                            "Which classes, according to the ontology, are formally specified as disjoint with Caprina?"
                        ]
                    },
                    {
                        "axiom": "Caprina disjointWith PolloAdAstra",
                        "CQ": [
                            "How does the ontology differentiate between Caprina and PolloAdAstra pizzas?",
                            "Is there any instance in the ontology that can simultaneously be both Caprina and PolloAdAstra?",
                            "Which pizza types are specified as disjoint with Caprina?"
                        ]
                    },
                    {
                        "axiom": "Caprina disjointWith Fiorentina",
                        "CQ": [
                            "How does the ontology differentiate between Caprina and Fiorentina pizzas?",
                            "Is any pizza instance allowed to belong to both Caprina and Fiorentina classes?",
                            "Which pizza classes are asserted as mutually exclusive with Caprina?"
                        ]
                    },
                    {
                        "axiom": "Caprina disjointWith Rosa",
                        "CQ": [
                            "How are Caprina and Rosa conceptually separated within the ontology?",
                            "Is there any instance that can simultaneously be classified as both Caprina and Rosa?",
                            "What other classes are specified as disjoint with Caprina?"
                        ]
                    },
                    {
                        "axiom": "Caprina disjointWith QuattroFormaggi",
                        "CQ": [
                            "What logical separation is defined between Caprina and QuattroFormaggi in the ontology?",
                            "Is there any instance that can be classified as both Caprina and QuattroFormaggi?",
                            "Which classes are stated as mutually exclusive with Caprina?"
                        ]
                    },
                    {
                        "axiom": "Caprina disjointWith Giardiniera",
                        "CQ": [
                            "How are Caprina and Giardiniera differentiated within the ontology?",
                            "Is there any pizza that can belong to both Caprina and Giardiniera categories?",
                            "Which classes in the ontology are declared as disjoint with Giardiniera?"
                        ]
                    },
                    {
                        "axiom": "Caprina disjointWith FourSeasons",
                        "CQ": [
                            "How does the ontology differentiate between Caprina and FourSeasons pizzas?",
                            "Is it permissible for a pizza to be classified as both Caprina and FourSeasons?",
                            "Which pizza classifications are defined as disjoint from FourSeasons?"
                        ]
                    },
                    {
                        "axiom": "Caprina propertyRestrictions [hasTopping some TomatoTopping]",
                        "CQ": [
                            "Is it required for a Caprina pizza to have at least one TomatoTopping as a topping?",
                            "Can a Caprina pizza be considered valid if it does not include any TomatoTopping?",
                            "Does the presence of TomatoTopping distinguish Caprina pizza from other pizza types?"
                        ]
                    },
                    {
                        "axiom": "Caprina propertyRestrictions [hasTopping some SundriedTomatoTopping]",
                        "CQ": [
                            "Is it necessary for a Caprina pizza to include at least one Sundried Tomato topping?",
                            "Can a Caprina be identified without having the hasTopping property with SundriedTomatoTopping?",
                            "Does every instance of Caprina always have some topping that is SundriedTomatoTopping?"
                        ]
                    },
                    {
                        "axiom": "Caprina propertyRestrictions [hasTopping some MozzarellaTopping]",
                        "CQ": [
                            "Is it required that a Caprina pizza includes Mozzarella as one of its toppings?",
                            "Does every Caprina pizza have at least one topping of Mozzarella?",
                            "Can a Caprina pizza exist without the presence of Mozzarella among its toppings?"
                        ]
                    },
                    {
                        "axiom": "Caprina propertyRestrictions [hasTopping only (MozzarellaTopping or TomatoTopping or SundriedTomatoTopping or GoatsCheeseTopping)]",
                        "CQ": [
                            "Is it required that pizzas classified as Caprina have only Mozzarella, Tomato, Sundried Tomato, or Goat's Cheese as toppings?",
                            "Does the Caprina pizza definition prevent it from having any topping other than Mozzarella, Tomato, Sundried Tomato, or Goat's Cheese?",
                            "Would a pizza with toppings outside Mozzarella, Tomato, Sundried Tomato, or Goat's Cheese still be considered Caprina?"
                        ]
                    },
                    {
                        "axiom": "Caprina propertyRestrictions [hasTopping some GoatsCheeseTopping]",
                        "CQ": [
                            "Is it required for a Caprina pizza to have at least one topping that is Goat’s Cheese?",
                            "Must every Caprina pizza include the 'hasTopping' relation with some instance of GoatsCheeseTopping?",
                            "Can a pizza be classified as Caprina if it does not have GoatsCheeseTopping as any of its toppings?"
                        ]
                    }
                ]
            },
            "Fiorentina": {
                "axiom": {
                    "subClassOf": [
                        "NamedPizza"
                    ],
                    "disjointWith": [
                        "Mushroom",
                        "LaReine",
                        "Napoletana",
                        "Veneziana",
                        "AmericanHot",
                        "UnclosedPizza",
                        "PrinceCarlo",
                        "Capricciosa",
                        "FruttiDiMare",
                        "Siciliana",
                        "Cajun",
                        "Margherita",
                        "American",
                        "SloppyGiuseppe",
                        "Caprina",
                        "Soho",
                        "Parmense",
                        "PolloAdAstra",
                        "Rosa",
                        "QuattroFormaggi",
                        "Giardiniera",
                        "FourSeasons"
                    ],
                    "propertyRestrictions": [
                        "[hasTopping some TomatoTopping]",
                        "[hasTopping only (MozzarellaTopping or GarlicTopping or TomatoTopping or SpinachTopping or OliveTopping or ParmesanTopping)]",
                        "[hasTopping some GarlicTopping]",
                        "[hasTopping some OliveTopping]",
                        "[hasTopping some MozzarellaTopping]",
                        "[hasTopping some ParmesanTopping]",
                        "[hasTopping some SpinachTopping]"
                    ]
                },
                "description": "Fiorentina is defined as a subclass of NamedPizza and is explicitly disjoint with a variety of other specific pizza types, ensuring that no individual pizza can simultaneously be classified as both Fiorentina and any of those listed (e.g., Mushroom, Margherita, FourSeasons). Members of the Fiorentina class are characterized by the following topping constraints: they must include at least one of each of the following toppings—TomatoTopping, GarlicTopping, OliveTopping, MozzarellaTopping, ParmesanTopping, and SpinachTopping. Additionally, Fiorentina pizzas are restricted to having only the following toppings: MozzarellaTopping, GarlicTopping, TomatoTopping, SpinachTopping, OliveTopping, or ParmesanTopping. This axiomatisation precisely defines Fiorentina pizzas in terms of both required ingredients and clear differentiation from other pizzas.",
                "CQ": [
                    {
                        "axiom": "Fiorentina subClassOf NamedPizza",
                        "CQ": [
                            "Is Fiorentina classified as a kind of NamedPizza?",
                            "Which pizzas are categorized under NamedPizza, including Fiorentina?",
                            "What broader pizza classifications encompass Fiorentina?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina disjointWith Mushroom",
                        "CQ": [
                            "What type of logical separation is defined between Fiorentina and Mushroom in the ontology?",
                            "Is it allowed for an individual to be classified simultaneously as Fiorentina and Mushroom?",
                            "Which classes are specified as mutually exclusive with Mushroom?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina disjointWith LaReine",
                        "CQ": [
                            "What is the ontological separation between Fiorentina and LaReine?",
                            "Is there an instance that can simultaneously belong to both Fiorentina and LaReine categories?",
                            "Which classes are explicitly set as disjoint with Fiorentina in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina disjointWith Napoletana",
                        "CQ": [
                            "How does the ontology distinguish between Fiorentina and Napoletana pizza classes?",
                            "Is there any possibility for an individual to be classified as both Fiorentina and Napoletana?",
                            "Which pizza classes are formally specified as disjoint with Napoletana in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina disjointWith Veneziana",
                        "CQ": [
                            "What is the ontological separation between Fiorentina and Veneziana pizza types?",
                            "Can a pizza be classified simultaneously as Fiorentina and Veneziana?",
                            "Which classes are logically incompatible with Fiorentina?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina disjointWith AmericanHot",
                        "CQ": [
                            "What is the asserted logical relationship between Fiorentina and AmericanHot pizzas in the ontology?",
                            "Is there any instance that can simultaneously belong to both the Fiorentina and AmericanHot pizza categories?",
                            "Which classes are explicitly defined as disjoint with Fiorentina in this ontology?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina disjointWith UnclosedPizza",
                        "CQ": [
                            "How are Fiorentina and UnclosedPizza differentiated in the ontology?",
                            "Could a single pizza instance simultaneously belong to both Fiorentina and UnclosedPizza categories?",
                            "Which pizza types are formally specified as disjoint from UnclosedPizza?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina disjointWith PrinceCarlo",
                        "CQ": [
                            "What explicit ontological difference separates Fiorentina and PrinceCarlo?",
                            "Is there any instance that could belong to both Fiorentina and PrinceCarlo classes simultaneously?",
                            "Which other classes are formally disjoint with PrinceCarlo according to the ontology?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina disjointWith Capricciosa",
                        "CQ": [
                            "How are Fiorentina and Capricciosa distinguished within the ontology?",
                            "Is any pizza instance allowed to belong to both Fiorentina and Capricciosa classes?",
                            "Which pizza types are explicitly set as incompatible with Capricciosa?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina disjointWith FruttiDiMare",
                        "CQ": [
                            "How does the ontology delineate the separation between Fiorentina and FruttiDiMare?",
                            "Is membership in both Fiorentina and FruttiDiMare classes allowed for a single pizza instance?",
                            "Which classes are defined as mutually exclusive with Fiorentina in the ontology structure?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina disjointWith Siciliana",
                        "CQ": [
                            "How is the class Fiorentina characterized in relation to Siciliana within the ontology?",
                            "Is it allowed for a pizza to be classified as both Fiorentina and Siciliana simultaneously?",
                            "Which pizza types are specified as mutually exclusive with Siciliana?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina disjointWith Cajun",
                        "CQ": [
                            "How does the ontology specify the separation between Fiorentina and Cajun?",
                            "Is any individual allowed to be an instance of both Fiorentina and Cajun simultaneously?",
                            "Which classes are defined as mutually exclusive with Cajun in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina disjointWith Margherita",
                        "CQ": [
                            "What kind of separation is defined between Fiorentina and Margherita in the ontology?",
                            "Is there any instance that can simultaneously belong to both Fiorentina and Margherita pizza classes?",
                            "Which pizza types are specified as disjoint with Margherita?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina disjointWith American",
                        "CQ": [
                            "Are there any circumstances where something can be both Fiorentina and American according to the ontology?",
                            "Which classes are explicitly specified as disjoint with Fiorentina?",
                            "What is the ontological distinction established between Fiorentina and American?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina disjointWith SloppyGiuseppe",
                        "CQ": [
                            "What kind of formal separation is defined between Fiorentina and SloppyGiuseppe?",
                            "Is there any way an entity can be classified as both Fiorentina and SloppyGiuseppe?",
                            "Which pizza types, apart from SloppyGiuseppe, are set as disjoint with Fiorentina?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina disjointWith Caprina",
                        "CQ": [
                            "How does the ontology represent the exclusivity between Fiorentina and Caprina pizzas?",
                            "Is any pizza instance allowed to be classified as both Fiorentina and Caprina?",
                            "What pizza types are formally stated as incompatible with Fiorentina in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina disjointWith Soho",
                        "CQ": [
                            "Are Fiorentina and Soho defined as mutually exclusive pizza types in the ontology?",
                            "Can an individual pizza be classified as both Fiorentina and Soho?",
                            "Which pizza categories are stated to be disjoint with Soho?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina disjointWith Parmense",
                        "CQ": [
                            "What is the defined separation between Fiorentina and Parmense within the ontology?",
                            "Is there any scenario where an individual can be classified as both Fiorentina and Parmense?",
                            "Which classes are asserted to be disjoint with Fiorentina?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina disjointWith PolloAdAstra",
                        "CQ": [
                            "What logical separation is established between Fiorentina and PolloAdAstra within the ontology?",
                            "Is any pizza instance allowed to belong to both the Fiorentina and PolloAdAstra categories?",
                            "Which other pizza types are explicitly specified as being disjoint with PolloAdAstra?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina disjointWith Rosa",
                        "CQ": [
                            "How does the ontology specify the difference between Fiorentina and Rosa?",
                            "Is there an instance that can be both Fiorentina and Rosa?",
                            "What classes are explicitly stated as disjoint with Rosa?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina disjointWith QuattroFormaggi",
                        "CQ": [
                            "How does the ontology specify the connection or separation between Fiorentina and QuattroFormaggi pizzas?",
                            "Is an individual pizza instance allowed to be classified as both Fiorentina and QuattroFormaggi?",
                            "Which pizza types in the ontology are declared to be mutually exclusive with Fiorentina?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina disjointWith Giardiniera",
                        "CQ": [
                            "What is the formal connection specified between Fiorentina and Giardiniera in the ontology?",
                            "Can a pizza instance be classified as both Fiorentina and Giardiniera simultaneously?",
                            "Which classes are defined as mutually exclusive with Fiorentina?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina disjointWith FourSeasons",
                        "CQ": [
                            "What is the logical separation between Fiorentina and FourSeasons within the ontology?",
                            "Can a pizza be classified as both Fiorentina and FourSeasons simultaneously?",
                            "Which pizza types are defined as disjoint with FourSeasons?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina propertyRestrictions [hasTopping some TomatoTopping]",
                        "CQ": [
                            "Is it necessary for a Fiorentina to have at least one topping that is a TomatoTopping?",
                            "Can a Fiorentina exist without any TomatoTopping among its toppings?",
                            "Does the definition of Fiorentina require the presence of TomatoTopping as one of its toppings?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina propertyRestrictions [hasTopping only (MozzarellaTopping or GarlicTopping or TomatoTopping or SpinachTopping or OliveTopping or ParmesanTopping)]",
                        "CQ": [
                            "Is every topping on a Fiorentina pizza required to be either Mozzarella, Garlic, Tomato, Spinach, Olive, or Parmesan?",
                            "Can a Fiorentina pizza include a topping that is not among Mozzarella, Garlic, Tomato, Spinach, Olive, or Parmesan?",
                            "Does the ontology restrict Fiorentina to have toppings exclusively from the set: Mozzarella, Garlic, Tomato, Spinach, Olive, and Parmesan?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina propertyRestrictions [hasTopping some GarlicTopping]",
                        "CQ": [
                            "Is it required that every Fiorentina pizza includes at least one GarlicTopping as a topping?",
                            "Can a Fiorentina pizza be classified as such without having any GarlicTopping?",
                            "Must the property 'hasTopping' for Fiorentina relate to GarlicTopping in all instances?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina propertyRestrictions [hasTopping some OliveTopping]",
                        "CQ": [
                            "Must every Fiorentina pizza have at least one OliveTopping as a topping?",
                            "Is it required for Fiorentina pizzas to include OliveTopping among their toppings?",
                            "Can a pizza be classified as Fiorentina if it lacks OliveTopping entirely?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina propertyRestrictions [hasTopping some MozzarellaTopping]",
                        "CQ": [
                            "Is it required that a Fiorentina pizza has at least one Mozzarella topping?",
                            "Must every instance of Fiorentina include Mozzarella as a topping?",
                            "Is the presence of MozzarellaTopping a necessary condition for a pizza to be classified as Fiorentina?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina propertyRestrictions [hasTopping some ParmesanTopping]",
                        "CQ": [
                            "Is it required for Fiorentina to have at least one topping that is Parmesan?",
                            "Can there be a Fiorentina without any ParmesanTopping applied as a topping?",
                            "Does every Fiorentina possess the property 'hasTopping' that references at least one instance of ParmesanTopping?"
                        ]
                    },
                    {
                        "axiom": "Fiorentina propertyRestrictions [hasTopping some SpinachTopping]",
                        "CQ": [
                            "Must every Fiorentina pizza contain at least one SpinachTopping?",
                            "Is SpinachTopping a required topping for every Fiorentina pizza?",
                            "Can a pizza be classified as Fiorentina if it does not have any SpinachTopping?"
                        ]
                    }
                ]
            },
            "FourSeasons": {
                "axiom": {
                    "subClassOf": [
                        "NamedPizza"
                    ],
                    "disjointWith": [
                        "Mushroom",
                        "LaReine",
                        "Napoletana",
                        "Veneziana",
                        "AmericanHot",
                        "UnclosedPizza",
                        "PrinceCarlo",
                        "Capricciosa",
                        "FruttiDiMare",
                        "Siciliana",
                        "Cajun",
                        "Margherita",
                        "American",
                        "SloppyGiuseppe",
                        "Caprina",
                        "Soho",
                        "Parmense",
                        "PolloAdAstra",
                        "Fiorentina",
                        "Rosa",
                        "QuattroFormaggi",
                        "Giardiniera"
                    ],
                    "propertyRestrictions": [
                        "[hasTopping some MushroomTopping]",
                        "[hasTopping some TomatoTopping]",
                        "[hasTopping some PeperoniSausageTopping]",
                        "[hasTopping some OliveTopping]",
                        "[hasTopping some MozzarellaTopping]",
                        "[hasTopping only (AnchoviesTopping or MozzarellaTopping or PeperoniSausageTopping or TomatoTopping or CaperTopping or OliveTopping or MushroomTopping)]",
                        "[hasTopping some AnchoviesTopping]",
                        "[hasTopping some CaperTopping]"
                    ]
                },
                "description": "FourSeasons is a subclass of NamedPizza and is explicitly disjoint from several other specific pizza classes, ensuring that no pizza can be simultaneously classified as FourSeasons and any of the listed disjoint pizzas (such as Mushroom, Margherita, QuattroFormaggi, etc.). Members of the FourSeasons class are characterized by having at least one of each of the following toppings: mushroom, tomato, peperoni sausage, olive, mozzarella, anchovies, and capers. Additionally, the set of possible toppings for FourSeasons pizzas is restricted to only anchovies, mozzarella, peperoni sausage, tomato, capers, olives, and mushrooms—no other toppings are permitted. This formalization captures the standard combinatory topping profile of the FourSeasons pizza variant.",
                "CQ": [
                    {
                        "axiom": "FourSeasons subClassOf NamedPizza",
                        "CQ": [
                            "Is FourSeasons classified under the broader group of NamedPizza?",
                            "What are all the specific pizzas that fall under NamedPizza, and does this include FourSeasons?",
                            "Which higher-level categories encompass FourSeasons within the pizza taxonomy?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons disjointWith Mushroom",
                        "CQ": [
                            "How does the ontology specify the exclusivity between FourSeasons and Mushroom?",
                            "Is any entity permitted to belong to both FourSeasons and Mushroom classes simultaneously?",
                            "Which classes within the ontology are stated to be mutually exclusive with Mushroom?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons disjointWith LaReine",
                        "CQ": [
                            "What logical separation exists between FourSeasons and LaReine pizza types?",
                            "Is it permissible for a single pizza to be classified as both FourSeasons and LaReine?",
                            "Which pizza classes are explicitly disjoint from FourSeasons?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons disjointWith Napoletana",
                        "CQ": [
                            "How is the ontological separation defined between FourSeasons and Napoletana pizzas?",
                            "Is there any pizza instance that could belong to both FourSeasons and Napoletana categories?",
                            "Which pizza types are formally incompatible with the Napoletana class?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons disjointWith Veneziana",
                        "CQ": [
                            "How does the ontology represent the distinction between FourSeasons and Veneziana pizzas?",
                            "Is any pizza instance allowed to belong to both FourSeasons and Veneziana categories?",
                            "Which other pizza types are formally declared as disjoint with FourSeasons?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons disjointWith AmericanHot",
                        "CQ": [
                            "How does the ontology represent the separation between FourSeasons and AmericanHot pizzas?",
                            "Is any pizza instance allowed to belong to both the FourSeasons and AmericanHot categories?",
                            "What pizza types are declared as mutually exclusive with FourSeasons?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons disjointWith UnclosedPizza",
                        "CQ": [
                            "How does the ontology differentiate between FourSeasons and UnclosedPizza?",
                            "Is there any instance that can be classified as both FourSeasons and UnclosedPizza?",
                            "Which classes are specified as disjoint with FourSeasons?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons disjointWith PrinceCarlo",
                        "CQ": [
                            "What is the logical separation between FourSeasons and PrinceCarlo pizza classes?",
                            "Is any pizza instance permitted to be classified as both FourSeasons and PrinceCarlo?",
                            "Which pizza types are specified as being disjoint with FourSeasons?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons disjointWith Capricciosa",
                        "CQ": [
                            "What formal separation is asserted between FourSeasons and Capricciosa in the ontology?",
                            "Is it permitted for an instance to be classified as both FourSeasons and Capricciosa?",
                            "Which pizza classes are formally designated as mutually exclusive with Capricciosa?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons disjointWith FruttiDiMare",
                        "CQ": [
                            "What formal separation exists between FourSeasons and FruttiDiMare in the ontology?",
                            "Is any pizza explicitly characterized as belonging to both FourSeasons and FruttiDiMare categories?",
                            "Which pizza types are specified to be mutually exclusive with FruttiDiMare?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons disjointWith Siciliana",
                        "CQ": [
                            "How does the ontology specify the connection between FourSeasons and Siciliana pizzas?",
                            "Is there any scenario in which a pizza instance can belong to both FourSeasons and Siciliana classes simultaneously?",
                            "Which pizza types are represented as mutually exclusive with Siciliana in the ontology?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons disjointWith Cajun",
                        "CQ": [
                            "How does the ontology specify the separation between FourSeasons and Cajun pizzas?",
                            "Is there any scenario in which a pizza can simultaneously be classified as FourSeasons and Cajun?",
                            "Which classes are stated as mutually exclusive with Cajun pizza?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons disjointWith Margherita",
                        "CQ": [
                            "What ontological separation is defined between FourSeasons and Margherita pizzas?",
                            "Is there any instance that can belong to both FourSeasons and Margherita categories?",
                            "Which pizza types are stated as disjoint with Margherita in this ontology?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons disjointWith American",
                        "CQ": [
                            "What type of mutual exclusivity is defined between FourSeasons and American in the ontology?",
                            "Is it permitted for a pizza to be classified as both FourSeasons and American?",
                            "Which additional pizza types are formally specified as disjoint with American?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons disjointWith SloppyGiuseppe",
                        "CQ": [
                            "How are FourSeasons and SloppyGiuseppe pizzas characterized with respect to each other in the ontology?",
                            "Is there any pizza that can be both FourSeasons and SloppyGiuseppe simultaneously?",
                            "Which pizza classes, aside from SloppyGiuseppe, are marked as disjoint with FourSeasons?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons disjointWith Caprina",
                        "CQ": [
                            "What logical separation is defined between FourSeasons and Caprina pizzas in the ontology?",
                            "Can a pizza instance be classified as both FourSeasons and Caprina?",
                            "Which classes are formally stated as disjoint with FourSeasons pizza?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons disjointWith Soho",
                        "CQ": [
                            "How does the ontology distinguish between FourSeasons and Soho pizza types?",
                            "Is it allowed for a pizza to be classified simultaneously as FourSeasons and Soho?",
                            "Which categories are specified as being incompatible with Soho in the ontology?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons disjointWith Parmense",
                        "CQ": [
                            "What formal distinction is established between FourSeasons and Parmense in the ontology?",
                            "Is any individual pizza allowed to be both FourSeasons and Parmense at once?",
                            "Which other pizza classes are specified as disjoint with FourSeasons?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons disjointWith PolloAdAstra",
                        "CQ": [
                            "What logical separation is defined between FourSeasons and PolloAdAstra in the ontology?",
                            "Is any pizza instance permitted to belong to both FourSeasons and PolloAdAstra categories?",
                            "Which classes are explicitly asserted as disjoint with PolloAdAstra?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons disjointWith Fiorentina",
                        "CQ": [
                            "How does the ontology specify the connection or separation between FourSeasons and Fiorentina?",
                            "Is any pizza instance allowed to be both FourSeasons and Fiorentina?",
                            "Which classes are formally declared as disjoint with FourSeasons?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons disjointWith Rosa",
                        "CQ": [
                            "How does the ontology represent the incompatibility between FourSeasons and Rosa?",
                            "Is any individual allowed to belong to both the FourSeasons and Rosa classes?",
                            "Which classes are specified as mutually exclusive with FourSeasons?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons disjointWith QuattroFormaggi",
                        "CQ": [
                            "How is the distinction between FourSeasons and QuattroFormaggi classes represented in the ontology?",
                            "Is there any overlap between pizzas classified as FourSeasons and those classified as QuattroFormaggi?",
                            "Which pizza types are defined as mutually exclusive with QuattroFormaggi?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons disjointWith Giardiniera",
                        "CQ": [
                            "How is the conceptual separation between FourSeasons and Giardiniera represented in the ontology?",
                            "Can a single pizza instance belong to both FourSeasons and Giardiniera classes?",
                            "Which pizza varieties are formally specified as disjoint with Giardiniera?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons propertyRestrictions [hasTopping some MushroomTopping]",
                        "CQ": [
                            "Is it required for a FourSeasons pizza to have at least one topping that is a MushroomTopping?",
                            "Can a pizza be classified as FourSeasons if it does not include any MushroomTopping among its toppings?",
                            "Does every FourSeasons pizza necessarily contain some MushroomTopping as part of its toppings?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons propertyRestrictions [hasTopping some TomatoTopping]",
                        "CQ": [
                            "Is it required for a FourSeasons pizza to have at least one topping of type TomatoTopping?",
                            "Can a FourSeasons pizza exist without containing any TomatoTopping as one of its toppings?",
                            "Does every instance of FourSeasons necessarily possess the hasTopping property with a value of TomatoTopping?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons propertyRestrictions [hasTopping some PeperoniSausageTopping]",
                        "CQ": [
                            "Is it required for a FourSeasons pizza to have at least one topping that is PeperoniSausage?",
                            "Does every FourSeasons pizza necessarily include some PeperoniSausageTopping as a topping?",
                            "Can a pizza qualify as FourSeasons if it does not contain any PeperoniSausageTopping?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons propertyRestrictions [hasTopping some OliveTopping]",
                        "CQ": [
                            "Is it mandatory for a FourSeasons pizza to have at least one Olive topping?",
                            "Can a FourSeasons pizza be considered valid if it does not include any Olive topping?",
                            "Does every instance of FourSeasons require the presence of the hasTopping property linking to an OliveTopping?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons propertyRestrictions [hasTopping some MozzarellaTopping]",
                        "CQ": [
                            "Is it mandatory for FourSeasons to have at least one MozzarellaTopping as a topping?",
                            "Can a FourSeasons exist without having the 'hasTopping' property filled by a MozzarellaTopping?",
                            "Does every instance of FourSeasons require the presence of the 'hasTopping' property with a value of MozzarellaTopping?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons propertyRestrictions [hasTopping only (AnchoviesTopping or MozzarellaTopping or PeperoniSausageTopping or TomatoTopping or CaperTopping or OliveTopping or MushroomTopping)]",
                        "CQ": [
                            "Is every topping on a FourSeasons pizza required to be either Anchovies, Mozzarella, Peperoni Sausage, Tomato, Caper, Olive, or Mushroom?",
                            "Can a FourSeasons pizza include any toppings outside the set of Anchovies, Mozzarella, Peperoni Sausage, Tomato, Caper, Olive, and Mushroom?",
                            "Is the list of toppings permitted on a FourSeasons pizza limited exclusively to Anchovies, Mozzarella, Peperoni Sausage, Tomato, Caper, Olive, and Mushroom?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons propertyRestrictions [hasTopping some AnchoviesTopping]",
                        "CQ": [
                            "Is it required for a FourSeasons pizza to include AnchoviesTopping as one of its toppings?",
                            "Can a pizza be classified as FourSeasons if it does not have any AnchoviesTopping?",
                            "Does every instance of FourSeasons necessarily have at least one topping that is AnchoviesTopping?"
                        ]
                    },
                    {
                        "axiom": "FourSeasons propertyRestrictions [hasTopping some CaperTopping]",
                        "CQ": [
                            "Is every FourSeasons pizza required to have at least one topping of type CaperTopping?",
                            "Can a pizza be classified as FourSeasons if it does not include any CaperTopping as a topping?",
                            "Must the existence of CaperTopping as a topping be guaranteed for all instances of FourSeasons pizza?"
                        ]
                    }
                ]
            },
            "FruttiDiMare": {
                "axiom": {
                    "subClassOf": [
                        "NamedPizza"
                    ],
                    "disjointWith": [
                        "Mushroom",
                        "LaReine",
                        "Napoletana",
                        "Veneziana",
                        "AmericanHot",
                        "UnclosedPizza",
                        "PrinceCarlo",
                        "Capricciosa",
                        "Siciliana",
                        "Cajun",
                        "Margherita",
                        "American",
                        "SloppyGiuseppe",
                        "Caprina",
                        "Soho",
                        "Parmense",
                        "PolloAdAstra",
                        "Fiorentina",
                        "Rosa",
                        "QuattroFormaggi",
                        "Giardiniera",
                        "FourSeasons"
                    ],
                    "propertyRestrictions": [
                        "[hasTopping only (GarlicTopping or TomatoTopping or MixedSeafoodTopping)]",
                        "[hasTopping some TomatoTopping]",
                        "[hasTopping some GarlicTopping]",
                        "[hasTopping some MixedSeafoodTopping]"
                    ]
                },
                "description": "FruttiDiMare is defined as a subclass of NamedPizza and is explicitly disjoint with a variety of other specific pizza types, ensuring that no individual can simultaneously belong to FruttiDiMare and any of the listed pizza classes. Members of this class are strictly characterized by their toppings: they can have only garlic, tomato, or mixed seafood toppings—with each FruttiDiMare pizza required to feature at least one of each (tomato, garlic, and mixed seafood toppings). This formalization specifies that FruttiDiMare pizzas are exclusively seafood-themed, with a distinct combination of these three toppings.",
                "CQ": [
                    {
                        "axiom": "FruttiDiMare subClassOf NamedPizza",
                        "CQ": [
                            "Is FruttiDiMare classified under the category of NamedPizza?",
                            "Which pizza types are subclasses of NamedPizza, such as FruttiDiMare?",
                            "What broader pizza classifications encompass FruttiDiMare?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare disjointWith Mushroom",
                        "CQ": [
                            "How does the ontology formally differentiate between FruttiDiMare and Mushroom?",
                            "Is any entity permitted to be classified as both FruttiDiMare and Mushroom concurrently?",
                            "Which classes are identified as being mutually exclusive with FruttiDiMare?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare disjointWith LaReine",
                        "CQ": [
                            "What logical separation is established between FruttiDiMare and LaReine in the ontology?",
                            "Is there an instance that can be identified as both FruttiDiMare and LaReine?",
                            "Which pizza classes are formally specified as being disjoint with FruttiDiMare?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare disjointWith Napoletana",
                        "CQ": [
                            "What formal ontological distinction is specified between FruttiDiMare and Napoletana?",
                            "Is it consistent for a pizza to be classified as both FruttiDiMare and Napoletana according to the model?",
                            "Which classes are identified as mutually exclusive with Napoletana in the ontology?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare disjointWith Veneziana",
                        "CQ": [
                            "How does the ontology formally differentiate FruttiDiMare from Veneziana?",
                            "Is there any scenario where a pizza can be both categorized as FruttiDiMare and Veneziana?",
                            "Which classes are specified as mutually exclusive with FruttiDiMare in the ontology?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare disjointWith AmericanHot",
                        "CQ": [
                            "How are FruttiDiMare and AmericanHot represented in terms of class separation within the ontology?",
                            "Is there any possibility for an instance to be classified under both FruttiDiMare and AmericanHot?",
                            "Which other pizza types are defined as disjoint from AmericanHot?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare disjointWith UnclosedPizza",
                        "CQ": [
                            "How does the ontology distinguish between FruttiDiMare and UnclosedPizza?",
                            "Is it permitted for a pizza instance to be classified as both FruttiDiMare and UnclosedPizza?",
                            "Which classes are specified as disjoint with FruttiDiMare within the ontology?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare disjointWith PrinceCarlo",
                        "CQ": [
                            "What is the formal distinction between FruttiDiMare and PrinceCarlo within the ontology?",
                            "Can any pizza be classified simultaneously as FruttiDiMare and PrinceCarlo?",
                            "Which classes are specified as disjoint with PrinceCarlo?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare disjointWith Capricciosa",
                        "CQ": [
                            "How are FruttiDiMare and Capricciosa represented in terms of mutual exclusivity within the ontology?",
                            "Is an instance allowed to belong to both the FruttiDiMare and Capricciosa classes simultaneously?",
                            "What other pizza types, besides Capricciosa, are formally defined as disjoint with FruttiDiMare?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare disjointWith Siciliana",
                        "CQ": [
                            "What ontological separation exists between FruttiDiMare and Siciliana?",
                            "Is there any instance that can be classified as both FruttiDiMare and Siciliana?",
                            "Which pizza types are formally specified as mutually exclusive with Siciliana?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare disjointWith Cajun",
                        "CQ": [
                            "What logical separation is defined between FruttiDiMare and Cajun?",
                            "Is there any instance that can be classified simultaneously as FruttiDiMare and Cajun?",
                            "Which classes are asserted to be disjoint from Cajun?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare disjointWith Margherita",
                        "CQ": [
                            "What formal separation exists between FruttiDiMare and Margherita in the ontology?",
                            "Is there any pizza that could be classified as both FruttiDiMare and Margherita?",
                            "Which classes are specified as disjoint with Margherita?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare disjointWith American",
                        "CQ": [
                            "How does the ontology define the separation between FruttiDiMare and American pizzas?",
                            "Is any pizza instance allowed to belong to both FruttiDiMare and American categories?",
                            "Which classes in the ontology are specified as disjoint with American?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare disjointWith SloppyGiuseppe",
                        "CQ": [
                            "How are FruttiDiMare and SloppyGiuseppe represented in terms of exclusivity within the ontology?",
                            "Is there any circumstance where a pizza could be classified as both FruttiDiMare and SloppyGiuseppe?",
                            "Which classes are specified as mutually exclusive with FruttiDiMare in the ontology?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare disjointWith Caprina",
                        "CQ": [
                            "What logical difference is asserted between FruttiDiMare and Caprina in the ontology?",
                            "Can any pizza instance belong simultaneously to the classes FruttiDiMare and Caprina?",
                            "Which classes are explicitly defined as disjoint with Caprina?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare disjointWith Soho",
                        "CQ": [
                            "What is the logical separation between FruttiDiMare and Soho within the ontology?",
                            "Is there any scenario where an individual can be classified as both FruttiDiMare and Soho?",
                            "Which classes are defined as mutually exclusive with FruttiDiMare?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare disjointWith Parmense",
                        "CQ": [
                            "How are FruttiDiMare and Parmense pizzas differentiated within the ontology?",
                            "Is any pizza instance allowed to be simultaneously classified as FruttiDiMare and Parmense?",
                            "What classes are specified as disjoint with Parmense in the ontology?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare disjointWith PolloAdAstra",
                        "CQ": [
                            "What ontological separation exists between FruttiDiMare and PolloAdAstra?",
                            "Is any individual allowed to be classified as both FruttiDiMare and PolloAdAstra?",
                            "Which classes within the ontology are explicitly incompatible with PolloAdAstra?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare disjointWith Fiorentina",
                        "CQ": [
                            "What type of ontological separation exists between FruttiDiMare and Fiorentina?",
                            "Can an individual pizza be classified as both FruttiDiMare and Fiorentina under any circumstances?",
                            "Which classes are formally specified as disjoint with Fiorentina in the ontology?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare disjointWith Rosa",
                        "CQ": [
                            "How does the ontology formally separate FruttiDiMare and Rosa as pizza types?",
                            "Is there an instance that can be classified under both FruttiDiMare and Rosa simultaneously?",
                            "Which classes are identified as mutually exclusive with FruttiDiMare in the ontology?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare disjointWith QuattroFormaggi",
                        "CQ": [
                            "How does the ontology define the connection or distinction between FruttiDiMare and QuattroFormaggi?",
                            "Is there any pizza type that can simultaneously belong to both FruttiDiMare and QuattroFormaggi categories?",
                            "Which classes are stated to be mutually exclusive with FruttiDiMare in the ontology?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare disjointWith Giardiniera",
                        "CQ": [
                            "What is the formal ontological distinction between FruttiDiMare and Giardiniera?",
                            "Is it permissible for a pizza to be classified as both FruttiDiMare and Giardiniera within the ontology?",
                            "Which pizza types are stated as mutually exclusive with Giardiniera?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare disjointWith FourSeasons",
                        "CQ": [
                            "How does the ontology differentiate between FruttiDiMare and FourSeasons pizzas?",
                            "Is any pizza instance permitted to belong to both FruttiDiMare and FourSeasons categories simultaneously?",
                            "Which classes are declared as mutually exclusive with FruttiDiMare in the ontology?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare propertyRestrictions [hasTopping only (GarlicTopping or TomatoTopping or MixedSeafoodTopping)]",
                        "CQ": [
                            "Must all toppings on a FruttiDiMare pizza be limited to Garlic, Tomato, or Mixed Seafood?",
                            "Is it permitted for a FruttiDiMare to have a topping other than Garlic, Tomato, or Mixed Seafood?",
                            "Does the definition of FruttiDiMare prevent any toppings besides Garlic, Tomato, or Mixed Seafood from being included?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare propertyRestrictions [hasTopping some TomatoTopping]",
                        "CQ": [
                            "Must every FruttiDiMare pizza have at least one topping that is TomatoTopping?",
                            "Is it a requirement for FruttiDiMare to include the property hasTopping with a value of TomatoTopping?",
                            "Can a pizza qualify as FruttiDiMare if none of its toppings are TomatoTopping?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare propertyRestrictions [hasTopping some GarlicTopping]",
                        "CQ": [
                            "Must every FruttiDiMare have at least one topping that is GarlicTopping?",
                            "Is it required for FruttiDiMare to include GarlicTopping among its toppings?",
                            "Does a FruttiDiMare necessarily possess a hasTopping relation to some GarlicTopping?"
                        ]
                    },
                    {
                        "axiom": "FruttiDiMare propertyRestrictions [hasTopping some MixedSeafoodTopping]",
                        "CQ": [
                            "Is it mandatory for FruttiDiMare pizzas to have at least one topping that is a MixedSeafoodTopping?",
                            "Does a pizza qualify as FruttiDiMare only if it includes some MixedSeafoodTopping as a topping?",
                            "Can a FruttiDiMare pizza exist without having any MixedSeafoodTopping as a topping?"
                        ]
                    }
                ]
            },
            "Giardiniera": {
                "axiom": {
                    "subClassOf": [
                        "NamedPizza"
                    ],
                    "disjointWith": [
                        "Mushroom",
                        "LaReine",
                        "Napoletana",
                        "Veneziana",
                        "AmericanHot",
                        "UnclosedPizza",
                        "PrinceCarlo",
                        "Capricciosa",
                        "FruttiDiMare",
                        "Siciliana",
                        "Cajun",
                        "Margherita",
                        "American",
                        "SloppyGiuseppe",
                        "Caprina",
                        "Soho",
                        "Parmense",
                        "PolloAdAstra",
                        "Fiorentina",
                        "Rosa",
                        "QuattroFormaggi",
                        "FourSeasons"
                    ],
                    "propertyRestrictions": [
                        "[hasTopping some MushroomTopping]",
                        "[hasTopping some TomatoTopping]",
                        "[hasTopping only (LeekTopping or MozzarellaTopping or TomatoTopping or PetitPoisTopping or PeperonataTopping or OliveTopping or MushroomTopping or SlicedTomatoTopping)]",
                        "[hasTopping some OliveTopping]",
                        "[hasTopping some MozzarellaTopping]",
                        "[hasTopping some SlicedTomatoTopping]",
                        "[hasTopping some PeperonataTopping]",
                        "[hasTopping some PetitPoisTopping]",
                        "[hasTopping some LeekTopping]"
                    ]
                },
                "description": "Giardiniera is defined as a subclass of NamedPizza, and is explicitly disjoint from several other pizza classes such as Mushroom, LaReine, Napoletana, and others—ensuring that no pizza can simultaneously be classified as Giardiniera and any of these classes. Members of Giardiniera are characterized by a combination of specific toppings: they must contain at least some MushroomTopping, TomatoTopping, OliveTopping, MozzarellaTopping, SlicedTomatoTopping, PeperonataTopping, PetitPoisTopping, and LeekTopping. Furthermore, Giardiniera pizzas are strictly limited to having toppings only from the set: LeekTopping, MozzarellaTopping, TomatoTopping, PetitPoisTopping, PeperonataTopping, OliveTopping, MushroomTopping, and SlicedTomatoTopping. This formalization ensures that any pizza classified as Giardiniera has an exclusive and characteristic combination of the specified toppings and no others.",
                "CQ": [
                    {
                        "axiom": "Giardiniera subClassOf NamedPizza",
                        "CQ": [
                            "Is Giardiniera categorized as a specific kind under NamedPizza?",
                            "What pizza varieties are considered subclasses of NamedPizza such as Giardiniera?",
                            "Which more general categories include Giardiniera within their classification?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera disjointWith Mushroom",
                        "CQ": [
                            "What formal separation exists between Giardiniera and Mushroom in the ontology?",
                            "Is there any instance that can simultaneously belong to both Giardiniera and Mushroom classes?",
                            "Which classes are specified as mutually exclusive with Mushroom?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera disjointWith LaReine",
                        "CQ": [
                            "How does the ontology represent the distinction between Giardiniera and LaReine?",
                            "Is any pizza classified as both Giardiniera and LaReine?",
                            "Which pizza types are marked as disjoint with Giardiniera?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera disjointWith Napoletana",
                        "CQ": [
                            "How does the ontology define the separation between Giardiniera and Napoletana?",
                            "Is it allowed for a pizza to be classified as both Giardiniera and Napoletana?",
                            "What other classes are assigned as disjoint with Napoletana in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera disjointWith Veneziana",
                        "CQ": [
                            "How are Giardiniera and Veneziana classified with respect to each other in the ontology?",
                            "Is it allowed for a pizza to be both Giardiniera and Veneziana?",
                            "Which pizza types are explicitly stated as incompatible with Veneziana?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera disjointWith AmericanHot",
                        "CQ": [
                            "How are Giardiniera and AmericanHot represented in terms of mutual exclusivity within the ontology?",
                            "Can a pizza instance be classified as both Giardiniera and AmericanHot?",
                            "Which pizza types are declared as disjoint with Giardiniera?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera disjointWith UnclosedPizza",
                        "CQ": [
                            "How does the ontology represent the distinction between Giardiniera and UnclosedPizza?",
                            "Is there any instance that can be classified as both Giardiniera and UnclosedPizza?",
                            "Which classes are formally specified as disjoint with Giardiniera?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera disjointWith PrinceCarlo",
                        "CQ": [
                            "What is the ontological separation between Giardiniera and PrinceCarlo?",
                            "Can an individual instance simultaneously be classified as both Giardiniera and PrinceCarlo?",
                            "Which classes are formally specified as disjoint with PrinceCarlo in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera disjointWith Capricciosa",
                        "CQ": [
                            "What is the ontological relationship between Giardiniera and Capricciosa?",
                            "Could an individual pizza instance be classified as both Giardiniera and Capricciosa?",
                            "Which pizza types are formally defined as disjoint with Capricciosa in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera disjointWith FruttiDiMare",
                        "CQ": [
                            "What logical separation is defined between Giardiniera and FruttiDiMare?",
                            "Is any pizza instance allowed to be classified as both Giardiniera and FruttiDiMare?",
                            "Which classes are stated to be disjoint with FruttiDiMare in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera disjointWith Siciliana",
                        "CQ": [
                            "What is the nature of the disjointness between Giardiniera and Siciliana?",
                            "Is there any individual that can simultaneously be classified as both Giardiniera and Siciliana?",
                            "Which classes are defined as mutually exclusive with Siciliana in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera disjointWith Cajun",
                        "CQ": [
                            "How does the ontology represent the exclusiveness between Giardiniera and Cajun?",
                            "Is there any instance that can simultaneously belong to both Giardiniera and Cajun categories?",
                            "Which classes are formally specified as disjoint with Cajun?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera disjointWith Margherita",
                        "CQ": [
                            "What is the formal distinction between Giardiniera and Margherita within the ontology?",
                            "Could any individual instance be classified as both Giardiniera and Margherita simultaneously?",
                            "Which classes are specified as disjoint with Margherita according to the ontology?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera disjointWith American",
                        "CQ": [
                            "How does the ontology formally distinguish between Giardiniera and American pizzas?",
                            "Is any pizza instance allowed to belong to both Giardiniera and American categories?",
                            "Which classes are identified as disjoint with Giardiniera in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera disjointWith SloppyGiuseppe",
                        "CQ": [
                            "How does the ontology formally distinguish between Giardiniera and SloppyGiuseppe?",
                            "Is it allowable for a pizza to be classified as both Giardiniera and SloppyGiuseppe?",
                            "Which pizza types are defined as mutually exclusive with Giardiniera?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera disjointWith Caprina",
                        "CQ": [
                            "How does the ontology distinguish between Giardiniera and Caprina?",
                            "Is there any circumstance under which a pizza could be classified as both Giardiniera and Caprina?",
                            "Which classes are specified as disjoint with Caprina within the ontology?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera disjointWith Soho",
                        "CQ": [
                            "How is Giardiniera classically separated from Soho within the ontology?",
                            "Is there any instance that belongs to both Giardiniera and Soho categories?",
                            "Which classes are specified as mutually exclusive with Soho?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera disjointWith Parmense",
                        "CQ": [
                            "How does the ontology represent the connection between Giardiniera and Parmense?",
                            "Is there any scenario where a pizza can be classified as both Giardiniera and Parmense?",
                            "Which pizza types are specifically defined as disjoint with Parmense?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera disjointWith PolloAdAstra",
                        "CQ": [
                            "What is the logical relationship specified between Giardiniera and PolloAdAstra in the ontology?",
                            "Is it allowed for a pizza to belong to both the Giardiniera and PolloAdAstra categories?",
                            "Which classes are declared as disjoint with PolloAdAstra?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera disjointWith Fiorentina",
                        "CQ": [
                            "How does the ontology differentiate between Giardiniera and Fiorentina?",
                            "Is there any instance that can be classified as both Giardiniera and Fiorentina?",
                            "Which pizza types are declared as mutually exclusive with Fiorentina?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera disjointWith Rosa",
                        "CQ": [
                            "What logical separation is specified between Giardiniera and Rosa within the ontology?",
                            "Is there any instance that could belong to both Giardiniera and Rosa simultaneously?",
                            "Which classes are explicitly stated as disjoint with Giardiniera?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera disjointWith QuattroFormaggi",
                        "CQ": [
                            "What is the ontological separation defined between Giardiniera and QuattroFormaggi?",
                            "Is there any individual that can simultaneously belong to both Giardiniera and QuattroFormaggi classes?",
                            "Which classes are specified as being incompatible with Giardiniera in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera disjointWith FourSeasons",
                        "CQ": [
                            "What is the ontological separation between Giardiniera and FourSeasons pizza varieties?",
                            "Can a pizza instance be classified as both Giardiniera and FourSeasons?",
                            "Which classes are defined as disjoint with Giardiniera apart from FourSeasons?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera propertyRestrictions [hasTopping some MushroomTopping]",
                        "CQ": [
                            "Is every Giardiniera required to have at least one topping that is a MushroomTopping?",
                            "Does the presence of MushroomTopping on a pizza qualify it as a Giardiniera according to the topping restriction?",
                            "Can a Giardiniera exist without any MushroomTopping?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera propertyRestrictions [hasTopping some TomatoTopping]",
                        "CQ": [
                            "Is it required for a Giardiniera to have at least one topping that is a TomatoTopping?",
                            "Can an instance of Giardiniera exist without possessing the hasTopping relation to a TomatoTopping?",
                            "Does every Giardiniera necessarily include TomatoTopping among its toppings?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera propertyRestrictions [hasTopping only (LeekTopping or MozzarellaTopping or TomatoTopping or PetitPoisTopping or PeperonataTopping or OliveTopping or MushroomTopping or SlicedTomatoTopping)]",
                        "CQ": [
                            "Are Giardiniera pizzas permitted to have any toppings besides Leek, Mozzarella, Tomato, Petit Pois, Peperonata, Olive, Mushroom, or Sliced Tomato?",
                            "Must every topping present on a Giardiniera pizza be included among Leek, Mozzarella, Tomato, Petit Pois, Peperonata, Olive, Mushroom, or Sliced Tomato?",
                            "If a Giardiniera pizza contains a topping not listed among these eight, does it still satisfy the definition of Giardiniera?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera propertyRestrictions [hasTopping some OliveTopping]",
                        "CQ": [
                            "Must a Giardiniera have at least one topping that is an OliveTopping?",
                            "Is it possible for a Giardiniera to be classified as such without having any OliveTopping?",
                            "Does the presence of OliveTopping qualify a pizza as Giardiniera, regardless of its other toppings?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera propertyRestrictions [hasTopping some MozzarellaTopping]",
                        "CQ": [
                            "Is it required that a Giardiniera pizza has at least one topping of Mozzarella?",
                            "Can a Giardiniera exist without any MozzarellaTopping present?",
                            "Must a Giardiniera pizza always include MozzarellaTopping as one of its toppings?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera propertyRestrictions [hasTopping some SlicedTomatoTopping]",
                        "CQ": [
                            "Is it required that a Giardiniera pizza includes at least one Sliced Tomato topping?",
                            "Can a pizza be classified as Giardiniera if it does not have any Sliced Tomato topping?",
                            "Does the presence of a Sliced Tomato topping suffice for a pizza to fulfill the Giardiniera topping requirement?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera propertyRestrictions [hasTopping some PeperonataTopping]",
                        "CQ": [
                            "Is it required for a Giardiniera to have at least one topping that is of type PeperonataTopping?",
                            "Does Giardiniera necessarily include the property 'hasTopping' with PeperonataTopping in its definition?",
                            "Can an individual classified as Giardiniera exist without the 'hasTopping' relation to PeperonataTopping?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera propertyRestrictions [hasTopping some PetitPoisTopping]",
                        "CQ": [
                            "Is it necessary for a Giardiniera to have at least one topping of Petit Pois?",
                            "Does every instance of Giardiniera include the 'hasTopping' relationship with Petit Pois Topping?",
                            "Can a Giardiniera pizza exist without any Petit Pois Topping as one of its toppings?"
                        ]
                    },
                    {
                        "axiom": "Giardiniera propertyRestrictions [hasTopping some LeekTopping]",
                        "CQ": [
                            "Is it necessary for Giardiniera to have at least one topping that is a LeekTopping?",
                            "Can a pizza be classified as Giardiniera if it lacks LeekTopping as one of its toppings?",
                            "Does the existence of LeekTopping as a topping play a required role in identifying a pizza as Giardiniera?"
                        ]
                    }
                ]
            },
            "LaReine": {
                "axiom": {
                    "subClassOf": [
                        "NamedPizza"
                    ],
                    "disjointWith": [
                        "Mushroom",
                        "Napoletana",
                        "Veneziana",
                        "AmericanHot",
                        "UnclosedPizza",
                        "PrinceCarlo",
                        "Capricciosa",
                        "FruttiDiMare",
                        "Siciliana",
                        "Cajun",
                        "Margherita",
                        "American",
                        "SloppyGiuseppe",
                        "Caprina",
                        "Soho",
                        "Parmense",
                        "PolloAdAstra",
                        "Fiorentina",
                        "Rosa",
                        "QuattroFormaggi",
                        "Giardiniera",
                        "FourSeasons"
                    ],
                    "propertyRestrictions": [
                        "[hasTopping some MushroomTopping]",
                        "[hasTopping some TomatoTopping]",
                        "[hasTopping some HamTopping]",
                        "[hasTopping some OliveTopping]",
                        "[hasTopping some MozzarellaTopping]",
                        "[hasTopping only (MozzarellaTopping or TomatoTopping or HamTopping or OliveTopping or MushroomTopping)]"
                    ]
                },
                "description": "LaReine is defined as a subclass of NamedPizza and is declared disjoint with a number of other specific pizza classes, including Mushroom, Napoletana, Veneziana, and others—ensuring no individual pizza can be classified as both a LaReine and any of these listed classes. \n\nLaReine pizzas are characterized by several property restrictions: every LaReine pizza must have at least one topping of each of the following types—MushroomTopping, TomatoTopping, HamTopping, OliveTopping, and MozzarellaTopping. Additionally, the only permitted toppings for LaReine pizzas are MozzarellaTopping, TomatoTopping, HamTopping, OliveTopping, or MushroomTopping; no other toppings are allowed. This ensures that the LaReine pizza is strictly defined by this specific set of ingredients.",
                "CQ": [
                    {
                        "axiom": "LaReine subClassOf NamedPizza",
                        "CQ": [
                            "Is LaReine classified as a variant under NamedPizza?",
                            "Which pizza varieties are categorized as subtypes of NamedPizza, including LaReine?",
                            "What broader types does LaReine fall under within the ontology hierarchy?"
                        ]
                    },
                    {
                        "axiom": "LaReine disjointWith Mushroom",
                        "CQ": [
                            "How is the disjointness between LaReine and Mushroom represented within the ontology?",
                            "Can an individual instance simultaneously belong to both LaReine and Mushroom classes?",
                            "Which classes are explicitly specified as disjoint with Mushroom in the ontology?"
                        ]
                    },
                    {
                        "axiom": "LaReine disjointWith Napoletana",
                        "CQ": [
                            "How does the ontology specify the connection or separation between LaReine and Napoletana?",
                            "Is there any entity that can simultaneously be classified as LaReine and Napoletana?",
                            "What classes are identified as mutually exclusive with Napoletana?"
                        ]
                    },
                    {
                        "axiom": "LaReine disjointWith Veneziana",
                        "CQ": [
                            "How are LaReine and Veneziana defined in terms of class disjointness within the ontology?",
                            "Is it allowed for a pizza to be classified simultaneously as LaReine and Veneziana?",
                            "Which classes are asserted to be mutually exclusive with LaReine in the ontology?"
                        ]
                    },
                    {
                        "axiom": "LaReine disjointWith AmericanHot",
                        "CQ": [
                            "How does the ontology differentiate between LaReine and AmericanHot pizzas?",
                            "Is there any pizza that can belong to both LaReine and AmericanHot classes simultaneously?",
                            "What other pizza types are formally specified as mutually exclusive with LaReine?"
                        ]
                    },
                    {
                        "axiom": "LaReine disjointWith UnclosedPizza",
                        "CQ": [
                            "What is the logical separation defined between LaReine and UnclosedPizza?",
                            "Is there any instance that can belong to both LaReine and UnclosedPizza classes?",
                            "Which classes in the ontology are specified as disjoint with UnclosedPizza?"
                        ]
                    },
                    {
                        "axiom": "LaReine disjointWith PrinceCarlo",
                        "CQ": [
                            "How is the mutual exclusivity between LaReine and PrinceCarlo represented in the ontology?",
                            "Is there any instance that can simultaneously belong to both LaReine and PrinceCarlo classes?",
                            "Which classes are formally specified as disjoint with LaReine?"
                        ]
                    },
                    {
                        "axiom": "LaReine disjointWith Capricciosa",
                        "CQ": [
                            "What ontological separation is established between LaReine and Capricciosa?",
                            "Can a pizza instance belong to both LaReine and Capricciosa classes?",
                            "Which pizza classes are formally defined as disjoint with Capricciosa?"
                        ]
                    },
                    {
                        "axiom": "LaReine disjointWith FruttiDiMare",
                        "CQ": [
                            "What kind of formal differentiation is specified between LaReine and FruttiDiMare?",
                            "Can any individual pizza be classified as both LaReine and FruttiDiMare within the ontology?",
                            "Which pizza types are explicitly set as incompatible with FruttiDiMare?"
                        ]
                    },
                    {
                        "axiom": "LaReine disjointWith Siciliana",
                        "CQ": [
                            "What is the formal distinction between LaReine and Siciliana within the ontology?",
                            "Is it allowed for a pizza to be classified as both LaReine and Siciliana simultaneously?",
                            "Which classes are specified as disjoint with Siciliana?"
                        ]
                    },
                    {
                        "axiom": "LaReine disjointWith Cajun",
                        "CQ": [
                            "What kind of exclusivity exists between LaReine and Cajun in the ontology?",
                            "Is it allowed for a pizza to be classified as both LaReine and Cajun?",
                            "Which other pizza types are specified as disjoint with Cajun?"
                        ]
                    },
                    {
                        "axiom": "LaReine disjointWith Margherita",
                        "CQ": [
                            "What formal exclusion exists between LaReine and Margherita pizza classes in the ontology?",
                            "Is any pizza instance allowed to belong to both LaReine and Margherita categories simultaneously?",
                            "Which pizza types are formally declared disjoint with Margherita?"
                        ]
                    },
                    {
                        "axiom": "LaReine disjointWith American",
                        "CQ": [
                            "What logical separation is defined between LaReine and American within the ontology?",
                            "Is there any instance that can belong to both LaReine and American categories simultaneously?",
                            "Which other classes are explicitly incompatible with American in the ontology?"
                        ]
                    },
                    {
                        "axiom": "LaReine disjointWith SloppyGiuseppe",
                        "CQ": [
                            "What distinguishes LaReine from SloppyGiuseppe in the ontology?",
                            "Is there any instance that can be classified as both LaReine and SloppyGiuseppe?",
                            "Which classes are stated to be mutually exclusive with SloppyGiuseppe?"
                        ]
                    },
                    {
                        "axiom": "LaReine disjointWith Caprina",
                        "CQ": [
                            "What logical separation is defined between LaReine and Caprina in the ontology?",
                            "Is there any entity that can belong to both LaReine and Caprina classes simultaneously?",
                            "Which classes are specified as mutually exclusive with Caprina?"
                        ]
                    },
                    {
                        "axiom": "LaReine disjointWith Soho",
                        "CQ": [
                            "Are LaReine and Soho modeled as mutually exclusive pizza types in the ontology?",
                            "Is it ever allowed for a single pizza to be classified as both LaReine and Soho?",
                            "Which pizza varieties are specified as disjoint with Soho in the ontology?"
                        ]
                    },
                    {
                        "axiom": "LaReine disjointWith Parmense",
                        "CQ": [
                            "How are LaReine and Parmense pizzas differentiated with respect to class membership in the ontology?",
                            "Is it allowed for a pizza to be classified as both LaReine and Parmense?",
                            "What other pizza types are explicitly modeled as being disjoint with Parmense?"
                        ]
                    },
                    {
                        "axiom": "LaReine disjointWith PolloAdAstra",
                        "CQ": [
                            "What is the ontological relationship specified between LaReine and PolloAdAstra?",
                            "Is any pizza instance allowed to be categorized as both LaReine and PolloAdAstra?",
                            "Which pizza classes are explicitly stated as disjoint with PolloAdAstra?"
                        ]
                    },
                    {
                        "axiom": "LaReine disjointWith Fiorentina",
                        "CQ": [
                            "What ontological separation is specified between LaReine and Fiorentina?",
                            "Can any individual instance simultaneously belong to both LaReine and Fiorentina classes?",
                            "Which classes are explicitly modeled as mutually exclusive with Fiorentina?"
                        ]
                    },
                    {
                        "axiom": "LaReine disjointWith Rosa",
                        "CQ": [
                            "What is the nature of the disjointness between LaReine and Rosa in the ontology?",
                            "Can an individual simultaneously belong to both LaReine and Rosa classes?",
                            "Which classes are specified as disjoint with LaReine?"
                        ]
                    },
                    {
                        "axiom": "LaReine disjointWith QuattroFormaggi",
                        "CQ": [
                            "What ontological separation exists between LaReine and QuattroFormaggi pizzas?",
                            "Is there any pizza that can simultaneously belong to LaReine and QuattroFormaggi categories?",
                            "Which classes are specified as incompatible with QuattroFormaggi in the ontology?"
                        ]
                    },
                    {
                        "axiom": "LaReine disjointWith Giardiniera",
                        "CQ": [
                            "How are the classes LaReine and Giardiniera distinguished in the ontology?",
                            "Is there any entity that can be classified simultaneously as LaReine and Giardiniera?",
                            "Which classes are specified as mutually exclusive with Giardiniera?"
                        ]
                    },
                    {
                        "axiom": "LaReine disjointWith FourSeasons",
                        "CQ": [
                            "What is the ontological distinction between LaReine and FourSeasons pizza types?",
                            "Can a pizza be classified as both LaReine and FourSeasons simultaneously?",
                            "Which classes are specified as disjoint with FourSeasons?"
                        ]
                    },
                    {
                        "axiom": "LaReine propertyRestrictions [hasTopping some MushroomTopping]",
                        "CQ": [
                            "Must every LaReine pizza have at least one MushroomTopping?",
                            "Can a pizza be classified as LaReine if it lacks MushroomTopping entirely?",
                            "Is it required that LaReine pizza includes MushroomTopping as a topping?"
                        ]
                    },
                    {
                        "axiom": "LaReine propertyRestrictions [hasTopping some TomatoTopping]",
                        "CQ": [
                            "Is it mandatory for every LaReine pizza to include at least one TomatoTopping?",
                            "Can a LaReine pizza exist without having TomatoTopping as one of its toppings?",
                            "Does the presence of TomatoTopping distinguish a LaReine pizza from pizzas without this topping?"
                        ]
                    },
                    {
                        "axiom": "LaReine propertyRestrictions [hasTopping some HamTopping]",
                        "CQ": [
                            "Is it required for a LaReine pizza to always contain at least one HamTopping as a topping?",
                            "Can a pizza be classified as LaReine if it does not have any HamTopping among its toppings?",
                            "Does the definition of LaReine pizza entail the presence of at least one HamTopping as one of its toppings?"
                        ]
                    },
                    {
                        "axiom": "LaReine propertyRestrictions [hasTopping some OliveTopping]",
                        "CQ": [
                            "Is every LaReine pizza required to have at least one OliveTopping as a topping?",
                            "Can a pizza be classified as LaReine if it does not have any OliveTopping?",
                            "Does the presence of OliveTopping on a pizza suffice for it to meet the topping condition for LaReine?"
                        ]
                    },
                    {
                        "axiom": "LaReine propertyRestrictions [hasTopping some MozzarellaTopping]",
                        "CQ": [
                            "Is it required that a LaReine pizza includes at least one Mozzarella topping?",
                            "Can a LaReine be classified as such if it lacks any Mozzarella topping?",
                            "Must every instance of LaReine have the hasTopping property related to some MozzarellaTopping?"
                        ]
                    },
                    {
                        "axiom": "LaReine propertyRestrictions [hasTopping only (MozzarellaTopping or TomatoTopping or HamTopping or OliveTopping or MushroomTopping)]",
                        "CQ": [
                            "Is a LaReine pizza required to have only Mozzarella, Tomato, Ham, Olive, or Mushroom as toppings?",
                            "Does the LaReine pizza class explicitly prohibit any toppings apart from Mozzarella, Tomato, Ham, Olive, or Mushroom?",
                            "If a pizza labeled as LaReine contains a topping other than Mozzarella, Tomato, Ham, Olive, or Mushroom, does it violate the LaReine classification?"
                        ]
                    }
                ]
            },
            "Margherita": {
                "axiom": {
                    "subClassOf": [
                        "NamedPizza"
                    ],
                    "disjointWith": [
                        "Mushroom",
                        "LaReine",
                        "Napoletana",
                        "Veneziana",
                        "AmericanHot",
                        "UnclosedPizza",
                        "PrinceCarlo",
                        "Capricciosa",
                        "FruttiDiMare",
                        "Siciliana",
                        "Cajun",
                        "American",
                        "SloppyGiuseppe",
                        "Caprina",
                        "Soho",
                        "Parmense",
                        "PolloAdAstra",
                        "Fiorentina",
                        "Rosa",
                        "QuattroFormaggi",
                        "Giardiniera",
                        "FourSeasons"
                    ],
                    "propertyRestrictions": [
                        "[hasTopping some TomatoTopping]",
                        "[hasTopping some MozzarellaTopping]",
                        "[hasTopping only (MozzarellaTopping or TomatoTopping)]"
                    ]
                },
                "description": "Margherita is defined as a subclass of NamedPizza and is explicitly disjoint from a range of other specific pizza varieties, ensuring that no individual pizza can simultaneously be classified as both Margherita and any of those listed (such as Mushroom, LaReine, or Napoletana). Margherita pizzas are characterized by a strict topping composition: they must have at least one TomatoTopping and one MozzarellaTopping, and they can only have MozzarellaTopping or TomatoTopping as toppings—no other topping types are permitted. This formalization captures the essential simplicity and distinctiveness of the Margherita pizza.",
                "CQ": [
                    {
                        "axiom": "Margherita subClassOf NamedPizza",
                        "CQ": [
                            "Is Margherita categorized under the broader class of NamedPizza?",
                            "Which pizzas are more specific instances within NamedPizza, including Margherita?",
                            "To which higher-level pizza categories does Margherita belong?"
                        ]
                    },
                    {
                        "axiom": "Margherita disjointWith Mushroom",
                        "CQ": [
                            "How is the mutual exclusivity between Margherita and Mushroom represented in the ontology?",
                            "Is there any entity that can simultaneously belong to both Margherita and Mushroom categories?",
                            "Which classes are identified as disjoint with Mushroom?"
                        ]
                    },
                    {
                        "axiom": "Margherita disjointWith LaReine",
                        "CQ": [
                            "Does the ontology specify any overlap between Margherita and LaReine classes?",
                            "Is it permitted for a pizza to be both Margherita and LaReine according to the ontology?",
                            "Which pizza types are explicitly incompatible with Margherita in this ontology?"
                        ]
                    },
                    {
                        "axiom": "Margherita disjointWith Napoletana",
                        "CQ": [
                            "What logical separation is established between Margherita and Napoletana in the ontology?",
                            "Is there any instance that can be classified as both Margherita and Napoletana?",
                            "Which pizza categories are specified as disjoint with Margherita?"
                        ]
                    },
                    {
                        "axiom": "Margherita disjointWith Veneziana",
                        "CQ": [
                            "What kind of logical boundary is established between Margherita and Veneziana classes in the ontology?",
                            "Is there any instance that can simultaneously belong to both Margherita and Veneziana categories?",
                            "Which other pizza types are explicitly defined as incompatible with Margherita?"
                        ]
                    },
                    {
                        "axiom": "Margherita disjointWith AmericanHot",
                        "CQ": [
                            "What logical separation is defined between Margherita and AmericanHot within the ontology?",
                            "Is it allowable for a pizza to be classified as both Margherita and AmericanHot?",
                            "Which classes are specified as mutually exclusive with AmericanHot?"
                        ]
                    },
                    {
                        "axiom": "Margherita disjointWith UnclosedPizza",
                        "CQ": [
                            "How does the ontology formally distinguish between Margherita and UnclosedPizza?",
                            "Is there any instance that can simultaneously be classified as both Margherita and UnclosedPizza?",
                            "Which classes are specified as being disjoint with UnclosedPizza?"
                        ]
                    },
                    {
                        "axiom": "Margherita disjointWith PrinceCarlo",
                        "CQ": [
                            "What formal separation is established between Margherita and PrinceCarlo in the ontology?",
                            "Is there any instance that can be both Margherita and PrinceCarlo?",
                            "Which pizza types are specified as disjoint with Margherita?"
                        ]
                    },
                    {
                        "axiom": "Margherita disjointWith Capricciosa",
                        "CQ": [
                            "What formal differentiation exists between Margherita and Capricciosa in the ontology?",
                            "Is it permissible for a pizza to be classified as both Margherita and Capricciosa?",
                            "Which classes are formally declared to be incompatible with Margherita?"
                        ]
                    },
                    {
                        "axiom": "Margherita disjointWith FruttiDiMare",
                        "CQ": [
                            "How does the ontology represent the relationship between Margherita and FruttiDiMare pizzas?",
                            "Is it possible for a pizza to be classified as both Margherita and FruttiDiMare simultaneously?",
                            "Which pizza types are specified as disjoint with Margherita in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Margherita disjointWith Siciliana",
                        "CQ": [
                            "What formal separation is defined between Margherita and Siciliana pizzas in the ontology?",
                            "Is there any instance that can simultaneously be classified as both Margherita and Siciliana?",
                            "Which classes are stated as mutually exclusive with Siciliana?"
                        ]
                    },
                    {
                        "axiom": "Margherita disjointWith Cajun",
                        "CQ": [
                            "How does the ontology represent the separation between Margherita and Cajun pizza types?",
                            "Is there any instance that can be classified as both Margherita and Cajun?",
                            "Which pizza varieties are defined as mutually exclusive with Margherita in the model?"
                        ]
                    },
                    {
                        "axiom": "Margherita disjointWith American",
                        "CQ": [
                            "How does the ontology specify the connection or separation between Margherita and American pizza types?",
                            "Can a pizza instance be classified as both Margherita and American within the ontology?",
                            "Which other pizza varieties are defined as mutually exclusive with Margherita?"
                        ]
                    },
                    {
                        "axiom": "Margherita disjointWith SloppyGiuseppe",
                        "CQ": [
                            "What formal separation exists between Margherita and SloppyGiuseppe within the ontology?",
                            "Is there any individual that can be classified as both Margherita and SloppyGiuseppe?",
                            "Which other pizza types, if any, are explicitly incompatible with Margherita?"
                        ]
                    },
                    {
                        "axiom": "Margherita disjointWith Caprina",
                        "CQ": [
                            "What is the ontological relationship specified between Margherita and Caprina?",
                            "Can a single pizza instance simultaneously belong to both Margherita and Caprina categories?",
                            "Which classes are formally specified as disjoint with Caprina?"
                        ]
                    },
                    {
                        "axiom": "Margherita disjointWith Soho",
                        "CQ": [
                            "How is the distinction between Margherita and Soho represented in the ontology?",
                            "Is there any scenario where an entity can be both Margherita and Soho?",
                            "Which classes are specified as mutually exclusive with Margherita?"
                        ]
                    },
                    {
                        "axiom": "Margherita disjointWith Parmense",
                        "CQ": [
                            "How does the ontology differentiate between Margherita and Parmense pizzas?",
                            "Is there any pizza that can be classified as both Margherita and Parmense at once?",
                            "Which classes of pizza are defined as incompatible with Parmense within the ontology?"
                        ]
                    },
                    {
                        "axiom": "Margherita disjointWith PolloAdAstra",
                        "CQ": [
                            "What is the formal distinction between Margherita and PolloAdAstra in the ontology?",
                            "Is any individual permitted to be classified as both Margherita and PolloAdAstra?",
                            "Which classes are specified as mutually exclusive with Margherita?"
                        ]
                    },
                    {
                        "axiom": "Margherita disjointWith Fiorentina",
                        "CQ": [
                            "What is the connection defined in the ontology between Margherita and Fiorentina?",
                            "Is there any scenario where a pizza is classified as both Margherita and Fiorentina?",
                            "Which classes are identified as disjoint with Fiorentina in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Margherita disjointWith Rosa",
                        "CQ": [
                            "What formal separation exists between Margherita and Rosa in the ontology?",
                            "Is there any instance that can simultaneously be classified as both Margherita and Rosa?",
                            "Which classes are defined as mutually exclusive with Rosa?"
                        ]
                    },
                    {
                        "axiom": "Margherita disjointWith QuattroFormaggi",
                        "CQ": [
                            "What is the ontological relationship stipulated between Margherita and QuattroFormaggi?",
                            "Is any entity permitted to belong simultaneously to both Margherita and QuattroFormaggi categories?",
                            "Which classes are defined as mutually exclusive with QuattroFormaggi?"
                        ]
                    },
                    {
                        "axiom": "Margherita disjointWith Giardiniera",
                        "CQ": [
                            "What ontological separation is present between Margherita and Giardiniera?",
                            "Is there any instance that can be classified simultaneously as Margherita and Giardiniera?",
                            "Which classes are explicitly defined as incompatible with Giardiniera?"
                        ]
                    },
                    {
                        "axiom": "Margherita disjointWith FourSeasons",
                        "CQ": [
                            "What is the ontological separation between Margherita and FourSeasons pizza classes?",
                            "Is any pizza instance allowed to belong to both Margherita and FourSeasons categories simultaneously?",
                            "Which pizza types are defined as mutually exclusive with FourSeasons?"
                        ]
                    },
                    {
                        "axiom": "Margherita propertyRestrictions [hasTopping some TomatoTopping]",
                        "CQ": [
                            "Is it required that every Margherita pizza includes at least one TomatoTopping as a topping?",
                            "Can a pizza be classified as Margherita if it lacks TomatoTopping among its toppings?",
                            "Does the presence of TomatoTopping serve as a necessary condition for identifying a pizza as Margherita?"
                        ]
                    },
                    {
                        "axiom": "Margherita propertyRestrictions [hasTopping some MozzarellaTopping]",
                        "CQ": [
                            "Is it required that every Margherita has at least one MozzarellaTopping as a topping?",
                            "Can a Margherita exist without having MozzarellaTopping among its toppings?",
                            "Does the presence of MozzarellaTopping as a topping suffice for a pizza to be classified as Margherita?"
                        ]
                    },
                    {
                        "axiom": "Margherita propertyRestrictions [hasTopping only (MozzarellaTopping or TomatoTopping)]",
                        "CQ": [
                            "Is it required that every topping on a Margherita pizza must be either Mozzarella or Tomato?",
                            "Can a Margherita pizza include any topping aside from Mozzarella and Tomato?",
                            "Does the definition of Margherita explicitly restrict its toppings to only Mozzarella and Tomato types?"
                        ]
                    }
                ]
            },
            "Mushroom": {
                "axiom": {
                    "subClassOf": [
                        "NamedPizza"
                    ],
                    "disjointWith": [
                        "LaReine",
                        "Napoletana",
                        "Veneziana",
                        "AmericanHot",
                        "UnclosedPizza",
                        "PrinceCarlo",
                        "Capricciosa",
                        "FruttiDiMare",
                        "Siciliana",
                        "Cajun",
                        "Margherita",
                        "American",
                        "SloppyGiuseppe",
                        "Caprina",
                        "Soho",
                        "Parmense",
                        "PolloAdAstra",
                        "Fiorentina",
                        "Rosa",
                        "QuattroFormaggi",
                        "Giardiniera",
                        "FourSeasons"
                    ],
                    "propertyRestrictions": [
                        "[hasTopping some MushroomTopping]",
                        "[hasTopping only (MozzarellaTopping or TomatoTopping or MushroomTopping)]",
                        "[hasTopping some TomatoTopping]",
                        "[hasTopping some MozzarellaTopping]"
                    ]
                },
                "description": "Mushroom is defined as a subclass of NamedPizza, and it is disjoint from a wide range of other specific pizza types, ensuring that an individual cannot simultaneously belong to the Mushroom class and any of those listed classes. Members of the Mushroom class are required to have MushroomTopping, TomatoTopping, and MozzarellaTopping among their toppings. Additionally, they may only have MozzarellaTopping, TomatoTopping, or MushroomTopping as toppings, and no others. This formalization ensures that Mushroom pizzas are uniquely characterized by the exclusive combination of these three toppings.",
                "CQ": [
                    {
                        "axiom": "Mushroom subClassOf NamedPizza",
                        "CQ": [
                            "Is Mushroom classified as a more specific type of NamedPizza?",
                            "Which specific varieties fall under the class NamedPizza, such as Mushroom?",
                            "What higher-level categories does Mushroom belong to within the pizza ontology?"
                        ]
                    },
                    {
                        "axiom": "Mushroom disjointWith LaReine",
                        "CQ": [
                            "What logical separation is present between Mushroom and LaReine classes in the ontology?",
                            "Is it valid for a pizza to belong to both Mushroom and LaReine categories simultaneously?",
                            "Which other pizza classes are stated to be disjoint with LaReine?"
                        ]
                    },
                    {
                        "axiom": "Mushroom disjointWith Napoletana",
                        "CQ": [
                            "What type of logical separation is defined between Mushroom and Napoletana in the ontology?",
                            "Is an item permitted to be an instance of both Mushroom and Napoletana classes?",
                            "Which other classes are specified as mutually exclusive with Napoletana?"
                        ]
                    },
                    {
                        "axiom": "Mushroom disjointWith Veneziana",
                        "CQ": [
                            "How does the ontology specify the exclusivity between Mushroom and Veneziana pizzas?",
                            "Is any pizza instance allowed to belong to both the Mushroom and Veneziana categories?",
                            "Which pizza types are formally defined as disjoint with Mushroom according to the ontology?"
                        ]
                    },
                    {
                        "axiom": "Mushroom disjointWith AmericanHot",
                        "CQ": [
                            "What ontological constraint separates Mushroom and AmericanHot pizzas?",
                            "Is there any instance that can belong to both Mushroom and AmericanHot classes simultaneously?",
                            "Which classes are specified to be incompatible with AmericanHot in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Mushroom disjointWith UnclosedPizza",
                        "CQ": [
                            "How does the ontology represent the mutual exclusivity between Mushroom and UnclosedPizza?",
                            "Is any item allowed to be classified as both Mushroom and UnclosedPizza?",
                            "Which classes, besides UnclosedPizza, are formally declared to be incompatible with Mushroom?"
                        ]
                    },
                    {
                        "axiom": "Mushroom disjointWith PrinceCarlo",
                        "CQ": [
                            "What is the ontological separation between Mushroom and PrinceCarlo?",
                            "Is it allowed for an individual to be classified as both Mushroom and PrinceCarlo simultaneously?",
                            "Which other classes in the ontology are declared as disjoint with PrinceCarlo?"
                        ]
                    },
                    {
                        "axiom": "Mushroom disjointWith Capricciosa",
                        "CQ": [
                            "How does the ontology differentiate between Mushroom and Capricciosa pizzas?",
                            "Is any pizza classified as both Mushroom and Capricciosa according to the ontology?",
                            "Which classes are specified as being mutually exclusive with Capricciosa?"
                        ]
                    },
                    {
                        "axiom": "Mushroom disjointWith FruttiDiMare",
                        "CQ": [
                            "How does the ontology represent the incompatibility between Mushroom and FruttiDiMare?",
                            "Is any pizza allowed to be classified as both Mushroom and FruttiDiMare?",
                            "Which pizza categories are declared as disjoint with Mushroom?"
                        ]
                    },
                    {
                        "axiom": "Mushroom disjointWith Siciliana",
                        "CQ": [
                            "How are Mushroom and Siciliana represented as mutually exclusive in the ontology?",
                            "Is there an instance that can simultaneously belong to both Mushroom and Siciliana classes?",
                            "Which classes are specified as disjoint with Siciliana?"
                        ]
                    },
                    {
                        "axiom": "Mushroom disjointWith Cajun",
                        "CQ": [
                            "What formal separation is asserted between Mushroom and Cajun in the ontology?",
                            "Is it allowed for an entity to belong to both the Mushroom and Cajun categories simultaneously?",
                            "Which classes are explicitly specified as being disjoint with Cajun?"
                        ]
                    },
                    {
                        "axiom": "Mushroom disjointWith Margherita",
                        "CQ": [
                            "How is the separation between Mushroom and Margherita pizzas represented in the ontology?",
                            "Is any pizza instance allowed to be both Mushroom and Margherita according to the ontology?",
                            "Which classes are declared disjoint with Margherita within the pizza ontology?"
                        ]
                    },
                    {
                        "axiom": "Mushroom disjointWith American",
                        "CQ": [
                            "What logical constraint separates Mushroom from American in the ontology?",
                            "Is it allowed for an entity to belong to both Mushroom and American categories?",
                            "Which other classes are specified as disjoint with Mushroom?"
                        ]
                    },
                    {
                        "axiom": "Mushroom disjointWith SloppyGiuseppe",
                        "CQ": [
                            "What formal separation exists between Mushroom and SloppyGiuseppe in the ontology?",
                            "Is there any instance that can simultaneously belong to both Mushroom and SloppyGiuseppe?",
                            "Which classes are explicitly marked as incompatible with Mushroom?"
                        ]
                    },
                    {
                        "axiom": "Mushroom disjointWith Caprina",
                        "CQ": [
                            "What logical separation is asserted between Mushroom and Caprina within the ontology?",
                            "Is it allowable for an entity to be classified as both Mushroom and Caprina simultaneously?",
                            "Which classes are defined as mutually exclusive with Caprina?"
                        ]
                    },
                    {
                        "axiom": "Mushroom disjointWith Soho",
                        "CQ": [
                            "Is there a logical constraint preventing anything from being both Mushroom and Soho?",
                            "Which classes are explicitly specified as disjoint with Mushroom?",
                            "Does the ontology prohibit overlap between the classes Mushroom and Soho?"
                        ]
                    },
                    {
                        "axiom": "Mushroom disjointWith Parmense",
                        "CQ": [
                            "How does the ontology define the separation between Mushroom and Parmense?",
                            "Is it allowed for an entity to be classified as both Mushroom and Parmense?",
                            "What classes are stated as explicitly non-overlapping with Parmense?"
                        ]
                    },
                    {
                        "axiom": "Mushroom disjointWith PolloAdAstra",
                        "CQ": [
                            "What logical exclusion exists between Mushroom and PolloAdAstra in the ontology?",
                            "Is there any instance that can be classified as both Mushroom and PolloAdAstra?",
                            "Which classes are explicitly asserted to be disjoint with Mushroom?"
                        ]
                    },
                    {
                        "axiom": "Mushroom disjointWith Fiorentina",
                        "CQ": [
                            "What logical separation is defined between Mushroom and Fiorentina in the ontology?",
                            "Is it allowable for an entity to be classified as both Mushroom and Fiorentina?",
                            "Which classes are formally declared as disjoint with Fiorentina?"
                        ]
                    },
                    {
                        "axiom": "Mushroom disjointWith Rosa",
                        "CQ": [
                            "What logical separation is asserted between Mushroom and Rosa within the ontology?",
                            "Is there any instance classified simultaneously as Mushroom and Rosa?",
                            "Which classes does the ontology specify as disjoint with Rosa?"
                        ]
                    },
                    {
                        "axiom": "Mushroom disjointWith QuattroFormaggi",
                        "CQ": [
                            "What ontological separation is asserted between Mushroom and QuattroFormaggi classes?",
                            "Is any entity permitted to belong to both the Mushroom and QuattroFormaggi categories simultaneously?",
                            "Which other classes are defined as disjoint with QuattroFormaggi within the ontology?"
                        ]
                    },
                    {
                        "axiom": "Mushroom disjointWith Giardiniera",
                        "CQ": [
                            "What logical separation is modeled between Mushroom and Giardiniera classes?",
                            "Is there any entity that can simultaneously belong to both Mushroom and Giardiniera categories?",
                            "Which classes are specifically defined as disjoint with Giardiniera in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Mushroom disjointWith FourSeasons",
                        "CQ": [
                            "How does the ontology specify the incompatibility between Mushroom and FourSeasons?",
                            "Is there any instance that can simultaneously belong to both Mushroom and FourSeasons categories?",
                            "What other pizza types are identified as disjoint from Mushroom within the ontology?"
                        ]
                    },
                    {
                        "axiom": "Mushroom propertyRestrictions [hasTopping some MushroomTopping]",
                        "CQ": [
                            "Is it required that a Mushroom pizza has at least one topping of type MushroomTopping?",
                            "Can a Mushroom pizza exist without having any MushroomTopping as a topping?",
                            "Does every Mushroom pizza have the hasTopping property relating it to some MushroomTopping?"
                        ]
                    },
                    {
                        "axiom": "Mushroom propertyRestrictions [hasTopping only (MozzarellaTopping or TomatoTopping or MushroomTopping)]",
                        "CQ": [
                            "Are mushrooms allowed to have toppings other than Mozzarella, Tomato, or Mushroom?",
                            "Is it required that every topping on a Mushroom item must be Mozzarella, Tomato, or Mushroom?",
                            "Does the definition of Mushroom exclude any toppings not listed as Mozzarella, Tomato, or Mushroom?"
                        ]
                    },
                    {
                        "axiom": "Mushroom propertyRestrictions [hasTopping some TomatoTopping]",
                        "CQ": [
                            "Is it required for Mushroom to have at least one TomatoTopping as a topping?",
                            "Can a Mushroom exist without any TomatoTopping among its toppings?",
                            "Does the definition of Mushroom always imply the presence of TomatoTopping as a topping?"
                        ]
                    },
                    {
                        "axiom": "Mushroom propertyRestrictions [hasTopping some MozzarellaTopping]",
                        "CQ": [
                            "Is it necessary for a Mushroom pizza to have at least one Mozzarella topping?",
                            "Must every Mushroom pizza include the 'hasTopping' property with MozzarellaTopping as a value?",
                            "Can a Mushroom pizza exist without any Mozzarella topping?"
                        ]
                    }
                ]
            },
            "Napoletana": {
                "axiom": {
                    "subClassOf": [
                        "NamedPizza"
                    ],
                    "disjointWith": [
                        "Mushroom",
                        "LaReine",
                        "Veneziana",
                        "AmericanHot",
                        "UnclosedPizza",
                        "PrinceCarlo",
                        "Capricciosa",
                        "FruttiDiMare",
                        "Siciliana",
                        "Cajun",
                        "Margherita",
                        "American",
                        "SloppyGiuseppe",
                        "Caprina",
                        "Soho",
                        "Parmense",
                        "PolloAdAstra",
                        "Fiorentina",
                        "Rosa",
                        "QuattroFormaggi",
                        "Giardiniera",
                        "FourSeasons"
                    ],
                    "propertyRestrictions": [
                        "[hasTopping some TomatoTopping]",
                        "[hasTopping some OliveTopping]",
                        "[hasTopping some MozzarellaTopping]",
                        "[hasTopping some AnchoviesTopping]",
                        "[hasCountryOfOrigin hasValue Italy]",
                        "[hasTopping some CaperTopping]",
                        "[hasTopping only (AnchoviesTopping or MozzarellaTopping or TomatoTopping or CaperTopping or OliveTopping)]"
                    ]
                },
                "description": "Napoletana is defined as a subclass of NamedPizza and is explicitly disjoint with a wide range of other specific pizza types, ensuring that no individual pizza can simultaneously belong to Napoletana and any of those classes. Members of the Napoletana class must have toppings including tomato, olive, mozzarella, anchovies, and capers, with the restriction that only these toppings (and no others) are permitted. Additionally, the country of origin for Napoletana is restricted to Italy. This class therefore represents a distinct and well-defined type of pizza with a uniquely specified combination of Italian origin and allowable toppings.",
                "CQ": [
                    {
                        "axiom": "Napoletana subClassOf NamedPizza",
                        "CQ": [
                            "Is Napoletana classified as a specific kind of NamedPizza?",
                            "What are all the varieties that fall under the category of NamedPizza?",
                            "To which higher-level classes does Napoletana belong?"
                        ]
                    },
                    {
                        "axiom": "Napoletana disjointWith Mushroom",
                        "CQ": [
                            "How is the exclusivity between Napoletana and Mushroom classes modeled in the ontology?",
                            "Is any individual allowed to be classified simultaneously as Napoletana and Mushroom?",
                            "Which classes are specified as disjoint with Napoletana?"
                        ]
                    },
                    {
                        "axiom": "Napoletana disjointWith LaReine",
                        "CQ": [
                            "How are Napoletana and LaReine characterized in terms of their exclusivity within the ontology?",
                            "Is any pizza instance allowed to belong to both Napoletana and LaReine categories simultaneously?",
                            "Which other pizza types, if any, are expressly defined as disjoint with LaReine?"
                        ]
                    },
                    {
                        "axiom": "Napoletana disjointWith Veneziana",
                        "CQ": [
                            "Are there explicit constraints preventing an instance from being both Napoletana and Veneziana?",
                            "Which classes are defined as mutually exclusive with Napoletana in the ontology?",
                            "Is the class Veneziana logically incompatible with Napoletana according to the ontology structure?"
                        ]
                    },
                    {
                        "axiom": "Napoletana disjointWith AmericanHot",
                        "CQ": [
                            "What logical separation is defined between Napoletana and AmericanHot in the ontology?",
                            "Can an individual pizza belong to both the Napoletana and AmericanHot categories?",
                            "Which classes are explicitly incompatible with AmericanHot?"
                        ]
                    },
                    {
                        "axiom": "Napoletana disjointWith UnclosedPizza",
                        "CQ": [
                            "What formal separation exists between Napoletana and UnclosedPizza in the ontology?",
                            "Is an individual pizza allowed to be both a Napoletana and an UnclosedPizza?",
                            "Which classes are specified as mutually exclusive with Napoletana?"
                        ]
                    },
                    {
                        "axiom": "Napoletana disjointWith PrinceCarlo",
                        "CQ": [
                            "What is the ontological difference between Napoletana and PrinceCarlo?",
                            "Is there any instance that can belong to both Napoletana and PrinceCarlo categories?",
                            "Which classes are specified as mutually exclusive with PrinceCarlo?"
                        ]
                    },
                    {
                        "axiom": "Napoletana disjointWith Capricciosa",
                        "CQ": [
                            "What is the formal distinction defined between Napoletana and Capricciosa within the ontology?",
                            "Is there any scenario where an instance could be classified as both Napoletana and Capricciosa simultaneously?",
                            "Which classes are explicitly modeled as disjoint with Capricciosa?"
                        ]
                    },
                    {
                        "axiom": "Napoletana disjointWith FruttiDiMare",
                        "CQ": [
                            "How does the ontology define the exclusivity between Napoletana and FruttiDiMare pizzas?",
                            "Is there an instance that can be classified under both Napoletana and FruttiDiMare pizza types?",
                            "Which pizza categories are specified as disjoint with FruttiDiMare in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Napoletana disjointWith Siciliana",
                        "CQ": [
                            "How does the ontology distinguish between Napoletana and Siciliana pizza types?",
                            "Is any pizza instance able to belong to both Napoletana and Siciliana categories?",
                            "Which pizza classes are formally specified as disjoint with Siciliana in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Napoletana disjointWith Cajun",
                        "CQ": [
                            "How does the ontology formally distinguish between Napoletana and Cajun?",
                            "Is any instance permitted to be classified as both Napoletana and Cajun?",
                            "Which classes are defined as disjoint from Cajun within the ontology?"
                        ]
                    },
                    {
                        "axiom": "Napoletana disjointWith Margherita",
                        "CQ": [
                            "How are Napoletana and Margherita classified in terms of mutual exclusivity within the ontology?",
                            "Is it allowable for a pizza instance to belong to both Napoletana and Margherita categories?",
                            "Which pizza types are explicitly marked as incompatible with Margherita?"
                        ]
                    },
                    {
                        "axiom": "Napoletana disjointWith American",
                        "CQ": [
                            "How are Napoletana and American classified in relation to each other within the ontology?",
                            "Is there any instance that can simultaneously belong to both Napoletana and American categories?",
                            "Which classes are defined as disjoint with American in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Napoletana disjointWith SloppyGiuseppe",
                        "CQ": [
                            "How does the ontology represent the incompatibility between Napoletana and SloppyGiuseppe?",
                            "Is any individual allowed to be classified under both Napoletana and SloppyGiuseppe simultaneously?",
                            "Which classes in the ontology are specified as disjoint with SloppyGiuseppe?"
                        ]
                    },
                    {
                        "axiom": "Napoletana disjointWith Caprina",
                        "CQ": [
                            "What type of logical separation exists between Napoletana and Caprina in the ontology?",
                            "Is there any instance that can simultaneously belong to both the Napoletana and Caprina classes?",
                            "Which classes are specified as being mutually exclusive with Napoletana?"
                        ]
                    },
                    {
                        "axiom": "Napoletana disjointWith Soho",
                        "CQ": [
                            "What is the ontological separation between Napoletana and Soho within the pizza classification?",
                            "Is there any instance that can be simultaneously classified as Napoletana and Soho?",
                            "Which classes are formally incompatible with the Soho pizza category?"
                        ]
                    },
                    {
                        "axiom": "Napoletana disjointWith Parmense",
                        "CQ": [
                            "How does the ontology distinguish between Napoletana and Parmense pizza types?",
                            "Is there any pizza that can be classified as both Napoletana and Parmense?",
                            "Which pizza classes are defined as disjoint with Parmense?"
                        ]
                    },
                    {
                        "axiom": "Napoletana disjointWith PolloAdAstra",
                        "CQ": [
                            "What ontological separation is defined between Napoletana and PolloAdAstra?",
                            "Is there any pizza instance that can be both Napoletana and PolloAdAstra?",
                            "Which classes are set as mutually exclusive with Napoletana in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Napoletana disjointWith Fiorentina",
                        "CQ": [
                            "What type of logical separation is specified between Napoletana and Fiorentina in the ontology?",
                            "Is an individual ever allowed to be classified as both Napoletana and Fiorentina?",
                            "Are there other pizza classes that are formally stated to be disjoint with Fiorentina besides Napoletana?"
                        ]
                    },
                    {
                        "axiom": "Napoletana disjointWith Rosa",
                        "CQ": [
                            "How are the pizza types Napoletana and Rosa logically separated within the ontology?",
                            "Is there any instance that can belong to both Napoletana and Rosa simultaneously?",
                            "What other pizza classes are explicitly stated to be disjoint with Rosa?"
                        ]
                    },
                    {
                        "axiom": "Napoletana disjointWith QuattroFormaggi",
                        "CQ": [
                            "What is the formal distinction defined between Napoletana and QuattroFormaggi pizzas in the ontology?",
                            "Can an individual pizza instance belong to both the Napoletana and QuattroFormaggi categories?",
                            "Which other pizza types are specified as disjoint with QuattroFormaggi?"
                        ]
                    },
                    {
                        "axiom": "Napoletana disjointWith Giardiniera",
                        "CQ": [
                            "How does the ontology represent the mutual exclusivity of Napoletana and Giardiniera?",
                            "Is it allowed for one pizza to belong to both Napoletana and Giardiniera categories?",
                            "Which classes are explicitly noted as being disjoint with Giardiniera?"
                        ]
                    },
                    {
                        "axiom": "Napoletana disjointWith FourSeasons",
                        "CQ": [
                            "What is the ontological relationship defined between Napoletana and FourSeasons?",
                            "Could any individual instance be classified as both Napoletana and FourSeasons pizzas?",
                            "Which pizza varieties are formally specified as incompatible with FourSeasons?"
                        ]
                    },
                    {
                        "axiom": "Napoletana propertyRestrictions [hasTopping some TomatoTopping]",
                        "CQ": [
                            "Is every instance of Napoletana required to include at least one topping of type TomatoTopping?",
                            "Can a Napoletana exist without having the property 'hasTopping' filled with TomatoTopping?",
                            "Does the definition of Napoletana necessitate the presence of TomatoTopping as a topping?"
                        ]
                    },
                    {
                        "axiom": "Napoletana propertyRestrictions [hasTopping some OliveTopping]",
                        "CQ": [
                            "Is it required for a Napoletana to have at least one topping that is an OliveTopping?",
                            "Can a Napoletana exist without having the hasTopping relationship to an OliveTopping?",
                            "Does Napoletana necessarily include OliveTopping among its toppings?"
                        ]
                    },
                    {
                        "axiom": "Napoletana propertyRestrictions [hasTopping some MozzarellaTopping]",
                        "CQ": [
                            "Is it required that a Napoletana pizza includes at least one MozzarellaTopping as a topping?",
                            "Can a pizza be classified as Napoletana if it lacks any MozzarellaTopping?",
                            "Does every Napoletana pizza necessarily have the property 'hasTopping' associated with MozzarellaTopping?"
                        ]
                    },
                    {
                        "axiom": "Napoletana propertyRestrictions [hasTopping some AnchoviesTopping]",
                        "CQ": [
                            "Is it required that a Napoletana pizza includes at least one AnchoviesTopping as a topping?",
                            "Can a pizza be classified as Napoletana if it does not have any AnchoviesTopping?",
                            "Does every instance of Napoletana necessarily have the property hasTopping with AnchoviesTopping?"
                        ]
                    },
                    {
                        "axiom": "Napoletana propertyRestrictions [hasCountryOfOrigin hasValue Italy]",
                        "CQ": [
                            "Is it required that a Napoletana has Italy as its country of origin?",
                            "Can a Napoletana originate from a country other than Italy?",
                            "Does the definition of Napoletana specify Italy as its sole country of origin?"
                        ]
                    },
                    {
                        "axiom": "Napoletana propertyRestrictions [hasTopping some CaperTopping]",
                        "CQ": [
                            "Is it necessary for a Napoletana pizza to have at least one topping that is a CaperTopping?",
                            "Does every instance of Napoletana include the property hasTopping with some value from CaperTopping?",
                            "Can a pizza be classified as Napoletana if it lacks any CaperTopping?"
                        ]
                    },
                    {
                        "axiom": "Napoletana propertyRestrictions [hasTopping only (AnchoviesTopping or MozzarellaTopping or TomatoTopping or CaperTopping or OliveTopping)]",
                        "CQ": [
                            "Is it required that a Napoletana pizza only includes Anchovies, Mozzarella, Tomato, Caper, or Olive as toppings?",
                            "Can a pizza with any topping outside of Anchovies, Mozzarella, Tomato, Caper, or Olive be classified as Napoletana?",
                            "Are there toppings not listed that could ever appear on a Napoletana pizza according to its definition?"
                        ]
                    }
                ]
            },
            "Parmense": {
                "axiom": {
                    "subClassOf": [
                        "NamedPizza"
                    ],
                    "disjointWith": [
                        "Mushroom",
                        "LaReine",
                        "Napoletana",
                        "Veneziana",
                        "AmericanHot",
                        "UnclosedPizza",
                        "PrinceCarlo",
                        "Capricciosa",
                        "FruttiDiMare",
                        "Siciliana",
                        "Cajun",
                        "Margherita",
                        "American",
                        "SloppyGiuseppe",
                        "Caprina",
                        "Soho",
                        "PolloAdAstra",
                        "Fiorentina",
                        "Rosa",
                        "QuattroFormaggi",
                        "Giardiniera",
                        "FourSeasons"
                    ],
                    "propertyRestrictions": [
                        "[hasTopping some TomatoTopping]",
                        "[hasTopping some HamTopping]",
                        "[hasTopping some ParmesanTopping]",
                        "[hasTopping some MozzarellaTopping]",
                        "[hasTopping some AsparagusTopping]",
                        "[hasTopping only (MozzarellaTopping or TomatoTopping or HamTopping or ParmesanTopping or AsparagusTopping)]"
                    ]
                },
                "description": "Parmense is defined as a subclass of NamedPizza and is explicitly disjoint with a wide range of other pizza types, ensuring that no individual pizza can simultaneously be classified as Parmense and any of the listed disjoint pizzas. Parmense pizzas are characterized by a specific set of required toppings: each must include at least some tomato, ham, parmesan, mozzarella, and asparagus toppings. Furthermore, they may only have these toppings—no additional ingredients are permitted. This formalization strictly specifies the distinctive composition of Parmense pizzas within the NamedPizza hierarchy.",
                "CQ": [
                    {
                        "axiom": "Parmense subClassOf NamedPizza",
                        "CQ": [
                            "Is Parmense included among the NamedPizza subclasses?",
                            "Which pizza types fall under the broader category of NamedPizza, such as Parmense?",
                            "What higher-level categories does Parmense belong to within the pizza classification?"
                        ]
                    },
                    {
                        "axiom": "Parmense disjointWith Mushroom",
                        "CQ": [
                            "How does the ontology formally distinguish between Parmense and Mushroom?",
                            "Is there any instance that can simultaneously belong to both Parmense and Mushroom classes?",
                            "Which classes are specified as mutually exclusive with Mushroom in the current ontology?"
                        ]
                    },
                    {
                        "axiom": "Parmense disjointWith LaReine",
                        "CQ": [
                            "How are Parmense and LaReine differentiated within the ontology?",
                            "Is there an instance that can belong to both Parmense and LaReine categories?",
                            "Which classes are explicitly incompatible with Parmense?"
                        ]
                    },
                    {
                        "axiom": "Parmense disjointWith Napoletana",
                        "CQ": [
                            "What type of ontological separation is defined between Parmense and Napoletana?",
                            "Is it permissible for one instance to be classified as both Parmense and Napoletana?",
                            "Which classes within the ontology are stated to be incompatible with Napoletana?"
                        ]
                    },
                    {
                        "axiom": "Parmense disjointWith Veneziana",
                        "CQ": [
                            "How does the ontology represent the mutual exclusivity between Parmense and Veneziana?",
                            "Is there any scenario where a pizza could simultaneously belong to both Parmense and Veneziana categories?",
                            "Which classes are specified as disjoint with Parmense in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Parmense disjointWith AmericanHot",
                        "CQ": [
                            "How does the ontology represent the incompatibility between Parmense and AmericanHot?",
                            "Is it allowed for a single pizza to belong to both Parmense and AmericanHot categories simultaneously?",
                            "Which pizza classes are specified as being mutually exclusive with Parmense?"
                        ]
                    },
                    {
                        "axiom": "Parmense disjointWith UnclosedPizza",
                        "CQ": [
                            "What logical separation is defined between Parmense and UnclosedPizza within the ontology?",
                            "Is any instance allowed to be both Parmense and UnclosedPizza?",
                            "Which classes are formally stated as disjoint with UnclosedPizza?"
                        ]
                    },
                    {
                        "axiom": "Parmense disjointWith PrinceCarlo",
                        "CQ": [
                            "What formal separation is asserted between Parmense and PrinceCarlo within the ontology?",
                            "Is there any instance that can be simultaneously classified as Parmense and PrinceCarlo?",
                            "Which classes are explicitly defined as disjoint with PrinceCarlo?"
                        ]
                    },
                    {
                        "axiom": "Parmense disjointWith Capricciosa",
                        "CQ": [
                            "What distinguishes Parmense from Capricciosa according to the ontology?",
                            "Is there any instance that can be simultaneously classified as both Parmense and Capricciosa?",
                            "Which classes are declared as disjoint with Parmense?"
                        ]
                    },
                    {
                        "axiom": "Parmense disjointWith FruttiDiMare",
                        "CQ": [
                            "How are Parmense and FruttiDiMare represented in terms of mutual exclusivity within the ontology?",
                            "Is there an instance that can belong to both Parmense and FruttiDiMare classes simultaneously?",
                            "Which pizza classes are asserted as disjoint with Parmense?"
                        ]
                    },
                    {
                        "axiom": "Parmense disjointWith Siciliana",
                        "CQ": [
                            "What formal separation is stated between Parmense and Siciliana in the ontology?",
                            "Can a pizza instance be classified as both Parmense and Siciliana?",
                            "Which classes are defined as disjoint with Parmense?"
                        ]
                    },
                    {
                        "axiom": "Parmense disjointWith Cajun",
                        "CQ": [
                            "How does the ontology represent the incompatibility between Parmense and Cajun?",
                            "Can an entity simultaneously belong to both Parmense and Cajun categories?",
                            "Which classes are explicitly defined as disjoint with Parmense?"
                        ]
                    },
                    {
                        "axiom": "Parmense disjointWith Margherita",
                        "CQ": [
                            "How are Parmense and Margherita conceptually separated within the ontology?",
                            "Is it feasible for an individual pizza to be classified as both Parmense and Margherita?",
                            "Which classes are formally specified as disjoint with Margherita in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Parmense disjointWith American",
                        "CQ": [
                            "What is the ontological distinction between Parmense and American?",
                            "Is there any instance that can simultaneously belong to both Parmense and American classes?",
                            "Which classes are specified as disjoint with American in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Parmense disjointWith SloppyGiuseppe",
                        "CQ": [
                            "What is the ontological relationship between Parmense and SloppyGiuseppe?",
                            "Is there any entity that can simultaneously belong to both Parmense and SloppyGiuseppe classes?",
                            "Which classes are specified as mutually exclusive with Parmense?"
                        ]
                    },
                    {
                        "axiom": "Parmense disjointWith Caprina",
                        "CQ": [
                            "How does the ontology formally relate Parmense and Caprina classes?",
                            "Is there any individual that can simultaneously belong to both Parmense and Caprina categories?",
                            "Which classes, apart from Caprina, are asserted to be disjoint with Parmense?"
                        ]
                    },
                    {
                        "axiom": "Parmense disjointWith Soho",
                        "CQ": [
                            "How does the ontology distinguish between Parmense and Soho pizzas?",
                            "Is it allowed for a single pizza to belong to both Parmense and Soho categories simultaneously?",
                            "Which classes are specified as mutually exclusive with Parmense?"
                        ]
                    },
                    {
                        "axiom": "Parmense disjointWith PolloAdAstra",
                        "CQ": [
                            "How are Parmense and PolloAdAstra differentiated within the ontology?",
                            "Is it permitted for a pizza to be classified as both Parmense and PolloAdAstra?",
                            "Which classes are stated to be disjoint with PolloAdAstra?"
                        ]
                    },
                    {
                        "axiom": "Parmense disjointWith Fiorentina",
                        "CQ": [
                            "How does the ontology specify the association between Parmense and Fiorentina classes?",
                            "Is there any scenario where an individual instance can belong to both Parmense and Fiorentina?",
                            "Which classes in the ontology are explicitly incompatible with Fiorentina?"
                        ]
                    },
                    {
                        "axiom": "Parmense disjointWith Rosa",
                        "CQ": [
                            "How are Parmense and Rosa classified with regard to mutual exclusivity in the ontology?",
                            "Is there any instance that can belong to both Parmense and Rosa simultaneously?",
                            "What other classes are asserted to be disjoint with Rosa?"
                        ]
                    },
                    {
                        "axiom": "Parmense disjointWith QuattroFormaggi",
                        "CQ": [
                            "What logical separation is defined between Parmense and QuattroFormaggi in the ontology?",
                            "Can an individual pizza belong to both Parmense and QuattroFormaggi categories?",
                            "Which classes are explicitly stated as disjoint with Parmense?"
                        ]
                    },
                    {
                        "axiom": "Parmense disjointWith Giardiniera",
                        "CQ": [
                            "How does the ontology differentiate between Parmense and Giardiniera?",
                            "Is there any instance that can be classified as both Parmense and Giardiniera?",
                            "Which classes are explicitly specified as disjoint with Giardiniera?"
                        ]
                    },
                    {
                        "axiom": "Parmense disjointWith FourSeasons",
                        "CQ": [
                            "What is the ontological separation between Parmense and FourSeasons pizzas?",
                            "Can an individual pizza instance belong to both Parmense and FourSeasons classes simultaneously?",
                            "Which pizza types are formally specified as disjoint from FourSeasons?"
                        ]
                    },
                    {
                        "axiom": "Parmense propertyRestrictions [hasTopping some TomatoTopping]",
                        "CQ": [
                            "Is every Parmense pizza required to have at least one topping of TomatoTopping?",
                            "Must a Parmense pizza always include TomatoTopping among its toppings?",
                            "Can a Parmense pizza exist without having any TomatoTopping?"
                        ]
                    },
                    {
                        "axiom": "Parmense propertyRestrictions [hasTopping some HamTopping]",
                        "CQ": [
                            "Is it required for Parmense to have the hasTopping property with at least one HamTopping instance?",
                            "Does every Parmense possess the hasTopping relation involving a HamTopping?",
                            "Can a pizza be classified as Parmense if it lacks any HamTopping among its toppings?"
                        ]
                    },
                    {
                        "axiom": "Parmense propertyRestrictions [hasTopping some ParmesanTopping]",
                        "CQ": [
                            "Is it required that a Parmense pizza has at least one topping of type ParmesanTopping?",
                            "Must every Parmense pizza include the property 'hasTopping' linking it to a ParmesanTopping?",
                            "Does the presence of a ParmesanTopping suffice for a pizza to meet the topping criteria for Parmense?"
                        ]
                    },
                    {
                        "axiom": "Parmense propertyRestrictions [hasTopping some MozzarellaTopping]",
                        "CQ": [
                            "Must a Parmense always have at least one MozzarellaTopping as a topping?",
                            "Is the presence of MozzarellaTopping required for something to be considered Parmense?",
                            "Can a Parmense exist without having any MozzarellaTopping?"
                        ]
                    },
                    {
                        "axiom": "Parmense propertyRestrictions [hasTopping some AsparagusTopping]",
                        "CQ": [
                            "Must every Parmense have at least one AsparagusTopping as a topping?",
                            "Is it required for Parmense to possess the property 'hasTopping' associated with AsparagusTopping?",
                            "Does the existence of a Parmense imply the presence of some AsparagusTopping through the hasTopping relation?"
                        ]
                    },
                    {
                        "axiom": "Parmense propertyRestrictions [hasTopping only (MozzarellaTopping or TomatoTopping or HamTopping or ParmesanTopping or AsparagusTopping)]",
                        "CQ": [
                            "Must every topping on a Parmense pizza be either Mozzarella, Tomato, Ham, Parmesan, or Asparagus?",
                            "Is it possible for a Parmense pizza to include any topping outside of Mozzarella, Tomato, Ham, Parmesan, or Asparagus?",
                            "Are toppings on Parmense pizzas universally limited to the five specified types and no others?"
                        ]
                    }
                ]
            },
            "PolloAdAstra": {
                "axiom": {
                    "subClassOf": [
                        "NamedPizza"
                    ],
                    "disjointWith": [
                        "Mushroom",
                        "LaReine",
                        "Napoletana",
                        "Veneziana",
                        "AmericanHot",
                        "UnclosedPizza",
                        "PrinceCarlo",
                        "Capricciosa",
                        "FruttiDiMare",
                        "Siciliana",
                        "Cajun",
                        "Margherita",
                        "American",
                        "SloppyGiuseppe",
                        "Caprina",
                        "Soho",
                        "Parmense",
                        "Fiorentina",
                        "Rosa",
                        "QuattroFormaggi",
                        "Giardiniera",
                        "FourSeasons"
                    ],
                    "propertyRestrictions": [
                        "[hasTopping some RedOnionTopping]",
                        "[hasTopping some CajunSpiceTopping]",
                        "[hasTopping some TomatoTopping]",
                        "[hasTopping some GarlicTopping]",
                        "[hasTopping some SweetPepperTopping]",
                        "[hasTopping only (ChickenTopping or MozzarellaTopping or GarlicTopping or TomatoTopping or RedOnionTopping or CajunSpiceTopping or SweetPepperTopping)]",
                        "[hasTopping some MozzarellaTopping]",
                        "[hasTopping some ChickenTopping]"
                    ]
                },
                "description": "PolloAdAstra is defined as a subclass of NamedPizza and is explicitly disjoint with other specified pizzas, ensuring that no individual pizza can simultaneously be an instance of PolloAdAstra and any of the listed alternative named pizzas. Members of this class must have at least one of each of the following toppings: Red Onion, Cajun Spice, Tomato, Garlic, Sweet Pepper, Mozzarella, and Chicken. Furthermore, the only permissible toppings are Chicken, Mozzarella, Garlic, Tomato, Red Onion, Cajun Spice, and Sweet Pepper; no other toppings are allowed. This formalization provides a precise specification of PolloAdAstra as a distinct pizza type characterized by its unique and restricted combination of toppings.",
                "CQ": [
                    {
                        "axiom": "PolloAdAstra subClassOf NamedPizza",
                        "CQ": [
                            "Does PolloAdAstra fall under the general category of NamedPizza?",
                            "Which specific kinds of pizzas are recognized as subclasses of NamedPizza, such as PolloAdAstra?",
                            "What broader classifications include PolloAdAstra as a member?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra disjointWith Mushroom",
                        "CQ": [
                            "What logical separation is defined between PolloAdAstra and Mushroom in the ontology?",
                            "Is it allowed for an entity to be classified as both PolloAdAstra and Mushroom?",
                            "Which classes are formally stated to be disjoint with Mushroom?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra disjointWith LaReine",
                        "CQ": [
                            "What is the explicit ontological separation between PolloAdAstra and LaReine?",
                            "Is any pizza instance permitted to belong to both the PolloAdAstra and LaReine categories?",
                            "Which pizza types are formally specified as disjoint with LaReine within the ontology?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra disjointWith Napoletana",
                        "CQ": [
                            "What logical separation exists between PolloAdAstra and Napoletana within the ontology?",
                            "Is any entity allowed to be classified as both PolloAdAstra and Napoletana?",
                            "Which classes are explicitly marked as disjoint with PolloAdAstra?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra disjointWith Veneziana",
                        "CQ": [
                            "How does the ontology characterize the separation between PolloAdAstra and Veneziana?",
                            "Is there any scenario where a pizza can be classified as both PolloAdAstra and Veneziana?",
                            "Which classes are explicitly modeled as disjoint with PolloAdAstra?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra disjointWith AmericanHot",
                        "CQ": [
                            "How does the ontology differentiate between PolloAdAstra and AmericanHot as distinct pizza types?",
                            "Is any pizza instance allowed to belong to both PolloAdAstra and AmericanHot classes simultaneously?",
                            "Which classes are declared as disjoint with AmericanHot in the ontology?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra disjointWith UnclosedPizza",
                        "CQ": [
                            "How does the ontology represent the mutual exclusivity between PolloAdAstra and UnclosedPizza?",
                            "Is there any instance that can be classified as both PolloAdAstra and UnclosedPizza?",
                            "What other pizza categories are specified as disjoint with UnclosedPizza?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra disjointWith PrinceCarlo",
                        "CQ": [
                            "What logical separation is defined between PolloAdAstra and PrinceCarlo in the ontology?",
                            "Is there any instance that can belong to both PolloAdAstra and PrinceCarlo classes simultaneously?",
                            "Which classes are explicitly stated as disjoint with PrinceCarlo within the ontology?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra disjointWith Capricciosa",
                        "CQ": [
                            "What ontology restriction is imposed between PolloAdAstra and Capricciosa?",
                            "Is any pizza instance permitted to belong to both PolloAdAstra and Capricciosa categories?",
                            "Which classes are asserted as disjoint with Capricciosa in the ontology?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra disjointWith FruttiDiMare",
                        "CQ": [
                            "What is the formal disjointness assertion defined between PolloAdAstra and FruttiDiMare in the ontology?",
                            "Is it allowed for a single pizza to belong to both PolloAdAstra and FruttiDiMare categories simultaneously?",
                            "Which pizza classes are established as incompatible with FruttiDiMare?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra disjointWith Siciliana",
                        "CQ": [
                            "What is the ontological separation between PolloAdAstra and Siciliana?",
                            "Can any pizza instance simultaneously belong to both PolloAdAstra and Siciliana classes?",
                            "Which pizza types are defined as disjoint from Siciliana within the ontology?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra disjointWith Cajun",
                        "CQ": [
                            "How is the incompatibility between PolloAdAstra and Cajun pizzas represented in the ontology?",
                            "Can any instance be classified simultaneously as both PolloAdAstra and Cajun?",
                            "What other pizza types, besides Cajun, are formally declared as disjoint with PolloAdAstra?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra disjointWith Margherita",
                        "CQ": [
                            "What is the explicit logical separation between PolloAdAstra and Margherita?",
                            "Can any pizza be classified as both PolloAdAstra and Margherita?",
                            "Which pizza types are formally stated as disjoint with Margherita?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra disjointWith American",
                        "CQ": [
                            "How does the ontology specify the separation between PolloAdAstra and American?",
                            "Is there any pizza classified as both PolloAdAstra and American?",
                            "Which pizza types are defined as mutually exclusive with American?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra disjointWith SloppyGiuseppe",
                        "CQ": [
                            "How does the ontology distinguish PolloAdAstra from SloppyGiuseppe?",
                            "Is any entity permitted to belong to both PolloAdAstra and SloppyGiuseppe classes?",
                            "Which classes are defined as disjoint with SloppyGiuseppe?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra disjointWith Caprina",
                        "CQ": [
                            "How are PolloAdAstra and Caprina characterized with respect to each other in the ontology?",
                            "Is there any pizza that can belong to both PolloAdAstra and Caprina classes simultaneously?",
                            "Which classes are specified as being disjoint with PolloAdAstra?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra disjointWith Soho",
                        "CQ": [
                            "What ontological separation is defined between PolloAdAstra and Soho?",
                            "Is there any scenario where a pizza can be classified as both PolloAdAstra and Soho?",
                            "Which other named pizzas are formally declared as disjoint with Soho?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra disjointWith Parmense",
                        "CQ": [
                            "Are PolloAdAstra and Parmense defined as mutually exclusive pizza types in the ontology?",
                            "Is there any instance that can be classified under both PolloAdAstra and Parmense?",
                            "Which classes are specified to be disjoint with Parmense?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra disjointWith Fiorentina",
                        "CQ": [
                            "What ontological differentiation is asserted between PolloAdAstra and Fiorentina?",
                            "Is there any pizza that can simultaneously belong to both PolloAdAstra and Fiorentina categories?",
                            "Which pizza types are formally specified as disjoint with Fiorentina?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra disjointWith Rosa",
                        "CQ": [
                            "What is the logical separation between PolloAdAstra and Rosa in the ontology?",
                            "Can any individual be classified as both PolloAdAstra and Rosa?",
                            "Which classes are formally defined as disjoint with PolloAdAstra?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra disjointWith QuattroFormaggi",
                        "CQ": [
                            "What distinguishes PolloAdAstra from QuattroFormaggi according to the ontology?",
                            "Can an instance belong to both PolloAdAstra and QuattroFormaggi classes?",
                            "Which classes are asserted as disjoint with QuattroFormaggi in the ontology?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra disjointWith Giardiniera",
                        "CQ": [
                            "What ontological constraint separates PolloAdAstra from Giardiniera?",
                            "Is there any instance that can simultaneously be classified as both PolloAdAstra and Giardiniera?",
                            "Which classes are defined as mutually exclusive with PolloAdAstra in the ontology?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra disjointWith FourSeasons",
                        "CQ": [
                            "How are PolloAdAstra and FourSeasons categorized in relation to each other within the ontology?",
                            "Can an individual pizza instance be classified as both PolloAdAstra and FourSeasons simultaneously?",
                            "Which pizza types are defined as disjoint from PolloAdAstra in the ontology?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra propertyRestrictions [hasTopping some RedOnionTopping]",
                        "CQ": [
                            "Must every PolloAdAstra pizza have at least one RedOnionTopping as a topping?",
                            "Is the presence of RedOnionTopping a necessary condition for a pizza to be classified as PolloAdAstra?",
                            "Can a pizza be considered PolloAdAstra if it lacks RedOnionTopping among its toppings?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra propertyRestrictions [hasTopping some CajunSpiceTopping]",
                        "CQ": [
                            "Is it required for every PolloAdAstra pizza to include at least one CajunSpiceTopping as a topping?",
                            "Can a PolloAdAstra pizza be considered as such without having any CajunSpiceTopping?",
                            "Does the presence of CajunSpiceTopping on a pizza guarantee its classification as PolloAdAstra?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra propertyRestrictions [hasTopping some TomatoTopping]",
                        "CQ": [
                            "Is it required for a PolloAdAstra pizza to have at least one TomatoTopping?",
                            "Can a PolloAdAstra pizza exist without having any TomatoTopping as one of its toppings?",
                            "Does every instance of PolloAdAstra use TomatoTopping among its toppings?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra propertyRestrictions [hasTopping some GarlicTopping]",
                        "CQ": [
                            "Must every PolloAdAstra pizza have at least one GarlicTopping as a topping?",
                            "Is it required for a pizza to include a GarlicTopping in order to be classified as PolloAdAstra?",
                            "Can a PolloAdAstra pizza exist without the hasTopping property relating to a GarlicTopping?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra propertyRestrictions [hasTopping some SweetPepperTopping]",
                        "CQ": [
                            "Is it necessary for a PolloAdAstra pizza to include SweetPepperTopping among its toppings?",
                            "Can a pizza be classified as PolloAdAstra if it does not have any SweetPepperTopping?",
                            "Does the presence of SweetPepperTopping determine whether a pizza is identified as PolloAdAstra?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra propertyRestrictions [hasTopping only (ChickenTopping or MozzarellaTopping or GarlicTopping or TomatoTopping or RedOnionTopping or CajunSpiceTopping or SweetPepperTopping)]",
                        "CQ": [
                            "Is every topping on a PolloAdAstra pizza restricted to only Chicken, Mozzarella, Garlic, Tomato, Red Onion, Cajun Spice, or Sweet Pepper toppings?",
                            "Could a PolloAdAstra pizza include any topping outside the set of Chicken, Mozzarella, Garlic, Tomato, Red Onion, Cajun Spice, or Sweet Pepper?",
                            "Does the presence of a topping not listed among Chicken, Mozzarella, Garlic, Tomato, Red Onion, Cajun Spice, or Sweet Pepper disqualify a pizza from being classified as PolloAdAstra?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra propertyRestrictions [hasTopping some MozzarellaTopping]",
                        "CQ": [
                            "Is it required for a PolloAdAstra pizza to have at least one MozzarellaTopping as a topping?",
                            "Must every PolloAdAstra pizza include the hasTopping relationship with some MozzarellaTopping?",
                            "Can a pizza be classified as PolloAdAstra if it does not contain any MozzarellaTopping?"
                        ]
                    },
                    {
                        "axiom": "PolloAdAstra propertyRestrictions [hasTopping some ChickenTopping]",
                        "CQ": [
                            "Is it required for a PolloAdAstra pizza to have at least one ChickenTopping as a topping?",
                            "Can a PolloAdAstra pizza exist without any ChickenTopping among its toppings?",
                            "Does every PolloAdAstra pizza include the property hasTopping with a value of ChickenTopping?"
                        ]
                    }
                ]
            },
            "PrinceCarlo": {
                "axiom": {
                    "subClassOf": [
                        "NamedPizza"
                    ],
                    "disjointWith": [
                        "Mushroom",
                        "LaReine",
                        "Napoletana",
                        "Veneziana",
                        "AmericanHot",
                        "UnclosedPizza",
                        "Capricciosa",
                        "FruttiDiMare",
                        "Siciliana",
                        "Cajun",
                        "Margherita",
                        "American",
                        "SloppyGiuseppe",
                        "Caprina",
                        "Soho",
                        "Parmense",
                        "PolloAdAstra",
                        "Fiorentina",
                        "Rosa",
                        "QuattroFormaggi",
                        "Giardiniera",
                        "FourSeasons"
                    ],
                    "propertyRestrictions": [
                        "[hasTopping some TomatoTopping]",
                        "[hasTopping only (LeekTopping or RosemaryTopping or MozzarellaTopping or TomatoTopping or ParmesanTopping)]",
                        "[hasTopping some MozzarellaTopping]",
                        "[hasTopping some ParmesanTopping]",
                        "[hasTopping some LeekTopping]",
                        "[hasTopping some RosemaryTopping]"
                    ]
                },
                "description": "PrinceCarlo is defined as a subclass of NamedPizza, making it a specific kind of pizza with a distinct identity. It is explicitly disjoint with a comprehensive set of other named pizzas, such that no individual pizza can be simultaneously classified as PrinceCarlo and any of those other pizzas (e.g., Mushroom, LaReine, Napoletana, etc.).\n\nFrom the property restrictions, any PrinceCarlo pizza must have at least the following toppings: TomatoTopping, MozzarellaTopping, ParmesanTopping, LeekTopping, and RosemaryTopping. Furthermore, the only toppings permitted on a PrinceCarlo pizza are LeekTopping, RosemaryTopping, MozzarellaTopping, TomatoTopping, and ParmesanTopping. This formalization ensures that PrinceCarlo pizzas are uniquely characterized by this specific and exclusive combination of toppings, and cannot include any others.",
                "CQ": [
                    {
                        "axiom": "PrinceCarlo subClassOf NamedPizza",
                        "CQ": [
                            "Is PrinceCarlo classified as a type of NamedPizza?",
                            "What named pizzas have subcategories such as PrinceCarlo?",
                            "Which broader pizza categories encompass PrinceCarlo?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo disjointWith Mushroom",
                        "CQ": [
                            "What ontological separation is defined between PrinceCarlo and Mushroom?",
                            "Is there any instance that can belong to both PrinceCarlo and Mushroom classes simultaneously?",
                            "Which classes are specified as mutually exclusive with PrinceCarlo?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo disjointWith LaReine",
                        "CQ": [
                            "What ontological separation is enforced between PrinceCarlo and LaReine classes?",
                            "Is any instance permitted to simultaneously belong to both PrinceCarlo and LaReine categories?",
                            "Which classes, aside from LaReine, are defined as disjoint with PrinceCarlo?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo disjointWith Napoletana",
                        "CQ": [
                            "How does the ontology define the separation between PrinceCarlo and Napoletana?",
                            "Is it allowed for an individual to be classified as both PrinceCarlo and Napoletana?",
                            "Which classes are explicitly declared as mutually exclusive with PrinceCarlo?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo disjointWith Veneziana",
                        "CQ": [
                            "What is the ontological separation between PrinceCarlo and Veneziana?",
                            "Is there any individual that can belong to both PrinceCarlo and Veneziana classes?",
                            "Which classes are specified as disjoint with PrinceCarlo within the ontology?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo disjointWith AmericanHot",
                        "CQ": [
                            "How does the ontology define the connection or exclusion between PrinceCarlo and AmericanHot?",
                            "Is any entity permitted to be classified as both PrinceCarlo and AmericanHot simultaneously?",
                            "Which entities or classes are specified as disjoint with AmericanHot within the ontology?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo disjointWith UnclosedPizza",
                        "CQ": [
                            "What is the ontological separation asserted between PrinceCarlo and UnclosedPizza?",
                            "Is an individual pizza instance allowed to belong to both PrinceCarlo and UnclosedPizza simultaneously?",
                            "Which classes are formally specified as disjoint with UnclosedPizza within the ontology?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo disjointWith Capricciosa",
                        "CQ": [
                            "What formal incompatibility is specified between PrinceCarlo and Capricciosa in the ontology?",
                            "Is any single pizza instance permitted to belong to both PrinceCarlo and Capricciosa categories?",
                            "Which classes are explicitly marked as disjoint with Capricciosa?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo disjointWith FruttiDiMare",
                        "CQ": [
                            "What is the ontological separation between PrinceCarlo and FruttiDiMare pizza types?",
                            "Is there any instance that can be classified as both PrinceCarlo and FruttiDiMare?",
                            "Which classes are stated to be mutually exclusive with FruttiDiMare?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo disjointWith Siciliana",
                        "CQ": [
                            "What is the logical separation defined between PrinceCarlo and Siciliana in the ontology?",
                            "Is there any circumstance where an entity can be an instance of both PrinceCarlo and Siciliana?",
                            "Which classes are specified as mutually exclusive with PrinceCarlo?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo disjointWith Cajun",
                        "CQ": [
                            "How are PrinceCarlo and Cajun conceptually differentiated within the ontology?",
                            "Is there any instance that can belong to both PrinceCarlo and Cajun categories simultaneously?",
                            "Which classes are specified as mutually exclusive with Cajun?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo disjointWith Margherita",
                        "CQ": [
                            "What is the ontological separation between PrinceCarlo and Margherita classes?",
                            "Is there any entity that can simultaneously be an instance of both PrinceCarlo and Margherita?",
                            "Which classes, apart from Margherita, are specified as disjoint with PrinceCarlo within the ontology?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo disjointWith American",
                        "CQ": [
                            "How are PrinceCarlo and American classes differentiated in the ontology?",
                            "Is there any individual that can belong to both PrinceCarlo and American categories?",
                            "Which classes are formally specified as disjoint with the American class?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo disjointWith SloppyGiuseppe",
                        "CQ": [
                            "What logical implication follows from PrinceCarlo and SloppyGiuseppe being disjoint?",
                            "Is there any instance that can simultaneously belong to both PrinceCarlo and SloppyGiuseppe classes?",
                            "Which classes are explicitly disjoint with SloppyGiuseppe?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo disjointWith Caprina",
                        "CQ": [
                            "How are PrinceCarlo and Caprina formally separated within the ontology?",
                            "Is membership in both PrinceCarlo and Caprina classes allowed for a single individual?",
                            "Which classes are stated as disjoint with Caprina?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo disjointWith Soho",
                        "CQ": [
                            "How are PrinceCarlo and Soho differentiated within the ontology?",
                            "Is there any instance that could simultaneously belong to both PrinceCarlo and Soho classes?",
                            "Which classes are specified as mutually exclusive with PrinceCarlo?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo disjointWith Parmense",
                        "CQ": [
                            "What is the formal disjointness asserted between PrinceCarlo and Parmense in the ontology?",
                            "Is there any instance that can belong to both PrinceCarlo and Parmense classes simultaneously?",
                            "Which classes are explicitly specified as being disjoint with PrinceCarlo?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo disjointWith PolloAdAstra",
                        "CQ": [
                            "What logical separation is established between PrinceCarlo and PolloAdAstra within the ontology?",
                            "Is any entity permitted to be an instance of both PrinceCarlo and PolloAdAstra simultaneously?",
                            "Which classes are asserted as disjoint with PrinceCarlo in the ontology?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo disjointWith Fiorentina",
                        "CQ": [
                            "What logical separation is specified between PrinceCarlo and Fiorentina in the ontology?",
                            "Can an instance belong to both PrinceCarlo and Fiorentina categories simultaneously?",
                            "Which classes are explicitly defined as incompatible with Fiorentina?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo disjointWith Rosa",
                        "CQ": [
                            "What logical separation is defined between PrinceCarlo and Rosa in the ontology?",
                            "Is there any individual or entity that can simultaneously belong to both PrinceCarlo and Rosa?",
                            "Which classes or entities are specified as disjoint with PrinceCarlo?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo disjointWith QuattroFormaggi",
                        "CQ": [
                            "What is the ontological distinction between PrinceCarlo and QuattroFormaggi?",
                            "Can a pizza instance belong to both PrinceCarlo and QuattroFormaggi classes?",
                            "Which classes are formally specified as disjoint with PrinceCarlo in the ontology?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo disjointWith Giardiniera",
                        "CQ": [
                            "Are PrinceCarlo and Giardiniera considered mutually exclusive pizza types within the ontology?",
                            "Is there any possibility for a pizza to be classified simultaneously as PrinceCarlo and Giardiniera?",
                            "Which pizza classes are specified as disjoint with Giardiniera?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo disjointWith FourSeasons",
                        "CQ": [
                            "How does the ontology distinguish between PrinceCarlo and FourSeasons as pizza types?",
                            "Is there any pizza that can be classified as both PrinceCarlo and FourSeasons?",
                            "Which pizza classes are explicitly set as disjoint with PrinceCarlo?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo propertyRestrictions [hasTopping some TomatoTopping]",
                        "CQ": [
                            "Is it required that every PrinceCarlo pizza includes at least one TomatoTopping as a topping?",
                            "Does a PrinceCarlo pizza always have the property 'hasTopping' with some instance of TomatoTopping?",
                            "Can a pizza classified as PrinceCarlo exist without having TomatoTopping as one of its toppings?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo propertyRestrictions [hasTopping only (LeekTopping or RosemaryTopping or MozzarellaTopping or TomatoTopping or ParmesanTopping)]",
                        "CQ": [
                            "Are all toppings on a PrinceCarlo pizza limited to Leek, Rosemary, Mozzarella, Tomato, or Parmesan?",
                            "Can a PrinceCarlo pizza include any topping type apart from Leek, Rosemary, Mozzarella, Tomato, or Parmesan?",
                            "Is it required that every topping present on a PrinceCarlo pizza belongs exclusively to the specified set of five toppings?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo propertyRestrictions [hasTopping some MozzarellaTopping]",
                        "CQ": [
                            "Is it required that every PrinceCarlo has at least one topping of type MozzarellaTopping?",
                            "Can a PrinceCarlo exist without being associated with the hasTopping property pointing to MozzarellaTopping?",
                            "Does the class PrinceCarlo necessarily have the property hasTopping with some instance of MozzarellaTopping?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo propertyRestrictions [hasTopping some ParmesanTopping]",
                        "CQ": [
                            "Is it required that every PrinceCarlo pizza has at least one topping of type ParmesanTopping?",
                            "Can a PrinceCarlo pizza exist without having any ParmesanTopping as one of its toppings?",
                            "Does the presence of ParmesanTopping fulfill the minimum topping requirement for a pizza classified as PrinceCarlo?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo propertyRestrictions [hasTopping some LeekTopping]",
                        "CQ": [
                            "Is it required for every PrinceCarlo to have at least one topping that is LeekTopping?",
                            "Must PrinceCarlo always be associated with a topping of the type LeekTopping?",
                            "Can a PrinceCarlo exist without having any LeekTopping as one of its toppings?"
                        ]
                    },
                    {
                        "axiom": "PrinceCarlo propertyRestrictions [hasTopping some RosemaryTopping]",
                        "CQ": [
                            "Is it required that a PrinceCarlo pizza has at least one topping that is RosemaryTopping?",
                            "Can PrinceCarlo exist if it does not have any RosemaryTopping as a topping?",
                            "Does the presence of RosemaryTopping as a topping necessarily apply to all instances of PrinceCarlo?"
                        ]
                    }
                ]
            },
            "QuattroFormaggi": {
                "axiom": {
                    "subClassOf": [
                        "NamedPizza"
                    ],
                    "disjointWith": [
                        "Mushroom",
                        "LaReine",
                        "Napoletana",
                        "Veneziana",
                        "AmericanHot",
                        "UnclosedPizza",
                        "PrinceCarlo",
                        "Capricciosa",
                        "FruttiDiMare",
                        "Siciliana",
                        "Cajun",
                        "Margherita",
                        "American",
                        "SloppyGiuseppe",
                        "Caprina",
                        "Soho",
                        "Parmense",
                        "PolloAdAstra",
                        "Fiorentina",
                        "Rosa",
                        "Giardiniera",
                        "FourSeasons"
                    ],
                    "propertyRestrictions": [
                        "[hasTopping some TomatoTopping]",
                        "[hasTopping some FourCheesesTopping]",
                        "[hasTopping only (FourCheesesTopping or TomatoTopping)]"
                    ]
                },
                "description": "QuattroFormaggi is defined as a subclass of NamedPizza and is explicitly disjoint with a range of other specific pizza classes, meaning an individual pizza cannot simultaneously belong to QuattroFormaggi and any of the listed disjoint classes. Members of this class must have at least one tomato topping and at least one four-cheeses topping. Additionally, QuattroFormaggi pizzas are restricted to having only tomato and four-cheeses toppings—no other topping types are permitted. This formalization guarantees that any pizza classified as QuattroFormaggi has a distinctive combination of tomato and four-cheeses toppings, consistent with its traditional recipe.",
                "CQ": [
                    {
                        "axiom": "QuattroFormaggi subClassOf NamedPizza",
                        "CQ": [
                            "Is QuattroFormaggi categorized under NamedPizza?",
                            "What types are classified as specializations of NamedPizza?",
                            "Which broader classes encompass QuattroFormaggi?"
                        ]
                    },
                    {
                        "axiom": "QuattroFormaggi disjointWith Mushroom",
                        "CQ": [
                            "How does the ontology represent the mutual exclusivity between QuattroFormaggi and Mushroom?",
                            "Is it permitted for an entity to be classified as both QuattroFormaggi and Mushroom simultaneously?",
                            "Which classes are asserted as disjoint with Mushroom in the ontology?"
                        ]
                    },
                    {
                        "axiom": "QuattroFormaggi disjointWith LaReine",
                        "CQ": [
                            "What is the ontological difference between QuattroFormaggi and LaReine?",
                            "Can an instance of pizza belong to both QuattroFormaggi and LaReine categories simultaneously?",
                            "Which pizza varieties are defined as disjoint with LaReine?"
                        ]
                    },
                    {
                        "axiom": "QuattroFormaggi disjointWith Napoletana",
                        "CQ": [
                            "Are QuattroFormaggi and Napoletana represented as mutually exclusive classes in the ontology?",
                            "Is any pizza instance allowed to belong to both QuattroFormaggi and Napoletana categories?",
                            "Which classes are explicitly defined as disjoint with QuattroFormaggi?"
                        ]
                    },
                    {
                        "axiom": "QuattroFormaggi disjointWith Veneziana",
                        "CQ": [
                            "How does the ontology separate QuattroFormaggi and Veneziana as distinct pizza types?",
                            "Is there any instance that can be classified as both QuattroFormaggi and Veneziana simultaneously?",
                            "Which pizza categories are explicitly incompatible with QuattroFormaggi according to the ontology?"
                        ]
                    },
                    {
                        "axiom": "QuattroFormaggi disjointWith AmericanHot",
                        "CQ": [
                            "What is the logical separation between QuattroFormaggi and AmericanHot in the ontology?",
                            "Can a pizza belong to both QuattroFormaggi and AmericanHot categories simultaneously?",
                            "Which classes are explicitly defined as incompatible with QuattroFormaggi?"
                        ]
                    },
                    {
                        "axiom": "QuattroFormaggi disjointWith UnclosedPizza",
                        "CQ": [
                            "How does the ontology distinguish QuattroFormaggi from UnclosedPizza?",
                            "Is there any pizza that can be classified as both QuattroFormaggi and UnclosedPizza?",
                            "Which pizza types are stated as disjoint with UnclosedPizza?"
                        ]
                    },
                    {
                        "axiom": "QuattroFormaggi disjointWith PrinceCarlo",
                        "CQ": [
                            "How does the ontology represent the exclusivity of QuattroFormaggi and PrinceCarlo?",
                            "Is there any instance that can simultaneously be classified as both QuattroFormaggi and PrinceCarlo?",
                            "Which classes are defined as disjoint with QuattroFormaggi in the current ontology?"
                        ]
                    },
                    {
                        "axiom": "QuattroFormaggi disjointWith Capricciosa",
                        "CQ": [
                            "What logical exclusivity is asserted between QuattroFormaggi and Capricciosa in the ontology?",
                            "Is it allowable for a pizza to be classified as both QuattroFormaggi and Capricciosa?",
                            "Which pizza types are explicitly disjoint with Capricciosa according to the ontology?"
                        ]
                    },
                    {
                        "axiom": "QuattroFormaggi disjointWith FruttiDiMare",
                        "CQ": [
                            "How does the ontology differentiate between QuattroFormaggi and FruttiDiMare pizzas?",
                            "Is there any overlap allowed between the classes QuattroFormaggi and FruttiDiMare?",
                            "What other pizza types are stated to be disjoint with FruttiDiMare in the ontology?"
                        ]
                    },
                    {
                        "axiom": "QuattroFormaggi disjointWith Siciliana",
                        "CQ": [
                            "What type of ontological separation is established between QuattroFormaggi and Siciliana?",
                            "Could an individual pizza instance belong to both QuattroFormaggi and Siciliana categories simultaneously?",
                            "Which classes are formally defined as disjoint with Siciliana within the ontology?"
                        ]
                    },
                    {
                        "axiom": "QuattroFormaggi disjointWith Cajun",
                        "CQ": [
                            "Is any pizza instance allowed to be classified as both QuattroFormaggi and Cajun?",
                            "What classes are stated to be incompatible with Cajun in the ontology?",
                            "Which explicit separation exists between QuattroFormaggi and Cajun according to the ontology?"
                        ]
                    },
                    {
                        "axiom": "QuattroFormaggi disjointWith Margherita",
                        "CQ": [
                            "What is the formal ontological separation between QuattroFormaggi and Margherita?",
                            "Can a single pizza instance belong to both the QuattroFormaggi and Margherita classes?",
                            "Which pizza types are specified as mutually exclusive with QuattroFormaggi?"
                        ]
                    },
                    {
                        "axiom": "QuattroFormaggi disjointWith American",
                        "CQ": [
                            "What formal separation is established between QuattroFormaggi and American in the ontology?",
                            "Is any entity allowed to belong to both QuattroFormaggi and American classes?",
                            "Which pizza types are defined as incompatible with American?"
                        ]
                    },
                    {
                        "axiom": "QuattroFormaggi disjointWith SloppyGiuseppe",
                        "CQ": [
                            "How does the ontology specify the connection or separation between QuattroFormaggi and SloppyGiuseppe?",
                            "Is there any entity that can be classified simultaneously as QuattroFormaggi and SloppyGiuseppe?",
                            "Which classes, besides SloppyGiuseppe, are stated to be incompatible with QuattroFormaggi?"
                        ]
                    },
                    {
                        "axiom": "QuattroFormaggi disjointWith Caprina",
                        "CQ": [
                            "How is the incompatibility between QuattroFormaggi and Caprina represented in the ontology?",
                            "Is there any possibility for a pizza to be classified as both QuattroFormaggi and Caprina?",
                            "Which pizza categories are formally defined as disjoint with Caprina?"
                        ]
                    },
                    {
                        "axiom": "QuattroFormaggi disjointWith Soho",
                        "CQ": [
                            "Are QuattroFormaggi and Soho represented as mutually exclusive pizza types in the ontology?",
                            "Is there any pizza that can belong to both QuattroFormaggi and Soho categories?",
                            "Which pizza classes are identified as disjoint with QuattroFormaggi?"
                        ]
                    },
                    {
                        "axiom": "QuattroFormaggi disjointWith Parmense",
                        "CQ": [
                            "What logical distinction is specified between QuattroFormaggi and Parmense within the ontology?",
                            "Is any pizza instance allowed to be classified as both QuattroFormaggi and Parmense?",
                            "Which classes are specified as disjoint with Parmense?"
                        ]
                    },
                    {
                        "axiom": "QuattroFormaggi disjointWith PolloAdAstra",
                        "CQ": [
                            "What ontological separation is defined between QuattroFormaggi and PolloAdAstra in the ontology?",
                            "Is it permissible for a pizza to belong to both QuattroFormaggi and PolloAdAstra categories?",
                            "Which classes are asserted as disjoint with QuattroFormaggi?"
                        ]
                    },
                    {
                        "axiom": "QuattroFormaggi disjointWith Fiorentina",
                        "CQ": [
                            "What is the logical difference between QuattroFormaggi and Fiorentina in the ontology?",
                            "Is there any circumstance where a pizza could be both QuattroFormaggi and Fiorentina?",
                            "Which classes are specified to be mutually exclusive with QuattroFormaggi?"
                        ]
                    },
                    {
                        "axiom": "QuattroFormaggi disjointWith Rosa",
                        "CQ": [
                            "What kind of ontological separation is defined between QuattroFormaggi and Rosa?",
                            "Is there any instance that can belong to both QuattroFormaggi and Rosa categories?",
                            "Which classes are specified as being mutually exclusive with QuattroFormaggi?"
                        ]
                    },
                    {
                        "axiom": "QuattroFormaggi disjointWith Giardiniera",
                        "CQ": [
                            "How does the ontology distinguish between QuattroFormaggi and Giardiniera?",
                            "Is there any entity that can simultaneously belong to both QuattroFormaggi and Giardiniera?",
                            "Which classes are specified as being disjoint with Giardiniera?"
                        ]
                    },
                    {
                        "axiom": "QuattroFormaggi disjointWith FourSeasons",
                        "CQ": [
                            "Can any pizza be classified as both QuattroFormaggi and FourSeasons?",
                            "What is the ontological separation between QuattroFormaggi and FourSeasons?",
                            "Which classes are specified as disjoint with QuattroFormaggi?"
                        ]
                    },
                    {
                        "axiom": "QuattroFormaggi propertyRestrictions [hasTopping some TomatoTopping]",
                        "CQ": [
                            "Is it necessary for a QuattroFormaggi pizza to have at least one TomatoTopping as a topping?",
                            "Can a pizza be classified as QuattroFormaggi if it does not include any TomatoTopping among its toppings?",
                            "Does the presence of TomatoTopping serve as a required condition for an item to be recognized as QuattroFormaggi?"
                        ]
                    },
                    {
                        "axiom": "QuattroFormaggi propertyRestrictions [hasTopping some FourCheesesTopping]",
                        "CQ": [
                            "Must every QuattroFormaggi have at least one topping of the FourCheesesTopping type?",
                            "Is it required that a QuattroFormaggi includes a topping categorized as FourCheesesTopping?",
                            "Can a QuattroFormaggi exist without any FourCheesesTopping among its toppings?"
                        ]
                    },
                    {
                        "axiom": "QuattroFormaggi propertyRestrictions [hasTopping only (FourCheesesTopping or TomatoTopping)]",
                        "CQ": [
                            "Is a QuattroFormaggi pizza permitted to have toppings other than FourCheesesTopping or TomatoTopping?",
                            "Does the restriction for QuattroFormaggi ensure that all its toppings must be either FourCheesesTopping or TomatoTopping?",
                            "Can a QuattroFormaggi pizza include any topping not specified as FourCheesesTopping or TomatoTopping under these restrictions?"
                        ]
                    }
                ]
            },
            "Rosa": {
                "axiom": {
                    "subClassOf": [
                        "NamedPizza"
                    ],
                    "disjointWith": [
                        "Mushroom",
                        "LaReine",
                        "Napoletana",
                        "Veneziana",
                        "AmericanHot",
                        "UnclosedPizza",
                        "PrinceCarlo",
                        "Capricciosa",
                        "FruttiDiMare",
                        "Siciliana",
                        "Cajun",
                        "Margherita",
                        "American",
                        "SloppyGiuseppe",
                        "Caprina",
                        "Soho",
                        "Parmense",
                        "PolloAdAstra",
                        "Fiorentina",
                        "QuattroFormaggi",
                        "Giardiniera",
                        "FourSeasons"
                    ],
                    "propertyRestrictions": [
                        "[hasTopping some TomatoTopping]",
                        "[hasTopping some GorgonzolaTopping]",
                        "[hasTopping only (MozzarellaTopping or TomatoTopping or GorgonzolaTopping)]",
                        "[hasTopping some MozzarellaTopping]"
                    ]
                },
                "description": "Rosa is defined as a subclass of NamedPizza, explicitly disjoint with a range of other specific pizza types (such as Mushroom, Margherita, AmericanHot, and others), ensuring an individual pizza cannot simultaneously belong to Rosa and any of those disjoint classes. Members of the Rosa class are characterized by their toppings: every Rosa pizza must have at least one TomatoTopping, one GorgonzolaTopping, and one MozzarellaTopping, and it may only contain these three toppings (no other toppings are permitted). This formalization strictly captures the unique identity and allowed ingredients of the Rosa pizza type.",
                "CQ": [
                    {
                        "axiom": "Rosa subClassOf NamedPizza",
                        "CQ": [
                            "Is Rosa classified as a type of NamedPizza?",
                            "Which pizza varieties are more specific instances under NamedPizza, including Rosa?",
                            "What are the higher-level categories that encompass Rosa?"
                        ]
                    },
                    {
                        "axiom": "Rosa disjointWith Mushroom",
                        "CQ": [
                            "What formal constraint prevents an instance from being both a Rosa and a Mushroom?",
                            "Is there any overlap in ontology classification between Rosa and Mushroom?",
                            "Which entities are asserted as mutually exclusive with Mushroom?"
                        ]
                    },
                    {
                        "axiom": "Rosa disjointWith LaReine",
                        "CQ": [
                            "What is the ontological separation between Rosa and LaReine?",
                            "Can a single entity be classified as both Rosa and LaReine in the ontology?",
                            "Which classes are formally specified as disjoint with LaReine?"
                        ]
                    },
                    {
                        "axiom": "Rosa disjointWith Napoletana",
                        "CQ": [
                            "What is the ontological separation between Rosa and Napoletana?",
                            "Can any entity simultaneously belong to both Rosa and Napoletana categories?",
                            "Which classes are declared as disjoint with Napoletana in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Rosa disjointWith Veneziana",
                        "CQ": [
                            "What differentiates Rosa from Veneziana as mutually exclusive pizza types in the ontology?",
                            "Is there any pizza that can be classified as both Rosa and Veneziana?",
                            "Which pizza classes are formally specified as disjoint with Veneziana?"
                        ]
                    },
                    {
                        "axiom": "Rosa disjointWith AmericanHot",
                        "CQ": [
                            "How is the concept of Rosa differentiated from AmericanHot in the ontology?",
                            "Is it feasible for a pizza to belong to both Rosa and AmericanHot categories simultaneously?",
                            "Which classes are defined as disjoint with Rosa?"
                        ]
                    },
                    {
                        "axiom": "Rosa disjointWith UnclosedPizza",
                        "CQ": [
                            "What ontological separation is specified between Rosa and UnclosedPizza?",
                            "Is any individual allowed to belong to both Rosa and UnclosedPizza classes simultaneously?",
                            "Which classes are formally asserted as mutually exclusive with Rosa?"
                        ]
                    },
                    {
                        "axiom": "Rosa disjointWith PrinceCarlo",
                        "CQ": [
                            "What logical separation is asserted between Rosa and PrinceCarlo in the ontology?",
                            "Is there any individual that can belong to both Rosa and PrinceCarlo?",
                            "Which classes are declared as disjoint with PrinceCarlo?"
                        ]
                    },
                    {
                        "axiom": "Rosa disjointWith Capricciosa",
                        "CQ": [
                            "How does the ontology represent the incompatibility between Rosa and Capricciosa?",
                            "Is there any instance that can be classified as both Rosa and Capricciosa?",
                            "Which classes are axiomatized as disjoint with Capricciosa?"
                        ]
                    },
                    {
                        "axiom": "Rosa disjointWith FruttiDiMare",
                        "CQ": [
                            "What formal separation exists between Rosa and FruttiDiMare within the ontology?",
                            "Is it permissible for an entity to be classified as both Rosa and FruttiDiMare?",
                            "Which classes are explicitly specified as disjoint with Rosa?"
                        ]
                    },
                    {
                        "axiom": "Rosa disjointWith Siciliana",
                        "CQ": [
                            "How does the ontology specify the incompatibility between Rosa and Siciliana?",
                            "Is there any instance that can belong to both Rosa and Siciliana categories?",
                            "Which classes are defined as mutually exclusive with Siciliana?"
                        ]
                    },
                    {
                        "axiom": "Rosa disjointWith Cajun",
                        "CQ": [
                            "What explicit separation exists between the classes Rosa and Cajun within the ontology?",
                            "Is there an instance that could simultaneously belong to both Rosa and Cajun categories?",
                            "Which ontology classes are formally specified as disjoint with Rosa?"
                        ]
                    },
                    {
                        "axiom": "Rosa disjointWith Margherita",
                        "CQ": [
                            "What logical separation is defined between Rosa and Margherita in the ontology?",
                            "Is any entity allowed to be classified as both Rosa and Margherita simultaneously?",
                            "Which classes are stated to be mutually incompatible with Margherita?"
                        ]
                    },
                    {
                        "axiom": "Rosa disjointWith American",
                        "CQ": [
                            "How does the ontology distinguish between Rosa and American categories?",
                            "Can an entity belong simultaneously to both Rosa and American classes?",
                            "Which classes are specified as disjoint with American?"
                        ]
                    },
                    {
                        "axiom": "Rosa disjointWith SloppyGiuseppe",
                        "CQ": [
                            "Are Rosa and SloppyGiuseppe defined as mutually exclusive pizza types in the ontology?",
                            "Is there any pizza that can belong to both Rosa and SloppyGiuseppe categories?",
                            "Which pizza classes are declared to be incompatible with SloppyGiuseppe?"
                        ]
                    },
                    {
                        "axiom": "Rosa disjointWith Caprina",
                        "CQ": [
                            "What is the ontological distinction between Rosa and Caprina?",
                            "Can an entity simultaneously belong to both Rosa and Caprina classes?",
                            "Which classes are specified as disjoint with Rosa in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Rosa disjointWith Soho",
                        "CQ": [
                            "How does the ontology specify the separation between Rosa and Soho?",
                            "Is there any instance that can be classified under both Rosa and Soho?",
                            "Which classes are formally stated as disjoint with Rosa?"
                        ]
                    },
                    {
                        "axiom": "Rosa disjointWith Parmense",
                        "CQ": [
                            "What ontological separation is specified between Rosa and Parmense?",
                            "Is there an instance that can simultaneously belong to both Rosa and Parmense categories?",
                            "Which classes within the ontology are explicitly stated as mutually exclusive with Parmense?"
                        ]
                    },
                    {
                        "axiom": "Rosa disjointWith PolloAdAstra",
                        "CQ": [
                            "What kind of logical separation exists between Rosa and PolloAdAstra within the ontology?",
                            "Is there any entity that can simultaneously be classified as both Rosa and PolloAdAstra?",
                            "Which classes are identified as disjoint with PolloAdAstra?"
                        ]
                    },
                    {
                        "axiom": "Rosa disjointWith Fiorentina",
                        "CQ": [
                            "What is the formal ontological relation between Rosa and Fiorentina?",
                            "Can an instance be both classified as Rosa and Fiorentina simultaneously?",
                            "Which classes are stated to be disjoint with Fiorentina in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Rosa disjointWith QuattroFormaggi",
                        "CQ": [
                            "What is the logical separation between Rosa and QuattroFormaggi within the ontology?",
                            "Is there any instance that can belong to both Rosa and QuattroFormaggi classes?",
                            "Which classes are specified as disjoint with Rosa?"
                        ]
                    },
                    {
                        "axiom": "Rosa disjointWith Giardiniera",
                        "CQ": [
                            "How does the ontology formally distinguish between Rosa and Giardiniera?",
                            "Is there any instance that can simultaneously belong to both Rosa and Giardiniera classes?",
                            "Which classes within the ontology are explicitly incompatible with Giardiniera?"
                        ]
                    },
                    {
                        "axiom": "Rosa disjointWith FourSeasons",
                        "CQ": [
                            "How are the classes Rosa and FourSeasons differentiated in the ontology?",
                            "Is it permitted for an individual to belong to both Rosa and FourSeasons classes?",
                            "What other classes are declared as disjoint with Rosa?"
                        ]
                    },
                    {
                        "axiom": "Rosa propertyRestrictions [hasTopping some TomatoTopping]",
                        "CQ": [
                            "Is it required for Rosa to have at least one topping that is a TomatoTopping?",
                            "Can Rosa exist without having any TomatoTopping as a topping?",
                            "Does the definition of Rosa stipulate that TomatoTopping must be present among its toppings?"
                        ]
                    },
                    {
                        "axiom": "Rosa propertyRestrictions [hasTopping some GorgonzolaTopping]",
                        "CQ": [
                            "Must every Rosa pizza have at least one topping that is Gorgonzola?",
                            "Is inclusion of Gorgonzola as a topping a necessary requirement for a pizza to be considered a Rosa?",
                            "Can a pizza be classified as Rosa if it does not have any Gorgonzola topping?"
                        ]
                    },
                    {
                        "axiom": "Rosa propertyRestrictions [hasTopping only (MozzarellaTopping or TomatoTopping or GorgonzolaTopping)]",
                        "CQ": [
                            "Are all toppings on a Rosa pizza limited exclusively to Mozzarella, Tomato, or Gorgonzola toppings?",
                            "Is it prohibited for a Rosa pizza to have any topping other than Mozzarella, Tomato, or Gorgonzola?",
                            "Must every topping found on a Rosa pizza always belong to the set consisting solely of Mozzarella, Tomato, or Gorgonzola toppings?"
                        ]
                    },
                    {
                        "axiom": "Rosa propertyRestrictions [hasTopping some MozzarellaTopping]",
                        "CQ": [
                            "Is it required that a Rosa pizza has at least one topping of Mozzarella?",
                            "Can a pizza be considered Rosa if it does not have any MozzarellaTopping?",
                            "Does every Rosa pizza necessarily include MozzarellaTopping among its toppings?"
                        ]
                    }
                ]
            },
            "Siciliana": {
                "axiom": {
                    "subClassOf": [
                        "NamedPizza"
                    ],
                    "disjointWith": [
                        "Mushroom",
                        "LaReine",
                        "Napoletana",
                        "Veneziana",
                        "AmericanHot",
                        "UnclosedPizza",
                        "PrinceCarlo",
                        "Capricciosa",
                        "FruttiDiMare",
                        "Cajun",
                        "Margherita",
                        "American",
                        "SloppyGiuseppe",
                        "Caprina",
                        "Soho",
                        "Parmense",
                        "PolloAdAstra",
                        "Fiorentina",
                        "Rosa",
                        "QuattroFormaggi",
                        "Giardiniera",
                        "FourSeasons"
                    ],
                    "propertyRestrictions": [
                        "[hasTopping some TomatoTopping]",
                        "[hasTopping some GarlicTopping]",
                        "[hasTopping some HamTopping]",
                        "[hasTopping some ArtichokeTopping]",
                        "[hasTopping some OliveTopping]",
                        "[hasTopping some MozzarellaTopping]",
                        "[hasTopping some AnchoviesTopping]",
                        "[hasTopping only (AnchoviesTopping or MozzarellaTopping or GarlicTopping or ArtichokeTopping or TomatoTopping or HamTopping or OliveTopping)]"
                    ]
                },
                "description": "Siciliana is a subclass of NamedPizza, explicitly disjoint from numerous other specific pizza types, ensuring that no individual pizza can be simultaneously classified as Siciliana and any of the listed varieties (e.g., Mushroom, Margherita, FourSeasons, etc.). Siciliana pizzas are characterized by their toppings: they must include some tomato topping, garlic topping, ham topping, artichoke topping, olive topping, mozzarella topping, and anchovies topping. Furthermore, these pizzas are restricted to only have toppings from the following: anchovies, mozzarella, garlic, artichoke, tomato, ham, and olive—no additional toppings are permitted. This formalization precisely defines the Siciliana pizza in terms of both its composition and differentiation from other pizzas.",
                "CQ": [
                    {
                        "axiom": "Siciliana subClassOf NamedPizza",
                        "CQ": [
                            "Does Siciliana fall under the broader classification of NamedPizza?",
                            "Which pizza types are designated as subclasses of NamedPizza, and does this include Siciliana?",
                            "What overarching groupings encompass Siciliana within the ontology?"
                        ]
                    },
                    {
                        "axiom": "Siciliana disjointWith Mushroom",
                        "CQ": [
                            "What is the formal ontological separation between Siciliana and Mushroom classes?",
                            "Can an instance belong to both Siciliana and Mushroom categories simultaneously?",
                            "Which classes are stated to be mutually exclusive with Siciliana in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Siciliana disjointWith LaReine",
                        "CQ": [
                            "How does the ontology formally distinguish between Siciliana and LaReine pizza types?",
                            "Is there any circumstance where an individual can be classified as both Siciliana and LaReine?",
                            "Which pizza varieties are specified as mutually exclusive with LaReine?"
                        ]
                    },
                    {
                        "axiom": "Siciliana disjointWith Napoletana",
                        "CQ": [
                            "What is the ontological difference between Siciliana and Napoletana pizzas?",
                            "Is any pizza instance allowed to be classified as both Siciliana and Napoletana?",
                            "Which pizza types are formally declared as incompatible with Siciliana?"
                        ]
                    },
                    {
                        "axiom": "Siciliana disjointWith Veneziana",
                        "CQ": [
                            "What ontological separation is established between Siciliana and Veneziana?",
                            "Is there any individual that can belong to both Siciliana and Veneziana simultaneously?",
                            "Which classes are declared disjoint with Veneziana in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Siciliana disjointWith AmericanHot",
                        "CQ": [
                            "What logical separation is specified between Siciliana and AmericanHot in the ontology?",
                            "Is there any instance that can be classified as both Siciliana and AmericanHot?",
                            "Which pizza types are formally set as disjoint with Siciliana?"
                        ]
                    },
                    {
                        "axiom": "Siciliana disjointWith UnclosedPizza",
                        "CQ": [
                            "What logical constraint separates Siciliana from UnclosedPizza within the ontology?",
                            "Is it allowed for a pizza to be classified as both Siciliana and UnclosedPizza?",
                            "Which classes are explicitly stated as disjoint with UnclosedPizza?"
                        ]
                    },
                    {
                        "axiom": "Siciliana disjointWith PrinceCarlo",
                        "CQ": [
                            "What ontological separation exists between Siciliana and PrinceCarlo?",
                            "Is there any instance that can be classified as both Siciliana and PrinceCarlo?",
                            "Which classes are specified as disjoint with PrinceCarlo in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Siciliana disjointWith Capricciosa",
                        "CQ": [
                            "What ontological relation excludes overlap between Siciliana and Capricciosa?",
                            "Is there any pizza that can simultaneously be classified as Siciliana and Capricciosa?",
                            "Which pizza types are defined as mutually exclusive with Capricciosa in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Siciliana disjointWith FruttiDiMare",
                        "CQ": [
                            "What ontological separation is asserted between Siciliana and FruttiDiMare pizzas?",
                            "Is it permitted for a pizza to be classified as both Siciliana and FruttiDiMare?",
                            "Which classes are specified as disjoint with FruttiDiMare?"
                        ]
                    },
                    {
                        "axiom": "Siciliana disjointWith Cajun",
                        "CQ": [
                            "What logical separation is defined between Siciliana and Cajun within the ontology?",
                            "Is any instance allowed to belong to both Siciliana and Cajun classes simultaneously?",
                            "Which classes are declared as being disjoint with Siciliana?"
                        ]
                    },
                    {
                        "axiom": "Siciliana disjointWith Margherita",
                        "CQ": [
                            "How does the ontology define the separation between Siciliana and Margherita pizza types?",
                            "Can a single pizza instance be classified as both Siciliana and Margherita?",
                            "Which classes are explicitly stated as disjoint with Margherita in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Siciliana disjointWith American",
                        "CQ": [
                            "What formal constraint exists between the classes Siciliana and American in the ontology?",
                            "Is there any individual that can belong to both Siciliana and American simultaneously?",
                            "Which classes are specified as being disjoint with Siciliana?"
                        ]
                    },
                    {
                        "axiom": "Siciliana disjointWith SloppyGiuseppe",
                        "CQ": [
                            "What distinguishes Siciliana from SloppyGiuseppe according to their class disjointness?",
                            "Can any pizza belong to both Siciliana and SloppyGiuseppe categories simultaneously?",
                            "Which classes are specified as disjoint with Siciliana in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Siciliana disjointWith Caprina",
                        "CQ": [
                            "How does the ontology define the distinction between Siciliana and Caprina?",
                            "Is any individual pizza instance allowed to be classified as both Siciliana and Caprina?",
                            "What other pizza types, if any, are formally disjoint with Caprina?"
                        ]
                    },
                    {
                        "axiom": "Siciliana disjointWith Soho",
                        "CQ": [
                            "What formal differentiation is specified between Siciliana and Soho in the ontology?",
                            "Is it permitted for a pizza to be classified as both Siciliana and Soho simultaneously?",
                            "Which pizza types are explicitly specified as being mutually exclusive with Siciliana?"
                        ]
                    },
                    {
                        "axiom": "Siciliana disjointWith Parmense",
                        "CQ": [
                            "How is Siciliana characterized in relation to Parmense within the ontology?",
                            "Is there any entity that can be classified as both Siciliana and Parmense?",
                            "Which classes are explicitly defined as mutually exclusive with Parmense?"
                        ]
                    },
                    {
                        "axiom": "Siciliana disjointWith PolloAdAstra",
                        "CQ": [
                            "What ontological separation exists between Siciliana and PolloAdAstra?",
                            "Is any pizza instance allowed to be classified as both Siciliana and PolloAdAstra?",
                            "Which other pizza categories are specified as disjoint with Siciliana?"
                        ]
                    },
                    {
                        "axiom": "Siciliana disjointWith Fiorentina",
                        "CQ": [
                            "What ontological separation is defined between Siciliana and Fiorentina?",
                            "Is a pizza permitted to be classified as both Siciliana and Fiorentina simultaneously?",
                            "Which classes are specified as disjoint with Siciliana in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Siciliana disjointWith Rosa",
                        "CQ": [
                            "What is the ontological separation between Siciliana and Rosa?",
                            "Is it permitted for an individual to be classified as both Siciliana and Rosa?",
                            "Which classes are defined as mutually exclusive with Rosa?"
                        ]
                    },
                    {
                        "axiom": "Siciliana disjointWith QuattroFormaggi",
                        "CQ": [
                            "What logical separation is established between Siciliana and QuattroFormaggi according to the ontology?",
                            "Is it allowed for a pizza to be simultaneously classified as Siciliana and QuattroFormaggi?",
                            "Which other pizza classes are defined as being mutually exclusive with QuattroFormaggi?"
                        ]
                    },
                    {
                        "axiom": "Siciliana disjointWith Giardiniera",
                        "CQ": [
                            "How are Siciliana and Giardiniera differentiated within the ontology?",
                            "Is there any instance that can simultaneously belong to both Siciliana and Giardiniera classes?",
                            "Which classes are specified as mutually exclusive with Giardiniera?"
                        ]
                    },
                    {
                        "axiom": "Siciliana disjointWith FourSeasons",
                        "CQ": [
                            "What logical separation is defined between Siciliana and FourSeasons within the ontology?",
                            "Is it allowable for a pizza to be classified simultaneously as Siciliana and FourSeasons?",
                            "Which pizza types are asserted to be incompatible with Siciliana?"
                        ]
                    },
                    {
                        "axiom": "Siciliana propertyRestrictions [hasTopping some TomatoTopping]",
                        "CQ": [
                            "Is it necessary for a Siciliana to have at least one topping that is a TomatoTopping?",
                            "Does every instance of Siciliana include some TomatoTopping as a topping?",
                            "Can Siciliana be classified without specifying the presence of TomatoTopping among its toppings?"
                        ]
                    },
                    {
                        "axiom": "Siciliana propertyRestrictions [hasTopping some GarlicTopping]",
                        "CQ": [
                            "Is it required for a Siciliana pizza to have at least one topping of garlic?",
                            "Can a pizza be classified as Siciliana if it lacks any garlic topping?",
                            "Does every instance of Siciliana include garlic among its toppings?"
                        ]
                    },
                    {
                        "axiom": "Siciliana propertyRestrictions [hasTopping some HamTopping]",
                        "CQ": [
                            "Is it required for Siciliana to have at least one topping that is HamTopping?",
                            "Can a Siciliana exist without including HamTopping as one of its toppings?",
                            "Does every Siciliana necessarily possess the hasTopping relation to a HamTopping?"
                        ]
                    },
                    {
                        "axiom": "Siciliana propertyRestrictions [hasTopping some ArtichokeTopping]",
                        "CQ": [
                            "Is it required for a Siciliana pizza to include at least one ArtichokeTopping as a topping?",
                            "Does every Siciliana pizza have the hasTopping property relating it to some ArtichokeTopping?",
                            "Can a pizza be classified as Siciliana if it does not have any ArtichokeTopping?"
                        ]
                    },
                    {
                        "axiom": "Siciliana propertyRestrictions [hasTopping some OliveTopping]",
                        "CQ": [
                            "Is it required for a Siciliana to include at least one OliveTopping as a topping?",
                            "Can a Siciliana exist without having OliveTopping among its toppings?",
                            "Does the presence of OliveTopping as a topping suffice for a dish to be classified as Siciliana?"
                        ]
                    },
                    {
                        "axiom": "Siciliana propertyRestrictions [hasTopping some MozzarellaTopping]",
                        "CQ": [
                            "Is it required for Siciliana to have at least one MozzarellaTopping as its topping?",
                            "Can a Siciliana exist without having the hasTopping relation to any MozzarellaTopping?",
                            "Does every Siciliana necessarily possess the hasTopping property linked to some instance of MozzarellaTopping?"
                        ]
                    },
                    {
                        "axiom": "Siciliana propertyRestrictions [hasTopping some AnchoviesTopping]",
                        "CQ": [
                            "Is it required for a Siciliana pizza to include at least one anchovies topping?",
                            "Can a Siciliana pizza exist without having the hasTopping property set to AnchoviesTopping?",
                            "Does every instance of Siciliana necessarily have the hasTopping relationship with AnchoviesTopping?"
                        ]
                    },
                    {
                        "axiom": "Siciliana propertyRestrictions [hasTopping only (AnchoviesTopping or MozzarellaTopping or GarlicTopping or ArtichokeTopping or TomatoTopping or HamTopping or OliveTopping)]",
                        "CQ": [
                            "Are Siciliana pizzas restricted to having only Anchovies, Mozzarella, Garlic, Artichoke, Tomato, Ham, or Olive as toppings?",
                            "Could a pizza still be classified as Siciliana if it includes a topping not listed among Anchovies, Mozzarella, Garlic, Artichoke, Tomato, Ham, or Olive?",
                            "Does the definition of Siciliana exclude all toppings other than Anchovies, Mozzarella, Garlic, Artichoke, Tomato, Ham, and Olive from being present on the pizza?"
                        ]
                    }
                ]
            },
            "SloppyGiuseppe": {
                "axiom": {
                    "subClassOf": [
                        "NamedPizza"
                    ],
                    "disjointWith": [
                        "Mushroom",
                        "LaReine",
                        "Napoletana",
                        "Veneziana",
                        "AmericanHot",
                        "UnclosedPizza",
                        "PrinceCarlo",
                        "Capricciosa",
                        "FruttiDiMare",
                        "Siciliana",
                        "Cajun",
                        "Margherita",
                        "American",
                        "Caprina",
                        "Soho",
                        "Parmense",
                        "PolloAdAstra",
                        "Fiorentina",
                        "Rosa",
                        "QuattroFormaggi",
                        "Giardiniera",
                        "FourSeasons"
                    ],
                    "propertyRestrictions": [
                        "[hasTopping some HotSpicedBeefTopping]",
                        "[hasTopping some TomatoTopping]",
                        "[hasTopping some GreenPepperTopping]",
                        "[hasTopping some MozzarellaTopping]",
                        "[hasTopping some OnionTopping]",
                        "[hasTopping only (HotSpicedBeefTopping or MozzarellaTopping or TomatoTopping or OnionTopping or GreenPepperTopping)]"
                    ]
                },
                "description": "SloppyGiuseppe is defined as a subclass of NamedPizza, and is explicitly disjoint with a set of other specific pizza types, ensuring that any instance cannot simultaneously belong to these other pizza classes. It is characterized by the presence of HotSpicedBeefTopping, TomatoTopping, GreenPepperTopping, MozzarellaTopping, and OnionTopping as mandatory ingredients. Furthermore, it is restricted to only these toppings: no other topping types are permitted on a SloppyGiuseppe. This formalization ensures the class captures a distinct and exclusive pizza variety, consistently reflecting its specific ingredient profile.",
                "CQ": [
                    {
                        "axiom": "SloppyGiuseppe subClassOf NamedPizza",
                        "CQ": [
                            "Is SloppyGiuseppe categorized under NamedPizza?",
                            "Which pizza types are classified as subclasses of NamedPizza?",
                            "What broader categories does SloppyGiuseppe belong to?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe disjointWith Mushroom",
                        "CQ": [
                            "How are SloppyGiuseppe and Mushroom represented in terms of disjointness within the ontology?",
                            "Can an entity be classified as both SloppyGiuseppe and Mushroom?",
                            "Which classes are specified as disjoint from SloppyGiuseppe?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe disjointWith LaReine",
                        "CQ": [
                            "What ontological separation is asserted between SloppyGiuseppe and LaReine?",
                            "Is any instance permitted to belong to both SloppyGiuseppe and LaReine categories simultaneously?",
                            "Which pizza types are formally marked as disjoint with SloppyGiuseppe in the ontology?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe disjointWith Napoletana",
                        "CQ": [
                            "How does the ontology specify the connection between SloppyGiuseppe and Napoletana?",
                            "Can any individual pizza be classified as both SloppyGiuseppe and Napoletana?",
                            "Which classes are stated to be mutually exclusive with Napoletana?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe disjointWith Veneziana",
                        "CQ": [
                            "Are SloppyGiuseppe and Veneziana mutually exclusive pizza types in the ontology?",
                            "Is any pizza instance permitted to belong to both the SloppyGiuseppe and Veneziana classes?",
                            "Which classes are specified as disjoint with SloppyGiuseppe?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe disjointWith AmericanHot",
                        "CQ": [
                            "How does the ontology represent the exclusivity between SloppyGiuseppe and AmericanHot?",
                            "Is there any scenario where a pizza can be classified as both SloppyGiuseppe and AmericanHot?",
                            "Which pizza varieties are specified as mutually exclusive with AmericanHot?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe disjointWith UnclosedPizza",
                        "CQ": [
                            "How does the ontology specify the incompatibility between SloppyGiuseppe and UnclosedPizza?",
                            "Is there any instance that can be classified as both SloppyGiuseppe and UnclosedPizza within the ontology?",
                            "Which pizza types are stated as mutually exclusive with UnclosedPizza?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe disjointWith PrinceCarlo",
                        "CQ": [
                            "What is the ontological distinction between SloppyGiuseppe and PrinceCarlo?",
                            "Is there any instance that can be classified as both SloppyGiuseppe and PrinceCarlo?",
                            "Which classes are specified as mutually exclusive with PrinceCarlo?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe disjointWith Capricciosa",
                        "CQ": [
                            "What formal separation is established between SloppyGiuseppe and Capricciosa in the ontology?",
                            "Is there any instance that can simultaneously be both SloppyGiuseppe and Capricciosa?",
                            "Which classes are defined as mutually exclusive with Capricciosa?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe disjointWith FruttiDiMare",
                        "CQ": [
                            "What is the nature of the disjointness specified between SloppyGiuseppe and FruttiDiMare in the ontology?",
                            "Is an individual pizza allowed to be classified as both SloppyGiuseppe and FruttiDiMare?",
                            "Which classes are asserted to be disjoint with FruttiDiMare?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe disjointWith Siciliana",
                        "CQ": [
                            "How does the ontology represent the separation between SloppyGiuseppe and Siciliana?",
                            "Is there any instance that can be classified simultaneously as SloppyGiuseppe and Siciliana?",
                            "Which pizza types are formally specified as incompatible with SloppyGiuseppe?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe disjointWith Cajun",
                        "CQ": [
                            "How are SloppyGiuseppe and Cajun related within the ontology?",
                            "Is any pizza instance allowed to be classified as both SloppyGiuseppe and Cajun?",
                            "Which classes are specified as disjoint with SloppyGiuseppe?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe disjointWith Margherita",
                        "CQ": [
                            "What formal separation is described between SloppyGiuseppe and Margherita in the ontology?",
                            "Is there any instance that can simultaneously belong to both SloppyGiuseppe and Margherita classes?",
                            "Which other pizza types, apart from Margherita, are specified as non-overlapping with SloppyGiuseppe?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe disjointWith American",
                        "CQ": [
                            "What kind of logical separation is defined between SloppyGiuseppe and American in the ontology?",
                            "Does any instance belong to both the SloppyGiuseppe and American pizza categories?",
                            "Which pizza types are specified as mutually exclusive with American?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe disjointWith Caprina",
                        "CQ": [
                            "Are SloppyGiuseppe and Caprina defined as mutually exclusive classes in the ontology?",
                            "Can a single pizza instance be classified as both SloppyGiuseppe and Caprina?",
                            "What classes are formally incompatible with Caprina according to the ontology?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe disjointWith Soho",
                        "CQ": [
                            "What is the ontological distinction specified between SloppyGiuseppe and Soho?",
                            "Is there any instance that can belong to both the SloppyGiuseppe and Soho categories?",
                            "Which classes are formally declared as disjoint with Soho?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe disjointWith Parmense",
                        "CQ": [
                            "What is the logical separation between SloppyGiuseppe and Parmense in the ontology?",
                            "Can any pizza instance belong to both the SloppyGiuseppe and Parmense categories?",
                            "Which classes are specified as mutually exclusive with Parmense?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe disjointWith PolloAdAstra",
                        "CQ": [
                            "How are SloppyGiuseppe and PolloAdAstra conceptually separated in the ontology?",
                            "Is any pizza instance allowed to be classified simultaneously as SloppyGiuseppe and PolloAdAstra?",
                            "Which pizza types are formally specified as being incompatible with PolloAdAstra?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe disjointWith Fiorentina",
                        "CQ": [
                            "What logical separation is established between SloppyGiuseppe and Fiorentina in the ontology?",
                            "Is it allowed for a pizza to be classified as both SloppyGiuseppe and Fiorentina simultaneously?",
                            "Which classes are specified as mutually exclusive with SloppyGiuseppe?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe disjointWith Rosa",
                        "CQ": [
                            "What formal separation exists between SloppyGiuseppe and Rosa in the ontology?",
                            "Can an individual pizza be classified as both SloppyGiuseppe and Rosa?",
                            "Which classes are declared as incompatible with Rosa?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe disjointWith QuattroFormaggi",
                        "CQ": [
                            "What is the ontological difference between SloppyGiuseppe and QuattroFormaggi?",
                            "Could an individual pizza instance ever be classified as both SloppyGiuseppe and QuattroFormaggi?",
                            "Which pizza types are formally specified as disjoint with SloppyGiuseppe in the ontology?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe disjointWith Giardiniera",
                        "CQ": [
                            "What logical separation is defined between SloppyGiuseppe and Giardiniera within the ontology?",
                            "Is it permissible for an individual pizza to belong to both SloppyGiuseppe and Giardiniera classes?",
                            "Which classes are specified as mutually exclusive with Giardiniera?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe disjointWith FourSeasons",
                        "CQ": [
                            "What formal separation is defined between SloppyGiuseppe and FourSeasons in the ontology?",
                            "Is it allowable for an instance to be classified both as SloppyGiuseppe and as FourSeasons?",
                            "Which pizza types are explicitly specified as mutually exclusive with FourSeasons?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe propertyRestrictions [hasTopping some HotSpicedBeefTopping]",
                        "CQ": [
                            "Is it required for SloppyGiuseppe to have at least one topping that is a HotSpicedBeefTopping?",
                            "Must every SloppyGiuseppe include the property hasTopping relating it to some HotSpicedBeefTopping?",
                            "Can a SloppyGiuseppe exist without having hasTopping linked to a HotSpicedBeefTopping?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe propertyRestrictions [hasTopping some TomatoTopping]",
                        "CQ": [
                            "Is it required for a SloppyGiuseppe pizza to have at least one TomatoTopping as a topping?",
                            "Can a SloppyGiuseppe exist without having the hasTopping property with TomatoTopping?",
                            "Does every instance of SloppyGiuseppe include some topping that is a TomatoTopping?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe propertyRestrictions [hasTopping some GreenPepperTopping]",
                        "CQ": [
                            "Is it required for a SloppyGiuseppe to have at least one topping that is GreenPepperTopping?",
                            "Can a pizza be classified as SloppyGiuseppe if it does not include any GreenPepperTopping as a topping?",
                            "Does the presence of GreenPepperTopping as a topping suffice for a pizza to satisfy the SloppyGiuseppe restriction?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe propertyRestrictions [hasTopping some MozzarellaTopping]",
                        "CQ": [
                            "Is MozzarellaTopping a required topping for any pizza classified as SloppyGiuseppe?",
                            "Does every SloppyGiuseppe pizza include at least one instance of MozzarellaTopping as a topping?",
                            "Can a pizza be considered a SloppyGiuseppe without having MozzarellaTopping among its toppings?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe propertyRestrictions [hasTopping some OnionTopping]",
                        "CQ": [
                            "Is it required for a SloppyGiuseppe to include at least one OnionTopping as a topping?",
                            "Can a SloppyGiuseppe exist without having any OnionTopping among its toppings?",
                            "Does SloppyGiuseppe necessarily have the hasTopping relation to at least one instance of OnionTopping?"
                        ]
                    },
                    {
                        "axiom": "SloppyGiuseppe propertyRestrictions [hasTopping only (HotSpicedBeefTopping or MozzarellaTopping or TomatoTopping or OnionTopping or GreenPepperTopping)]",
                        "CQ": [
                            "Are SloppyGiuseppe pizzas only allowed to have HotSpicedBeef, Mozzarella, Tomato, Onion, or GreenPepper as toppings?",
                            "Does being classified as a SloppyGiuseppe require that all toppings be limited to just the specified five types?",
                            "Can a pizza with any topping outside the HotSpicedBeef, Mozzarella, Tomato, Onion, or GreenPepper categories still be considered a SloppyGiuseppe?"
                        ]
                    }
                ]
            },
            "Soho": {
                "axiom": {
                    "subClassOf": [
                        "NamedPizza"
                    ],
                    "disjointWith": [
                        "Mushroom",
                        "LaReine",
                        "Napoletana",
                        "Veneziana",
                        "AmericanHot",
                        "UnclosedPizza",
                        "PrinceCarlo",
                        "Capricciosa",
                        "FruttiDiMare",
                        "Siciliana",
                        "Cajun",
                        "Margherita",
                        "American",
                        "SloppyGiuseppe",
                        "Caprina",
                        "Parmense",
                        "PolloAdAstra",
                        "Fiorentina",
                        "Rosa",
                        "QuattroFormaggi",
                        "Giardiniera",
                        "FourSeasons"
                    ],
                    "propertyRestrictions": [
                        "[hasTopping some TomatoTopping]",
                        "[hasTopping only (MozzarellaTopping or GarlicTopping or TomatoTopping or RocketTopping or OliveTopping or ParmesanTopping)]",
                        "[hasTopping some GarlicTopping]",
                        "[hasTopping some OliveTopping]",
                        "[hasTopping some MozzarellaTopping]",
                        "[hasTopping some ParmesanTopping]",
                        "[hasTopping some RocketTopping]"
                    ]
                },
                "description": "Soho is defined as a subclass of NamedPizza and is explicitly disjoint with a range of other specific pizza types, ensuring that no instance can simultaneously belong to both Soho and these other classes. Members of the Soho class are characterized by their required toppings: each Soho pizza must include tomato, garlic, olive, mozzarella, parmesan, and rocket toppings. Additionally, the only permitted toppings for Soho pizzas are mozzarella, garlic, tomato, rocket, olive, or parmesan, meaning no other toppings are allowed on this type of pizza. This formalization strictly specifies both the mandatory inclusion and the exclusivity of particular toppings for Soho pizzas.",
                "CQ": [
                    {
                        "axiom": "Soho subClassOf NamedPizza",
                        "CQ": [
                            "Is Soho classified under the broader category of NamedPizza?",
                            "Which specific pizzas are categorized as subclasses of NamedPizza, including Soho?",
                            "What are the higher-level pizza categories that encompass Soho?"
                        ]
                    },
                    {
                        "axiom": "Soho disjointWith Mushroom",
                        "CQ": [
                            "What logical distinction separates Soho and Mushroom within the ontology?",
                            "Is it permitted for an entity to be both Soho and Mushroom simultaneously?",
                            "Which classes are defined as incompatible with Mushroom?"
                        ]
                    },
                    {
                        "axiom": "Soho disjointWith LaReine",
                        "CQ": [
                            "What is the logical relationship established between Soho and LaReine in the ontology?",
                            "Is it permissible for an individual pizza to be classified as both Soho and LaReine?",
                            "Which classes are asserted as mutually exclusive with LaReine in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Soho disjointWith Napoletana",
                        "CQ": [
                            "How are Soho and Napoletana defined with respect to mutual exclusivity in the ontology?",
                            "Is any entity permitted to be simultaneously categorized as both Soho and Napoletana?",
                            "Which classes are formally specified as disjoint with Soho?"
                        ]
                    },
                    {
                        "axiom": "Soho disjointWith Veneziana",
                        "CQ": [
                            "What type of separation is defined between Soho and Veneziana in the ontology?",
                            "Is there any individual that can simultaneously be classified as both Soho and Veneziana?",
                            "Which classes are formally specified as disjoint with Soho?"
                        ]
                    },
                    {
                        "axiom": "Soho disjointWith AmericanHot",
                        "CQ": [
                            "What logical separation exists between Soho and AmericanHot in the ontology?",
                            "Can a single pizza entity be classified simultaneously as Soho and AmericanHot?",
                            "Which classes are formally incompatible with AmericanHot according to the ontology?"
                        ]
                    },
                    {
                        "axiom": "Soho disjointWith UnclosedPizza",
                        "CQ": [
                            "What logical separation exists between Soho and UnclosedPizza within the ontology?",
                            "Is any individual instance allowed to be both Soho and UnclosedPizza concurrently?",
                            "Which classes are specified as mutually exclusive with Soho?"
                        ]
                    },
                    {
                        "axiom": "Soho disjointWith PrinceCarlo",
                        "CQ": [
                            "What logical separation is enforced between Soho and PrinceCarlo in the ontology?",
                            "Is there any circumstance where an individual could belong to both Soho and PrinceCarlo?",
                            "Which entities are defined as mutually exclusive with PrinceCarlo?"
                        ]
                    },
                    {
                        "axiom": "Soho disjointWith Capricciosa",
                        "CQ": [
                            "What formal separation exists between Soho and Capricciosa in the ontology?",
                            "Is an entity permitted to be classified simultaneously as Soho and Capricciosa?",
                            "Which classes in the ontology are explicitly stated as disjoint with Soho?"
                        ]
                    },
                    {
                        "axiom": "Soho disjointWith FruttiDiMare",
                        "CQ": [
                            "What logical separation exists between Soho and FruttiDiMare in the ontology?",
                            "Is there any circumstance where an entity can be both Soho and FruttiDiMare?",
                            "Which classes are specified as disjoint with Soho?"
                        ]
                    },
                    {
                        "axiom": "Soho disjointWith Siciliana",
                        "CQ": [
                            "What logical distinction is represented between Soho and Siciliana in the ontology?",
                            "Is it permissible for a single entity to be classified as both Soho and Siciliana?",
                            "Which other pizza types are defined as disjoint with Siciliana?"
                        ]
                    },
                    {
                        "axiom": "Soho disjointWith Cajun",
                        "CQ": [
                            "What logical separation is asserted between Soho and Cajun in the ontology?",
                            "Is there an instance that can be classified as both Soho and Cajun simultaneously?",
                            "Which classes are defined as mutually exclusive with Cajun?"
                        ]
                    },
                    {
                        "axiom": "Soho disjointWith Margherita",
                        "CQ": [
                            "What formal separation is defined between Soho and Margherita pizzas within the ontology?",
                            "Is there any scenario where an instance could qualify as both Soho and Margherita simultaneously?",
                            "Which pizza types are specified as mutually exclusive with Soho?"
                        ]
                    },
                    {
                        "axiom": "Soho disjointWith American",
                        "CQ": [
                            "What type of logical separation is defined between Soho and American in the ontology?",
                            "Is there an entity that can simultaneously belong to both Soho and American categories?",
                            "Which other classes are specified as disjoint with American?"
                        ]
                    },
                    {
                        "axiom": "Soho disjointWith SloppyGiuseppe",
                        "CQ": [
                            "What is the ontological separation between Soho and SloppyGiuseppe?",
                            "Is it allowed for a pizza to belong to both the Soho and SloppyGiuseppe categories?",
                            "Which classes are formally asserted to be mutually exclusive with SloppyGiuseppe?"
                        ]
                    },
                    {
                        "axiom": "Soho disjointWith Caprina",
                        "CQ": [
                            "How are Soho and Caprina represented as mutually exclusive classes in the ontology?",
                            "Is there any instance that can simultaneously belong to Soho and Caprina categories?",
                            "Which classes are specified as disjoint with Caprina?"
                        ]
                    },
                    {
                        "axiom": "Soho disjointWith Parmense",
                        "CQ": [
                            "What distinguishes Soho from Parmense within the ontology?",
                            "Is there any possibility for an entity to be both Soho and Parmense?",
                            "Which classes are specified as disjoint with Parmense?"
                        ]
                    },
                    {
                        "axiom": "Soho disjointWith PolloAdAstra",
                        "CQ": [
                            "What is the ontological distinction between Soho and PolloAdAstra?",
                            "Can a single pizza instance be classified as both Soho and PolloAdAstra?",
                            "Which pizza types are defined as mutually exclusive with PolloAdAstra?"
                        ]
                    },
                    {
                        "axiom": "Soho disjointWith Fiorentina",
                        "CQ": [
                            "What logical separation is asserted between Soho and Fiorentina in the ontology?",
                            "Is any instance allowed to belong to both Soho and Fiorentina categories?",
                            "Which classes are defined as mutually exclusive with Fiorentina?"
                        ]
                    },
                    {
                        "axiom": "Soho disjointWith Rosa",
                        "CQ": [
                            "What ontological boundary is established between Soho and Rosa?",
                            "Is any entity permitted to belong to both Soho and Rosa subclasses?",
                            "Which other classes, aside from Soho, are defined as mutually exclusive with Rosa?"
                        ]
                    },
                    {
                        "axiom": "Soho disjointWith QuattroFormaggi",
                        "CQ": [
                            "How are Soho and QuattroFormaggi classified in relation to each other within the ontology?",
                            "Is it permissible for a single pizza to be both Soho and QuattroFormaggi?",
                            "Which pizza types are specified as mutually exclusive with Soho?"
                        ]
                    },
                    {
                        "axiom": "Soho disjointWith Giardiniera",
                        "CQ": [
                            "How does the ontology distinguish between Soho and Giardiniera?",
                            "Is there any instance that can belong to both Soho and Giardiniera categories?",
                            "Which classes are defined as incompatible with Giardiniera according to the ontology?"
                        ]
                    },
                    {
                        "axiom": "Soho disjointWith FourSeasons",
                        "CQ": [
                            "How does the ontology represent the connection or separation between Soho and FourSeasons?",
                            "Is it feasible for a single entity to be classified as both Soho and FourSeasons simultaneously?",
                            "Which classes are declared to be mutually exclusive with Soho within the ontology?"
                        ]
                    },
                    {
                        "axiom": "Soho propertyRestrictions [hasTopping some TomatoTopping]",
                        "CQ": [
                            "Must a Soho pizza always include at least one TomatoTopping?",
                            "Is it required for every Soho pizza to have the property 'hasTopping' associated with TomatoTopping?",
                            "Can a pizza be identified as Soho if it does not have any TomatoTopping?"
                        ]
                    },
                    {
                        "axiom": "Soho propertyRestrictions [hasTopping only (MozzarellaTopping or GarlicTopping or TomatoTopping or RocketTopping or OliveTopping or ParmesanTopping)]",
                        "CQ": [
                            "Is every topping on a Soho pizza limited exclusively to Mozzarella, Garlic, Tomato, Rocket, Olive, or Parmesan?",
                            "Would the presence of any topping other than Mozzarella, Garlic, Tomato, Rocket, Olive, or Parmesan disqualify a pizza from being classified as Soho?",
                            "Must all toppings on a Soho pizza belong to the set comprising Mozzarella, Garlic, Tomato, Rocket, Olive, or Parmesan?"
                        ]
                    },
                    {
                        "axiom": "Soho propertyRestrictions [hasTopping some GarlicTopping]",
                        "CQ": [
                            "Is it required for a Soho pizza to have at least one topping of Garlic?",
                            "Must every Soho pizza include Garlic as one of its toppings?",
                            "Can a pizza be classified as Soho if it does not contain any Garlic topping?"
                        ]
                    },
                    {
                        "axiom": "Soho propertyRestrictions [hasTopping some OliveTopping]",
                        "CQ": [
                            "Is it required for every instance of Soho to have at least one OliveTopping as a topping?",
                            "Does the presence of an OliveTopping as a topping define a Soho pizza?",
                            "Can a Soho exist without having the hasTopping property with OliveTopping?"
                        ]
                    },
                    {
                        "axiom": "Soho propertyRestrictions [hasTopping some MozzarellaTopping]",
                        "CQ": [
                            "Is it required for a Soho pizza to have at least one Mozzarella topping?",
                            "Can a Soho pizza be classified as such if it does not contain any Mozzarella topping?",
                            "Does every Soho pizza necessarily include Mozzarella as one of its toppings?"
                        ]
                    },
                    {
                        "axiom": "Soho propertyRestrictions [hasTopping some ParmesanTopping]",
                        "CQ": [
                            "Is it required for a Soho pizza to have at least one topping of Parmesan?",
                            "Can a Soho pizza exist without including ParmesanTopping among its toppings?",
                            "Does the presence of ParmesanTopping as a topping qualify a pizza as Soho?"
                        ]
                    },
                    {
                        "axiom": "Soho propertyRestrictions [hasTopping some RocketTopping]",
                        "CQ": [
                            "Is it required for a Soho pizza to have at least one topping of RocketTopping?",
                            "Does every Soho pizza include RocketTopping as one of its toppings?",
                            "Can a Soho pizza exist without having any RocketTopping among its toppings?"
                        ]
                    }
                ]
            },
            "UnclosedPizza": {
                "axiom": {
                    "subClassOf": [
                        "NamedPizza"
                    ],
                    "disjointWith": [
                        "Mushroom",
                        "LaReine",
                        "Napoletana",
                        "Veneziana",
                        "AmericanHot",
                        "PrinceCarlo",
                        "Capricciosa",
                        "FruttiDiMare",
                        "Siciliana",
                        "Cajun",
                        "Margherita",
                        "American",
                        "SloppyGiuseppe",
                        "Caprina",
                        "Soho",
                        "Parmense",
                        "PolloAdAstra",
                        "Fiorentina",
                        "Rosa",
                        "QuattroFormaggi",
                        "Giardiniera",
                        "FourSeasons"
                    ],
                    "propertyRestrictions": [
                        "[hasTopping some MozzarellaTopping]"
                    ]
                },
                "description": "UnclosedPizza is defined as a subclass of NamedPizza, disjoint with a specific set of pizzas including Mushroom, AmericanHot, Margherita, and others, ensuring mutual exclusivity with these named varieties. Every UnclosedPizza is characterized by having at least one MozzarellaTopping, but there is no restriction on additional toppings. As described, membership in UnclosedPizza does not imply classification as either a VegetarianPizza or a NonVegetarianPizza, as its topping composition may be incomplete or unspecified. This formalization supports the open nature of its topping definitions within the ontology.",
                "CQ": [
                    {
                        "axiom": "UnclosedPizza subClassOf NamedPizza",
                        "CQ": [
                            "Is UnclosedPizza categorized as a kind of NamedPizza?",
                            "Which specific types of NamedPizza include UnclosedPizza?",
                            "What general classifications encompass UnclosedPizza within the ontology?"
                        ]
                    },
                    {
                        "axiom": "UnclosedPizza disjointWith Mushroom",
                        "CQ": [
                            "What is the ontological separation between UnclosedPizza and Mushroom?",
                            "Is there an instance that can belong to both UnclosedPizza and Mushroom categories?",
                            "Which classes are declared as mutually exclusive with Mushroom in the ontology?"
                        ]
                    },
                    {
                        "axiom": "UnclosedPizza disjointWith LaReine",
                        "CQ": [
                            "Are UnclosedPizza and LaReine considered mutually exclusive pizza types within the ontology?",
                            "Could an individual pizza instance be simultaneously classified as UnclosedPizza and LaReine?",
                            "Which classes are specified as disjoint with LaReine in the ontology?"
                        ]
                    },
                    {
                        "axiom": "UnclosedPizza disjointWith Napoletana",
                        "CQ": [
                            "How does the ontology differentiate between UnclosedPizza and Napoletana?",
                            "Is there any instance that can be classified as both UnclosedPizza and Napoletana?",
                            "What other classes are stated as mutually exclusive with Napoletana?"
                        ]
                    },
                    {
                        "axiom": "UnclosedPizza disjointWith Veneziana",
                        "CQ": [
                            "How does the ontology differentiate between UnclosedPizza and Veneziana?",
                            "Is there any entity that can be classified simultaneously as UnclosedPizza and Veneziana?",
                            "Which pizza types are formally specified as disjoint with Veneziana within the ontology?"
                        ]
                    },
                    {
                        "axiom": "UnclosedPizza disjointWith AmericanHot",
                        "CQ": [
                            "Does the ontology explicitly represent UnclosedPizza and AmericanHot as non-overlapping classes?",
                            "Is there any pizza that can be simultaneously classified as UnclosedPizza and AmericanHot?",
                            "Which categories are formally incompatible with AmericanHot according to the ontology?"
                        ]
                    },
                    {
                        "axiom": "UnclosedPizza disjointWith PrinceCarlo",
                        "CQ": [
                            "What logical separation is established between UnclosedPizza and PrinceCarlo within the ontology?",
                            "Is an entity permitted to be classified as both UnclosedPizza and PrinceCarlo simultaneously?",
                            "Which classes are defined as mutually exclusive with UnclosedPizza?"
                        ]
                    },
                    {
                        "axiom": "UnclosedPizza disjointWith Capricciosa",
                        "CQ": [
                            "What logical separation exists between UnclosedPizza and Capricciosa according to the ontology?",
                            "Is it permitted for a pizza to belong to both UnclosedPizza and Capricciosa categories?",
                            "Which classes are formally specified as disjoint with Capricciosa?"
                        ]
                    },
                    {
                        "axiom": "UnclosedPizza disjointWith FruttiDiMare",
                        "CQ": [
                            "How does the ontology define the exclusivity between UnclosedPizza and FruttiDiMare?",
                            "Is there any instance that qualifies as both UnclosedPizza and FruttiDiMare within the ontology?",
                            "Which classes are declared disjoint with FruttiDiMare according to the ontology?"
                        ]
                    },
                    {
                        "axiom": "UnclosedPizza disjointWith Siciliana",
                        "CQ": [
                            "How does the ontology represent the separation between UnclosedPizza and Siciliana?",
                            "Is any pizza instance permitted to be classified as both UnclosedPizza and Siciliana?",
                            "Which classes are specified as disjoint with Siciliana within the ontology?"
                        ]
                    },
                    {
                        "axiom": "UnclosedPizza disjointWith Cajun",
                        "CQ": [
                            "How does the ontology specify the distinction between UnclosedPizza and Cajun?",
                            "Is it feasible for a pizza to belong to both UnclosedPizza and Cajun categories simultaneously?",
                            "Which classes are defined as mutually exclusive with Cajun in the ontology?"
                        ]
                    },
                    {
                        "axiom": "UnclosedPizza disjointWith Margherita",
                        "CQ": [
                            "How does the ontology distinguish between UnclosedPizza and Margherita?",
                            "Is there any instance that can belong to both UnclosedPizza and Margherita classes?",
                            "Which classes are declared as mutually exclusive with Margherita in the ontology?"
                        ]
                    },
                    {
                        "axiom": "UnclosedPizza disjointWith American",
                        "CQ": [
                            "How does the ontology specify the connection between UnclosedPizza and American?",
                            "Are there any instances that can be classified as both UnclosedPizza and American?",
                            "Which classes are explicitly marked as disjoint with American in the ontology?"
                        ]
                    },
                    {
                        "axiom": "UnclosedPizza disjointWith SloppyGiuseppe",
                        "CQ": [
                            "What logical separation is established between UnclosedPizza and SloppyGiuseppe within the ontology?",
                            "Could a pizza instance be simultaneously classified as UnclosedPizza and SloppyGiuseppe?",
                            "Which defined categories are asserted as disjoint with SloppyGiuseppe?"
                        ]
                    },
                    {
                        "axiom": "UnclosedPizza disjointWith Caprina",
                        "CQ": [
                            "How does the ontology represent the separation between UnclosedPizza and Caprina?",
                            "Is any individual allowed to belong to both UnclosedPizza and Caprina categories?",
                            "Which classes are specified as being disjoint with Caprina?"
                        ]
                    },
                    {
                        "axiom": "UnclosedPizza disjointWith Soho",
                        "CQ": [
                            "What ontological separation is specified between UnclosedPizza and Soho?",
                            "Does the ontology permit any instance to be classified as both UnclosedPizza and Soho?",
                            "Which classes are explicitly incompatible with Soho in the ontology?"
                        ]
                    },
                    {
                        "axiom": "UnclosedPizza disjointWith Parmense",
                        "CQ": [
                            "How are UnclosedPizza and Parmense differentiated within the ontology?",
                            "Is any pizza instance allowed to belong to both UnclosedPizza and Parmense categories?",
                            "Which classes are specified as mutually exclusive with Parmense?"
                        ]
                    },
                    {
                        "axiom": "UnclosedPizza disjointWith PolloAdAstra",
                        "CQ": [
                            "What ontological separation is specified between UnclosedPizza and PolloAdAstra?",
                            "Is there any instance that can belong to both UnclosedPizza and PolloAdAstra categories?",
                            "Which classes are defined as disjoint with PolloAdAstra in the ontology?"
                        ]
                    },
                    {
                        "axiom": "UnclosedPizza disjointWith Fiorentina",
                        "CQ": [
                            "How does the ontology differentiate between UnclosedPizza and Fiorentina?",
                            "Is it allowed for a pizza to be both UnclosedPizza and Fiorentina simultaneously according to the ontology?",
                            "Which classes are specified as disjoint with Fiorentina?"
                        ]
                    },
                    {
                        "axiom": "UnclosedPizza disjointWith Rosa",
                        "CQ": [
                            "How is the class relationship between UnclosedPizza and Rosa defined in the ontology?",
                            "Is there any instance that can be classified as both UnclosedPizza and Rosa?",
                            "Which classes are stated as mutually exclusive with UnclosedPizza?"
                        ]
                    },
                    {
                        "axiom": "UnclosedPizza disjointWith QuattroFormaggi",
                        "CQ": [
                            "What is the formal distinction stated between UnclosedPizza and QuattroFormaggi in the ontology?",
                            "Is there any individual that can belong to both UnclosedPizza and QuattroFormaggi classes?",
                            "Which pizza categories are specified as mutually exclusive with QuattroFormaggi?"
                        ]
                    },
                    {
                        "axiom": "UnclosedPizza disjointWith Giardiniera",
                        "CQ": [
                            "What ontological constraint separates UnclosedPizza from Giardiniera?",
                            "Is there any scenario in which a pizza can be classified as both UnclosedPizza and Giardiniera?",
                            "Which classes does the ontology specify as explicitly incompatible with Giardiniera?"
                        ]
                    },
                    {
                        "axiom": "UnclosedPizza disjointWith FourSeasons",
                        "CQ": [
                            "What ontological separation is specified between UnclosedPizza and FourSeasons?",
                            "Is there any scenario in which a pizza could belong to both UnclosedPizza and FourSeasons classes?",
                            "Which classes are formally stated to be disjoint with FourSeasons?"
                        ]
                    },
                    {
                        "axiom": "UnclosedPizza propertyRestrictions [hasTopping some MozzarellaTopping]",
                        "CQ": [
                            "Is it required for an UnclosedPizza to have at least one MozzarellaTopping as a topping?",
                            "Can an UnclosedPizza exist without having MozzarellaTopping among its toppings?",
                            "Does the presence of any MozzarellaTopping qualify a pizza as an UnclosedPizza?"
                        ]
                    }
                ]
            },
            "Veneziana": {
                "axiom": {
                    "subClassOf": [
                        "NamedPizza"
                    ],
                    "disjointWith": [
                        "Mushroom",
                        "LaReine",
                        "Napoletana",
                        "AmericanHot",
                        "UnclosedPizza",
                        "PrinceCarlo",
                        "Capricciosa",
                        "FruttiDiMare",
                        "Siciliana",
                        "Cajun",
                        "Margherita",
                        "American",
                        "SloppyGiuseppe",
                        "Caprina",
                        "Soho",
                        "Parmense",
                        "PolloAdAstra",
                        "Fiorentina",
                        "Rosa",
                        "QuattroFormaggi",
                        "Giardiniera",
                        "FourSeasons"
                    ],
                    "propertyRestrictions": [
                        "[hasTopping only (MozzarellaTopping or TomatoTopping or SultanaTopping or OnionTopping or CaperTopping or OliveTopping or PineKernels)]",
                        "[hasTopping some PineKernels]",
                        "[hasTopping some TomatoTopping]",
                        "[hasTopping some OliveTopping]",
                        "[hasTopping some SultanaTopping]",
                        "[hasTopping some MozzarellaTopping]",
                        "[hasTopping some OnionTopping]",
                        "[hasCountryOfOrigin hasValue Italy]",
                        "[hasTopping some CaperTopping]"
                    ]
                },
                "description": "Veneziana is defined as a subclass of NamedPizza and is disjoint with a range of other specific pizzas, ensuring no individual instance can simultaneously belong to Veneziana and any of those disjoint classes. Members of the Veneziana class must have only the following toppings: MozzarellaTopping, TomatoTopping, SultanaTopping, OnionTopping, CaperTopping, OliveTopping, or PineKernels; each member is also required to have at least one of each of these toppings present. Additionally, Veneziana pizzas have Italy as their country of origin. This ontological definition captures the uniquely defined set of ingredients and exclusive identity of the Veneziana pizza within the broader NamedPizza category.",
                "CQ": [
                    {
                        "axiom": "Veneziana subClassOf NamedPizza",
                        "CQ": [
                            "Is Veneziana classified as a specific type under NamedPizza?",
                            "Which pizzas fall under the NamedPizza classification, such as Veneziana?",
                            "What broader categories does Veneziana belong to within the pizza hierarchy?"
                        ]
                    },
                    {
                        "axiom": "Veneziana disjointWith Mushroom",
                        "CQ": [
                            "What formal separation is asserted between Veneziana and Mushroom within the ontology?",
                            "Does the ontology allow any entity to be classified as both Veneziana and Mushroom?",
                            "Which classes are explicitly incompatible with Mushroom based on disjointness assertions?"
                        ]
                    },
                    {
                        "axiom": "Veneziana disjointWith LaReine",
                        "CQ": [
                            "How does the ontology specify the relation between Veneziana and LaReine?",
                            "Is there any instance that can belong to both Veneziana and LaReine classes?",
                            "Which pizza types are designated as disjoint with LaReine?"
                        ]
                    },
                    {
                        "axiom": "Veneziana disjointWith Napoletana",
                        "CQ": [
                            "How does the ontology differentiate between Veneziana and Napoletana classes?",
                            "Is there any instance that can simultaneously belong to both Veneziana and Napoletana categories?",
                            "Which pizza classes in the ontology are explicitly specified as disjoint with Napoletana?"
                        ]
                    },
                    {
                        "axiom": "Veneziana disjointWith AmericanHot",
                        "CQ": [
                            "What ontological separation is defined between Veneziana and AmericanHot?",
                            "Is there any instance that can be simultaneously classified as Veneziana and AmericanHot?",
                            "Which other pizza types are formally specified to be disjoint with AmericanHot?"
                        ]
                    },
                    {
                        "axiom": "Veneziana disjointWith UnclosedPizza",
                        "CQ": [
                            "What distinguishes Veneziana pizzas from UnclosedPizza in the ontology?",
                            "Is it allowed for a pizza to be classified as both Veneziana and UnclosedPizza?",
                            "Which classes are asserted to be incompatible with Veneziana?"
                        ]
                    },
                    {
                        "axiom": "Veneziana disjointWith PrinceCarlo",
                        "CQ": [
                            "What is the ontological separation between Veneziana and PrinceCarlo?",
                            "Is there any instance that can be classified as both Veneziana and PrinceCarlo?",
                            "Which classes are declared to be mutually exclusive with Veneziana?"
                        ]
                    },
                    {
                        "axiom": "Veneziana disjointWith Capricciosa",
                        "CQ": [
                            "What logical separation is established between Veneziana and Capricciosa in the ontology?",
                            "Could a single pizza instance be classified as both Veneziana and Capricciosa?",
                            "Which entities within the ontology are defined as mutually exclusive with Capricciosa?"
                        ]
                    },
                    {
                        "axiom": "Veneziana disjointWith FruttiDiMare",
                        "CQ": [
                            "What formal constraint prevents Veneziana and FruttiDiMare from overlapping?",
                            "Does the ontology allow any pizza to belong to both Veneziana and FruttiDiMare classes?",
                            "Which classes are declared as mutually exclusive with FruttiDiMare?"
                        ]
                    },
                    {
                        "axiom": "Veneziana disjointWith Siciliana",
                        "CQ": [
                            "What is the ontological distinction between Veneziana and Siciliana?",
                            "Is it possible for an individual pizza to be classified as both Veneziana and Siciliana?",
                            "Which classes are formally specified as disjoint with Veneziana?"
                        ]
                    },
                    {
                        "axiom": "Veneziana disjointWith Cajun",
                        "CQ": [
                            "How does the ontology differentiate between Veneziana and Cajun?",
                            "Is there any instance that can belong to both Veneziana and Cajun categories?",
                            "Which pizza varieties are specified as mutually exclusive with Cajun?"
                        ]
                    },
                    {
                        "axiom": "Veneziana disjointWith Margherita",
                        "CQ": [
                            "How does the ontology define the separation between Veneziana and Margherita pizza types?",
                            "Is there any instance that can simultaneously be classified as both Veneziana and Margherita?",
                            "Which pizza classes are identified as mutually exclusive with Margherita?"
                        ]
                    },
                    {
                        "axiom": "Veneziana disjointWith American",
                        "CQ": [
                            "How does the ontology reflect the mutual exclusivity between Veneziana and American?",
                            "Is there any circumstance under which an individual could belong to both Veneziana and American classes?",
                            "Which classes are specified as disjoint with American in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Veneziana disjointWith SloppyGiuseppe",
                        "CQ": [
                            "What ontological separation is specified between Veneziana and SloppyGiuseppe?",
                            "Can an individual pizza instance belong to both Veneziana and SloppyGiuseppe categories simultaneously?",
                            "Which other pizza subclasses are stated to be disjoint with SloppyGiuseppe in the ontology?"
                        ]
                    },
                    {
                        "axiom": "Veneziana disjointWith Caprina",
                        "CQ": [
                            "How are Veneziana and Caprina categorized in relation to each other within the ontology?",
                            "Is there any instance that can simultaneously be classified as both Veneziana and Caprina?",
                            "Are there other pizza types specified as mutually exclusive with Caprina?"
                        ]
                    },
                    {
                        "axiom": "Veneziana disjointWith Soho",
                        "CQ": [
                            "How does the ontology represent the exclusivity between Veneziana and Soho?",
                            "Is any item allowed to be classified as both Veneziana and Soho simultaneously?",
                            "What other pizza types are stated as mutually exclusive with Soho?"
                        ]
                    },
                    {
                        "axiom": "Veneziana disjointWith Parmense",
                        "CQ": [
                            "How is the mutual exclusivity between Veneziana and Parmense represented in the ontology?",
                            "Can an individual pizza be an instance of both Veneziana and Parmense?",
                            "Which pizza classes are directly specified as disjoint with Parmense?"
                        ]
                    },
                    {
                        "axiom": "Veneziana disjointWith PolloAdAstra",
                        "CQ": [
                            "Is there any relation of incompatibility defined between Veneziana and PolloAdAstra in the ontology?",
                            "Can an individual pizza instance be classified as both Veneziana and PolloAdAstra?",
                            "Which classes within the pizza domain are stated as mutually exclusive with Veneziana?"
                        ]
                    },
                    {
                        "axiom": "Veneziana disjointWith Fiorentina",
                        "CQ": [
                            "Are Veneziana and Fiorentina defined as mutually exclusive pizza types in the ontology?",
                            "Is there any pizza that can simultaneously belong to both Veneziana and Fiorentina categories?",
                            "Which pizza classes are asserted as disjoint with Fiorentina?"
                        ]
                    },
                    {
                        "axiom": "Veneziana disjointWith Rosa",
                        "CQ": [
                            "What formal separation is specified between Veneziana and Rosa in the ontology?",
                            "Is there any instance that can simultaneously belong to both Veneziana and Rosa classes?",
                            "Which other classes are defined as being mutually exclusive with Rosa?"
                        ]
                    },
                    {
                        "axiom": "Veneziana disjointWith QuattroFormaggi",
                        "CQ": [
                            "How does the ontology represent the exclusivity between Veneziana and QuattroFormaggi pizzas?",
                            "Is any individual pizza instance allowed to be classified as both Veneziana and QuattroFormaggi?",
                            "Which classes are formally specified as disjoint with QuattroFormaggi?"
                        ]
                    },
                    {
                        "axiom": "Veneziana disjointWith Giardiniera",
                        "CQ": [
                            "What ontological distinction separates Veneziana from Giardiniera?",
                            "Is there any instance that can be classified as both Veneziana and Giardiniera?",
                            "Which classes are asserted as disjoint with Giardiniera?"
                        ]
                    },
                    {
                        "axiom": "Veneziana disjointWith FourSeasons",
                        "CQ": [
                            "How is the class relationship defined between Veneziana and FourSeasons within the ontology?",
                            "Is there any scenario where a pizza could be classified as both Veneziana and FourSeasons?",
                            "Which pizza types are specified as being mutually exclusive with Veneziana?"
                        ]
                    },
                    {
                        "axiom": "Veneziana propertyRestrictions [hasTopping only (MozzarellaTopping or TomatoTopping or SultanaTopping or OnionTopping or CaperTopping or OliveTopping or PineKernels)]",
                        "CQ": [
                            "Are all toppings on a Veneziana required to be one of Mozzarella, Tomato, Sultana, Onion, Caper, Olive, or Pine Kernels?",
                            "Can a Veneziana have any topping that is not Mozzarella, Tomato, Sultana, Onion, Caper, Olive, or Pine Kernels?",
                            "Is it prohibited for a Veneziana to include toppings outside the seven specified types?"
                        ]
                    },
                    {
                        "axiom": "Veneziana propertyRestrictions [hasTopping some PineKernels]",
                        "CQ": [
                            "Is it required for a Veneziana pizza to have at least one topping of pine kernels?",
                            "Can a Veneziana pizza exist without including pine kernels as a topping?",
                            "Does every instance of Veneziana have the property ‘hasTopping’ associated with PineKernels?"
                        ]
                    },
                    {
                        "axiom": "Veneziana propertyRestrictions [hasTopping some TomatoTopping]",
                        "CQ": [
                            "Is it required for a Veneziana pizza to have at least one topping that is a TomatoTopping?",
                            "Can a Veneziana exist without having any TomatoTopping as a topping?",
                            "Does every instance of Veneziana include a relation via hasTopping to some TomatoTopping?"
                        ]
                    },
                    {
                        "axiom": "Veneziana propertyRestrictions [hasTopping some OliveTopping]",
                        "CQ": [
                            "Is it a requirement for a Veneziana pizza to include at least one olive topping?",
                            "Must every Veneziana have the property 'hasTopping' associated with an OliveTopping?",
                            "Can there be a Veneziana pizza without any olive toppings?"
                        ]
                    },
                    {
                        "axiom": "Veneziana propertyRestrictions [hasTopping some SultanaTopping]",
                        "CQ": [
                            "Must a Veneziana pizza have at least one SultanaTopping as one of its toppings?",
                            "Is the presence of SultanaTopping a required condition for classifying a pizza as Veneziana?",
                            "Can a pizza lacking SultanaTopping ever be correctly categorized as Veneziana?"
                        ]
                    },
                    {
                        "axiom": "Veneziana propertyRestrictions [hasTopping some MozzarellaTopping]",
                        "CQ": [
                            "Is it required that every Veneziana pizza includes at least one Mozzarella topping?",
                            "Can a Veneziana exist without having any MozzarellaTopping as a topping?",
                            "Does the definition of Veneziana ensure that MozzarellaTopping must be present among its toppings?"
                        ]
                    },
                    {
                        "axiom": "Veneziana propertyRestrictions [hasTopping some OnionTopping]",
                        "CQ": [
                            "Is it required that a Veneziana pizza has at least one OnionTopping as a topping?",
                            "Must every Veneziana include OnionTopping among its chosen toppings?",
                            "Can a pizza be classified as Veneziana if it lacks any OnionTopping?"
                        ]
                    },
                    {
                        "axiom": "Veneziana propertyRestrictions [hasCountryOfOrigin hasValue Italy]",
                        "CQ": [
                            "Is it a requirement that Veneziana has Italy as its country of origin according to the ontology?",
                            "Can Veneziana have a country of origin other than Italy specified in its properties?",
                            "Does the ontology definition of Veneziana enforce that its country of origin value must be Italy?"
                        ]
                    },
                    {
                        "axiom": "Veneziana propertyRestrictions [hasTopping some CaperTopping]",
                        "CQ": [
                            "Is it necessary for a Veneziana pizza to have at least one CaperTopping as a topping?",
                            "Can a Veneziana exist without including CaperTopping as one of its toppings?",
                            "Does the definition of Veneziana require the presence of CaperTopping among its toppings?"
                        ]
                    }
                ]
            },
            "AnchoviesTopping": {
                "axiom": {
                    "subClassOf": [
                        "FishTopping"
                    ],
                    "disjointWith": [
                        "MixedSeafoodTopping",
                        "PrawnsTopping"
                    ]
                },
                "description": "AnchoviesTopping is modeled as a subclass of FishTopping, signifying that it is a specific type of fish-based topping. It is explicitly disjoint with both MixedSeafoodTopping and PrawnsTopping, meaning an individual instance cannot simultaneously be categorized as AnchoviesTopping and either of those other toppings. This ensures a clear and mutually exclusive classification among these seafood-themed pizza toppings.",
                "CQ": [
                    {
                        "axiom": "AnchoviesTopping subClassOf FishTopping",
                        "CQ": [
                            "Is AnchoviesTopping classified under the category of FishTopping?",
                            "Which toppings are subclasses of FishTopping, such as AnchoviesTopping?",
                            "What categories act as superclasses for AnchoviesTopping?"
                        ]
                    },
                    {
                        "axiom": "AnchoviesTopping disjointWith MixedSeafoodTopping",
                        "CQ": [
                            "How does the ontology specify the distinction between AnchoviesTopping and MixedSeafoodTopping?",
                            "Is it permitted for a topping to be classified as both Anchovies and MixedSeafood within the ontology?",
                            "What other topping types are declared as mutually exclusive with AnchoviesTopping?"
                        ]
                    },
                    {
                        "axiom": "AnchoviesTopping disjointWith PrawnsTopping",
                        "CQ": [
                            "How does the ontology specify the incompatibility between AnchoviesTopping and PrawnsTopping?",
                            "Is any pizza topping allowed to be classified as both AnchoviesTopping and PrawnsTopping simultaneously?",
                            "Which toppings are asserted to be disjoint with AnchoviesTopping in the ontology?"
                        ]
                    }
                ]
            },
            "MixedSeafoodTopping": {
                "axiom": {
                    "subClassOf": [
                        "FishTopping"
                    ],
                    "disjointWith": [
                        "AnchoviesTopping",
                        "PrawnsTopping"
                    ]
                },
                "description": "MixedSeafoodTopping is defined as a subclass of FishTopping, meaning every MixedSeafoodTopping is a type of fish-based topping. It is explicitly disjoint with AnchoviesTopping and PrawnsTopping, so no individual topping can simultaneously be considered a MixedSeafoodTopping and either an AnchoviesTopping or PrawnsTopping. This class represents seafood toppings that are distinct from pure anchovy or prawn toppings, ensuring clear differentiation among various fish-based toppings.",
                "CQ": [
                    {
                        "axiom": "MixedSeafoodTopping subClassOf FishTopping",
                        "CQ": [
                            "Does MixedSeafoodTopping fall under the broader class of FishTopping?",
                            "What specific kinds of FishTopping exist, including MixedSeafoodTopping?",
                            "To which higher-level toppings does MixedSeafoodTopping belong?"
                        ]
                    },
                    {
                        "axiom": "MixedSeafoodTopping disjointWith AnchoviesTopping",
                        "CQ": [
                            "What formal separation is defined between MixedSeafoodTopping and AnchoviesTopping within the ontology?",
                            "Is there any possibility for a topping to be classified as both MixedSeafoodTopping and AnchoviesTopping?",
                            "Which other topping classes, if any, are explicitly stated as disjoint with AnchoviesTopping?"
                        ]
                    },
                    {
                        "axiom": "MixedSeafoodTopping disjointWith PrawnsTopping",
                        "CQ": [
                            "What distinguishes MixedSeafoodTopping from PrawnsTopping according to the ontology?",
                            "Can a pizza topping instance be classified as both MixedSeafoodTopping and PrawnsTopping?",
                            "Which topping types are specified as disjoint with PrawnsTopping?"
                        ]
                    }
                ]
            },
            "PrawnsTopping": {
                "axiom": {
                    "subClassOf": [
                        "FishTopping"
                    ],
                    "disjointWith": [
                        "MixedSeafoodTopping",
                        "AnchoviesTopping"
                    ]
                },
                "description": "PrawnsTopping is defined as a subclass of FishTopping, indicating it is a specific kind of fish-based topping. It is explicitly disjoint with both MixedSeafoodTopping and AnchoviesTopping, which means no individual topping can simultaneously be classified as PrawnsTopping and either of the other two classes. This formalization ensures that members of PrawnsTopping are uniquely identifiable as prawn-based toppings, distinct from other seafood or anchovy-based toppings.",
                "CQ": [
                    {
                        "axiom": "PrawnsTopping subClassOf FishTopping",
                        "CQ": [
                            "Is PrawnsTopping classified as a kind of FishTopping?",
                            "Which toppings are specialized forms under FishTopping, such as PrawnsTopping?",
                            "To what higher-level groups does PrawnsTopping pertain within the toppings domain?"
                        ]
                    },
                    {
                        "axiom": "PrawnsTopping disjointWith MixedSeafoodTopping",
                        "CQ": [
                            "How does the ontology differentiate between PrawnsTopping and MixedSeafoodTopping?",
                            "Is there any instance that can qualify as both PrawnsTopping and MixedSeafoodTopping?",
                            "Which topping categories are specified as disjoint with PrawnsTopping?"
                        ]
                    },
                    {
                        "axiom": "PrawnsTopping disjointWith AnchoviesTopping",
                        "CQ": [
                            "What is the ontological separation between PrawnsTopping and AnchoviesTopping?",
                            "Is there any instance that can simultaneously be classified as both PrawnsTopping and AnchoviesTopping?",
                            "Which toppings are stated to be mutually exclusive with AnchoviesTopping?"
                        ]
                    }
                ]
            },
            "ArtichokeTopping": {
                "axiom": {
                    "subClassOf": [
                        "VegetableTopping"
                    ],
                    "disjointWith": [
                        "RocketTopping",
                        "LeekTopping",
                        "OnionTopping",
                        "SpinachTopping",
                        "GarlicTopping",
                        "PepperTopping",
                        "AsparagusTopping",
                        "OliveTopping",
                        "CaperTopping",
                        "MushroomTopping",
                        "PetitPoisTopping",
                        "TomatoTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Mild]"
                    ]
                },
                "description": "ArtichokeTopping is defined as a subclass of VegetableTopping and is explicitly disjoint with a range of other vegetable toppings, including RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping, ensuring that no individual can be classified as an ArtichokeTopping and any of these other types simultaneously. Furthermore, every member of the ArtichokeTopping class is constrained to have at least some level of mild spiciness (hasSpiciness some Mild), distinguishing it by its gentle flavor profile within the broader category of vegetable toppings.",
                "CQ": [
                    {
                        "axiom": "ArtichokeTopping subClassOf VegetableTopping",
                        "CQ": [
                            "Does ArtichokeTopping fall under the broader group of VegetableTopping?",
                            "What toppings are included as subclasses of VegetableTopping, and does this list feature ArtichokeTopping?",
                            "Which general topping types encompass ArtichokeTopping?"
                        ]
                    },
                    {
                        "axiom": "ArtichokeTopping disjointWith RocketTopping",
                        "CQ": [
                            "What formal separation is defined between ArtichokeTopping and RocketTopping in the ontology?",
                            "Is there any instance that can simultaneously be classified as both ArtichokeTopping and RocketTopping?",
                            "Which toppings are explicitly specified as disjoint with RocketTopping?"
                        ]
                    },
                    {
                        "axiom": "ArtichokeTopping disjointWith LeekTopping",
                        "CQ": [
                            "Are there any ontological constraints preventing an entity from being both an ArtichokeTopping and a LeekTopping?",
                            "Which classes are defined as mutually exclusive with ArtichokeTopping?",
                            "Is it permissible for a topping to simultaneously belong to both ArtichokeTopping and LeekTopping categories?"
                        ]
                    },
                    {
                        "axiom": "ArtichokeTopping disjointWith OnionTopping",
                        "CQ": [
                            "What is the formal distinction between ArtichokeTopping and OnionTopping in the ontology?",
                            "Is it allowed for a pizza topping to be classified as both ArtichokeTopping and OnionTopping?",
                            "Which topping types are specified as disjoint with OnionTopping?"
                        ]
                    },
                    {
                        "axiom": "ArtichokeTopping disjointWith SpinachTopping",
                        "CQ": [
                            "How is the exclusiveness between ArtichokeTopping and SpinachTopping represented in the ontology?",
                            "Is it allowed for a pizza topping to be classified as both ArtichokeTopping and SpinachTopping?",
                            "Which topping classes are formally specified as disjoint with ArtichokeTopping?"
                        ]
                    },
                    {
                        "axiom": "ArtichokeTopping disjointWith GarlicTopping",
                        "CQ": [
                            "Are there any declared incompatibilities between ArtichokeTopping and GarlicTopping in the ontology?",
                            "Is it allowable for a pizza topping to be classified as both ArtichokeTopping and GarlicTopping?",
                            "Which other topping types are defined as disjoint with ArtichokeTopping?"
                        ]
                    },
                    {
                        "axiom": "ArtichokeTopping disjointWith PepperTopping",
                        "CQ": [
                            "How does the ontology define the separation between ArtichokeTopping and PepperTopping?",
                            "Is an ingredient allowed to be classified simultaneously as ArtichokeTopping and PepperTopping?",
                            "Which topping categories are stated as mutually exclusive with PepperTopping?"
                        ]
                    },
                    {
                        "axiom": "ArtichokeTopping disjointWith AsparagusTopping",
                        "CQ": [
                            "What is the formal relationship specified between ArtichokeTopping and AsparagusTopping within the ontology?",
                            "Does the ontology permit any instance to be both ArtichokeTopping and AsparagusTopping?",
                            "Which topping classes are declared as incompatible with ArtichokeTopping?"
                        ]
                    },
                    {
                        "axiom": "ArtichokeTopping disjointWith OliveTopping",
                        "CQ": [
                            "How does the ontology differentiate between ArtichokeTopping and OliveTopping?",
                            "Is it allowed for a pizza topping to be classified as both ArtichokeTopping and OliveTopping?",
                            "Which toppings are defined as mutually exclusive with OliveTopping?"
                        ]
                    },
                    {
                        "axiom": "ArtichokeTopping disjointWith CaperTopping",
                        "CQ": [
                            "How does the ontology represent the exclusivity between ArtichokeTopping and CaperTopping?",
                            "Is any pizza topping classified as both ArtichokeTopping and CaperTopping within the ontology?",
                            "Which topping types are specified as being disjoint with CaperTopping?"
                        ]
                    },
                    {
                        "axiom": "ArtichokeTopping disjointWith MushroomTopping",
                        "CQ": [
                            "What logical separation is established between ArtichokeTopping and MushroomTopping within the ontology?",
                            "Is it allowed for a topping to be classified as both ArtichokeTopping and MushroomTopping?",
                            "Which toppings are formally specified as incompatible with ArtichokeTopping?"
                        ]
                    },
                    {
                        "axiom": "ArtichokeTopping disjointWith PetitPoisTopping",
                        "CQ": [
                            "How are ArtichokeTopping and PetitPoisTopping formally differentiated in the ontology?",
                            "Is it allowed for a pizza topping to be classified as both ArtichokeTopping and PetitPoisTopping?",
                            "Which toppings are specified as mutually exclusive with ArtichokeTopping?"
                        ]
                    },
                    {
                        "axiom": "ArtichokeTopping disjointWith TomatoTopping",
                        "CQ": [
                            "What are the logical consequences of ArtichokeTopping and TomatoTopping being disjoint in the ontology?",
                            "Is it allowable for a single pizza to include both ArtichokeTopping and TomatoTopping?",
                            "Which toppings are explicitly stated to be incompatible with TomatoTopping?"
                        ]
                    },
                    {
                        "axiom": "ArtichokeTopping propertyRestrictions [hasSpiciness some Mild]",
                        "CQ": [
                            "Is every ArtichokeTopping required to have at least one spiciness level classified as Mild?",
                            "Can an ArtichokeTopping exist without possessing any degree of spiciness identified as Mild?",
                            "Does the definition of ArtichokeTopping permit toppings with only Mild spiciness, or could additional spiciness levels also be present?"
                        ]
                    }
                ]
            },
            "AsparagusTopping": {
                "axiom": {
                    "subClassOf": [
                        "VegetableTopping"
                    ],
                    "disjointWith": [
                        "RocketTopping",
                        "LeekTopping",
                        "OnionTopping",
                        "SpinachTopping",
                        "GarlicTopping",
                        "ArtichokeTopping",
                        "PepperTopping",
                        "OliveTopping",
                        "CaperTopping",
                        "MushroomTopping",
                        "PetitPoisTopping",
                        "TomatoTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Mild]"
                    ]
                },
                "description": "AsparagusTopping is defined as a subclass of VegetableTopping, meaning it represents a specific type of vegetable-based topping. It is disjoint with several other vegetable toppings, including RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping, ensuring that an individual cannot simultaneously belong to any of these classes. Additionally, every instance of AsparagusTopping must have some level of mild spiciness, as specified by the hasSpiciness property restriction.",
                "CQ": [
                    {
                        "axiom": "AsparagusTopping subClassOf VegetableTopping",
                        "CQ": [
                            "Does AsparagusTopping fall under the category of VegetableTopping?",
                            "What types of toppings are classified as subclasses of VegetableTopping?",
                            "Which broader topping categories does AsparagusTopping belong to?"
                        ]
                    },
                    {
                        "axiom": "AsparagusTopping disjointWith RocketTopping",
                        "CQ": [
                            "How does the ontology differentiate between AsparagusTopping and RocketTopping?",
                            "Is there any instance that can be classified under both AsparagusTopping and RocketTopping categories?",
                            "Which toppings are designated as mutually exclusive with RocketTopping?"
                        ]
                    },
                    {
                        "axiom": "AsparagusTopping disjointWith LeekTopping",
                        "CQ": [
                            "What logical separation exists between AsparagusTopping and LeekTopping in the ontology?",
                            "Can a pizza contain both AsparagusTopping and LeekTopping simultaneously?",
                            "Which topping classes are defined as disjoint with LeekTopping?"
                        ]
                    },
                    {
                        "axiom": "AsparagusTopping disjointWith OnionTopping",
                        "CQ": [
                            "What formal separation exists between AsparagusTopping and OnionTopping in the ontology?",
                            "Is there any instance that can be classified as both AsparagusTopping and OnionTopping?",
                            "Which topping types are explicitly set as disjoint with OnionTopping?"
                        ]
                    },
                    {
                        "axiom": "AsparagusTopping disjointWith SpinachTopping",
                        "CQ": [
                            "How does the ontology specify the separation between AsparagusTopping and SpinachTopping?",
                            "Is there any instance that could simultaneously be classified as both AsparagusTopping and SpinachTopping?",
                            "Which topping classes are identified as mutually exclusive with AsparagusTopping?"
                        ]
                    },
                    {
                        "axiom": "AsparagusTopping disjointWith GarlicTopping",
                        "CQ": [
                            "How does the ontology define the interaction between AsparagusTopping and GarlicTopping?",
                            "Is there any entity that can be classified simultaneously as AsparagusTopping and GarlicTopping?",
                            "Which classes are specified as incompatible with AsparagusTopping in the ontology?"
                        ]
                    },
                    {
                        "axiom": "AsparagusTopping disjointWith ArtichokeTopping",
                        "CQ": [
                            "What distinguishes AsparagusTopping from ArtichokeTopping according to the ontology?",
                            "Is there any topping that can be classified as both AsparagusTopping and ArtichokeTopping?",
                            "Which toppings are defined as disjoint with AsparagusTopping?"
                        ]
                    },
                    {
                        "axiom": "AsparagusTopping disjointWith PepperTopping",
                        "CQ": [
                            "What is the ontological separation between AsparagusTopping and PepperTopping?",
                            "Is any pizza topping instance allowed to have both AsparagusTopping and PepperTopping classifications?",
                            "Which topping classes are formally specified as disjoint with PepperTopping?"
                        ]
                    },
                    {
                        "axiom": "AsparagusTopping disjointWith OliveTopping",
                        "CQ": [
                            "What is the ontological distinction between AsparagusTopping and OliveTopping?",
                            "Can a single pizza simultaneously include AsparagusTopping and OliveTopping according to the ontology?",
                            "Which toppings are specified as disjoint with AsparagusTopping?"
                        ]
                    },
                    {
                        "axiom": "AsparagusTopping disjointWith CaperTopping",
                        "CQ": [
                            "How does the ontology differentiate between AsparagusTopping and CaperTopping?",
                            "Is there any topping instance that can be both AsparagusTopping and CaperTopping?",
                            "Which classes of toppings are defined as disjoint with AsparagusTopping?"
                        ]
                    },
                    {
                        "axiom": "AsparagusTopping disjointWith MushroomTopping",
                        "CQ": [
                            "What is the ontological separation between AsparagusTopping and MushroomTopping?",
                            "Can an individual topping instance simultaneously be classified as both AsparagusTopping and MushroomTopping?",
                            "Which topping categories are formally defined as incompatible with MushroomTopping in the ontology?"
                        ]
                    },
                    {
                        "axiom": "AsparagusTopping disjointWith PetitPoisTopping",
                        "CQ": [
                            "What formal distinction does the ontology make between AsparagusTopping and PetitPoisTopping?",
                            "Is any topping instance permitted to be classified as both AsparagusTopping and PetitPoisTopping?",
                            "Which classes are formally specified as disjoint with PetitPoisTopping?"
                        ]
                    },
                    {
                        "axiom": "AsparagusTopping disjointWith TomatoTopping",
                        "CQ": [
                            "How does the ontology distinguish between AsparagusTopping and TomatoTopping?",
                            "Is any topping classified under both AsparagusTopping and TomatoTopping categories?",
                            "What toppings are specified as mutually exclusive with TomatoTopping?"
                        ]
                    },
                    {
                        "axiom": "AsparagusTopping propertyRestrictions [hasSpiciness some Mild]",
                        "CQ": [
                            "Is every AsparagusTopping required to have at least one 'hasSpiciness' property with a Mild value?",
                            "Must AsparagusTopping always be associated with some level of Mild spiciness through the hasSpiciness property?",
                            "Can there exist an instance of AsparagusTopping without having any Mild spiciness via the hasSpiciness relationship?"
                        ]
                    }
                ]
            },
            "CaperTopping": {
                "axiom": {
                    "subClassOf": [
                        "VegetableTopping"
                    ],
                    "disjointWith": [
                        "RocketTopping",
                        "LeekTopping",
                        "OnionTopping",
                        "SpinachTopping",
                        "GarlicTopping",
                        "ArtichokeTopping",
                        "PepperTopping",
                        "AsparagusTopping",
                        "OliveTopping",
                        "MushroomTopping",
                        "PetitPoisTopping",
                        "TomatoTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Mild]"
                    ]
                },
                "description": "CaperTopping is defined as a subclass of VegetableTopping, indicating that it is a specific type of vegetable-based topping. It is explicitly disjoint with other vegetable toppings such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping, meaning that an individual topping cannot belong to both CaperTopping and any of these classes simultaneously. Additionally, CaperTopping is characterized by having a property restriction requiring that it has some level of spiciness classified as Mild.",
                "CQ": [
                    {
                        "axiom": "CaperTopping subClassOf VegetableTopping",
                        "CQ": [
                            "Is CaperTopping included among the subclasses of VegetableTopping?",
                            "What broader classes does CaperTopping belong to within the topping hierarchy?",
                            "Does VegetableTopping encompass CaperTopping as a specific type?"
                        ]
                    },
                    {
                        "axiom": "CaperTopping disjointWith RocketTopping",
                        "CQ": [
                            "How does the ontology indicate the separation between CaperTopping and RocketTopping?",
                            "Is there any instance that can be both CaperTopping and RocketTopping simultaneously?",
                            "Which topping classes are defined as disjoint with RocketTopping?"
                        ]
                    },
                    {
                        "axiom": "CaperTopping disjointWith LeekTopping",
                        "CQ": [
                            "What type of ontological separation is defined between CaperTopping and LeekTopping?",
                            "Is there any instance in the ontology that can simultaneously be classified as both CaperTopping and LeekTopping?",
                            "Which topping classes are formally specified as disjoint with LeekTopping?"
                        ]
                    },
                    {
                        "axiom": "CaperTopping disjointWith OnionTopping",
                        "CQ": [
                            "What logical separation is specified between CaperTopping and OnionTopping in the ontology?",
                            "Is there any individual that could be considered both a CaperTopping and an OnionTopping?",
                            "Which topping classes are formally stated as being mutually exclusive with OnionTopping?"
                        ]
                    },
                    {
                        "axiom": "CaperTopping disjointWith SpinachTopping",
                        "CQ": [
                            "What is the ontological distinction between CaperTopping and SpinachTopping?",
                            "Is it allowable for a single pizza topping to be classified as both CaperTopping and SpinachTopping?",
                            "Which topping classes are specified as mutually exclusive with SpinachTopping?"
                        ]
                    },
                    {
                        "axiom": "CaperTopping disjointWith GarlicTopping",
                        "CQ": [
                            "Are there any toppings that are classified as both CaperTopping and GarlicTopping?",
                            "Which topping categories are specified as mutually exclusive with GarlicTopping?",
                            "What ontological separation is defined between CaperTopping and GarlicTopping?"
                        ]
                    },
                    {
                        "axiom": "CaperTopping disjointWith ArtichokeTopping",
                        "CQ": [
                            "What logical distinction separates CaperTopping from ArtichokeTopping in the ontology?",
                            "Is any topping allowed to be both a CaperTopping and an ArtichokeTopping?",
                            "Which other topping classes are directly stated as disjoint with ArtichokeTopping?"
                        ]
                    },
                    {
                        "axiom": "CaperTopping disjointWith PepperTopping",
                        "CQ": [
                            "How does the ontology represent the incompatibility between CaperTopping and PepperTopping?",
                            "Is there any topping that can be classified as both CaperTopping and PepperTopping?",
                            "Which topping classes are specified as disjoint with CaperTopping?"
                        ]
                    },
                    {
                        "axiom": "CaperTopping disjointWith AsparagusTopping",
                        "CQ": [
                            "How does the ontology distinguish between CaperTopping and AsparagusTopping?",
                            "Is there any instance that can qualify as both CaperTopping and AsparagusTopping?",
                            "Which topping classes are asserted as mutually exclusive with AsparagusTopping?"
                        ]
                    },
                    {
                        "axiom": "CaperTopping disjointWith OliveTopping",
                        "CQ": [
                            "What ontological separation is established between CaperTopping and OliveTopping?",
                            "Can a pizza topping be classified as both a CaperTopping and an OliveTopping simultaneously?",
                            "Which topping classes are defined as mutually exclusive with CaperTopping?"
                        ]
                    },
                    {
                        "axiom": "CaperTopping disjointWith MushroomTopping",
                        "CQ": [
                            "What logical separation is defined between CaperTopping and MushroomTopping within the ontology?",
                            "Is an entity allowed to be classified as both a CaperTopping and a MushroomTopping?",
                            "Which topping categories are explicitly marked as incompatible with MushroomTopping?"
                        ]
                    },
                    {
                        "axiom": "CaperTopping disjointWith PetitPoisTopping",
                        "CQ": [
                            "What is the ontological separation between CaperTopping and PetitPoisTopping?",
                            "Can an ingredient be classified simultaneously as both CaperTopping and PetitPoisTopping?",
                            "Which topping types are formally defined as disjoint with CaperTopping?"
                        ]
                    },
                    {
                        "axiom": "CaperTopping disjointWith TomatoTopping",
                        "CQ": [
                            "Are there any constraints in the ontology preventing an ingredient from being both a CaperTopping and a TomatoTopping?",
                            "Which topping classes are defined as incompatible with CaperTopping?",
                            "Does the ontology specify a mutual exclusivity between CaperTopping and TomatoTopping?"
                        ]
                    },
                    {
                        "axiom": "CaperTopping propertyRestrictions [hasSpiciness some Mild]",
                        "CQ": [
                            "Must every CaperTopping have at least one hasSpiciness value that is Mild?",
                            "Is it possible for a CaperTopping to lack any hasSpiciness relation with Mild as a value?",
                            "Does the definition of CaperTopping require the existence of a Mild spiciness property?"
                        ]
                    }
                ]
            },
            "CheeseyVegetableTopping": {
                "axiom": {
                    "subClassOf": [
                        "VegetableTopping",
                        "CheeseTopping"
                    ]
                },
                "description": "CheeseyVegetableTopping is defined as a subclass of both VegetableTopping and CheeseTopping. However, since these two parent classes are disjoint, CheeseyVegetableTopping is necessarily inconsistent—no individual can simultaneously belong to both parent classes. As a result, this class cannot have any members. This scenario is often used in ontology modeling tutorials (such as called ProbeInconsistentTopping in the ProtegeOWL Tutorial) to demonstrate the effects of disjointness and inconsistency in class hierarchies.",
                "CQ": [
                    {
                        "axiom": "CheeseyVegetableTopping subClassOf VegetableTopping",
                        "CQ": [
                            "Is CheeseyVegetableTopping classified as a kind of VegetableTopping?",
                            "Which toppings fall under the category of VegetableTopping, such as CheeseyVegetableTopping?",
                            "What more general topping types encompass CheeseyVegetableTopping?"
                        ]
                    },
                    {
                        "axiom": "CheeseyVegetableTopping subClassOf CheeseTopping",
                        "CQ": [
                            "Is CheeseyVegetableTopping categorized as a type of CheeseTopping?",
                            "What specific types fall under the class CheeseTopping, with regard to CheeseyVegetableTopping?",
                            "Which broader classes encompass CheeseyVegetableTopping within their classification?"
                        ]
                    }
                ]
            },
            "GarlicTopping": {
                "axiom": {
                    "subClassOf": [
                        "VegetableTopping"
                    ],
                    "disjointWith": [
                        "RocketTopping",
                        "LeekTopping",
                        "OnionTopping",
                        "SpinachTopping",
                        "ArtichokeTopping",
                        "PepperTopping",
                        "AsparagusTopping",
                        "OliveTopping",
                        "CaperTopping",
                        "MushroomTopping",
                        "PetitPoisTopping",
                        "TomatoTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Medium]"
                    ]
                },
                "description": "GarlicTopping is defined as a subclass of VegetableTopping, meaning it is a type of vegetable-based topping. It is explicitly disjoint with several other specific vegetable toppings, such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping, ensuring that an individual cannot belong to both GarlicTopping and any of these other topping classes. Additionally, GarlicTopping is characterized by the property that its members must have at least some medium level of spiciness (hasSpiciness some Medium).",
                "CQ": [
                    {
                        "axiom": "GarlicTopping subClassOf VegetableTopping",
                        "CQ": [
                            "Is GarlicTopping categorized under the broader class of VegetableTopping?",
                            "Which toppings are classified as subclasses of VegetableTopping, including GarlicTopping?",
                            "What are the immediate parent classes associated with GarlicTopping?"
                        ]
                    },
                    {
                        "axiom": "GarlicTopping disjointWith RocketTopping",
                        "CQ": [
                            "What is the ontological separation between GarlicTopping and RocketTopping?",
                            "Is there any instance that can be classified simultaneously as GarlicTopping and RocketTopping?",
                            "Which toppings are declared to be incompatible with GarlicTopping?"
                        ]
                    },
                    {
                        "axiom": "GarlicTopping disjointWith LeekTopping",
                        "CQ": [
                            "How are GarlicTopping and LeekTopping modeled with respect to mutual exclusivity in the ontology?",
                            "Is any topping allowed to be classified as both GarlicTopping and LeekTopping simultaneously?",
                            "Which topping classes are identified as disjoint with GarlicTopping within the ontology?"
                        ]
                    },
                    {
                        "axiom": "GarlicTopping disjointWith OnionTopping",
                        "CQ": [
                            "How does the ontology specify the relationship between GarlicTopping and OnionTopping?",
                            "Is there any instance that can simultaneously be classified as both GarlicTopping and OnionTopping?",
                            "Which classes are defined as disjoint with OnionTopping within the ontology?"
                        ]
                    },
                    {
                        "axiom": "GarlicTopping disjointWith SpinachTopping",
                        "CQ": [
                            "What logical separation is defined between GarlicTopping and SpinachTopping?",
                            "Is there any topping that could simultaneously be classified as GarlicTopping and SpinachTopping?",
                            "Which other topping classes are declared as mutually exclusive with SpinachTopping?"
                        ]
                    },
                    {
                        "axiom": "GarlicTopping disjointWith ArtichokeTopping",
                        "CQ": [
                            "How does the ontology represent the exclusivity between GarlicTopping and ArtichokeTopping?",
                            "Is there any instance that can be classified as both GarlicTopping and ArtichokeTopping?",
                            "Which toppings are defined as mutually exclusive with ArtichokeTopping?"
                        ]
                    },
                    {
                        "axiom": "GarlicTopping disjointWith PepperTopping",
                        "CQ": [
                            "How are GarlicTopping and PepperTopping related in terms of compatibility?",
                            "Is it permissible for a pizza topping to be classified as both GarlicTopping and PepperTopping?",
                            "Which toppings have been defined as mutually exclusive with GarlicTopping?"
                        ]
                    },
                    {
                        "axiom": "GarlicTopping disjointWith AsparagusTopping",
                        "CQ": [
                            "What ontological separation is specified between GarlicTopping and AsparagusTopping?",
                            "Is it allowed for a pizza topping to be classified as both GarlicTopping and AsparagusTopping concurrently?",
                            "Which topping classes are formally specified as mutually exclusive with AsparagusTopping within the ontology?"
                        ]
                    },
                    {
                        "axiom": "GarlicTopping disjointWith OliveTopping",
                        "CQ": [
                            "How does the ontology represent the mutual exclusivity of GarlicTopping and OliveTopping?",
                            "Is it allowable for a single pizza to have both GarlicTopping and OliveTopping in the ontology?",
                            "Which other topping classes are formally disjoint with GarlicTopping?"
                        ]
                    },
                    {
                        "axiom": "GarlicTopping disjointWith CaperTopping",
                        "CQ": [
                            "How does the ontology represent the incompatibility between GarlicTopping and CaperTopping?",
                            "Is any pizza topping allowed to be both GarlicTopping and CaperTopping simultaneously according to the ontology?",
                            "Which toppings are specified as disjoint with CaperTopping in the knowledge base?"
                        ]
                    },
                    {
                        "axiom": "GarlicTopping disjointWith MushroomTopping",
                        "CQ": [
                            "What is the ontological separation defined between GarlicTopping and MushroomTopping?",
                            "Does the ontology allow any topping to simultaneously be a GarlicTopping and a MushroomTopping?",
                            "Which toppings are specified as mutually exclusive with GarlicTopping?"
                        ]
                    },
                    {
                        "axiom": "GarlicTopping disjointWith PetitPoisTopping",
                        "CQ": [
                            "What logical separation is defined between GarlicTopping and PetitPoisTopping in the ontology?",
                            "Is there any instance that can be classified as both GarlicTopping and PetitPoisTopping?",
                            "Which topping classes are specified as disjoint with PetitPoisTopping?"
                        ]
                    },
                    {
                        "axiom": "GarlicTopping disjointWith TomatoTopping",
                        "CQ": [
                            "What is the ontological separation defined between GarlicTopping and TomatoTopping?",
                            "Can a single pizza topping instance belong to both GarlicTopping and TomatoTopping categories simultaneously?",
                            "Which toppings are formally specified as disjoint from GarlicTopping in the ontology?"
                        ]
                    },
                    {
                        "axiom": "GarlicTopping propertyRestrictions [hasSpiciness some Medium]",
                        "CQ": [
                            "Is it required that every GarlicTopping has at least one spiciness classified as Medium?",
                            "Can a GarlicTopping exist without exhibiting any Medium level of spiciness?",
                            "Does the definition of GarlicTopping entail the presence of Medium spiciness in at least one instance?"
                        ]
                    }
                ]
            },
            "LeekTopping": {
                "axiom": {
                    "subClassOf": [
                        "VegetableTopping"
                    ],
                    "disjointWith": [
                        "RocketTopping",
                        "OnionTopping",
                        "SpinachTopping",
                        "GarlicTopping",
                        "ArtichokeTopping",
                        "PepperTopping",
                        "AsparagusTopping",
                        "OliveTopping",
                        "CaperTopping",
                        "MushroomTopping",
                        "PetitPoisTopping",
                        "TomatoTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Mild]"
                    ]
                },
                "description": "LeekTopping is defined as a subclass of VegetableTopping, representing toppings made from leeks. It is explicitly disjoint from a range of other vegetable toppings—including RocketTopping, OnionTopping, SpinachTopping, and others—ensuring that no individual can be both a LeekTopping and any of these other toppings simultaneously. Furthermore, members of this class are characterized by the property that they have at least some level of mild spiciness (hasSpiciness some Mild), distinguishing their flavor profile among vegetable toppings.",
                "CQ": [
                    {
                        "axiom": "LeekTopping subClassOf VegetableTopping",
                        "CQ": [
                            "Is LeekTopping classified under the broader category of VegetableTopping?",
                            "Which toppings are categorized more specifically than VegetableTopping such as LeekTopping?",
                            "What higher-level categories does LeekTopping fall under?"
                        ]
                    },
                    {
                        "axiom": "LeekTopping disjointWith RocketTopping",
                        "CQ": [
                            "What is the ontological separation between LeekTopping and RocketTopping?",
                            "Can a pizza have both LeekTopping and RocketTopping as toppings simultaneously?",
                            "Which toppings are formally stated as mutually exclusive with LeekTopping in the ontology?"
                        ]
                    },
                    {
                        "axiom": "LeekTopping disjointWith OnionTopping",
                        "CQ": [
                            "How does the ontology represent the separation between LeekTopping and OnionTopping?",
                            "Is there any scenario where a topping is classified as both LeekTopping and OnionTopping?",
                            "Which other topping classes are specified as disjoint with OnionTopping?"
                        ]
                    },
                    {
                        "axiom": "LeekTopping disjointWith SpinachTopping",
                        "CQ": [
                            "What logical separation is defined between LeekTopping and SpinachTopping within the ontology?",
                            "Is there any instance that can be classified as both LeekTopping and SpinachTopping?",
                            "Which toppings are specified as being mutually exclusive with SpinachTopping?"
                        ]
                    },
                    {
                        "axiom": "LeekTopping disjointWith GarlicTopping",
                        "CQ": [
                            "What logical separation is specified between LeekTopping and GarlicTopping within the ontology?",
                            "Can an ingredient be considered both a LeekTopping and a GarlicTopping?",
                            "Which other topping classes are defined as disjoint with GarlicTopping?"
                        ]
                    },
                    {
                        "axiom": "LeekTopping disjointWith ArtichokeTopping",
                        "CQ": [
                            "What formal separation exists between LeekTopping and ArtichokeTopping in the ontology?",
                            "Is there any topping that can be classified simultaneously as both LeekTopping and ArtichokeTopping?",
                            "Which topping classes are asserted to be mutually exclusive with LeekTopping?"
                        ]
                    },
                    {
                        "axiom": "LeekTopping disjointWith PepperTopping",
                        "CQ": [
                            "What is the ontological distinction between LeekTopping and PepperTopping?",
                            "Can a single pizza topping instance be both a LeekTopping and a PepperTopping?",
                            "Which topping categories are explicitly defined as incompatible with LeekTopping?"
                        ]
                    },
                    {
                        "axiom": "LeekTopping disjointWith AsparagusTopping",
                        "CQ": [
                            "How does the ontology assert distinction between LeekTopping and AsparagusTopping?",
                            "Is any topping allowed to be both LeekTopping and AsparagusTopping simultaneously?",
                            "Which topping classes are formally incompatible with LeekTopping?"
                        ]
                    },
                    {
                        "axiom": "LeekTopping disjointWith OliveTopping",
                        "CQ": [
                            "What kind of logical separation is asserted between LeekTopping and OliveTopping?",
                            "Is it allowed for a topping to be classified simultaneously as LeekTopping and OliveTopping?",
                            "Which topping classes are stated as incompatible with OliveTopping?"
                        ]
                    },
                    {
                        "axiom": "LeekTopping disjointWith CaperTopping",
                        "CQ": [
                            "What constraints exist regarding the overlap between LeekTopping and CaperTopping?",
                            "Is any pizza topping classified as both a LeekTopping and a CaperTopping?",
                            "Which toppings are asserted as mutually exclusive with LeekTopping?"
                        ]
                    },
                    {
                        "axiom": "LeekTopping disjointWith MushroomTopping",
                        "CQ": [
                            "What ontological separation is specified between LeekTopping and MushroomTopping?",
                            "Is any topping instance allowed to be classified as both LeekTopping and MushroomTopping?",
                            "Which topping classes are formally identified as mutually exclusive with MushroomTopping?"
                        ]
                    },
                    {
                        "axiom": "LeekTopping disjointWith PetitPoisTopping",
                        "CQ": [
                            "What logical separation is specified between LeekTopping and PetitPoisTopping in the ontology?",
                            "Is it allowed for a pizza to have both LeekTopping and PetitPoisTopping at once?",
                            "Which toppings are declared as mutually exclusive with PetitPoisTopping?"
                        ]
                    },
                    {
                        "axiom": "LeekTopping disjointWith TomatoTopping",
                        "CQ": [
                            "What formal separation exists between LeekTopping and TomatoTopping in the ontology?",
                            "Is there any instance that could simultaneously be both a LeekTopping and a TomatoTopping?",
                            "Which topping classes are formally declared as disjoint with LeekTopping?"
                        ]
                    },
                    {
                        "axiom": "LeekTopping propertyRestrictions [hasSpiciness some Mild]",
                        "CQ": [
                            "Is it necessary for a LeekTopping to have the property 'hasSpiciness' with at least one Mild value?",
                            "Does every instance of LeekTopping possess a spiciness that includes Mild as one of its characteristics?",
                            "Can a LeekTopping exist without being associated with some degree of Mild spiciness?"
                        ]
                    }
                ]
            },
            "MushroomTopping": {
                "axiom": {
                    "subClassOf": [
                        "VegetableTopping"
                    ],
                    "disjointWith": [
                        "RocketTopping",
                        "LeekTopping",
                        "OnionTopping",
                        "SpinachTopping",
                        "GarlicTopping",
                        "ArtichokeTopping",
                        "PepperTopping",
                        "AsparagusTopping",
                        "OliveTopping",
                        "CaperTopping",
                        "PetitPoisTopping",
                        "TomatoTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Mild]"
                    ]
                },
                "description": "MushroomTopping is a subclass of VegetableTopping and is explicitly disjoint from other specific vegetable toppings such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, and others—ensuring that no individual can simultaneously belong to more than one of these topping types. Furthermore, MushroomTopping is characterized by the property that it must have some level of mild spiciness (hasSpiciness some Mild). This formalization defines MushroomTopping as a mild-flavored vegetable topping that is distinct from other named vegetable toppings in the ontology.",
                "CQ": [
                    {
                        "axiom": "MushroomTopping subClassOf VegetableTopping",
                        "CQ": [
                            "Is MushroomTopping classified as a specific type of VegetableTopping?",
                            "What general classes is MushroomTopping a specialization of?",
                            "Which toppings fall under the category of VegetableTopping, with MushroomTopping as an example?"
                        ]
                    },
                    {
                        "axiom": "MushroomTopping disjointWith RocketTopping",
                        "CQ": [
                            "What is the formal distinction between MushroomTopping and RocketTopping within the ontology?",
                            "Is it allowable for a single pizza topping to be classified as both MushroomTopping and RocketTopping?",
                            "Which topping classes are asserted as disjoint with RocketTopping?"
                        ]
                    },
                    {
                        "axiom": "MushroomTopping disjointWith LeekTopping",
                        "CQ": [
                            "What logical separation is present between MushroomTopping and LeekTopping in the ontology?",
                            "Can any pizza topping instance simultaneously be classified as both MushroomTopping and LeekTopping?",
                            "Which topping categories are formally specified as disjoint with LeekTopping?"
                        ]
                    },
                    {
                        "axiom": "MushroomTopping disjointWith OnionTopping",
                        "CQ": [
                            "How does the ontology represent the separation between MushroomTopping and OnionTopping?",
                            "Is there any instance that can simultaneously be classified as both MushroomTopping and OnionTopping?",
                            "Which topping classes are formally defined as mutually exclusive with OnionTopping?"
                        ]
                    },
                    {
                        "axiom": "MushroomTopping disjointWith SpinachTopping",
                        "CQ": [
                            "How does the ontology represent the differentiation between MushroomTopping and SpinachTopping?",
                            "Is there any possibility for a pizza topping to be classified as both MushroomTopping and SpinachTopping?",
                            "Which toppings are specified as mutually exclusive with MushroomTopping?"
                        ]
                    },
                    {
                        "axiom": "MushroomTopping disjointWith GarlicTopping",
                        "CQ": [
                            "How does the ontology differentiate between MushroomTopping and GarlicTopping?",
                            "Is it allowed for a single topping to be classified as both MushroomTopping and GarlicTopping?",
                            "Which toppings are specified as mutually exclusive with GarlicTopping?"
                        ]
                    },
                    {
                        "axiom": "MushroomTopping disjointWith ArtichokeTopping",
                        "CQ": [
                            "How are MushroomTopping and ArtichokeTopping logically related within the ontology?",
                            "Is there any instance that can simultaneously be MushroomTopping and ArtichokeTopping?",
                            "Which topping classes are specified as disjoint with MushroomTopping?"
                        ]
                    },
                    {
                        "axiom": "MushroomTopping disjointWith PepperTopping",
                        "CQ": [
                            "How is the incompatibility between MushroomTopping and PepperTopping represented in the ontology?",
                            "Is there an instance that can be both a MushroomTopping and a PepperTopping?",
                            "Which topping types are explicitly defined as disjoint with MushroomTopping?"
                        ]
                    },
                    {
                        "axiom": "MushroomTopping disjointWith AsparagusTopping",
                        "CQ": [
                            "What is the asserted incompatibility between MushroomTopping and AsparagusTopping in the ontology?",
                            "Can a single pizza have both MushroomTopping and AsparagusTopping simultaneously?",
                            "Which toppings are defined as mutually exclusive with MushroomTopping?"
                        ]
                    },
                    {
                        "axiom": "MushroomTopping disjointWith OliveTopping",
                        "CQ": [
                            "What logical separation is present between MushroomTopping and OliveTopping in the ontology?",
                            "Is any pizza topping classified simultaneously as both MushroomTopping and OliveTopping?",
                            "Which topping classes are explicitly stated to be incompatible with OliveTopping?"
                        ]
                    },
                    {
                        "axiom": "MushroomTopping disjointWith CaperTopping",
                        "CQ": [
                            "How does the ontology specify the separation between MushroomTopping and CaperTopping?",
                            "Is it allowable for a pizza to have both MushroomTopping and CaperTopping simultaneously?",
                            "What toppings are formally disjoint with MushroomTopping in the ontology?"
                        ]
                    },
                    {
                        "axiom": "MushroomTopping disjointWith PetitPoisTopping",
                        "CQ": [
                            "What type of distinction is asserted between MushroomTopping and PetitPoisTopping in the ontology?",
                            "Could an individual topping be classified as both MushroomTopping and PetitPoisTopping?",
                            "Which topping classes are defined as incompatible with PetitPoisTopping?"
                        ]
                    },
                    {
                        "axiom": "MushroomTopping disjointWith TomatoTopping",
                        "CQ": [
                            "What ontological separation is asserted between MushroomTopping and TomatoTopping?",
                            "Is there an instance that can simultaneously be classified as both MushroomTopping and TomatoTopping?",
                            "Which topping types are formally specified as disjoint from TomatoTopping?"
                        ]
                    },
                    {
                        "axiom": "MushroomTopping propertyRestrictions [hasSpiciness some Mild]",
                        "CQ": [
                            "Must every MushroomTopping possess at least one spiciness classified as Mild?",
                            "Is it required that MushroomTopping is associated with some instance of hasSpiciness equal to Mild?",
                            "Can a MushroomTopping exist without having any Mild spiciness?"
                        ]
                    }
                ]
            },
            "OliveTopping": {
                "axiom": {
                    "subClassOf": [
                        "VegetableTopping"
                    ],
                    "disjointWith": [
                        "RocketTopping",
                        "LeekTopping",
                        "OnionTopping",
                        "SpinachTopping",
                        "GarlicTopping",
                        "ArtichokeTopping",
                        "PepperTopping",
                        "AsparagusTopping",
                        "CaperTopping",
                        "MushroomTopping",
                        "PetitPoisTopping",
                        "TomatoTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Mild]"
                    ]
                },
                "description": "OliveTopping is defined as a subclass of VegetableTopping and is disjoint with other vegetable toppings such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping—meaning an individual cannot belong to both OliveTopping and any of these classes. Members of the OliveTopping class are further characterized by the property that they have at least some level of spiciness classified as mild.",
                "CQ": [
                    {
                        "axiom": "OliveTopping subClassOf VegetableTopping",
                        "CQ": [
                            "Does OliveTopping fall under the category of VegetableTopping?",
                            "What are all subclasses classified as VegetableTopping, including OliveTopping?",
                            "Which broader classes does OliveTopping inherit from?"
                        ]
                    },
                    {
                        "axiom": "OliveTopping disjointWith RocketTopping",
                        "CQ": [
                            "What formal distinction separates OliveTopping from RocketTopping within the ontology?",
                            "Is there a scenario where a topping could simultaneously be classified as OliveTopping and RocketTopping?",
                            "Which topping categories, aside from RocketTopping, are specified as mutually exclusive with OliveTopping?"
                        ]
                    },
                    {
                        "axiom": "OliveTopping disjointWith LeekTopping",
                        "CQ": [
                            "How does the ontology define the connection between OliveTopping and LeekTopping?",
                            "Is there any instance that can simultaneously belong to both OliveTopping and LeekTopping classes?",
                            "Which topping classes are stated as mutually exclusive with OliveTopping?"
                        ]
                    },
                    {
                        "axiom": "OliveTopping disjointWith OnionTopping",
                        "CQ": [
                            "How does the ontology distinguish between OliveTopping and OnionTopping?",
                            "Is it permitted for a topping to be both OliveTopping and OnionTopping simultaneously?",
                            "Which topping categories are asserted as mutually exclusive with OliveTopping?"
                        ]
                    },
                    {
                        "axiom": "OliveTopping disjointWith SpinachTopping",
                        "CQ": [
                            "Are OliveTopping and SpinachTopping considered mutually exclusive in the ontology?",
                            "Is there any topping that can simultaneously be categorized as both OliveTopping and SpinachTopping?",
                            "Which topping classes are explicitly stated as disjoint with OliveTopping?"
                        ]
                    },
                    {
                        "axiom": "OliveTopping disjointWith GarlicTopping",
                        "CQ": [
                            "What is the nature of the disjointness asserted between OliveTopping and GarlicTopping?",
                            "Is it allowed for a pizza topping to be classified as both OliveTopping and GarlicTopping?",
                            "Which topping classes are formally specified as disjoint with GarlicTopping?"
                        ]
                    },
                    {
                        "axiom": "OliveTopping disjointWith ArtichokeTopping",
                        "CQ": [
                            "What logical separation is declared between OliveTopping and ArtichokeTopping in the ontology?",
                            "Is it allowed for a topping entity to be classified as both OliveTopping and ArtichokeTopping simultaneously?",
                            "Which topping categories are formally specified as disjoint with OliveTopping?"
                        ]
                    },
                    {
                        "axiom": "OliveTopping disjointWith PepperTopping",
                        "CQ": [
                            "How does the ontology define the distinction between OliveTopping and PepperTopping?",
                            "Is any pizza topping instance permitted to belong to both OliveTopping and PepperTopping categories?",
                            "Which topping classes are identified in the ontology as being incompatible with PepperTopping?"
                        ]
                    },
                    {
                        "axiom": "OliveTopping disjointWith AsparagusTopping",
                        "CQ": [
                            "What is the logical separation between OliveTopping and AsparagusTopping in the ontology?",
                            "Can a pizza contain both OliveTopping and AsparagusTopping as toppings at once?",
                            "Which other topping classes are defined as mutually exclusive with OliveTopping?"
                        ]
                    },
                    {
                        "axiom": "OliveTopping disjointWith CaperTopping",
                        "CQ": [
                            "What is the ontological separation between OliveTopping and CaperTopping?",
                            "Is there any instance that can be assigned to both OliveTopping and CaperTopping?",
                            "Which topping classes are specified as mutually exclusive with CaperTopping?"
                        ]
                    },
                    {
                        "axiom": "OliveTopping disjointWith MushroomTopping",
                        "CQ": [
                            "What is the nature of the disjointness between OliveTopping and MushroomTopping?",
                            "Can a pizza topping belong to both OliveTopping and MushroomTopping categories simultaneously?",
                            "Which toppings are declared as mutually exclusive with OliveTopping?"
                        ]
                    },
                    {
                        "axiom": "OliveTopping disjointWith PetitPoisTopping",
                        "CQ": [
                            "What logical separation is defined between OliveTopping and PetitPoisTopping in the ontology?",
                            "Is there any topping that can be an instance of both OliveTopping and PetitPoisTopping?",
                            "Which toppings, aside from PetitPoisTopping, are specified to be disjoint with OliveTopping?"
                        ]
                    },
                    {
                        "axiom": "OliveTopping disjointWith TomatoTopping",
                        "CQ": [
                            "How does the ontology define the separation between OliveTopping and TomatoTopping?",
                            "Is any pizza topping allowed to be classified as both OliveTopping and TomatoTopping?",
                            "Which topping classes are specified as being disjoint with OliveTopping?"
                        ]
                    },
                    {
                        "axiom": "OliveTopping propertyRestrictions [hasSpiciness some Mild]",
                        "CQ": [
                            "Is every OliveTopping required to have a spiciness property with at least one value of Mild?",
                            "Can an OliveTopping exist without any mild spiciness associated with it?",
                            "Are all OliveTopping instances guaranteed to possess some degree of mild spiciness?"
                        ]
                    }
                ]
            },
            "OnionTopping": {
                "axiom": {
                    "subClassOf": [
                        "VegetableTopping"
                    ],
                    "disjointWith": [
                        "RocketTopping",
                        "LeekTopping",
                        "SpinachTopping",
                        "GarlicTopping",
                        "ArtichokeTopping",
                        "PepperTopping",
                        "AsparagusTopping",
                        "OliveTopping",
                        "CaperTopping",
                        "MushroomTopping",
                        "PetitPoisTopping",
                        "TomatoTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Medium]"
                    ]
                },
                "description": "OnionTopping is defined as a subclass of VegetableTopping, representing a type of topping derived from vegetables. It is explicitly disjoint with several other vegetable topping classes, such as RocketTopping, LeekTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping, ensuring that no individual can simultaneously belong to OnionTopping and any of these classes. Additionally, OnionTopping is characterized by the property restriction that all its instances must have at least some medium level of spiciness (hasSpiciness some Medium).",
                "CQ": [
                    {
                        "axiom": "OnionTopping subClassOf VegetableTopping",
                        "CQ": [
                            "Is OnionTopping categorized as an instance within VegetableTopping subclasses?",
                            "Which toppings are classified under VegetableTopping, and does OnionTopping appear among them?",
                            "To which broader topping categories does OnionTopping belong according to its classification?"
                        ]
                    },
                    {
                        "axiom": "OnionTopping disjointWith RocketTopping",
                        "CQ": [
                            "What is the formal ontological separation defined between OnionTopping and RocketTopping?",
                            "Is there any individual that can simultaneously be classified as both OnionTopping and RocketTopping?",
                            "Which topping classes are specified as mutually exclusive with OnionTopping?"
                        ]
                    },
                    {
                        "axiom": "OnionTopping disjointWith LeekTopping",
                        "CQ": [
                            "Are OnionTopping and LeekTopping defined as mutually exclusive in the ontology?",
                            "Is there any topping that can be both an OnionTopping and a LeekTopping simultaneously?",
                            "Which topping categories are explicitly stated as disjoint with OnionTopping?"
                        ]
                    },
                    {
                        "axiom": "OnionTopping disjointWith SpinachTopping",
                        "CQ": [
                            "How does the ontology distinguish between OnionTopping and SpinachTopping?",
                            "Is there any topping that can be classified as both OnionTopping and SpinachTopping?",
                            "Which toppings are asserted as mutually exclusive with SpinachTopping?"
                        ]
                    },
                    {
                        "axiom": "OnionTopping disjointWith GarlicTopping",
                        "CQ": [
                            "What logical separation is defined between OnionTopping and GarlicTopping within the ontology?",
                            "Is there any instance that can simultaneously be classified as both OnionTopping and GarlicTopping?",
                            "Which other topping classes, besides GarlicTopping, are declared as disjoint with OnionTopping?"
                        ]
                    },
                    {
                        "axiom": "OnionTopping disjointWith ArtichokeTopping",
                        "CQ": [
                            "Are OnionTopping and ArtichokeTopping mutually exclusive topping categories in the ontology?",
                            "Is there any instance that can simultaneously be classified as both OnionTopping and ArtichokeTopping?",
                            "Which topping classes are specified as disjoint with ArtichokeTopping?"
                        ]
                    },
                    {
                        "axiom": "OnionTopping disjointWith PepperTopping",
                        "CQ": [
                            "How are OnionTopping and PepperTopping differentiated in the ontology?",
                            "Is there any instance that can belong to both OnionTopping and PepperTopping categories concurrently?",
                            "What other topping classes are formally specified as mutually exclusive with OnionTopping?"
                        ]
                    },
                    {
                        "axiom": "OnionTopping disjointWith AsparagusTopping",
                        "CQ": [
                            "How are OnionTopping and AsparagusTopping differentiated within the ontology?",
                            "Is any pizza topping allowed to be classified as both OnionTopping and AsparagusTopping simultaneously?",
                            "Which topping classes are specified as disjoint with OnionTopping?"
                        ]
                    },
                    {
                        "axiom": "OnionTopping disjointWith OliveTopping",
                        "CQ": [
                            "How does the ontology distinguish between OnionTopping and OliveTopping?",
                            "Is there an instance that can simultaneously be classified as both OnionTopping and OliveTopping?",
                            "Which other topping classes are specified as disjoint with OliveTopping?"
                        ]
                    },
                    {
                        "axiom": "OnionTopping disjointWith CaperTopping",
                        "CQ": [
                            "How does the ontology differentiate between OnionTopping and CaperTopping?",
                            "Is any topping instance allowed to be classified as both OnionTopping and CaperTopping simultaneously?",
                            "Which topping types are explicitly marked as disjoint from CaperTopping within the ontology?"
                        ]
                    },
                    {
                        "axiom": "OnionTopping disjointWith MushroomTopping",
                        "CQ": [
                            "How does the ontology distinguish between OnionTopping and MushroomTopping?",
                            "Is there any scenario where a topping can be both an OnionTopping and a MushroomTopping?",
                            "Which topping classes are specified as mutually exclusive with OnionTopping?"
                        ]
                    },
                    {
                        "axiom": "OnionTopping disjointWith PetitPoisTopping",
                        "CQ": [
                            "What logical separation is defined between OnionTopping and PetitPoisTopping in the ontology?",
                            "Is it allowable for one pizza topping to be both OnionTopping and PetitPoisTopping?",
                            "Which topping classes are specified as mutually exclusive with OnionTopping?"
                        ]
                    },
                    {
                        "axiom": "OnionTopping disjointWith TomatoTopping",
                        "CQ": [
                            "How does the ontology specify the connection or separation between OnionTopping and TomatoTopping?",
                            "Is there any instance that can be classified as both OnionTopping and TomatoTopping?",
                            "Which topping classes are stated to be mutually exclusive with OnionTopping?"
                        ]
                    },
                    {
                        "axiom": "OnionTopping propertyRestrictions [hasSpiciness some Medium]",
                        "CQ": [
                            "Is every OnionTopping required to have the hasSpiciness property with at least some value classified as Medium?",
                            "Can an OnionTopping exist without being associated to a Medium level of spiciness through the hasSpiciness property?",
                            "Are there OnionToppings that must necessarily exhibit a hasSpiciness relation with something possessing Medium spiciness?"
                        ]
                    }
                ]
            },
            "PepperTopping": {
                "axiom": {
                    "subClassOf": [
                        "VegetableTopping"
                    ],
                    "disjointWith": [
                        "RocketTopping",
                        "LeekTopping",
                        "OnionTopping",
                        "SpinachTopping",
                        "GarlicTopping",
                        "ArtichokeTopping",
                        "AsparagusTopping",
                        "OliveTopping",
                        "CaperTopping",
                        "MushroomTopping",
                        "PetitPoisTopping",
                        "TomatoTopping"
                    ]
                },
                "description": "PepperTopping is defined as a subclass of VegetableTopping, indicating it is a specific type of vegetable-based topping. It is explicitly disjoint with RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping—meaning no individual can simultaneously be a PepperTopping and any of these other vegetable topping classes. This establishes PepperTopping as a distinct and non-overlapping category within vegetable toppings.",
                "CQ": [
                    {
                        "axiom": "PepperTopping subClassOf VegetableTopping",
                        "CQ": [
                            "Is PepperTopping classified under the broader category of VegetableTopping?",
                            "Which toppings are categorized as specific types within VegetableTopping, such as PepperTopping?",
                            "What general classes does PepperTopping fall under in the context of toppings?"
                        ]
                    },
                    {
                        "axiom": "PepperTopping disjointWith RocketTopping",
                        "CQ": [
                            "How are PepperTopping and RocketTopping represented with respect to each other in the ontology?",
                            "Is an ingredient allowed to be classified as both PepperTopping and RocketTopping?",
                            "What other topping categories, if any, are modeled as mutually exclusive with RocketTopping?"
                        ]
                    },
                    {
                        "axiom": "PepperTopping disjointWith LeekTopping",
                        "CQ": [
                            "How does the ontology differentiate between PepperTopping and LeekTopping?",
                            "Is any topping instance allowed to be classified as both PepperTopping and LeekTopping?",
                            "Which toppings are specified as mutually exclusive with LeekTopping?"
                        ]
                    },
                    {
                        "axiom": "PepperTopping disjointWith OnionTopping",
                        "CQ": [
                            "What logical separation is defined between PepperTopping and OnionTopping in the ontology?",
                            "Is there any topping that can simultaneously be classified as both PepperTopping and OnionTopping?",
                            "Which topping classes are specified as being mutually exclusive with PepperTopping?"
                        ]
                    },
                    {
                        "axiom": "PepperTopping disjointWith SpinachTopping",
                        "CQ": [
                            "How does the ontology distinguish between PepperTopping and SpinachTopping?",
                            "Is there an instance that belongs to both PepperTopping and SpinachTopping categories?",
                            "Which toppings are declared disjoint with SpinachTopping?"
                        ]
                    },
                    {
                        "axiom": "PepperTopping disjointWith GarlicTopping",
                        "CQ": [
                            "What logical separation exists between PepperTopping and GarlicTopping in the ontology?",
                            "Is there any instance that can be classified as both PepperTopping and GarlicTopping?",
                            "Which topping classes are specified as disjoint with GarlicTopping?"
                        ]
                    },
                    {
                        "axiom": "PepperTopping disjointWith ArtichokeTopping",
                        "CQ": [
                            "What ontological separation is defined between PepperTopping and ArtichokeTopping?",
                            "Is there any instance that can qualify as both a PepperTopping and an ArtichokeTopping?",
                            "Which toppings are formally incompatible with PepperTopping in the ontology?"
                        ]
                    },
                    {
                        "axiom": "PepperTopping disjointWith AsparagusTopping",
                        "CQ": [
                            "What logical exclusivity exists between PepperTopping and AsparagusTopping within the ontology?",
                            "Is it allowed for a single pizza to have both PepperTopping and AsparagusTopping simultaneously?",
                            "Which topping classes are formally specified as mutually exclusive with PepperTopping?"
                        ]
                    },
                    {
                        "axiom": "PepperTopping disjointWith OliveTopping",
                        "CQ": [
                            "What ontological criterion separates PepperTopping from OliveTopping?",
                            "Is there any topping entity classified under both PepperTopping and OliveTopping?",
                            "Which topping categories are defined as mutually exclusive with OliveTopping?"
                        ]
                    },
                    {
                        "axiom": "PepperTopping disjointWith CaperTopping",
                        "CQ": [
                            "What is the ontological distinction between PepperTopping and CaperTopping?",
                            "Is any food item allowed to possess both the PepperTopping and CaperTopping classifications simultaneously?",
                            "Which topping categories are formally specified as mutually exclusive with CaperTopping?"
                        ]
                    },
                    {
                        "axiom": "PepperTopping disjointWith MushroomTopping",
                        "CQ": [
                            "How does the ontology represent the incompatibility between PepperTopping and MushroomTopping?",
                            "Is any topping instance allowed to be classified as both PepperTopping and MushroomTopping?",
                            "Which topping types are defined as disjoint with PepperTopping?"
                        ]
                    },
                    {
                        "axiom": "PepperTopping disjointWith PetitPoisTopping",
                        "CQ": [
                            "What logical constraint separates PepperTopping from PetitPoisTopping in the ontology?",
                            "Is any topping instance allowed to belong to both PepperTopping and PetitPoisTopping simultaneously?",
                            "Which topping classes are defined as disjoint with PepperTopping?"
                        ]
                    },
                    {
                        "axiom": "PepperTopping disjointWith TomatoTopping",
                        "CQ": [
                            "How does the ontology define the exclusivity between PepperTopping and TomatoTopping?",
                            "Is any topping instance allowed to be classified as both PepperTopping and TomatoTopping?",
                            "Which topping categories are formally specified as incompatible with PepperTopping?"
                        ]
                    }
                ]
            },
            "PetitPoisTopping": {
                "axiom": {
                    "subClassOf": [
                        "VegetableTopping"
                    ],
                    "disjointWith": [
                        "RocketTopping",
                        "LeekTopping",
                        "OnionTopping",
                        "SpinachTopping",
                        "GarlicTopping",
                        "ArtichokeTopping",
                        "PepperTopping",
                        "AsparagusTopping",
                        "OliveTopping",
                        "CaperTopping",
                        "MushroomTopping",
                        "TomatoTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Mild]"
                    ]
                },
                "description": "PetitPoisTopping is defined as a subclass of VegetableTopping and is explicitly disjoint with other vegetable toppings such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, and TomatoTopping—meaning no individual can simultaneously belong to PetitPoisTopping and any of these other topping classes. Additionally, PetitPoisTopping is characterized by the property restriction that it has some level of spiciness classified as Mild. This formalization ensures that PetitPoisTopping represents a unique, mildly spicy vegetable topping distinct from all other specified vegetable toppings.",
                "CQ": [
                    {
                        "axiom": "PetitPoisTopping subClassOf VegetableTopping",
                        "CQ": [
                            "Is PetitPoisTopping included as a more specific type within VegetableTopping?",
                            "Which toppings fall under VegetableTopping, and does this include PetitPoisTopping?",
                            "What higher-level categories encompass PetitPoisTopping?"
                        ]
                    },
                    {
                        "axiom": "PetitPoisTopping disjointWith RocketTopping",
                        "CQ": [
                            "How does the ontology specify the relationship between PetitPoisTopping and RocketTopping?",
                            "Is there any entity that can be an instance of both PetitPoisTopping and RocketTopping?",
                            "What toppings are formally declared as disjoint with RocketTopping within the ontology?"
                        ]
                    },
                    {
                        "axiom": "PetitPoisTopping disjointWith LeekTopping",
                        "CQ": [
                            "What formal constraint exists between PetitPoisTopping and LeekTopping in the ontology?",
                            "Is it allowable for a single pizza to have both PetitPoisTopping and LeekTopping as toppings?",
                            "Which classes are specified as disjoint with PetitPoisTopping?"
                        ]
                    },
                    {
                        "axiom": "PetitPoisTopping disjointWith OnionTopping",
                        "CQ": [
                            "How does the ontology represent the distinction between PetitPoisTopping and OnionTopping?",
                            "Is it allowed for a pizza topping to be classified as both PetitPoisTopping and OnionTopping?",
                            "Which topping classes are formally disjoint with OnionTopping?"
                        ]
                    },
                    {
                        "axiom": "PetitPoisTopping disjointWith SpinachTopping",
                        "CQ": [
                            "What formal distinction is made between PetitPoisTopping and SpinachTopping within the ontology?",
                            "Is there any circumstance where a topping can be classified as both PetitPoisTopping and SpinachTopping?",
                            "Which topping classes are declared to be mutually exclusive with SpinachTopping?"
                        ]
                    },
                    {
                        "axiom": "PetitPoisTopping disjointWith GarlicTopping",
                        "CQ": [
                            "What is the formal separation between PetitPoisTopping and GarlicTopping in the ontology?",
                            "Can a topping instance belong to both PetitPoisTopping and GarlicTopping categories simultaneously?",
                            "Which other topping types are defined as mutually exclusive with PetitPoisTopping?"
                        ]
                    },
                    {
                        "axiom": "PetitPoisTopping disjointWith ArtichokeTopping",
                        "CQ": [
                            "How does the ontology formally distinguish between PetitPoisTopping and ArtichokeTopping?",
                            "Is there any topping that can be both PetitPoisTopping and ArtichokeTopping simultaneously?",
                            "Which other topping classes are explicitly specified as disjoint with ArtichokeTopping?"
                        ]
                    },
                    {
                        "axiom": "PetitPoisTopping disjointWith PepperTopping",
                        "CQ": [
                            "What kind of separation is enforced between PetitPoisTopping and PepperTopping within the ontology?",
                            "Is there any instance that may be classified as both PetitPoisTopping and PepperTopping?",
                            "Which topping classes are explicitly specified as mutually exclusive with PepperTopping?"
                        ]
                    },
                    {
                        "axiom": "PetitPoisTopping disjointWith AsparagusTopping",
                        "CQ": [
                            "What logical constraint is defined between PetitPoisTopping and AsparagusTopping within the ontology?",
                            "Is it permitted for an entity to be classified as both PetitPoisTopping and AsparagusTopping?",
                            "Which topping classes are identified as mutually exclusive with AsparagusTopping?"
                        ]
                    },
                    {
                        "axiom": "PetitPoisTopping disjointWith OliveTopping",
                        "CQ": [
                            "How is the separation between PetitPoisTopping and OliveTopping represented within the ontology?",
                            "Is there any instance that can simultaneously be classified as both PetitPoisTopping and OliveTopping?",
                            "Which topping categories are modelled as mutually exclusive with PetitPoisTopping?"
                        ]
                    },
                    {
                        "axiom": "PetitPoisTopping disjointWith CaperTopping",
                        "CQ": [
                            "What differentiates PetitPoisTopping and CaperTopping in terms of class membership within the ontology?",
                            "Is there any individual that can be classified as both PetitPoisTopping and CaperTopping simultaneously?",
                            "Which toppings are explicitly specified as being disjoint with PetitPoisTopping?"
                        ]
                    },
                    {
                        "axiom": "PetitPoisTopping disjointWith MushroomTopping",
                        "CQ": [
                            "What logical separation is established between PetitPoisTopping and MushroomTopping in the ontology?",
                            "Can a single pizza feature both PetitPoisTopping and MushroomTopping simultaneously?",
                            "Which topping classes are declared as mutually exclusive with MushroomTopping?"
                        ]
                    },
                    {
                        "axiom": "PetitPoisTopping disjointWith TomatoTopping",
                        "CQ": [
                            "Are PetitPoisTopping and TomatoTopping mutually exclusive within the ontology?",
                            "Does any topping instance belong to both PetitPoisTopping and TomatoTopping categories?",
                            "Which topping classes are specified as disjoint with PetitPoisTopping?"
                        ]
                    },
                    {
                        "axiom": "PetitPoisTopping propertyRestrictions [hasSpiciness some Mild]",
                        "CQ": [
                            "Is it required that a PetitPoisTopping ingredient has at least one spiciness level classified as Mild?",
                            "Does every PetitPoisTopping possess the property 'hasSpiciness' relating it to Mild spiciness?",
                            "Can a PetitPoisTopping exist without any association to Mild spiciness?"
                        ]
                    }
                ]
            },
            "RocketTopping": {
                "axiom": {
                    "subClassOf": [
                        "VegetableTopping"
                    ],
                    "disjointWith": [
                        "LeekTopping",
                        "OnionTopping",
                        "SpinachTopping",
                        "GarlicTopping",
                        "ArtichokeTopping",
                        "PepperTopping",
                        "AsparagusTopping",
                        "OliveTopping",
                        "CaperTopping",
                        "MushroomTopping",
                        "PetitPoisTopping",
                        "TomatoTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Medium]"
                    ]
                },
                "description": "RocketTopping is defined as a subclass of VegetableTopping, representing a specific type of vegetable-based topping. It is disjoint with multiple other vegetable toppings, including LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping—ensuring no individual can simultaneously belong to RocketTopping and any of these classes. Additionally, RocketTopping is characterized by the property that it must have at least some medium level of spiciness (hasSpiciness some Medium).",
                "CQ": [
                    {
                        "axiom": "RocketTopping subClassOf VegetableTopping",
                        "CQ": [
                            "Does RocketTopping fall under the classification of VegetableTopping?",
                            "What are the types of toppings that are categorized as VegetableTopping, including RocketTopping?",
                            "Which higher-level topping groups include RocketTopping as a member?"
                        ]
                    },
                    {
                        "axiom": "RocketTopping disjointWith LeekTopping",
                        "CQ": [
                            "Is there any logical separation defined between RocketTopping and LeekTopping in the ontology?",
                            "Could a topping instance belong to both RocketTopping and LeekTopping classes simultaneously?",
                            "Which topping categories are specified as being disjoint from LeekTopping?"
                        ]
                    },
                    {
                        "axiom": "RocketTopping disjointWith OnionTopping",
                        "CQ": [
                            "How does the ontology distinguish RocketTopping and OnionTopping?",
                            "Is there any scenario where a topping could be classified as both RocketTopping and OnionTopping?",
                            "Which topping types are identified as incompatible with OnionTopping?"
                        ]
                    },
                    {
                        "axiom": "RocketTopping disjointWith SpinachTopping",
                        "CQ": [
                            "What logical constraint is specified between RocketTopping and SpinachTopping in the ontology?",
                            "Is it permissible for a single pizza to have both RocketTopping and SpinachTopping as its toppings?",
                            "Which other topping classes are formally incompatible with SpinachTopping according to the ontology?"
                        ]
                    },
                    {
                        "axiom": "RocketTopping disjointWith GarlicTopping",
                        "CQ": [
                            "How does the ontology differentiate between RocketTopping and GarlicTopping?",
                            "Is any topping instance allowed to be both RocketTopping and GarlicTopping?",
                            "Which topping classes are specified as incompatible with GarlicTopping?"
                        ]
                    },
                    {
                        "axiom": "RocketTopping disjointWith ArtichokeTopping",
                        "CQ": [
                            "Are RocketTopping and ArtichokeTopping defined as mutually exclusive toppings in the ontology?",
                            "Can a single pizza topping instance be classified as both RocketTopping and ArtichokeTopping?",
                            "Which topping classes are explicitly stated to be disjoint with RocketTopping?"
                        ]
                    },
                    {
                        "axiom": "RocketTopping disjointWith PepperTopping",
                        "CQ": [
                            "What is the explicit logical separation between RocketTopping and PepperTopping within the ontology?",
                            "Is there any instance that can simultaneously belong to both RocketTopping and PepperTopping categories?",
                            "Which topping categories are defined as disjoint with PepperTopping?"
                        ]
                    },
                    {
                        "axiom": "RocketTopping disjointWith AsparagusTopping",
                        "CQ": [
                            "What logical separation exists between RocketTopping and AsparagusTopping within the ontology?",
                            "Is it permissible for a pizza topping to be classified simultaneously as RocketTopping and AsparagusTopping?",
                            "Which toppings are identified as mutually exclusive with RocketTopping?"
                        ]
                    },
                    {
                        "axiom": "RocketTopping disjointWith OliveTopping",
                        "CQ": [
                            "What logical separation is asserted between RocketTopping and OliveTopping within the ontology?",
                            "Is there any topping that qualifies as both a RocketTopping and an OliveTopping?",
                            "Which topping classes are specified as mutually exclusive with OliveTopping?"
                        ]
                    },
                    {
                        "axiom": "RocketTopping disjointWith CaperTopping",
                        "CQ": [
                            "How does the ontology distinguish between RocketTopping and CaperTopping?",
                            "Is any topping instance allowed to belong to both RocketTopping and CaperTopping categories?",
                            "Which topping classes are asserted as disjoint with RocketTopping?"
                        ]
                    },
                    {
                        "axiom": "RocketTopping disjointWith MushroomTopping",
                        "CQ": [
                            "What logical separation is defined between RocketTopping and MushroomTopping in the ontology?",
                            "Is it allowable for a pizza to have both RocketTopping and MushroomTopping assigned simultaneously?",
                            "Which other topping classes are explicitly disjoint with MushroomTopping?"
                        ]
                    },
                    {
                        "axiom": "RocketTopping disjointWith PetitPoisTopping",
                        "CQ": [
                            "What is the formal relationship specified between RocketTopping and PetitPoisTopping in the ontology?",
                            "Could an ingredient instance simultaneously be classified as RocketTopping and PetitPoisTopping?",
                            "Which topping categories are defined as disjoint from PetitPoisTopping?"
                        ]
                    },
                    {
                        "axiom": "RocketTopping disjointWith TomatoTopping",
                        "CQ": [
                            "How does the ontology represent the mutual exclusivity of RocketTopping and TomatoTopping?",
                            "Is there any topping that can be classified as both RocketTopping and TomatoTopping concurrently?",
                            "Which topping classes, apart from RocketTopping, are explicitly specified as disjoint with TomatoTopping?"
                        ]
                    },
                    {
                        "axiom": "RocketTopping propertyRestrictions [hasSpiciness some Medium]",
                        "CQ": [
                            "Is it necessary for a RocketTopping to have the hasSpiciness property with Medium as its value?",
                            "Must every instance of RocketTopping exhibit at least some degree of Medium spiciness?",
                            "Does the presence of Medium spiciness through the hasSpiciness property define a RocketTopping?"
                        ]
                    }
                ]
            },
            "SpinachTopping": {
                "axiom": {
                    "subClassOf": [
                        "VegetableTopping"
                    ],
                    "disjointWith": [
                        "RocketTopping",
                        "LeekTopping",
                        "OnionTopping",
                        "GarlicTopping",
                        "ArtichokeTopping",
                        "PepperTopping",
                        "AsparagusTopping",
                        "OliveTopping",
                        "CaperTopping",
                        "MushroomTopping",
                        "PetitPoisTopping",
                        "TomatoTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Mild]"
                    ]
                },
                "description": "SpinachTopping is defined as a subclass of VegetableTopping and is explicitly disjoint from a variety of other vegetable-based toppings, including RocketTopping, LeekTopping, OnionTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, PetitPoisTopping, and TomatoTopping. Individuals of this class must have at least one hasSpiciness property value that is Mild. This ensures that SpinachTopping exclusively refers to mild, spinach-based toppings that do not overlap with other vegetable toppings in the ontology.",
                "CQ": [
                    {
                        "axiom": "SpinachTopping subClassOf VegetableTopping",
                        "CQ": [
                            "Does SpinachTopping fall under the classification of VegetableTopping?",
                            "What are the specific kinds of VegetableTopping, including SpinachTopping?",
                            "Which higher-level categories include SpinachTopping as a member?"
                        ]
                    },
                    {
                        "axiom": "SpinachTopping disjointWith RocketTopping",
                        "CQ": [
                            "What is the formal distinction between SpinachTopping and RocketTopping within the ontology?",
                            "Is it allowed for a pizza to have both SpinachTopping and RocketTopping simultaneously?",
                            "Which classes are asserted to be disjoint with SpinachTopping?"
                        ]
                    },
                    {
                        "axiom": "SpinachTopping disjointWith LeekTopping",
                        "CQ": [
                            "How does the ontology define the incompatibility between SpinachTopping and LeekTopping?",
                            "Is there any instance that can simultaneously be classified as SpinachTopping and LeekTopping?",
                            "Which toppings are specified as mutually exclusive with LeekTopping?"
                        ]
                    },
                    {
                        "axiom": "SpinachTopping disjointWith OnionTopping",
                        "CQ": [
                            "How is SpinachTopping conceptually separated from OnionTopping according to the ontology?",
                            "Is there any scenario in which a pizza can possess both SpinachTopping and OnionTopping?",
                            "Which topping categories are stated to be mutually exclusive with SpinachTopping?"
                        ]
                    },
                    {
                        "axiom": "SpinachTopping disjointWith GarlicTopping",
                        "CQ": [
                            "How does the ontology represent the exclusivity between SpinachTopping and GarlicTopping?",
                            "Is there any instance that can simultaneously qualify as both SpinachTopping and GarlicTopping?",
                            "Which toppings are defined as mutually disjoint with SpinachTopping?"
                        ]
                    },
                    {
                        "axiom": "SpinachTopping disjointWith ArtichokeTopping",
                        "CQ": [
                            "How are SpinachTopping and ArtichokeTopping differentiated within the ontology?",
                            "Is any topping instance allowed to belong to both SpinachTopping and ArtichokeTopping categories simultaneously?",
                            "Which topping types are designated as disjoint with SpinachTopping?"
                        ]
                    },
                    {
                        "axiom": "SpinachTopping disjointWith PepperTopping",
                        "CQ": [
                            "What is the ontological separation between SpinachTopping and PepperTopping?",
                            "Is it allowed for a single pizza topping to be classified as both SpinachTopping and PepperTopping?",
                            "Which topping categories are explicitly modeled as mutually exclusive with SpinachTopping?"
                        ]
                    },
                    {
                        "axiom": "SpinachTopping disjointWith AsparagusTopping",
                        "CQ": [
                            "How does the ontology represent the exclusivity between SpinachTopping and AsparagusTopping?",
                            "Is there any instance that can be classified as both SpinachTopping and AsparagusTopping?",
                            "Which toppings are declared as disjoint with SpinachTopping?"
                        ]
                    },
                    {
                        "axiom": "SpinachTopping disjointWith OliveTopping",
                        "CQ": [
                            "What logical restriction separates SpinachTopping from OliveTopping in the ontology?",
                            "Is it permitted for a pizza to have both SpinachTopping and OliveTopping at once?",
                            "Which toppings are explicitly set as disjoint with OliveTopping?"
                        ]
                    },
                    {
                        "axiom": "SpinachTopping disjointWith CaperTopping",
                        "CQ": [
                            "How is the incompatibility between SpinachTopping and CaperTopping represented in the ontology?",
                            "Is it allowed for a pizza to have both SpinachTopping and CaperTopping simultaneously?",
                            "Which other toppings, in addition to CaperTopping, are specified as disjoint with SpinachTopping?"
                        ]
                    },
                    {
                        "axiom": "SpinachTopping disjointWith MushroomTopping",
                        "CQ": [
                            "How does the ontology specify the separation between SpinachTopping and MushroomTopping?",
                            "Is any topping instance allowed to be classified as both SpinachTopping and MushroomTopping?",
                            "Which toppings in the ontology are defined as mutually exclusive with MushroomTopping?"
                        ]
                    },
                    {
                        "axiom": "SpinachTopping disjointWith PetitPoisTopping",
                        "CQ": [
                            "How does the ontology formally differentiate between SpinachTopping and PetitPoisTopping?",
                            "Is it permissible for a pizza to include both SpinachTopping and PetitPoisTopping simultaneously?",
                            "Which toppings are declared as mutually exclusive with SpinachTopping?"
                        ]
                    },
                    {
                        "axiom": "SpinachTopping disjointWith TomatoTopping",
                        "CQ": [
                            "How does the ontology represent the incompatibility between SpinachTopping and TomatoTopping?",
                            "Is it allowed for a pizza topping to be classified as both SpinachTopping and TomatoTopping simultaneously?",
                            "Which toppings are explicitly specified as disjoint with TomatoTopping in the ontology?"
                        ]
                    },
                    {
                        "axiom": "SpinachTopping propertyRestrictions [hasSpiciness some Mild]",
                        "CQ": [
                            "Is it required that every SpinachTopping has some degree of spiciness classified as Mild?",
                            "Can a SpinachTopping exist without having the property hasSpiciness with at least one Mild value?",
                            "Does the definition of SpinachTopping imply the presence of at least one hasSpiciness relation to Mild?"
                        ]
                    }
                ]
            },
            "TomatoTopping": {
                "axiom": {
                    "subClassOf": [
                        "VegetableTopping"
                    ],
                    "disjointWith": [
                        "RocketTopping",
                        "LeekTopping",
                        "OnionTopping",
                        "SpinachTopping",
                        "GarlicTopping",
                        "ArtichokeTopping",
                        "PepperTopping",
                        "AsparagusTopping",
                        "OliveTopping",
                        "CaperTopping",
                        "MushroomTopping",
                        "PetitPoisTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Mild]"
                    ]
                },
                "description": "TomatoTopping is a subclass of VegetableTopping, representing toppings derived from tomatoes. It is explicitly disjoint with other vegetable toppings such as RocketTopping, LeekTopping, OnionTopping, SpinachTopping, GarlicTopping, ArtichokeTopping, PepperTopping, AsparagusTopping, OliveTopping, CaperTopping, MushroomTopping, and PetitPoisTopping, ensuring that no individual can simultaneously be both a TomatoTopping and any of these other toppings. Additionally, TomatoTopping is defined to always have some level of mild spiciness, as specified by the restriction [hasSpiciness some Mild].",
                "CQ": [
                    {
                        "axiom": "TomatoTopping subClassOf VegetableTopping",
                        "CQ": [
                            "Does TomatoTopping fall under the classification of VegetableTopping?",
                            "Which specific toppings are categorized as VegetableTopping, including TomatoTopping?",
                            "What broader topping categories encompass TomatoTopping?"
                        ]
                    },
                    {
                        "axiom": "TomatoTopping disjointWith RocketTopping",
                        "CQ": [
                            "How does the ontology represent the incompatibility between TomatoTopping and RocketTopping?",
                            "Is there any instance that can be simultaneously classified as both TomatoTopping and RocketTopping?",
                            "Which topping categories are asserted as mutually exclusive with RocketTopping?"
                        ]
                    },
                    {
                        "axiom": "TomatoTopping disjointWith LeekTopping",
                        "CQ": [
                            "What is the ontological separation between TomatoTopping and LeekTopping?",
                            "Is it allowed for a topping instance to be classified as both TomatoTopping and LeekTopping?",
                            "Which topping categories are formally incompatible with LeekTopping in the ontology?"
                        ]
                    },
                    {
                        "axiom": "TomatoTopping disjointWith OnionTopping",
                        "CQ": [
                            "How does the ontology distinguish between TomatoTopping and OnionTopping?",
                            "Is there any instance that can simultaneously belong to both TomatoTopping and OnionTopping categories?",
                            "Which topping classes are documented as incompatible with OnionTopping?"
                        ]
                    },
                    {
                        "axiom": "TomatoTopping disjointWith SpinachTopping",
                        "CQ": [
                            "What is the asserted separation between TomatoTopping and SpinachTopping within the ontology?",
                            "Is there any scenario where a single topping instance can be classified as both TomatoTopping and SpinachTopping?",
                            "Which topping classes have been defined as mutually exclusive with TomatoTopping?"
                        ]
                    },
                    {
                        "axiom": "TomatoTopping disjointWith GarlicTopping",
                        "CQ": [
                            "How does the ontology distinguish between TomatoTopping and GarlicTopping?",
                            "Is any topping allowed to be classified as both TomatoTopping and GarlicTopping?",
                            "Which topping classes are specified as incompatible with TomatoTopping?"
                        ]
                    },
                    {
                        "axiom": "TomatoTopping disjointWith ArtichokeTopping",
                        "CQ": [
                            "How does the ontology represent the incompatibility between TomatoTopping and ArtichokeTopping?",
                            "Is there any instance that can be classified as both TomatoTopping and ArtichokeTopping?",
                            "Which topping categories are specified as mutually exclusive with TomatoTopping?"
                        ]
                    },
                    {
                        "axiom": "TomatoTopping disjointWith PepperTopping",
                        "CQ": [
                            "How are TomatoTopping and PepperTopping conceptually separated within the ontology?",
                            "Is it allowed for a single topping instance to be both TomatoTopping and PepperTopping?",
                            "Which topping classes are specified as being disjoint with PepperTopping?"
                        ]
                    },
                    {
                        "axiom": "TomatoTopping disjointWith AsparagusTopping",
                        "CQ": [
                            "How are TomatoTopping and AsparagusTopping differentiated within the ontology?",
                            "Is it permissible for a pizza to include both TomatoTopping and AsparagusTopping simultaneously?",
                            "Which topping classes are specified as disjoint with AsparagusTopping?"
                        ]
                    },
                    {
                        "axiom": "TomatoTopping disjointWith OliveTopping",
                        "CQ": [
                            "What is the ontological separation between TomatoTopping and OliveTopping?",
                            "Can a single pizza topping simultaneously be categorized as TomatoTopping and OliveTopping?",
                            "Which toppings are explicitly specified as disjoint with OliveTopping in the ontology?"
                        ]
                    },
                    {
                        "axiom": "TomatoTopping disjointWith CaperTopping",
                        "CQ": [
                            "How is the incompatibility between TomatoTopping and CaperTopping represented in the ontology?",
                            "Is there an entity that can simultaneously be classified as both TomatoTopping and CaperTopping?",
                            "Which classes are asserted as disjoint with CaperTopping in the ontology?"
                        ]
                    },
                    {
                        "axiom": "TomatoTopping disjointWith MushroomTopping",
                        "CQ": [
                            "Are TomatoTopping and MushroomTopping mutually exclusive according to the ontology?",
                            "Is there any instance that can be classified simultaneously as TomatoTopping and MushroomTopping?",
                            "Which topping categories are explicitly stated to be disjoint with MushroomTopping?"
                        ]
                    },
                    {
                        "axiom": "TomatoTopping disjointWith PetitPoisTopping",
                        "CQ": [
                            "What is the ontological separation between TomatoTopping and PetitPoisTopping?",
                            "Can a single pizza have both TomatoTopping and PetitPoisTopping assigned as toppings?",
                            "Which topping classes are explicitly incompatible with PetitPoisTopping?"
                        ]
                    },
                    {
                        "axiom": "TomatoTopping propertyRestrictions [hasSpiciness some Mild]",
                        "CQ": [
                            "Is it required that every TomatoTopping possesses at least one spiciness classified as Mild?",
                            "Can a TomatoTopping exist without having any mild spiciness attribute?",
                            "Does the definition of TomatoTopping permit it to have only non-mild spiciness levels?"
                        ]
                    }
                ]
            },
            "CajunSpiceTopping": {
                "axiom": {
                    "subClassOf": [
                        "HerbSpiceTopping"
                    ],
                    "disjointWith": [
                        "RosemaryTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Hot]"
                    ]
                },
                "description": "CajunSpiceTopping is a subclass of HerbSpiceTopping, formally distinguished by the restriction that it must have some degree of hot spiciness (hasSpiciness some Hot). It is explicitly disjoint with RosemaryTopping, meaning an individual cannot be both a CajunSpiceTopping and a RosemaryTopping. Members of this class are herb and spice toppings that contribute a hot or spicy flavor profile, aligning with the characteristics of Cajun seasoning.",
                "CQ": [
                    {
                        "axiom": "CajunSpiceTopping subClassOf HerbSpiceTopping",
                        "CQ": [
                            "Does CajunSpiceTopping fall under the category of HerbSpiceTopping?",
                            "Which toppings are classified as subclasses of HerbSpiceTopping, including CajunSpiceTopping?",
                            "What broader categories does CajunSpiceTopping inherit from within the ontology?"
                        ]
                    },
                    {
                        "axiom": "CajunSpiceTopping disjointWith RosemaryTopping",
                        "CQ": [
                            "How does the ontology specify the connection or distinction between CajunSpiceTopping and RosemaryTopping?",
                            "Is there any instance that can be classified as both CajunSpiceTopping and RosemaryTopping?",
                            "Which other topping classes are defined as mutually exclusive with RosemaryTopping?"
                        ]
                    },
                    {
                        "axiom": "CajunSpiceTopping propertyRestrictions [hasSpiciness some Hot]",
                        "CQ": [
                            "Is it required that every CajunSpiceTopping possesses the spiciness characteristic 'Hot'?",
                            "Can a CajunSpiceTopping exist without having any level of 'Hot' spiciness?",
                            "Does the inclusion of spiciness property 'Hot' define all instances of CajunSpiceTopping?"
                        ]
                    }
                ]
            },
            "RosemaryTopping": {
                "axiom": {
                    "subClassOf": [
                        "HerbSpiceTopping"
                    ],
                    "disjointWith": [
                        "CajunSpiceTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Mild]"
                    ]
                },
                "description": "RosemaryTopping is defined as a subclass of HerbSpiceTopping, representing toppings that are both herbal and spicy in nature. This class is explicitly disjoint with CajunSpiceTopping, ensuring that no topping can be classified simultaneously as RosemaryTopping and CajunSpiceTopping. RosemaryTopping is further characterized by the property restriction that it must have at least some mild spiciness, distinguishing it from toppings with no or higher levels of spiciness.",
                "CQ": [
                    {
                        "axiom": "RosemaryTopping subClassOf HerbSpiceTopping",
                        "CQ": [
                            "Does RosemaryTopping fall under the broader classification of HerbSpiceTopping?",
                            "Which toppings are more specialized than HerbSpiceTopping, such as RosemaryTopping?",
                            "What general class does RosemaryTopping directly originate from?"
                        ]
                    },
                    {
                        "axiom": "RosemaryTopping disjointWith CajunSpiceTopping",
                        "CQ": [
                            "How does the ontology distinguish between RosemaryTopping and CajunSpiceTopping?",
                            "Is it permitted for a single topping to be both RosemaryTopping and CajunSpiceTopping according to the ontology?",
                            "What other topping categories are asserted as mutually exclusive with RosemaryTopping?"
                        ]
                    },
                    {
                        "axiom": "RosemaryTopping propertyRestrictions [hasSpiciness some Mild]",
                        "CQ": [
                            "Is every RosemaryTopping required to have a spiciness level that is Mild?",
                            "Can a RosemaryTopping exist without any mild spiciness property?",
                            "Must all instances of RosemaryTopping possess at least one spiciness classified as Mild?"
                        ]
                    }
                ]
            },
            "CheeseTopping": {
                "axiom": {
                    "subClassOf": [
                        "PizzaTopping"
                    ],
                    "disjointWith": [
                        "MeatTopping",
                        "SauceTopping",
                        "VegetableTopping",
                        "FishTopping",
                        "HerbSpiceTopping",
                        "NutTopping",
                        "FruitTopping"
                    ]
                },
                "description": "CheeseTopping is defined as a subclass of PizzaTopping, representing toppings made from cheese products that are used on pizzas. It is explicitly disjoint from other topping types such as MeatTopping, SauceTopping, VegetableTopping, FishTopping, HerbSpiceTopping, NutTopping, and FruitTopping, ensuring that no individual topping instance can simultaneously belong to both CheeseTopping and any of these other topping categories. This classification enforces a clear distinction between cheese-based toppings and all other types of pizza toppings.",
                "CQ": [
                    {
                        "axiom": "CheeseTopping subClassOf PizzaTopping",
                        "CQ": [
                            "Does CheeseTopping belong to the category of PizzaTopping?",
                            "Which varieties of PizzaTopping encompass CheeseTopping as a subcategory?",
                            "What higher-level topping classifications include CheeseTopping?"
                        ]
                    },
                    {
                        "axiom": "CheeseTopping disjointWith MeatTopping",
                        "CQ": [
                            "How does the ontology represent the exclusivity between CheeseTopping and MeatTopping?",
                            "Is it allowed for a topping to be classified as both CheeseTopping and MeatTopping?",
                            "Which classes are defined as disjoint with MeatTopping in the knowledge model?"
                        ]
                    },
                    {
                        "axiom": "CheeseTopping disjointWith SauceTopping",
                        "CQ": [
                            "How does the ontology represent the incompatibility between CheeseTopping and SauceTopping?",
                            "Is there any topping that can simultaneously be classified as both CheeseTopping and SauceTopping?",
                            "Which topping categories are specified as being mutually exclusive with CheeseTopping?"
                        ]
                    },
                    {
                        "axiom": "CheeseTopping disjointWith VegetableTopping",
                        "CQ": [
                            "What logical separation is defined between CheeseTopping and VegetableTopping within the ontology?",
                            "Is it permissible for a topping to be classified as both CheeseTopping and VegetableTopping?",
                            "Which toppings are specified as disjoint with CheeseTopping?"
                        ]
                    },
                    {
                        "axiom": "CheeseTopping disjointWith FishTopping",
                        "CQ": [
                            "How are CheeseTopping and FishTopping defined in terms of their mutual exclusivity?",
                            "Is there any topping that can simultaneously be classified as both CheeseTopping and FishTopping?",
                            "Which classes of toppings are stated to be incompatible with CheeseTopping?"
                        ]
                    },
                    {
                        "axiom": "CheeseTopping disjointWith HerbSpiceTopping",
                        "CQ": [
                            "What logical separation is defined between CheeseTopping and HerbSpiceTopping within the ontology?",
                            "Can a topping instance belong to both CheeseTopping and HerbSpiceTopping categories?",
                            "Which topping classes are asserted as disjoint with HerbSpiceTopping?"
                        ]
                    },
                    {
                        "axiom": "CheeseTopping disjointWith NutTopping",
                        "CQ": [
                            "Are CheeseTopping and NutTopping classified as mutually exclusive categories in the ontology?",
                            "Is it possible for a topping to be considered both a CheeseTopping and a NutTopping simultaneously?",
                            "Which topping classes are defined as being incompatible with NutTopping?"
                        ]
                    },
                    {
                        "axiom": "CheeseTopping disjointWith FruitTopping",
                        "CQ": [
                            "How does the ontology express the incompatibility between CheeseTopping and FruitTopping?",
                            "Is there any topping instance that can simultaneously belong to both CheeseTopping and FruitTopping categories?",
                            "Which topping categories are stated as mutually exclusive with CheeseTopping?"
                        ]
                    }
                ]
            },
            "FishTopping": {
                "axiom": {
                    "subClassOf": [
                        "PizzaTopping"
                    ],
                    "disjointWith": [
                        "MeatTopping",
                        "SauceTopping",
                        "VegetableTopping",
                        "CheeseTopping",
                        "HerbSpiceTopping",
                        "NutTopping",
                        "FruitTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Mild]"
                    ]
                },
                "description": "FishTopping is defined as a subclass of PizzaTopping and is explicitly disjoint with MeatTopping, SauceTopping, VegetableTopping, CheeseTopping, HerbSpiceTopping, NutTopping, and FruitTopping, ensuring that no topping instance can simultaneously belong to more than one of these classes. Members of the FishTopping class are characterized by the property that they possess at least some mild level of spiciness, as specified by the 'hasSpiciness some Mild' restriction. This formalization guarantees the uniqueness and specific mild spiciness characteristic of any pizza topping categorized as FishTopping.",
                "CQ": [
                    {
                        "axiom": "FishTopping subClassOf PizzaTopping",
                        "CQ": [
                            "Is FishTopping categorized as a specific kind of PizzaTopping?",
                            "What types of toppings are included as subclasses of PizzaTopping such as FishTopping?",
                            "Which higher-level categories include FishTopping?"
                        ]
                    },
                    {
                        "axiom": "FishTopping disjointWith MeatTopping",
                        "CQ": [
                            "Are there any shared elements allowed between FishTopping and MeatTopping classes in the ontology?",
                            "Is an ingredient permitted to be classified under both FishTopping and MeatTopping?",
                            "Which topping categories are specified as mutually exclusive with FishTopping?"
                        ]
                    },
                    {
                        "axiom": "FishTopping disjointWith SauceTopping",
                        "CQ": [
                            "How are FishTopping and SauceTopping conceptually separated within the ontology?",
                            "Is there any instance that qualifies as both a FishTopping and a SauceTopping?",
                            "Which classes are specified as disjoint with SauceTopping?"
                        ]
                    },
                    {
                        "axiom": "FishTopping disjointWith VegetableTopping",
                        "CQ": [
                            "How does the ontology represent the separation between FishTopping and VegetableTopping?",
                            "Is there any instance that can belong to both the FishTopping and VegetableTopping classes simultaneously?",
                            "Which topping categories are specifically stated to be incompatible with FishTopping?"
                        ]
                    },
                    {
                        "axiom": "FishTopping disjointWith CheeseTopping",
                        "CQ": [
                            "What is the ontological distinction between FishTopping and CheeseTopping?",
                            "Can any pizza topping be classified as both a FishTopping and a CheeseTopping?",
                            "Which topping categories are explicitly incompatible with FishTopping?"
                        ]
                    },
                    {
                        "axiom": "FishTopping disjointWith HerbSpiceTopping",
                        "CQ": [
                            "How does the ontology describe the incompatibility between FishTopping and HerbSpiceTopping?",
                            "Is there any ingredient that can be classified as both FishTopping and HerbSpiceTopping?",
                            "Which topping categories are declared as disjoint with FishTopping?"
                        ]
                    },
                    {
                        "axiom": "FishTopping disjointWith NutTopping",
                        "CQ": [
                            "What is the logical constraint specified between FishTopping and NutTopping in the ontology?",
                            "Is there any instance that can belong to both FishTopping and NutTopping?",
                            "Which classes are defined as disjoint with NutTopping?"
                        ]
                    },
                    {
                        "axiom": "FishTopping disjointWith FruitTopping",
                        "CQ": [
                            "What logical separation does the ontology enforce between FishTopping and FruitTopping?",
                            "Is there any topping that can be classified as both FishTopping and FruitTopping?",
                            "Which topping categories are defined as disjoint with FishTopping?"
                        ]
                    },
                    {
                        "axiom": "FishTopping propertyRestrictions [hasSpiciness some Mild]",
                        "CQ": [
                            "Must every FishTopping include at least one instance with hasSpiciness set to Mild?",
                            "Is it required that FishTopping hasSpiciness relates to Mild in at least one case?",
                            "Can a topping classified as FishTopping exist without being associated with any Mild spiciness level?"
                        ]
                    }
                ]
            },
            "FruitTopping": {
                "axiom": {
                    "subClassOf": [
                        "PizzaTopping"
                    ],
                    "disjointWith": [
                        "MeatTopping",
                        "SauceTopping",
                        "VegetableTopping",
                        "CheeseTopping",
                        "FishTopping",
                        "HerbSpiceTopping",
                        "NutTopping"
                    ]
                },
                "description": "FruitTopping is defined as a subclass of PizzaTopping, meaning it represents a specific type of topping used on pizzas. It is explicitly disjoint with MeatTopping, SauceTopping, VegetableTopping, CheeseTopping, FishTopping, HerbSpiceTopping, and NutTopping, ensuring that no topping can simultaneously belong to FruitTopping and any of these other topping categories. This formalization guarantees that FruitTopping exclusively includes toppings derived from fruit and distinguishes them from all other major topping types.",
                "CQ": [
                    {
                        "axiom": "FruitTopping subClassOf PizzaTopping",
                        "CQ": [
                            "Is FruitTopping recognized as a specialized form of PizzaTopping?",
                            "Which variants of PizzaTopping include FruitTopping as a subset?",
                            "What broader topping classifications does FruitTopping fall under?"
                        ]
                    },
                    {
                        "axiom": "FruitTopping disjointWith MeatTopping",
                        "CQ": [
                            "What ontological separation is established between FruitTopping and MeatTopping?",
                            "Is there any instance that can simultaneously belong to both FruitTopping and MeatTopping categories?",
                            "Which topping types are formally specified as disjoint with MeatTopping?"
                        ]
                    },
                    {
                        "axiom": "FruitTopping disjointWith SauceTopping",
                        "CQ": [
                            "What is the formal separation defined between FruitTopping and SauceTopping in the ontology?",
                            "Can a single topping instance belong to both FruitTopping and SauceTopping categories?",
                            "Which classes of toppings are specified as disjoint with SauceTopping?"
                        ]
                    },
                    {
                        "axiom": "FruitTopping disjointWith VegetableTopping",
                        "CQ": [
                            "How are FruitTopping and VegetableTopping represented in terms of mutual exclusivity within the ontology?",
                            "Is there any scenario in which a topping can be classified simultaneously as both a FruitTopping and a VegetableTopping?",
                            "Which classes are defined as disjoint with VegetableTopping in the ontology?"
                        ]
                    },
                    {
                        "axiom": "FruitTopping disjointWith CheeseTopping",
                        "CQ": [
                            "How does the ontology define the separation between FruitTopping and CheeseTopping?",
                            "Is it allowed for a pizza topping to be classified as both FruitTopping and CheeseTopping?",
                            "Which topping categories are asserted as incompatible with FruitTopping in the ontology?"
                        ]
                    },
                    {
                        "axiom": "FruitTopping disjointWith FishTopping",
                        "CQ": [
                            "What logical separation is defined between FruitTopping and FishTopping in the ontology?",
                            "Is any topping allowed to be classified as both a FruitTopping and a FishTopping?",
                            "Which classes are explicitly disjoint with FishTopping?"
                        ]
                    },
                    {
                        "axiom": "FruitTopping disjointWith HerbSpiceTopping",
                        "CQ": [
                            "What logical constraints separate FruitTopping from HerbSpiceTopping within the ontology?",
                            "Is it allowed for a topping to be classified as both a FruitTopping and a HerbSpiceTopping?",
                            "Which topping types are specified as mutually exclusive with HerbSpiceTopping?"
                        ]
                    },
                    {
                        "axiom": "FruitTopping disjointWith NutTopping",
                        "CQ": [
                            "What formal separation is defined between FruitTopping and NutTopping within the ontology?",
                            "Is there any topping that can be classified as both a FruitTopping and a NutTopping?",
                            "Which topping classes are explicitly marked as disjoint with NutTopping?"
                        ]
                    }
                ]
            },
            "HerbSpiceTopping": {
                "axiom": {
                    "subClassOf": [
                        "PizzaTopping"
                    ],
                    "disjointWith": [
                        "MeatTopping",
                        "SauceTopping",
                        "VegetableTopping",
                        "CheeseTopping",
                        "FishTopping",
                        "NutTopping",
                        "FruitTopping"
                    ]
                },
                "description": "HerbSpiceTopping is defined as a subclass of PizzaTopping, representing toppings made exclusively from herbs or spices that are suitable for use on pizzas. It is explicitly disjoint with MeatTopping, SauceTopping, VegetableTopping, CheeseTopping, FishTopping, NutTopping, and FruitTopping, ensuring that no individual topping can simultaneously belong to both HerbSpiceTopping and any of these other specified topping categories. This class formalizes the separation of herb and spice-based toppings from all other topping types within the ontology.",
                "CQ": [
                    {
                        "axiom": "HerbSpiceTopping subClassOf PizzaTopping",
                        "CQ": [
                            "Is HerbSpiceTopping classified as a specific kind of PizzaTopping?",
                            "Which toppings are categorized under PizzaTopping, including HerbSpiceTopping?",
                            "Which broader categories encompass HerbSpiceTopping?"
                        ]
                    },
                    {
                        "axiom": "HerbSpiceTopping disjointWith MeatTopping",
                        "CQ": [
                            "What ontological separation exists between HerbSpiceTopping and MeatTopping?",
                            "Is there a scenario where a topping could be classified as both HerbSpiceTopping and MeatTopping?",
                            "Which topping categories are defined as mutually exclusive with HerbSpiceTopping?"
                        ]
                    },
                    {
                        "axiom": "HerbSpiceTopping disjointWith SauceTopping",
                        "CQ": [
                            "What logical separation exists between HerbSpiceTopping and SauceTopping within the ontology?",
                            "Is it possible for a topping to be classified as both HerbSpiceTopping and SauceTopping?",
                            "Which other topping categories are defined as mutually exclusive with HerbSpiceTopping?"
                        ]
                    },
                    {
                        "axiom": "HerbSpiceTopping disjointWith VegetableTopping",
                        "CQ": [
                            "How are HerbSpiceTopping and VegetableTopping differentiated within the ontology?",
                            "Is any topping allowed to be both a HerbSpiceTopping and a VegetableTopping?",
                            "Which topping types are specified as mutually exclusive with VegetableTopping?"
                        ]
                    },
                    {
                        "axiom": "HerbSpiceTopping disjointWith CheeseTopping",
                        "CQ": [
                            "How does the ontology distinguish between HerbSpiceTopping and CheeseTopping?",
                            "Is it allowable for a pizza topping to be both a HerbSpiceTopping and a CheeseTopping?",
                            "Which topping categories are formally declared as incompatible with HerbSpiceTopping?"
                        ]
                    },
                    {
                        "axiom": "HerbSpiceTopping disjointWith FishTopping",
                        "CQ": [
                            "How does the ontology represent the incompatibility between HerbSpiceTopping and FishTopping?",
                            "Is any topping classified as both HerbSpiceTopping and FishTopping within the ontology?",
                            "Which topping classes are specified as mutually exclusive with HerbSpiceTopping?"
                        ]
                    },
                    {
                        "axiom": "HerbSpiceTopping disjointWith NutTopping",
                        "CQ": [
                            "What is the formal separation established between HerbSpiceTopping and NutTopping in the ontology?",
                            "Is it allowed for a pizza topping to be classified as both a HerbSpiceTopping and a NutTopping?",
                            "Which classes, besides NutTopping, are specified as disjoint with HerbSpiceTopping?"
                        ]
                    },
                    {
                        "axiom": "HerbSpiceTopping disjointWith FruitTopping",
                        "CQ": [
                            "What ontology constraint prevents HerbSpiceTopping and FruitTopping from sharing members?",
                            "Is it allowed for a topping to be both classified as a HerbSpiceTopping and a FruitTopping?",
                            "Which classes are explicitly stated as mutually exclusive with HerbSpiceTopping?"
                        ]
                    }
                ]
            },
            "MeatTopping": {
                "axiom": {
                    "subClassOf": [
                        "PizzaTopping"
                    ],
                    "disjointWith": [
                        "SauceTopping",
                        "VegetableTopping",
                        "CheeseTopping",
                        "FishTopping",
                        "HerbSpiceTopping",
                        "NutTopping",
                        "FruitTopping"
                    ]
                },
                "description": "MeatTopping is defined as a subclass of PizzaTopping, representing toppings derived specifically from meat products. It is disjoint with SauceTopping, VegetableTopping, CheeseTopping, FishTopping, HerbSpiceTopping, NutTopping, and FruitTopping, ensuring that no single topping instance can simultaneously belong to both MeatTopping and any of these other topping categories. This formalization enforces a clear categorical separation between meat-based and other types of pizza toppings.",
                "CQ": [
                    {
                        "axiom": "MeatTopping subClassOf PizzaTopping",
                        "CQ": [
                            "Is every MeatTopping classified as a type of PizzaTopping?",
                            "Which subclasses does PizzaTopping have, such as MeatTopping?",
                            "What broader categories encompass MeatTopping?"
                        ]
                    },
                    {
                        "axiom": "MeatTopping disjointWith SauceTopping",
                        "CQ": [
                            "What logical separation is defined between MeatTopping and SauceTopping in the ontology?",
                            "Is it permitted for a topping to be classified as both MeatTopping and SauceTopping?",
                            "Which classes of toppings are specified as mutually exclusive with SauceTopping?"
                        ]
                    },
                    {
                        "axiom": "MeatTopping disjointWith VegetableTopping",
                        "CQ": [
                            "What is the explicit ontological separation between MeatTopping and VegetableTopping?",
                            "Is any topping instance allowed to be classified as both MeatTopping and VegetableTopping?",
                            "Which topping categories are specified as disjoint with MeatTopping?"
                        ]
                    },
                    {
                        "axiom": "MeatTopping disjointWith CheeseTopping",
                        "CQ": [
                            "How is the ontological separation between MeatTopping and CheeseTopping represented?",
                            "Can a single topping instance be classified as both MeatTopping and CheeseTopping?",
                            "Which classes are specified as mutually exclusive with MeatTopping in the ontology?"
                        ]
                    },
                    {
                        "axiom": "MeatTopping disjointWith FishTopping",
                        "CQ": [
                            "Are any toppings classified as both MeatTopping and FishTopping according to the ontology?",
                            "Which topping categories are specified as disjoint with MeatTopping?",
                            "What ontological rule enforces separation between FishTopping and MeatTopping?"
                        ]
                    },
                    {
                        "axiom": "MeatTopping disjointWith HerbSpiceTopping",
                        "CQ": [
                            "What ontological separation is established between MeatTopping and HerbSpiceTopping?",
                            "Is any topping allowed to be classified simultaneously as a MeatTopping and an HerbSpiceTopping?",
                            "Which topping categories are defined as mutually exclusive with HerbSpiceTopping?"
                        ]
                    },
                    {
                        "axiom": "MeatTopping disjointWith NutTopping",
                        "CQ": [
                            "How is the exclusion between MeatTopping and NutTopping represented in the ontology?",
                            "Is it allowed for a pizza topping to be classified as both MeatTopping and NutTopping simultaneously?",
                            "Which topping classes are formally incompatible with MeatTopping according to the ontology?"
                        ]
                    },
                    {
                        "axiom": "MeatTopping disjointWith FruitTopping",
                        "CQ": [
                            "How is the separation between MeatTopping and FruitTopping represented in the ontology?",
                            "Can a single topping be classified as both a MeatTopping and a FruitTopping?",
                            "Which topping categories are defined as mutually exclusive with MeatTopping?"
                        ]
                    }
                ]
            },
            "NutTopping": {
                "axiom": {
                    "subClassOf": [
                        "PizzaTopping"
                    ],
                    "disjointWith": [
                        "MeatTopping",
                        "SauceTopping",
                        "VegetableTopping",
                        "CheeseTopping",
                        "FishTopping",
                        "HerbSpiceTopping",
                        "FruitTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Mild]"
                    ]
                },
                "description": "NutTopping is defined as a subclass of PizzaTopping, representing pizza toppings that consist specifically of nuts. It is explicitly disjoint with MeatTopping, SauceTopping, VegetableTopping, CheeseTopping, FishTopping, HerbSpiceTopping, and FruitTopping, ensuring that no topping instance can simultaneously belong to these other topping categories. Additionally, every NutTopping must have at least some level of mild spiciness, as constrained by the property restriction (hasSpiciness some Mild).",
                "CQ": [
                    {
                        "axiom": "NutTopping subClassOf PizzaTopping",
                        "CQ": [
                            "Is NutTopping classified under the broader group of PizzaTopping?",
                            "What types of toppings fall under PizzaTopping, specifically including NutTopping?",
                            "Which higher-level topping categories encompass NutTopping?"
                        ]
                    },
                    {
                        "axiom": "NutTopping disjointWith MeatTopping",
                        "CQ": [
                            "What ontological separation is defined between NutTopping and MeatTopping?",
                            "Is there any topping that qualifies as both NutTopping and MeatTopping?",
                            "Which topping categories are formally disjoint with NutTopping?"
                        ]
                    },
                    {
                        "axiom": "NutTopping disjointWith SauceTopping",
                        "CQ": [
                            "How does the ontology differentiate between NutTopping and SauceTopping?",
                            "Is it permissible for a topping to be classified as both NutTopping and SauceTopping?",
                            "What topping categories are defined as mutually exclusive with NutTopping?"
                        ]
                    },
                    {
                        "axiom": "NutTopping disjointWith VegetableTopping",
                        "CQ": [
                            "What logical separation is defined between NutTopping and VegetableTopping within the ontology?",
                            "Is there any topping that can simultaneously be classified as both NutTopping and VegetableTopping?",
                            "Which topping classes, apart from VegetableTopping, are formally incompatible with NutTopping?"
                        ]
                    },
                    {
                        "axiom": "NutTopping disjointWith CheeseTopping",
                        "CQ": [
                            "Are NutTopping and CheeseTopping considered mutually exclusive in the ontology?",
                            "Is it permitted for a pizza topping to be classified as both a NutTopping and a CheeseTopping?",
                            "Which topping classes are defined as disjoint with CheeseTopping?"
                        ]
                    },
                    {
                        "axiom": "NutTopping disjointWith FishTopping",
                        "CQ": [
                            "How does the ontology represent the incompatibility between NutTopping and FishTopping?",
                            "Is it allowed for a pizza topping to be classified simultaneously as both NutTopping and FishTopping?",
                            "Which topping classes are stated as disjoint from FishTopping in the ontology?"
                        ]
                    },
                    {
                        "axiom": "NutTopping disjointWith HerbSpiceTopping",
                        "CQ": [
                            "What ontological constraint separates NutTopping and HerbSpiceTopping?",
                            "Is there any topping that can simultaneously be a NutTopping and a HerbSpiceTopping?",
                            "Which topping classes have been defined as disjoint with HerbSpiceTopping?"
                        ]
                    },
                    {
                        "axiom": "NutTopping disjointWith FruitTopping",
                        "CQ": [
                            "How does the ontology formally separate NutTopping and FruitTopping?",
                            "Is any topping permitted to be classified as both a NutTopping and a FruitTopping?",
                            "What other topping categories are stated to be mutually exclusive with NutTopping?"
                        ]
                    },
                    {
                        "axiom": "NutTopping propertyRestrictions [hasSpiciness some Mild]",
                        "CQ": [
                            "Is it necessary for a NutTopping to have at least one hasSpiciness property value that is Mild?",
                            "Must every instance of NutTopping be associated with some mild level of spiciness through the hasSpiciness property?",
                            "Does the presence of a NutTopping imply the existence of a hasSpiciness relationship to Mild?"
                        ]
                    }
                ]
            },
            "SauceTopping": {
                "axiom": {
                    "subClassOf": [
                        "PizzaTopping"
                    ],
                    "disjointWith": [
                        "MeatTopping",
                        "VegetableTopping",
                        "CheeseTopping",
                        "FishTopping",
                        "HerbSpiceTopping",
                        "NutTopping",
                        "FruitTopping"
                    ]
                },
                "description": "SauceTopping is defined as a subclass of PizzaTopping and is explicitly disjoint with MeatTopping, VegetableTopping, CheeseTopping, FishTopping, HerbSpiceTopping, NutTopping, and FruitTopping. This means SauceTopping represents a distinct category of pizza topping, specifically for sauces, and no individual can simultaneously belong to SauceTopping and any of the aforementioned topping classes.",
                "CQ": [
                    {
                        "axiom": "SauceTopping subClassOf PizzaTopping",
                        "CQ": [
                            "Is SauceTopping classified as a form of PizzaTopping?",
                            "Which specific toppings fall under the category of PizzaTopping, such as SauceTopping?",
                            "What higher-level topping groups include SauceTopping?"
                        ]
                    },
                    {
                        "axiom": "SauceTopping disjointWith MeatTopping",
                        "CQ": [
                            "What logical separation is defined between SauceTopping and MeatTopping within the ontology?",
                            "Are there any instances that can be considered both SauceTopping and MeatTopping?",
                            "Which topping categories are asserted as mutually exclusive with MeatTopping?"
                        ]
                    },
                    {
                        "axiom": "SauceTopping disjointWith VegetableTopping",
                        "CQ": [
                            "How does the ontology specify the separation between SauceTopping and VegetableTopping?",
                            "Is any topping classified as both a SauceTopping and a VegetableTopping?",
                            "Which classes are explicitly disjoint with SauceTopping?"
                        ]
                    },
                    {
                        "axiom": "SauceTopping disjointWith CheeseTopping",
                        "CQ": [
                            "How does the ontology represent the separation between SauceTopping and CheeseTopping?",
                            "Is any topping instance allowed to belong simultaneously to both SauceTopping and CheeseTopping classes?",
                            "Which topping classes are declared as disjoint with CheeseTopping?"
                        ]
                    },
                    {
                        "axiom": "SauceTopping disjointWith FishTopping",
                        "CQ": [
                            "How does the ontology formally separate SauceTopping from FishTopping?",
                            "Is there any topping that could simultaneously belong to both SauceTopping and FishTopping categories?",
                            "Which topping classes are asserted as mutually exclusive with FishTopping?"
                        ]
                    },
                    {
                        "axiom": "SauceTopping disjointWith HerbSpiceTopping",
                        "CQ": [
                            "How does the ontology differentiate between SauceTopping and HerbSpiceTopping?",
                            "Is it allowed for a topping to be both classified as SauceTopping and HerbSpiceTopping?",
                            "Which classes are declared as mutually exclusive with HerbSpiceTopping?"
                        ]
                    },
                    {
                        "axiom": "SauceTopping disjointWith NutTopping",
                        "CQ": [
                            "How are SauceTopping and NutTopping differentiated within the ontology?",
                            "Is there any instance that could belong to both SauceTopping and NutTopping categories?",
                            "Which other topping types are explicitly specified as mutually exclusive with SauceTopping?"
                        ]
                    },
                    {
                        "axiom": "SauceTopping disjointWith FruitTopping",
                        "CQ": [
                            "What logical separation does the ontology assert between SauceTopping and FruitTopping?",
                            "Is there any topping entity that can simultaneously be classified as both SauceTopping and FruitTopping?",
                            "Which classes of toppings are formally identified as disjoint with SauceTopping?"
                        ]
                    }
                ]
            },
            "VegetableTopping": {
                "axiom": {
                    "subClassOf": [
                        "PizzaTopping"
                    ],
                    "disjointWith": [
                        "MeatTopping",
                        "SauceTopping",
                        "CheeseTopping",
                        "FishTopping",
                        "HerbSpiceTopping",
                        "NutTopping",
                        "FruitTopping"
                    ]
                },
                "description": "VegetableTopping is defined as a subclass of PizzaTopping, representing pizza toppings that are derived from vegetables. It is explicitly disjoint with MeatTopping, SauceTopping, CheeseTopping, FishTopping, HerbSpiceTopping, NutTopping, and FruitTopping, ensuring that no topping can simultaneously belong to VegetableTopping and any of these other topping categories. This formalization guarantees that VegetableTopping exclusively encompasses toppings of vegetable origin, and clearly separates it from other distinct topping types used on pizzas.",
                "CQ": [
                    {
                        "axiom": "VegetableTopping subClassOf PizzaTopping",
                        "CQ": [
                            "Does VegetableTopping fall under the broader classification of PizzaTopping?",
                            "Which topping types are classified as PizzaTopping, including VegetableTopping?",
                            "What are the more general categories that encompass VegetableTopping?"
                        ]
                    },
                    {
                        "axiom": "VegetableTopping disjointWith MeatTopping",
                        "CQ": [
                            "What principle separates VegetableTopping from MeatTopping in the ontology?",
                            "Is an ingredient allowed to be categorized as both VegetableTopping and MeatTopping?",
                            "Which topping classes, aside from VegetableTopping, are explicitly disjoint with MeatTopping?"
                        ]
                    },
                    {
                        "axiom": "VegetableTopping disjointWith SauceTopping",
                        "CQ": [
                            "How are VegetableTopping and SauceTopping differentiated within the ontology?",
                            "Is there any entity that can simultaneously be classified as both a VegetableTopping and a SauceTopping?",
                            "Which classes are defined as disjoint with SauceTopping?"
                        ]
                    },
                    {
                        "axiom": "VegetableTopping disjointWith CheeseTopping",
                        "CQ": [
                            "How does the ontology distinguish between VegetableTopping and CheeseTopping classes?",
                            "Is it allowed for a topping to be classified as both a VegetableTopping and a CheeseTopping?",
                            "Which topping categories are specified as disjoint from CheeseTopping in the ontology?"
                        ]
                    },
                    {
                        "axiom": "VegetableTopping disjointWith FishTopping",
                        "CQ": [
                            "How are VegetableTopping and FishTopping differentiated within the ontology?",
                            "Is it permissible for a topping to be classified as both VegetableTopping and FishTopping?",
                            "Which topping categories are explicitly declared as disjoint with FishTopping?"
                        ]
                    },
                    {
                        "axiom": "VegetableTopping disjointWith HerbSpiceTopping",
                        "CQ": [
                            "What is the explicit separation between VegetableTopping and HerbSpiceTopping within the ontology?",
                            "Is there any topping that can simultaneously be classified as both a VegetableTopping and a HerbSpiceTopping?",
                            "Which topping categories are formally specified as disjoint with HerbSpiceTopping?"
                        ]
                    },
                    {
                        "axiom": "VegetableTopping disjointWith NutTopping",
                        "CQ": [
                            "How does the ontology distinguish between VegetableTopping and NutTopping?",
                            "Is there any instance that can simultaneously belong to both VegetableTopping and NutTopping categories?",
                            "What topping classes are defined as disjoint with NutTopping?"
                        ]
                    },
                    {
                        "axiom": "VegetableTopping disjointWith FruitTopping",
                        "CQ": [
                            "What is the logical relationship between VegetableTopping and FruitTopping within the ontology?",
                            "Is it permitted for a topping instance to belong to both VegetableTopping and FruitTopping categories?",
                            "Which topping classes are formally specified as being disjoint with FruitTopping?"
                        ]
                    }
                ]
            },
            "FourCheesesTopping": {
                "axiom": {
                    "subClassOf": [
                        "CheeseTopping"
                    ],
                    "disjointWith": [
                        "GoatsCheeseTopping",
                        "MozzarellaTopping",
                        "GorgonzolaTopping",
                        "ParmesanTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Mild]"
                    ]
                },
                "description": "FourCheesesTopping is defined as a subclass of CheeseTopping, representing a specific type of cheese topping distinguished by its composition of four cheeses. It is declared disjoint with GoatsCheeseTopping, MozzarellaTopping, GorgonzolaTopping, and ParmesanTopping, meaning an individual topping cannot simultaneously be classified as FourCheesesTopping and any of these other specific cheese toppings. Additionally, FourCheesesTopping must have a spiciness level that is at least mildly spicy, as specified by the restriction that it has some Mild spiciness.",
                "CQ": [
                    {
                        "axiom": "FourCheesesTopping subClassOf CheeseTopping",
                        "CQ": [
                            "Is FourCheesesTopping categorized as a type of CheeseTopping?",
                            "Which subclasses are specified under CheeseTopping, such as FourCheesesTopping?",
                            "What are the broader categories that include FourCheesesTopping?"
                        ]
                    },
                    {
                        "axiom": "FourCheesesTopping disjointWith GoatsCheeseTopping",
                        "CQ": [
                            "What is the logical distinction defined between FourCheesesTopping and GoatsCheeseTopping?",
                            "Is there any topping that can simultaneously be classified as both FourCheesesTopping and GoatsCheeseTopping?",
                            "Which other topping types are declared as disjoint with GoatsCheeseTopping in the ontology?"
                        ]
                    },
                    {
                        "axiom": "FourCheesesTopping disjointWith MozzarellaTopping",
                        "CQ": [
                            "How does the ontology represent the exclusivity between FourCheesesTopping and MozzarellaTopping?",
                            "Is there any instance that can be both a FourCheesesTopping and a MozzarellaTopping?",
                            "Which other topping classes are formally stated as incompatible with FourCheesesTopping?"
                        ]
                    },
                    {
                        "axiom": "FourCheesesTopping disjointWith GorgonzolaTopping",
                        "CQ": [
                            "What logical separation is defined between FourCheesesTopping and GorgonzolaTopping in the ontology?",
                            "Is there any topping that can simultaneously be classified as FourCheesesTopping and GorgonzolaTopping?",
                            "Which toppings are asserted as disjoint with GorgonzolaTopping?"
                        ]
                    },
                    {
                        "axiom": "FourCheesesTopping disjointWith ParmesanTopping",
                        "CQ": [
                            "What logical separation is defined between FourCheesesTopping and ParmesanTopping in the ontology?",
                            "Can a pizza feature both FourCheesesTopping and ParmesanTopping as toppings?",
                            "Which topping classes are stated to be incompatible with ParmesanTopping?"
                        ]
                    },
                    {
                        "axiom": "FourCheesesTopping propertyRestrictions [hasSpiciness some Mild]",
                        "CQ": [
                            "Must every FourCheesesTopping have at least one hasSpiciness relationship to Mild?",
                            "Is it required for a FourCheesesTopping to exhibit some level of spiciness classified as Mild?",
                            "Does the existence of a Mild spiciness property suffice for an instance to be considered a FourCheesesTopping?"
                        ]
                    }
                ]
            },
            "GoatsCheeseTopping": {
                "axiom": {
                    "subClassOf": [
                        "CheeseTopping"
                    ],
                    "disjointWith": [
                        "MozzarellaTopping",
                        "GorgonzolaTopping",
                        "ParmesanTopping",
                        "FourCheesesTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Mild]"
                    ]
                },
                "description": "GoatsCheeseTopping is defined as a subclass of CheeseTopping and is explicitly disjoint with MozzarellaTopping, GorgonzolaTopping, ParmesanTopping, and FourCheesesTopping, meaning an individual topping cannot simultaneously belong to any of these classes. GoatsCheeseTopping is characterized by the property that it has some degree of mild spiciness (hasSpiciness some Mild), indicating that any topping of this class is mildly spicy.",
                "CQ": [
                    {
                        "axiom": "GoatsCheeseTopping subClassOf CheeseTopping",
                        "CQ": [
                            "Is GoatsCheeseTopping included under the category of CheeseTopping?",
                            "Which varieties fall under the classification of CheeseTopping?",
                            "What higher-level categories encompass GoatsCheeseTopping?"
                        ]
                    },
                    {
                        "axiom": "GoatsCheeseTopping disjointWith MozzarellaTopping",
                        "CQ": [
                            "What ontological separation exists between GoatsCheeseTopping and MozzarellaTopping?",
                            "Is any pizza topping permitted to be both GoatsCheeseTopping and MozzarellaTopping?",
                            "Which topping classes are explicitly specified as incompatible with MozzarellaTopping?"
                        ]
                    },
                    {
                        "axiom": "GoatsCheeseTopping disjointWith GorgonzolaTopping",
                        "CQ": [
                            "How does the ontology differentiate between GoatsCheeseTopping and GorgonzolaTopping?",
                            "Can a pizza ingredient be classified as both GoatsCheeseTopping and GorgonzolaTopping?",
                            "Which cheese topping classes are explicitly defined as disjoint with GorgonzolaTopping?"
                        ]
                    },
                    {
                        "axiom": "GoatsCheeseTopping disjointWith ParmesanTopping",
                        "CQ": [
                            "How does the ontology specify the separation between GoatsCheeseTopping and ParmesanTopping?",
                            "Is it allowable within the ontology for a topping to be classified as both GoatsCheeseTopping and ParmesanTopping?",
                            "Which topping categories are asserted to be disjoint with ParmesanTopping?"
                        ]
                    },
                    {
                        "axiom": "GoatsCheeseTopping disjointWith FourCheesesTopping",
                        "CQ": [
                            "What ontological separation exists between GoatsCheeseTopping and FourCheesesTopping?",
                            "Can an individual topping instance be classified as both GoatsCheeseTopping and FourCheesesTopping?",
                            "Which toppings are defined as mutually exclusive with GoatsCheeseTopping within the ontology?"
                        ]
                    },
                    {
                        "axiom": "GoatsCheeseTopping propertyRestrictions [hasSpiciness some Mild]",
                        "CQ": [
                            "Is it required that any GoatsCheeseTopping must exhibit at least one instance of the hasSpiciness property with value Mild?",
                            "Does every GoatsCheeseTopping have an associated spiciness level that includes Mild?",
                            "Can a GoatsCheeseTopping exist without being characterized by the hasSpiciness property set to Mild?"
                        ]
                    }
                ]
            },
            "GorgonzolaTopping": {
                "axiom": {
                    "subClassOf": [
                        "CheeseTopping"
                    ],
                    "disjointWith": [
                        "GoatsCheeseTopping",
                        "MozzarellaTopping",
                        "ParmesanTopping",
                        "FourCheesesTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Mild]"
                    ]
                },
                "description": "GorgonzolaTopping is defined as a subclass of CheeseTopping, representing a specific type of cheese-based topping. It is explicitly disjoint with GoatsCheeseTopping, MozzarellaTopping, ParmesanTopping, and FourCheesesTopping, ensuring that an individual cannot simultaneously belong to any of these classes. GorgonzolaTopping is characterized by having some level of mild spiciness, as specified by the property restriction (hasSpiciness some Mild).",
                "CQ": [
                    {
                        "axiom": "GorgonzolaTopping subClassOf CheeseTopping",
                        "CQ": [
                            "Is GorgonzolaTopping classified as a kind of CheeseTopping?",
                            "What toppings are defined as subcategories of CheeseTopping, specifically including GorgonzolaTopping?",
                            "Which parent categories encompass GorgonzolaTopping in the ontology?"
                        ]
                    },
                    {
                        "axiom": "GorgonzolaTopping disjointWith GoatsCheeseTopping",
                        "CQ": [
                            "How does the ontology differentiate between GorgonzolaTopping and GoatsCheeseTopping?",
                            "Is there any instance that can simultaneously be classified as GorgonzolaTopping and GoatsCheeseTopping?",
                            "Which topping categories are asserted to be mutually exclusive with GorgonzolaTopping?"
                        ]
                    },
                    {
                        "axiom": "GorgonzolaTopping disjointWith MozzarellaTopping",
                        "CQ": [
                            "What logical constraint separates GorgonzolaTopping and MozzarellaTopping in the ontology?",
                            "Is there an instance that can simultaneously be classified as both GorgonzolaTopping and MozzarellaTopping?",
                            "Which other toppings are specified as disjoint with GorgonzolaTopping?"
                        ]
                    },
                    {
                        "axiom": "GorgonzolaTopping disjointWith ParmesanTopping",
                        "CQ": [
                            "How does the ontology represent the incompatibility between GorgonzolaTopping and ParmesanTopping?",
                            "Is there any instance that can be classified as both GorgonzolaTopping and ParmesanTopping?",
                            "Which toppings are specified as disjoint from ParmesanTopping?"
                        ]
                    },
                    {
                        "axiom": "GorgonzolaTopping disjointWith FourCheesesTopping",
                        "CQ": [
                            "What is the ontological separation between GorgonzolaTopping and FourCheesesTopping?",
                            "Is it allowed for a pizza topping to be classified as both GorgonzolaTopping and FourCheesesTopping?",
                            "Which other topping classes are asserted as disjoint with GorgonzolaTopping?"
                        ]
                    },
                    {
                        "axiom": "GorgonzolaTopping propertyRestrictions [hasSpiciness some Mild]",
                        "CQ": [
                            "Is it required that every GorgonzolaTopping has at least one spiciness characteristic classified as Mild?",
                            "Can a GorgonzolaTopping exist without being associated with the Mild level of spiciness?",
                            "Does the definition of GorgonzolaTopping necessitate that it possesses the property 'hasSpiciness' with respect to Mild flavor?"
                        ]
                    }
                ]
            },
            "MozzarellaTopping": {
                "axiom": {
                    "subClassOf": [
                        "CheeseTopping"
                    ],
                    "disjointWith": [
                        "GoatsCheeseTopping",
                        "GorgonzolaTopping",
                        "ParmesanTopping",
                        "FourCheesesTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Mild]",
                        "[hasCountryOfOrigin hasValue Italy]"
                    ]
                },
                "description": "MozzarellaTopping is a subclass of CheeseTopping, representing a cheese-based topping specifically characterized by its mild spiciness and Italian origin. It is explicitly disjoint from GoatsCheeseTopping, GorgonzolaTopping, ParmesanTopping, and FourCheesesTopping, ensuring that no individual can simultaneously be an instance of MozzarellaTopping and any of these other cheese topping classes. All individuals of MozzarellaTopping are associated with a mild level of spiciness and must originate from Italy.",
                "CQ": [
                    {
                        "axiom": "MozzarellaTopping subClassOf CheeseTopping",
                        "CQ": [
                            "Is MozzarellaTopping categorized under the group of CheeseTopping?",
                            "Which particular toppings fall under CheeseTopping, such as MozzarellaTopping?",
                            "What higher-level classes encompass MozzarellaTopping?"
                        ]
                    },
                    {
                        "axiom": "MozzarellaTopping disjointWith GoatsCheeseTopping",
                        "CQ": [
                            "What is the logical relationship specified between MozzarellaTopping and GoatsCheeseTopping in the ontology?",
                            "Is it allowed for a pizza topping to be classified simultaneously as MozzarellaTopping and GoatsCheeseTopping?",
                            "Which topping classes are explicitly defined as disjoint with MozzarellaTopping?"
                        ]
                    },
                    {
                        "axiom": "MozzarellaTopping disjointWith GorgonzolaTopping",
                        "CQ": [
                            "What is the defined separation between MozzarellaTopping and GorgonzolaTopping within the ontology?",
                            "Is there any instance that could simultaneously be considered both a MozzarellaTopping and a GorgonzolaTopping?",
                            "Which toppings, besides MozzarellaTopping, are specified as incompatible with GorgonzolaTopping?"
                        ]
                    },
                    {
                        "axiom": "MozzarellaTopping disjointWith ParmesanTopping",
                        "CQ": [
                            "Are MozzarellaTopping and ParmesanTopping defined as mutually exclusive classes in the ontology?",
                            "Is it permissible for a pizza to include both MozzarellaTopping and ParmesanTopping simultaneously?",
                            "Which topping categories are specified as disjoint with ParmesanTopping?"
                        ]
                    },
                    {
                        "axiom": "MozzarellaTopping disjointWith FourCheesesTopping",
                        "CQ": [
                            "How does the ontology differentiate between MozzarellaTopping and FourCheesesTopping?",
                            "Is there any scenario where a topping is both MozzarellaTopping and FourCheesesTopping?",
                            "Which topping types are asserted as mutually exclusive with FourCheesesTopping?"
                        ]
                    },
                    {
                        "axiom": "MozzarellaTopping propertyRestrictions [hasSpiciness some Mild]",
                        "CQ": [
                            "Is it required that every MozzarellaTopping has at least some level of spiciness categorized as Mild?",
                            "Can a MozzarellaTopping exist without having the hasSpiciness property set to Mild?",
                            "Does the presence of MozzarellaTopping entail that it must be associated with a Mild spiciness?"
                        ]
                    },
                    {
                        "axiom": "MozzarellaTopping propertyRestrictions [hasCountryOfOrigin hasValue Italy]",
                        "CQ": [
                            "Is it required that MozzarellaTopping has the country of origin property set to Italy?",
                            "Can MozzarellaTopping have a country of origin value other than Italy?",
                            "Does the ontology allow MozzarellaTopping to originate from any country besides Italy?"
                        ]
                    }
                ]
            },
            "ParmesanTopping": {
                "axiom": {
                    "subClassOf": [
                        "CheeseTopping"
                    ],
                    "disjointWith": [
                        "GoatsCheeseTopping",
                        "MozzarellaTopping",
                        "GorgonzolaTopping",
                        "FourCheesesTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Mild]"
                    ]
                },
                "description": "ParmesanTopping is defined as a subclass of CheeseTopping, representing cheese-based toppings specifically comprised of parmesan. It is explicitly disjoint from GoatsCheeseTopping, MozzarellaTopping, GorgonzolaTopping, and FourCheesesTopping, ensuring no individual can simultaneously belong to these classes. Members of this class are characterized by having some level of mild spiciness, as specified by the property restriction [hasSpiciness some Mild].",
                "CQ": [
                    {
                        "axiom": "ParmesanTopping subClassOf CheeseTopping",
                        "CQ": [
                            "Does ParmesanTopping fall under the classification of CheeseTopping?",
                            "Which toppings are classified as specializations of CheeseTopping, such as ParmesanTopping?",
                            "What are the broader topping categories that encompass ParmesanTopping?"
                        ]
                    },
                    {
                        "axiom": "ParmesanTopping disjointWith GoatsCheeseTopping",
                        "CQ": [
                            "What is the formal association defined between ParmesanTopping and GoatsCheeseTopping in the ontology?",
                            "Is it allowable for a pizza to have both ParmesanTopping and GoatsCheeseTopping simultaneously?",
                            "Which topping categories are specified as mutually exclusive with GoatsCheeseTopping?"
                        ]
                    },
                    {
                        "axiom": "ParmesanTopping disjointWith MozzarellaTopping",
                        "CQ": [
                            "How does the ontology distinguish between ParmesanTopping and MozzarellaTopping?",
                            "Is it allowable for a topping to be classified as both Parmesan and Mozzarella simultaneously?",
                            "Which topping categories are formally stated as mutually exclusive with MozzarellaTopping?"
                        ]
                    },
                    {
                        "axiom": "ParmesanTopping disjointWith GorgonzolaTopping",
                        "CQ": [
                            "What is the ontological distinction between ParmesanTopping and GorgonzolaTopping?",
                            "Is there any topping that can be classified as both ParmesanTopping and GorgonzolaTopping?",
                            "Which topping classes are defined as disjoint with GorgonzolaTopping?"
                        ]
                    },
                    {
                        "axiom": "ParmesanTopping disjointWith FourCheesesTopping",
                        "CQ": [
                            "What distinction is modeled between ParmesanTopping and FourCheesesTopping within the ontology?",
                            "Could an instance belong simultaneously to both ParmesanTopping and FourCheesesTopping classes?",
                            "Which other topping classes are asserted as incompatible with FourCheesesTopping?"
                        ]
                    },
                    {
                        "axiom": "ParmesanTopping propertyRestrictions [hasSpiciness some Mild]",
                        "CQ": [
                            "Is every ParmesanTopping required to have at least one level of spiciness classified as Mild?",
                            "Can a ParmesanTopping exist without being associated with any Mild spiciness?",
                            "Does ParmesanTopping necessarily include the hasSpiciness relation pointing to something Mild?"
                        ]
                    }
                ]
            },
            "ChickenTopping": {
                "axiom": {
                    "subClassOf": [
                        "MeatTopping"
                    ],
                    "disjointWith": [
                        "PeperoniSausageTopping",
                        "HotSpicedBeefTopping",
                        "HamTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Mild]"
                    ]
                },
                "description": "ChickenTopping is defined as a subclass of MeatTopping and is explicitly disjoint with PeperoniSausageTopping, HotSpicedBeefTopping, and HamTopping, ensuring that no individual can simultaneously belong to both ChickenTopping and any of these other meat topping classes. Members of the ChickenTopping class are required to have at least some level of spiciness characterized as Mild. This formalization specifies that ChickenTopping represents mild, non-overlapping meat-based pizza toppings distinct from other specified meat varieties.",
                "CQ": [
                    {
                        "axiom": "ChickenTopping subClassOf MeatTopping",
                        "CQ": [
                            "Does ChickenTopping fall under the broader classification of MeatTopping?",
                            "What more specific topping types are categorized beneath MeatTopping, including ChickenTopping?",
                            "To which higher-level topping categories can ChickenTopping be linked?"
                        ]
                    },
                    {
                        "axiom": "ChickenTopping disjointWith PeperoniSausageTopping",
                        "CQ": [
                            "What logical separation is present between ChickenTopping and PeperoniSausageTopping within the ontology?",
                            "Is it possible for a topping to be classified as both ChickenTopping and PeperoniSausageTopping?",
                            "Which other topping classes are explicitly declared disjoint from PeperoniSausageTopping?"
                        ]
                    },
                    {
                        "axiom": "ChickenTopping disjointWith HotSpicedBeefTopping",
                        "CQ": [
                            "How are ChickenTopping and HotSpicedBeefTopping related within the ontology?",
                            "Is it allowed for a pizza to simultaneously have both ChickenTopping and HotSpicedBeefTopping?",
                            "Which pizza toppings are specified as disjoint with HotSpicedBeefTopping?"
                        ]
                    },
                    {
                        "axiom": "ChickenTopping disjointWith HamTopping",
                        "CQ": [
                            "What logical separation is represented between ChickenTopping and HamTopping within the ontology?",
                            "Is there any scenario in which an ingredient could be both classified as ChickenTopping and HamTopping?",
                            "Which topping types are formally specified as disjoint with HamTopping?"
                        ]
                    },
                    {
                        "axiom": "ChickenTopping propertyRestrictions [hasSpiciness some Mild]",
                        "CQ": [
                            "Does every ChickenTopping require at least one hasSpiciness property value of Mild?",
                            "Is it necessary for a ChickenTopping to be associated with some level of spiciness classified as Mild?",
                            "Can a ChickenTopping exist without having any hasSpiciness relationship to Mild?"
                        ]
                    }
                ]
            },
            "HamTopping": {
                "axiom": {
                    "subClassOf": [
                        "MeatTopping"
                    ],
                    "disjointWith": [
                        "PeperoniSausageTopping",
                        "HotSpicedBeefTopping",
                        "ChickenTopping"
                    ]
                },
                "description": "HamTopping is defined as a subclass of MeatTopping, indicating that it is a type of meat-based pizza topping. It is explicitly disjoint with PeperoniSausageTopping, HotSpicedBeefTopping, and ChickenTopping, meaning an individual topping cannot simultaneously be classified as ham and any of these other meat toppings. This formalization ensures that HamTopping remains distinct from other specific meat toppings within the ontology.",
                "CQ": [
                    {
                        "axiom": "HamTopping subClassOf MeatTopping",
                        "CQ": [
                            "Is HamTopping classified as a type of MeatTopping?",
                            "What categories encompass HamTopping as a subclass?",
                            "Which toppings are direct subclasses of MeatTopping, including HamTopping?"
                        ]
                    },
                    {
                        "axiom": "HamTopping disjointWith PeperoniSausageTopping",
                        "CQ": [
                            "What differentiates HamTopping from PeperoniSausageTopping in the ontology?",
                            "Is there any instance that belongs to both HamTopping and PeperoniSausageTopping simultaneously?",
                            "Which toppings are asserted as incompatible with HamTopping?"
                        ]
                    },
                    {
                        "axiom": "HamTopping disjointWith HotSpicedBeefTopping",
                        "CQ": [
                            "What formal separation is specified between HamTopping and HotSpicedBeefTopping in the ontology?",
                            "Is there any instance that can be classified simultaneously as HamTopping and HotSpicedBeefTopping?",
                            "Which other topping categories are asserted as disjoint with HamTopping?"
                        ]
                    },
                    {
                        "axiom": "HamTopping disjointWith ChickenTopping",
                        "CQ": [
                            "What logical constraint separates HamTopping from ChickenTopping within the ontology?",
                            "Is there any instance that can simultaneously belong to both HamTopping and ChickenTopping categories?",
                            "Which toppings are specified as disjoint with ChickenTopping?"
                        ]
                    }
                ]
            },
            "HotSpicedBeefTopping": {
                "axiom": {
                    "subClassOf": [
                        "MeatTopping"
                    ],
                    "disjointWith": [
                        "PeperoniSausageTopping",
                        "HamTopping",
                        "ChickenTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Hot]"
                    ]
                },
                "description": "HotSpicedBeefTopping is defined as a subclass of MeatTopping, representing a specific type of meat-based pizza topping. It is disjoint with PeperoniSausageTopping, HamTopping, and ChickenTopping, meaning no individual topping can simultaneously belong to any of these classes and HotSpicedBeefTopping. Members of this class are characterized by having at least some degree of spiciness classified as Hot, distinguishing them from other meat toppings in the ontology.",
                "CQ": [
                    {
                        "axiom": "HotSpicedBeefTopping subClassOf MeatTopping",
                        "CQ": [
                            "Is HotSpicedBeefTopping classified as a type of MeatTopping?",
                            "What toppings are specialized forms under MeatTopping, such as HotSpicedBeefTopping?",
                            "Which broader topping categories include HotSpicedBeefTopping as a member?"
                        ]
                    },
                    {
                        "axiom": "HotSpicedBeefTopping disjointWith PeperoniSausageTopping",
                        "CQ": [
                            "How does the ontology specify the mutual exclusivity of HotSpicedBeefTopping and PeperoniSausageTopping?",
                            "Is there any topping that can simultaneously be classified as HotSpicedBeefTopping and PeperoniSausageTopping?",
                            "Which other topping classes are declared to be disjoint with HotSpicedBeefTopping?"
                        ]
                    },
                    {
                        "axiom": "HotSpicedBeefTopping disjointWith HamTopping",
                        "CQ": [
                            "How does the ontology formally separate HotSpicedBeefTopping from HamTopping?",
                            "Is there any topping instance that can simultaneously be classified as both HotSpicedBeefTopping and HamTopping?",
                            "Which classes are explicitly stated as mutually exclusive with HamTopping?"
                        ]
                    },
                    {
                        "axiom": "HotSpicedBeefTopping disjointWith ChickenTopping",
                        "CQ": [
                            "What logical separation is defined between HotSpicedBeefTopping and ChickenTopping in the ontology?",
                            "Is there any instance that can be both a HotSpicedBeefTopping and a ChickenTopping?",
                            "Which topping classes, aside from ChickenTopping, are declared as mutually exclusive with HotSpicedBeefTopping?"
                        ]
                    },
                    {
                        "axiom": "HotSpicedBeefTopping propertyRestrictions [hasSpiciness some Hot]",
                        "CQ": [
                            "Must every HotSpicedBeefTopping have at least one hasSpiciness property value that is Hot?",
                            "Is it necessary for HotSpicedBeefTopping to be associated with some level of hot spiciness via the hasSpiciness property?",
                            "Can a HotSpicedBeefTopping exist without having the hasSpiciness property filled with a Hot value?"
                        ]
                    }
                ]
            },
            "PeperoniSausageTopping": {
                "axiom": {
                    "subClassOf": [
                        "MeatTopping"
                    ],
                    "disjointWith": [
                        "HotSpicedBeefTopping",
                        "HamTopping",
                        "ChickenTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Medium]"
                    ]
                },
                "description": "PeperoniSausageTopping is defined as a subclass of MeatTopping, representing a specific type of meat-based pizza topping. It is explicitly disjoint with HotSpicedBeefTopping, HamTopping, and ChickenTopping, ensuring that no individual topping can be classified as more than one of these types simultaneously. Members of this class are characterized by possessing at least some medium level of spiciness, as specified by the property restriction [hasSpiciness some Medium]. This formalization ensures clear differentiation within meat toppings and enforces the requirement for moderate spiciness in PeperoniSausageTopping.",
                "CQ": [
                    {
                        "axiom": "PeperoniSausageTopping subClassOf MeatTopping",
                        "CQ": [
                            "Is PeperoniSausageTopping classified as a kind of MeatTopping?",
                            "What toppings are categorized under MeatTopping, including PeperoniSausageTopping?",
                            "To which broader categories does PeperoniSausageTopping relate within the topping hierarchy?"
                        ]
                    },
                    {
                        "axiom": "PeperoniSausageTopping disjointWith HotSpicedBeefTopping",
                        "CQ": [
                            "What separation is defined between PeperoniSausageTopping and HotSpicedBeefTopping in the ontology?",
                            "Is it allowable for a single topping instance to belong to both PeperoniSausageTopping and HotSpicedBeefTopping?",
                            "Which topping types are asserted as disjoint with PeperoniSausageTopping?"
                        ]
                    },
                    {
                        "axiom": "PeperoniSausageTopping disjointWith HamTopping",
                        "CQ": [
                            "What logical separation is defined between PeperoniSausageTopping and HamTopping within the ontology?",
                            "Is it allowable for a single topping to be classified as both PeperoniSausageTopping and HamTopping?",
                            "Which other topping types are specified as disjoint with HamTopping?"
                        ]
                    },
                    {
                        "axiom": "PeperoniSausageTopping disjointWith ChickenTopping",
                        "CQ": [
                            "What is the formal distinction between PeperoniSausageTopping and ChickenTopping in the ontology?",
                            "Can any pizza topping be classified as both PeperoniSausageTopping and ChickenTopping?",
                            "Which topping categories are specified as mutually exclusive with PeperoniSausageTopping?"
                        ]
                    },
                    {
                        "axiom": "PeperoniSausageTopping propertyRestrictions [hasSpiciness some Medium]",
                        "CQ": [
                            "Is it required that every PeperoniSausageTopping has at least one level of spiciness classified as Medium?",
                            "Can a PeperoniSausageTopping exist without exhibiting Medium spiciness?",
                            "Does the presence of medium spiciness distinguish PeperoniSausageTopping from other topping types?"
                        ]
                    }
                ]
            },
            "DeepPanBase": {
                "axiom": {
                    "subClassOf": [
                        "PizzaBase"
                    ],
                    "disjointWith": [
                        "ThinAndCrispyBase"
                    ]
                },
                "description": "DeepPanBase is defined as a subclass of PizzaBase, establishing it as a specific type of pizza base. It is explicitly disjoint with ThinAndCrispyBase, which means that no pizza base can simultaneously be classified as both a DeepPanBase and a ThinAndCrispyBase. This formalization ensures clear differentiation between thick, deep pan styles and thin, crispy bases within the ontology.",
                "CQ": [
                    {
                        "axiom": "DeepPanBase subClassOf PizzaBase",
                        "CQ": [
                            "Is DeepPanBase classified under the broader category of PizzaBase?",
                            "Which base types are classified as more specific forms of PizzaBase, including DeepPanBase?",
                            "What higher-level groupings does DeepPanBase fall under?"
                        ]
                    },
                    {
                        "axiom": "DeepPanBase disjointWith ThinAndCrispyBase",
                        "CQ": [
                            "How does the ontology distinguish between DeepPanBase and ThinAndCrispyBase?",
                            "Is it permissible for a pizza base to be classified as both DeepPanBase and ThinAndCrispyBase?",
                            "Which base types are specified as mutually exclusive with DeepPanBase in the ontology?"
                        ]
                    }
                ]
            },
            "ThinAndCrispyBase": {
                "axiom": {
                    "subClassOf": [
                        "PizzaBase"
                    ],
                    "disjointWith": [
                        "DeepPanBase"
                    ]
                },
                "description": "ThinAndCrispyBase is a subclass of PizzaBase, representing a specific type of pizza base. It is explicitly declared as disjoint with DeepPanBase, ensuring that no individual pizza base can simultaneously be classified as both ThinAndCrispyBase and DeepPanBase. This formalization distinguishes thin and crispy bases from deep pan bases within the ontology.",
                "CQ": [
                    {
                        "axiom": "ThinAndCrispyBase subClassOf PizzaBase",
                        "CQ": [
                            "Is ThinAndCrispyBase classified among the specific types under PizzaBase?",
                            "Which pizza bases are categorized as specializations of PizzaBase, particularly including ThinAndCrispyBase?",
                            "What broader classifications encompass ThinAndCrispyBase?"
                        ]
                    },
                    {
                        "axiom": "ThinAndCrispyBase disjointWith DeepPanBase",
                        "CQ": [
                            "How does the ontology specify the difference between ThinAndCrispyBase and DeepPanBase?",
                            "Is any pizza base classified under both ThinAndCrispyBase and DeepPanBase?",
                            "What other base types are explicitly declared as disjoint with DeepPanBase?"
                        ]
                    }
                ]
            },
            "Food": {
                "axiom": {
                    "subClassOf": [
                        "DomainConcept"
                    ]
                },
                "description": "Food is defined as a subclass of DomainConcept. This means that every instance of Food is considered a type of DomainConcept, representing consumable items or substances within the modeled domain. No further restrictions or disjoint relationships are specified in the current axiom.",
                "CQ": [
                    {
                        "axiom": "Food subClassOf DomainConcept",
                        "CQ": [
                            "Is Food classified under the broader category of DomainConcept?",
                            "Which more specific classes, such as Food, are encompassed by DomainConcept?",
                            "What general categories is Food a member of within the ontology?"
                        ]
                    }
                ]
            },
            "GreenPepperTopping": {
                "axiom": {
                    "subClassOf": [
                        "PepperTopping"
                    ],
                    "disjointWith": [
                        "SweetPepperTopping",
                        "JalapenoPepperTopping",
                        "PeperonataTopping"
                    ]
                },
                "description": "GreenPepperTopping is defined as a subclass of PepperTopping, indicating it inherits all characteristics of pepper-based pizza toppings. It is explicitly disjoint with SweetPepperTopping, JalapenoPepperTopping, and PeperonataTopping—ensuring that no instance can simultaneously belong to more than one of these classes. This formalization distinguishes green pepper toppings from other specific pepper varieties within the ontology.",
                "CQ": [
                    {
                        "axiom": "GreenPepperTopping subClassOf PepperTopping",
                        "CQ": [
                            "Is GreenPepperTopping classified as a kind of PepperTopping?",
                            "Which toppings are specialized forms of PepperTopping, such as GreenPepperTopping?",
                            "Under what broader classifications can GreenPepperTopping be grouped?"
                        ]
                    },
                    {
                        "axiom": "GreenPepperTopping disjointWith SweetPepperTopping",
                        "CQ": [
                            "What is the ontological separation specified between GreenPepperTopping and SweetPepperTopping?",
                            "Is there any instance that can be simultaneously classified as both GreenPepperTopping and SweetPepperTopping?",
                            "Which classes are defined as mutually exclusive with GreenPepperTopping in the ontology?"
                        ]
                    },
                    {
                        "axiom": "GreenPepperTopping disjointWith JalapenoPepperTopping",
                        "CQ": [
                            "How does the ontology distinguish between GreenPepperTopping and JalapenoPepperTopping?",
                            "Is it allowed for a pizza topping to be classified as both GreenPepperTopping and JalapenoPepperTopping simultaneously?",
                            "Which toppings are formally specified as disjoint with JalapenoPepperTopping in the ontology?"
                        ]
                    },
                    {
                        "axiom": "GreenPepperTopping disjointWith PeperonataTopping",
                        "CQ": [
                            "How does the ontology specify the relationship between GreenPepperTopping and PeperonataTopping?",
                            "Is an instance allowed to be classified as both GreenPepperTopping and PeperonataTopping?",
                            "Which classes are formally stated as disjoint from PeperonataTopping?"
                        ]
                    }
                ]
            },
            "JalapenoPepperTopping": {
                "axiom": {
                    "subClassOf": [
                        "PepperTopping"
                    ],
                    "disjointWith": [
                        "SweetPepperTopping",
                        "GreenPepperTopping",
                        "PeperonataTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Hot]"
                    ]
                },
                "description": "JalapenoPepperTopping is formally defined as a subclass of PepperTopping, indicating that it inherits all general characteristics of pepper-based toppings. It is explicitly disjoint with SweetPepperTopping, GreenPepperTopping, and PeperonataTopping, meaning that no individual can simultaneously be an instance of JalapenoPepperTopping and any of these other topping types. Additionally, this class is characterized by the property restriction that every JalapenoPepperTopping must exhibit some level of hot spiciness, ensuring that all members are differentiated by their distinctly hot flavor profile.",
                "CQ": [
                    {
                        "axiom": "JalapenoPepperTopping subClassOf PepperTopping",
                        "CQ": [
                            "Does JalapenoPepperTopping belong to the class of PepperTopping?",
                            "Which toppings fall under the classification of PepperTopping, such as JalapenoPepperTopping?",
                            "Under which higher-level classes would you categorize JalapenoPepperTopping?"
                        ]
                    },
                    {
                        "axiom": "JalapenoPepperTopping disjointWith SweetPepperTopping",
                        "CQ": [
                            "How does the ontology differentiate between JalapenoPepperTopping and SweetPepperTopping?",
                            "Is there an instance that can be both JalapenoPepperTopping and SweetPepperTopping?",
                            "What other topping classes are declared as disjoint with SweetPepperTopping?"
                        ]
                    },
                    {
                        "axiom": "JalapenoPepperTopping disjointWith GreenPepperTopping",
                        "CQ": [
                            "How does the ontology specify the separation between JalapenoPepperTopping and GreenPepperTopping?",
                            "Is there any scenario where a topping can be classified as both JalapenoPepperTopping and GreenPepperTopping?",
                            "Which topping classes are defined as mutually exclusive with GreenPepperTopping?"
                        ]
                    },
                    {
                        "axiom": "JalapenoPepperTopping disjointWith PeperonataTopping",
                        "CQ": [
                            "How does the ontology differentiate between JalapenoPepperTopping and PeperonataTopping?",
                            "Is it allowed for a pizza to simultaneously include both JalapenoPepperTopping and PeperonataTopping?",
                            "Which topping categories are specified as mutually exclusive with PeperonataTopping?"
                        ]
                    },
                    {
                        "axiom": "JalapenoPepperTopping propertyRestrictions [hasSpiciness some Hot]",
                        "CQ": [
                            "Must every JalapenoPepperTopping have at least one instance of spiciness classified as Hot?",
                            "Is it required for JalapenoPepperTopping to possess the hasSpiciness property associated with Hot?",
                            "Can JalapenoPepperTopping exist without being connected to Hot via the hasSpiciness property?"
                        ]
                    }
                ]
            },
            "PeperonataTopping": {
                "axiom": {
                    "subClassOf": [
                        "PepperTopping"
                    ],
                    "disjointWith": [
                        "SweetPepperTopping",
                        "GreenPepperTopping",
                        "JalapenoPepperTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Medium]"
                    ]
                },
                "description": "PeperonataTopping is defined as a subclass of PepperTopping, meaning it inherits all characteristics typical of pepper-based pizza toppings. It is explicitly disjoint with SweetPepperTopping, GreenPepperTopping, and JalapenoPepperTopping, so no individual can simultaneously belong to any of those classes and PeperonataTopping. Every instance of PeperonataTopping is required to have at least some medium level of spiciness, as specified by its property restriction on hasSpiciness. This ensures that PeperonataTopping is uniquely distinguished by both its type within pepper toppings and its characteristic spiciness.",
                "CQ": [
                    {
                        "axiom": "PeperonataTopping subClassOf PepperTopping",
                        "CQ": [
                            "Is PeperonataTopping classified under the broader category of PepperTopping?",
                            "Which toppings are specified as subclasses of PepperTopping, such as PeperonataTopping?",
                            "What broader topping categories encompass PeperonataTopping?"
                        ]
                    },
                    {
                        "axiom": "PeperonataTopping disjointWith SweetPepperTopping",
                        "CQ": [
                            "What ontological differentiation is made between PeperonataTopping and SweetPepperTopping?",
                            "Is it permitted for a topping to be classified as both PeperonataTopping and SweetPepperTopping?",
                            "Which toppings are specifically stated to be disjoint with PeperonataTopping?"
                        ]
                    },
                    {
                        "axiom": "PeperonataTopping disjointWith GreenPepperTopping",
                        "CQ": [
                            "How does the ontology represent the distinction between PeperonataTopping and GreenPepperTopping?",
                            "Can a single pizza have both PeperonataTopping and GreenPepperTopping according to the ontology?",
                            "Which toppings are specified as disjoint with PeperonataTopping?"
                        ]
                    },
                    {
                        "axiom": "PeperonataTopping disjointWith JalapenoPepperTopping",
                        "CQ": [
                            "How does the ontology define the separation between PeperonataTopping and JalapenoPepperTopping?",
                            "Is it permissible for a single topping instance to be classified as both PeperonataTopping and JalapenoPepperTopping?",
                            "Which topping classes are specified as disjoint with PeperonataTopping?"
                        ]
                    },
                    {
                        "axiom": "PeperonataTopping propertyRestrictions [hasSpiciness some Medium]",
                        "CQ": [
                            "Must every PeperonataTopping have at least one hasSpiciness property with Medium as its value?",
                            "Can a PeperonataTopping exist without being associated with Medium spiciness through the hasSpiciness property?",
                            "Is it a requirement that PeperonataTopping be linked to Medium spiciness by means of the hasSpiciness property?"
                        ]
                    }
                ]
            },
            "SweetPepperTopping": {
                "axiom": {
                    "subClassOf": [
                        "PepperTopping"
                    ],
                    "disjointWith": [
                        "GreenPepperTopping",
                        "JalapenoPepperTopping",
                        "PeperonataTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Mild]"
                    ]
                },
                "description": "SweetPepperTopping is defined as a subclass of PepperTopping, specifying that it represents a type of pepper-based topping. It is explicitly disjoint with GreenPepperTopping, JalapenoPepperTopping, and PeperonataTopping, so no individual can be both a SweetPepperTopping and any of these other pepper toppings. Additionally, SweetPepperTopping has a property restriction requiring that it exhibits at least some mild level of spiciness (hasSpiciness some Mild), distinguishing it from potentially hotter pepper toppings.",
                "CQ": [
                    {
                        "axiom": "SweetPepperTopping subClassOf PepperTopping",
                        "CQ": [
                            "Is SweetPepperTopping classified under the broader category of PepperTopping?",
                            "Which toppings are defined as specializations of PepperTopping, including SweetPepperTopping?",
                            "What higher-level categories encompass SweetPepperTopping?"
                        ]
                    },
                    {
                        "axiom": "SweetPepperTopping disjointWith GreenPepperTopping",
                        "CQ": [
                            "How is the class SweetPepperTopping differentiated from GreenPepperTopping in the ontology?",
                            "Is any topping instance allowed to be both SweetPepperTopping and GreenPepperTopping simultaneously?",
                            "Which topping categories are formally declared as disjoint with SweetPepperTopping?"
                        ]
                    },
                    {
                        "axiom": "SweetPepperTopping disjointWith JalapenoPepperTopping",
                        "CQ": [
                            "What logical constraint differentiates SweetPepperTopping and JalapenoPepperTopping within the ontology?",
                            "Is any pizza topping classified simultaneously as both SweetPepperTopping and JalapenoPepperTopping?",
                            "Which topping classes are explicitly incompatible with JalapenoPepperTopping according to the ontology?"
                        ]
                    },
                    {
                        "axiom": "SweetPepperTopping disjointWith PeperonataTopping",
                        "CQ": [
                            "What logical separation is present between SweetPepperTopping and PeperonataTopping within the ontology?",
                            "Is an ingredient allowed to be both a SweetPepperTopping and a PeperonataTopping simultaneously?",
                            "Which other topping classes are specified as being mutually exclusive with PeperonataTopping?"
                        ]
                    },
                    {
                        "axiom": "SweetPepperTopping propertyRestrictions [hasSpiciness some Mild]",
                        "CQ": [
                            "Is every SweetPepperTopping required to have a spiciness level that is at least Mild?",
                            "Must there exist at least one instance where SweetPepperTopping has spiciness classified as Mild?",
                            "Can a SweetPepperTopping exist without being associated with Mild spiciness?"
                        ]
                    }
                ]
            },
            "Hot": {
                "axiom": {
                    "subClassOf": [
                        "Spiciness"
                    ],
                    "disjointWith": [
                        "Mild",
                        "Medium"
                    ]
                },
                "description": "Hot is defined as a subclass of Spiciness, indicating it represents an elevated or intense level of spicy sensation. It is explicitly disjoint with the classes Mild and Medium, ensuring that no instance can be both Hot and either Mild or Medium at the same time. This formalization clarifies that Hot describes a distinct, non-overlapping intensity within the spectrum of spiciness.",
                "CQ": [
                    {
                        "axiom": "Hot subClassOf Spiciness",
                        "CQ": [
                            "Is Hot categorized under the broader class of Spiciness?",
                            "What types are more specific than Spiciness, such as Hot?",
                            "Which higher-level categories does Hot fall under?"
                        ]
                    },
                    {
                        "axiom": "Hot disjointWith Mild",
                        "CQ": [
                            "What type of logical separation is defined between Hot and Mild?",
                            "Is it allowed for an entity to be classified as both Hot and Mild simultaneously?",
                            "Which classes, apart from Mild, are explicitly stated as disjoint with Hot?"
                        ]
                    },
                    {
                        "axiom": "Hot disjointWith Medium",
                        "CQ": [
                            "What does the ontology indicate about the mutual exclusivity of Hot and Medium?",
                            "Is any entity classified as both Hot and Medium in the knowledge base?",
                            "Which classes are formally stated to be disjoint with Medium?"
                        ]
                    }
                ]
            },
            "Medium": {
                "axiom": {
                    "subClassOf": [
                        "Spiciness"
                    ],
                    "disjointWith": [
                        "Mild",
                        "Hot"
                    ]
                },
                "description": "Medium is a subclass of Spiciness, representing a specific level or category of spiciness. It is formally defined as disjoint with both Mild and Hot, meaning that no individual instance can belong to more than one of these classes simultaneously. This ensures that any item classified as Medium cannot be considered Mild or Hot in terms of spiciness.",
                "CQ": [
                    {
                        "axiom": "Medium subClassOf Spiciness",
                        "CQ": [
                            "Does Medium represent a specific level under the broader Spiciness classification?",
                            "Which spiciness levels are categorized as subclasses of Spiciness, such as Medium?",
                            "What broader classifications encompass Medium in the context of spiciness?"
                        ]
                    },
                    {
                        "axiom": "Medium disjointWith Mild",
                        "CQ": [
                            "How does the ontology differentiate between Medium and Mild?",
                            "Is there any item that can simultaneously be classified as both Medium and Mild?",
                            "Which classes are formally specified as disjoint with Medium?"
                        ]
                    },
                    {
                        "axiom": "Medium disjointWith Hot",
                        "CQ": [
                            "How are Medium and Hot classes differentiated within the ontology?",
                            "Is there any instance that can belong to both the Medium and Hot categories?",
                            "Which classes are defined as mutually exclusive with Medium?"
                        ]
                    }
                ]
            },
            "Mild": {
                "axiom": {
                    "subClassOf": [
                        "Spiciness"
                    ],
                    "disjointWith": [
                        "Hot",
                        "Medium"
                    ]
                },
                "description": "Mild is a subclass of Spiciness, representing a specific level of spiciness distinct from other grades. It is explicitly disjoint with both Hot and Medium, ensuring that an instance classified as Mild cannot simultaneously be classified as Hot or Medium. This enforces a clear and exclusive categorization among the spiciness levels.",
                "CQ": [
                    {
                        "axiom": "Mild subClassOf Spiciness",
                        "CQ": [
                            "Does Mild fall under the classification of Spiciness?",
                            "Which categories within Spiciness encompass Mild as a more specific type?",
                            "What broader classifications include Mild according to the spiciness hierarchy?"
                        ]
                    },
                    {
                        "axiom": "Mild disjointWith Hot",
                        "CQ": [
                            "What is the formal separation defined between Mild and Hot in the ontology?",
                            "Can an entity be classified as both Mild and Hot?",
                            "Which classes are specified as disjoint with Hot?"
                        ]
                    },
                    {
                        "axiom": "Mild disjointWith Medium",
                        "CQ": [
                            "What logical separation is specified between Mild and Medium within the ontology?",
                            "Is it possible for an item to be classified as both Mild and Medium simultaneously?",
                            "Which classes are formally declared as disjoint with Medium?"
                        ]
                    }
                ]
            },
            "HotGreenPepperTopping": {
                "axiom": {
                    "subClassOf": [
                        "GreenPepperTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Hot]"
                    ]
                },
                "description": "HotGreenPepperTopping is a subclass of GreenPepperTopping, defined by the property that it has some level of spiciness classified as Hot. This means that all individuals of this class are green pepper toppings that possess hot spiciness, distinguishing them from milder varieties of green pepper toppings.",
                "CQ": [
                    {
                        "axiom": "HotGreenPepperTopping subClassOf GreenPepperTopping",
                        "CQ": [
                            "Does HotGreenPepperTopping fall within the category defined by GreenPepperTopping?",
                            "Which toppings are classified as more specific than GreenPepperTopping, such as HotGreenPepperTopping?",
                            "Under which general topping categories does HotGreenPepperTopping reside?"
                        ]
                    },
                    {
                        "axiom": "HotGreenPepperTopping propertyRestrictions [hasSpiciness some Hot]",
                        "CQ": [
                            "Is every HotGreenPepperTopping required to have a spiciness level that includes some instance of Hot?",
                            "Can a HotGreenPepperTopping exist that does not possess the hasSpiciness property with a value classified as Hot?",
                            "Does the presence of the hasSpiciness property with Hot necessarily characterize all instances of HotGreenPepperTopping?"
                        ]
                    }
                ]
            },
            "IceCream": {
                "axiom": {
                    "subClassOf": [
                        "Food"
                    ],
                    "disjointWith": [
                        "Pizza",
                        "PizzaTopping",
                        "PizzaBase"
                    ],
                    "propertyRestrictions": [
                        "[hasTopping some FruitTopping]"
                    ]
                },
                "description": "IceCream is defined as a subclass of Food, and is explicitly disjoint with Pizza, PizzaTopping, and PizzaBase, ensuring that no individual can simultaneously belong to any of these classes. All members of the IceCream class must have at least one topping from FruitTopping, as specified by the property restriction (hasTopping some FruitTopping). The current modeling highlights a domain constraint issue: since the hasTopping property has Pizza as its domain, any use of hasTopping causes the reasoner to infer membership in Pizza. Combined with the disjointness between Pizza and IceCream, this results in a logical inconsistency, illustrating the importance of carefully aligning property domains with intended class usage.",
                "CQ": [
                    {
                        "axiom": "IceCream subClassOf Food",
                        "CQ": [
                            "Is IceCream classified under the broader category of Food?",
                            "Which categories within Food encompass IceCream as a specific type?",
                            "What are the more specific types that fall under Food, including IceCream?"
                        ]
                    },
                    {
                        "axiom": "IceCream disjointWith Pizza",
                        "CQ": [
                            "How is the concept of IceCream related to the concept of Pizza within the ontology?",
                            "Is there any instance that could be simultaneously classified as both IceCream and Pizza?",
                            "Which classes are specified as disjoint with IceCream in the ontology?"
                        ]
                    },
                    {
                        "axiom": "IceCream disjointWith PizzaTopping",
                        "CQ": [
                            "What logical separation is defined between IceCream and PizzaTopping within the ontology?",
                            "Is an entity allowed to belong simultaneously to the classes IceCream and PizzaTopping?",
                            "Which classes, aside from PizzaTopping, are specified as mutually exclusive with IceCream?"
                        ]
                    },
                    {
                        "axiom": "IceCream disjointWith PizzaBase",
                        "CQ": [
                            "How does the ontology differentiate between IceCream and PizzaBase?",
                            "Is any individual allowed to be classified as both IceCream and PizzaBase within the ontology?",
                            "What are the classes specified as disjoint with PizzaBase?"
                        ]
                    },
                    {
                        "axiom": "IceCream propertyRestrictions [hasTopping some FruitTopping]",
                        "CQ": [
                            "Is it required for every IceCream to include at least one topping that is a FruitTopping?",
                            "Can an IceCream exist without having any FruitTopping as a topping?",
                            "Does the presence of a FruitTopping as a topping suffice for something to be classified as IceCream?"
                        ]
                    }
                ]
            },
            "Pizza": {
                "axiom": {
                    "subClassOf": [
                        "Food"
                    ],
                    "disjointWith": [
                        "IceCream",
                        "PizzaTopping",
                        "PizzaBase"
                    ],
                    "propertyRestrictions": [
                        "[hasBase some PizzaBase]"
                    ]
                },
                "description": "Pizza is defined as a subclass of Food and is explicitly disjoint with IceCream, PizzaTopping, and PizzaBase, ensuring that no individual can simultaneously be an instance of Pizza and any of these disjoint classes. Every Pizza must have at least one base, specified by the restriction that it must have some relationship via hasBase to an instance of PizzaBase. This formalization captures the essential structure of a pizza: a food item composed of a particular base and distinguished from toppings or other food types such as ice cream.",
                "CQ": [
                    {
                        "axiom": "Pizza subClassOf Food",
                        "CQ": [
                            "Is Pizza categorized under the broader class Food?",
                            "Which food categories include Pizza as a member or subclass?",
                            "What are the overarching classes that encompass Pizza?"
                        ]
                    },
                    {
                        "axiom": "Pizza disjointWith IceCream",
                        "CQ": [
                            "What is the disjointness relation between Pizza and IceCream in the ontology?",
                            "Is there any scenario where an entity can be considered both a Pizza and an IceCream?",
                            "Which classes are specified as disjoint with Pizza?"
                        ]
                    },
                    {
                        "axiom": "Pizza disjointWith PizzaTopping",
                        "CQ": [
                            "How does the ontology differentiate between Pizza and PizzaTopping?",
                            "Is any entity allowed to be classified as both Pizza and PizzaTopping?",
                            "Which classes are formally stated to be incompatible with Pizza?"
                        ]
                    },
                    {
                        "axiom": "Pizza disjointWith PizzaBase",
                        "CQ": [
                            "What formal separation is represented between Pizza and PizzaBase within the ontology?",
                            "Is it feasible for an entity to be simultaneously classified as both Pizza and PizzaBase?",
                            "Which classes, aside from Pizza, are specified as disjoint with PizzaBase?"
                        ]
                    },
                    {
                        "axiom": "Pizza propertyRestrictions [hasBase some PizzaBase]",
                        "CQ": [
                            "Must every Pizza have at least one 'hasBase' relationship with some PizzaBase?",
                            "Is it required that a Pizza is associated with a PizzaBase via the 'hasBase' property?",
                            "Can a Pizza exist without having a 'hasBase' connection to any instance of PizzaBase?"
                        ]
                    }
                ]
            },
            "PizzaBase": {
                "axiom": {
                    "subClassOf": [
                        "Food"
                    ],
                    "disjointWith": [
                        "IceCream",
                        "Pizza",
                        "PizzaTopping"
                    ]
                },
                "description": "PizzaBase is defined as a subclass of Food, indicating that every PizzaBase is a type of food. It is explicitly disjoint with IceCream, Pizza, and PizzaTopping, ensuring that an individual cannot simultaneously be a PizzaBase and any of these other classes. This formalization distinguishes PizzaBase as a unique foundational component in food ontology, separate from finished pizzas, their toppings, or dessert items like ice cream.",
                "CQ": [
                    {
                        "axiom": "PizzaBase subClassOf Food",
                        "CQ": [
                            "Is PizzaBase categorized under the broader class of Food?",
                            "What kinds of food include PizzaBase as a specific type?",
                            "Which higher-level categories encompass PizzaBase?"
                        ]
                    },
                    {
                        "axiom": "PizzaBase disjointWith IceCream",
                        "CQ": [
                            "How does the ontology characterize the connection or separation between PizzaBase and IceCream?",
                            "Is it permissible for an individual to be classified simultaneously as PizzaBase and IceCream?",
                            "Which classes are stated to be disjoint with PizzaBase within the ontology?"
                        ]
                    },
                    {
                        "axiom": "PizzaBase disjointWith Pizza",
                        "CQ": [
                            "How does the ontology specify the differentiation between PizzaBase and Pizza?",
                            "Is there any instance that can simultaneously be classified as both PizzaBase and Pizza?",
                            "Which classes are declared disjoint with PizzaBase according to the ontology?"
                        ]
                    },
                    {
                        "axiom": "PizzaBase disjointWith PizzaTopping",
                        "CQ": [
                            "What distinguishes PizzaBase from PizzaTopping in the ontology?",
                            "Is any entity permitted to be an instance of both PizzaBase and PizzaTopping?",
                            "Which classes are specified as disjoint with PizzaBase?"
                        ]
                    }
                ]
            },
            "PizzaTopping": {
                "axiom": {
                    "subClassOf": [
                        "Food"
                    ],
                    "disjointWith": [
                        "IceCream",
                        "Pizza",
                        "PizzaBase"
                    ]
                },
                "description": "PizzaTopping is defined as a subclass of Food, representing edible items that can be used to top a pizza. It is formally disjoint from the classes IceCream, Pizza, and PizzaBase, ensuring that no individual can simultaneously be a PizzaTopping and an instance of any of these other classes. This separation enforces a clear distinction between pizza toppings, the pizza base, the assembled pizza, and unrelated foods like ice cream.",
                "CQ": [
                    {
                        "axiom": "PizzaTopping subClassOf Food",
                        "CQ": [
                            "Does PizzaTopping fall under the general classification of Food?",
                            "Which toppings are categorized as a type of Food, such as PizzaTopping?",
                            "What broader classes is PizzaTopping considered a part of?"
                        ]
                    },
                    {
                        "axiom": "PizzaTopping disjointWith IceCream",
                        "CQ": [
                            "How does the ontology define the separation between PizzaTopping and IceCream?",
                            "Is there any instance that can belong to both PizzaTopping and IceCream categories?",
                            "Which classes are explicitly marked as mutually exclusive with IceCream?"
                        ]
                    },
                    {
                        "axiom": "PizzaTopping disjointWith Pizza",
                        "CQ": [
                            "What is the formal disjointness declared between PizzaTopping and Pizza in the ontology?",
                            "Is there any instance that can be classified simultaneously as PizzaTopping and Pizza?",
                            "Which classes are specified as disjoint with PizzaTopping?"
                        ]
                    },
                    {
                        "axiom": "PizzaTopping disjointWith PizzaBase",
                        "CQ": [
                            "Are PizzaTopping and PizzaBase categorized as mutually exclusive classes in the ontology?",
                            "Does any individual in the ontology belong to both PizzaTopping and PizzaBase simultaneously?",
                            "Which ontology classes are specified as disjoint with PizzaTopping?"
                        ]
                    }
                ]
            },
            "NamedPizza": {
                "axiom": {
                    "subClassOf": [
                        "Pizza"
                    ]
                },
                "description": "NamedPizza is defined as a subclass of Pizza, representing pizzas that are explicitly listed or recognized on a pizza menu. Members of this class inherit all properties of Pizza and are distinguished by being menu-identified variants, rather than custom or unnamed creations.",
                "CQ": [
                    {
                        "axiom": "NamedPizza subClassOf Pizza",
                        "CQ": [
                            "Is NamedPizza classified as a type of Pizza?",
                            "Which categories encompass NamedPizza as a member?",
                            "What specific varieties are encompassed within the supercategory Pizza, including NamedPizza?"
                        ]
                    }
                ]
            },
            "ParmaHamTopping": {
                "axiom": {
                    "subClassOf": [
                        "HamTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Mild]"
                    ]
                },
                "description": "ParmaHamTopping is defined as a subclass of HamTopping. It is further characterized by the restriction that it must have at least some level of spiciness classified as Mild. This ensures that any individual belonging to the ParmaHamTopping class represents a type of ham topping distinguished by mild spiciness.",
                "CQ": [
                    {
                        "axiom": "ParmaHamTopping subClassOf HamTopping",
                        "CQ": [
                            "Is ParmaHamTopping categorized as a specialized form of HamTopping?",
                            "What toppings are subclasses of HamTopping, including ParmaHamTopping?",
                            "Which broader categories encompass ParmaHamTopping?"
                        ]
                    },
                    {
                        "axiom": "ParmaHamTopping propertyRestrictions [hasSpiciness some Mild]",
                        "CQ": [
                            "Is every ParmaHamTopping required to have at least one level of spiciness classified as Mild?",
                            "Can a ParmaHamTopping exist without any Mild spiciness level?",
                            "Does the definition of ParmaHamTopping allow for spiciness levels other than Mild, provided that at least one is Mild?"
                        ]
                    }
                ]
            },
            "PineKernels": {
                "axiom": {
                    "subClassOf": [
                        "NutTopping"
                    ]
                },
                "description": "PineKernels is defined as a subclass of NutTopping, indicating that all PineKernels are considered a type of nut-based topping. No further property restrictions or disjointness axioms are specified, so individuals classified as PineKernels inherit all characteristics of NutTopping.",
                "CQ": [
                    {
                        "axiom": "PineKernels subClassOf NutTopping",
                        "CQ": [
                            "Is PineKernels classified under the broader group of NutTopping?",
                            "Which toppings are defined as more specific forms of NutTopping, such as PineKernels?",
                            "What more general topping categories include PineKernels as a subclass?"
                        ]
                    }
                ]
            },
            "RedOnionTopping": {
                "axiom": {
                    "subClassOf": [
                        "OnionTopping"
                    ]
                },
                "description": "RedOnionTopping is defined as a subclass of OnionTopping, representing toppings specifically comprised of red onion. All individuals classified as RedOnionTopping inherit the characteristics and constraints applicable to OnionTopping.",
                "CQ": [
                    {
                        "axiom": "RedOnionTopping subClassOf OnionTopping",
                        "CQ": [
                            "Is RedOnionTopping categorized under the broader class of OnionTopping?",
                            "Which toppings are specified as subclasses of OnionTopping, such as RedOnionTopping?",
                            "What parent classes does RedOnionTopping belong to within the topping hierarchy?"
                        ]
                    }
                ]
            },
            "SlicedTomatoTopping": {
                "axiom": {
                    "subClassOf": [
                        "TomatoTopping"
                    ],
                    "disjointWith": [
                        "SundriedTomatoTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Mild]"
                    ]
                },
                "description": "SlicedTomatoTopping is defined as a subclass of TomatoTopping and is explicitly disjoint with SundriedTomatoTopping, ensuring that no individual can be both a SlicedTomatoTopping and a SundriedTomatoTopping. Members of this class are characterized by the property that they must have at least some level of mild spiciness, as specified by the hasSpiciness restriction.",
                "CQ": [
                    {
                        "axiom": "SlicedTomatoTopping subClassOf TomatoTopping",
                        "CQ": [
                            "Is SlicedTomatoTopping classified under the category of TomatoTopping?",
                            "Which topping types fall under TomatoTopping, such as SlicedTomatoTopping?",
                            "What are the broader categories that encompass SlicedTomatoTopping?"
                        ]
                    },
                    {
                        "axiom": "SlicedTomatoTopping disjointWith SundriedTomatoTopping",
                        "CQ": [
                            "How does the ontology formally distinguish between SlicedTomatoTopping and SundriedTomatoTopping?",
                            "Is there any topping that can simultaneously be classified as both SlicedTomatoTopping and SundriedTomatoTopping?",
                            "Which topping classes are defined as mutually exclusive with SlicedTomatoTopping?"
                        ]
                    },
                    {
                        "axiom": "SlicedTomatoTopping propertyRestrictions [hasSpiciness some Mild]",
                        "CQ": [
                            "Must a SlicedTomatoTopping possess the property hasSpiciness with at least some value classified as Mild?",
                            "Does every instance of SlicedTomatoTopping necessarily have some form of spiciness level that is Mild?",
                            "Can a SlicedTomatoTopping exist without being associated to Mild via the hasSpiciness property?"
                        ]
                    }
                ]
            },
            "SundriedTomatoTopping": {
                "axiom": {
                    "subClassOf": [
                        "TomatoTopping"
                    ],
                    "disjointWith": [
                        "SlicedTomatoTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Mild]"
                    ]
                },
                "description": "SundriedTomatoTopping is a subclass of TomatoTopping, meaning it inherits all characteristics typical of tomato-based toppings. It is defined as disjoint with SlicedTomatoTopping, ensuring that an individual cannot be both a SundriedTomatoTopping and a SlicedTomatoTopping. Additionally, every instance of SundriedTomatoTopping must have at least some mild level of spiciness, as specified by the property restriction (hasSpiciness some Mild).",
                "CQ": [
                    {
                        "axiom": "SundriedTomatoTopping subClassOf TomatoTopping",
                        "CQ": [
                            "Is SundriedTomatoTopping classified as a specific type of TomatoTopping?",
                            "Which topping subclasses fall under TomatoTopping, such as SundriedTomatoTopping?",
                            "What general topping categories include SundriedTomatoTopping as a member?"
                        ]
                    },
                    {
                        "axiom": "SundriedTomatoTopping disjointWith SlicedTomatoTopping",
                        "CQ": [
                            "How does the ontology represent the incompatibility between SundriedTomatoTopping and SlicedTomatoTopping?",
                            "Is it allowed for a pizza to include both SundriedTomatoTopping and SlicedTomatoTopping according to the ontology?",
                            "Which topping classes are specified as disjoint with SlicedTomatoTopping?"
                        ]
                    },
                    {
                        "axiom": "SundriedTomatoTopping propertyRestrictions [hasSpiciness some Mild]",
                        "CQ": [
                            "Is it required that every SundriedTomatoTopping possesses the hasSpiciness property with at least one Mild instance?",
                            "Can SundriedTomatoTopping have spiciness levels other than Mild, or must it always include Mild spiciness?",
                            "Does the ontology entail that SundriedTomatoTopping must be associated with some form of Mild spiciness via the hasSpiciness relation?"
                        ]
                    }
                ]
            },
            "Spiciness": {
                "axiom": {
                    "subClassOf": [
                        "ValuePartition"
                    ],
                    "equivalentClass": [
                        "(Hot or Medium or Mild)"
                    ]
                },
                "description": "Spiciness is defined as a subclass of ValuePartition, representing a categorical partition for classifying spiciness levels. It is equivalent to the union of the classes Hot, Medium, or Mild—meaning any individual classified under Spiciness must be an instance of one of these three values. The class enables further division of its subclasses into additional value partitions, providing a structured way to represent varying degrees of spiciness in an ontology.",
                "CQ": [
                    {
                        "axiom": "Spiciness subClassOf ValuePartition",
                        "CQ": [
                            "Does Spiciness fall under the broader classification of ValuePartition?",
                            "Which value partitions encompass Spiciness as a specialized form?",
                            "What higher-level partitions is Spiciness categorized within?"
                        ]
                    },
                    {
                        "axiom": "Spiciness equivalentClass (Hot or Medium or Mild)",
                        "CQ": [
                            "Is Spiciness defined as exactly the union of Hot, Medium, and Mild?",
                            "Are all instances of Hot, Medium, or Mild considered Spiciness?",
                            "Does Spiciness include any categories apart from Hot, Medium, and Mild?"
                        ]
                    }
                ]
            },
            "SultanaTopping": {
                "axiom": {
                    "subClassOf": [
                        "FruitTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Medium]"
                    ]
                },
                "description": "SultanaTopping is defined as a subclass of FruitTopping. Members of this class are characterized by having a spiciness property that must include at least some medium spiciness. This ensures that any SultanaTopping instance is a type of fruit topping specifically associated with a medium level of spiciness.",
                "CQ": [
                    {
                        "axiom": "SultanaTopping subClassOf FruitTopping",
                        "CQ": [
                            "Is SultanaTopping classified as a kind of FruitTopping?",
                            "What toppings are considered subtypes of FruitTopping, including SultanaTopping?",
                            "Which higher-level topping categories encompass SultanaTopping?"
                        ]
                    },
                    {
                        "axiom": "SultanaTopping propertyRestrictions [hasSpiciness some Medium]",
                        "CQ": [
                            "Must every SultanaTopping have at least one spiciness value classified as Medium?",
                            "Is it required for a SultanaTopping to possess the property hasSpiciness with an instance of Medium?",
                            "Can a SultanaTopping exist without being associated with Medium spiciness through hasSpiciness?"
                        ]
                    }
                ]
            },
            "TobascoPepperSauce": {
                "axiom": {
                    "subClassOf": [
                        "SauceTopping"
                    ],
                    "propertyRestrictions": [
                        "[hasSpiciness some Hot]"
                    ]
                },
                "description": "TobascoPepperSauce is defined as a subclass of SauceTopping, indicating it is a specific type of sauce used as a topping. All members of this class are required to have the property hasSpiciness with at least some value classified as Hot, meaning every TobascoPepperSauce must exhibit a hot level of spiciness.",
                "CQ": [
                    {
                        "axiom": "TobascoPepperSauce subClassOf SauceTopping",
                        "CQ": [
                            "Is TobascoPepperSauce classified as a subcategory of SauceTopping?",
                            "Which toppings are more specific instances under SauceTopping, such as TobascoPepperSauce?",
                            "To which broader topping classes does TobascoPepperSauce belong?"
                        ]
                    },
                    {
                        "axiom": "TobascoPepperSauce propertyRestrictions [hasSpiciness some Hot]",
                        "CQ": [
                            "Is it necessary for TobascoPepperSauce to have spiciness characterized as Hot?",
                            "Does every instance of TobascoPepperSauce possess some degree of spiciness that is classified as Hot?",
                            "Can there be a TobascoPepperSauce without any Hot spiciness attribute?"
                        ]
                    }
                ]
            },
            "VegetarianPizza": {
                "axiom": {
                    "disjointWith": [
                        "NonVegetarianPizza"
                    ],
                    "equivalentClass": [
                        "(Pizza and not [hasTopping some MeatTopping] and not [hasTopping some FishTopping])"
                    ]
                },
                "description": "VegetarianPizza is defined as a subclass of Pizza that is disjoint with NonVegetarianPizza, meaning no pizza can be both vegetarian and non-vegetarian. It is equivalent to pizzas that have neither meat toppings nor fish toppings—specifically, these pizzas do not have any topping that is an instance of MeatTopping or FishTopping. VegetarianPizza may have any combination of non-meat, non-fish toppings or no toppings at all, as specified in the current description. This ensures that only pizzas entirely free of meat and fish toppings are classified as VegetarianPizza.",
                "CQ": [
                    {
                        "axiom": "VegetarianPizza disjointWith NonVegetarianPizza",
                        "CQ": [
                            "Are VegetarianPizza and NonVegetarianPizza mutually exclusive in classification?",
                            "Does the ontology allow an instance to be both VegetarianPizza and NonVegetarianPizza?",
                            "Which pizza classes are asserted to be incompatible with NonVegetarianPizza?"
                        ]
                    },
                    {
                        "axiom": "VegetarianPizza equivalentClass (Pizza and not [hasTopping some MeatTopping] and not [hasTopping some FishTopping])",
                        "CQ": [
                            "Is every VegetarianPizza necessarily a Pizza that does not have any toppings which qualify as MeatTopping or FishTopping?",
                            "Is VegetarianPizza equivalent to the intersection of Pizza and those lacking both meat and fish as toppings?",
                            "Can VegetarianPizza be fully characterized as Pizzas for which there does not exist a MeatTopping or FishTopping among their toppings?"
                        ]
                    }
                ]
            },
            "NonVegetarianPizza": {
                "axiom": {
                    "disjointWith": [
                        "VegetarianPizza"
                    ],
                    "equivalentClass": [
                        "(Pizza and not VegetarianPizza)"
                    ]
                },
                "description": "NonVegetarianPizza is formally defined as any Pizza that is not a VegetarianPizza. It is explicitly disjoint with VegetarianPizza, ensuring that no individual pizza can be both a NonVegetarianPizza and a VegetarianPizza. The equivalence axiom specifies that NonVegetarianPizza includes all and only those pizzas that are instances of Pizza but not classified as VegetarianPizza.",
                "CQ": [
                    {
                        "axiom": "NonVegetarianPizza disjointWith VegetarianPizza",
                        "CQ": [
                            "Is any overlap permitted between the classifications of NonVegetarianPizza and VegetarianPizza?",
                            "Which pizza types are defined as mutually exclusive with NonVegetarianPizza in the ontology?",
                            "Does the ontology allow for an individual pizza to belong to both the NonVegetarianPizza and VegetarianPizza classes?"
                        ]
                    },
                    {
                        "axiom": "NonVegetarianPizza equivalentClass (Pizza and not VegetarianPizza)",
                        "CQ": [
                            "Is every NonVegetarianPizza necessarily a Pizza that is not a VegetarianPizza?",
                            "Is NonVegetarianPizza logically defined as the intersection of Pizza and the complement of VegetarianPizza?",
                            "Does the class NonVegetarianPizza exclude any Pizza that is a VegetarianPizza?"
                        ]
                    }
                ]
            },
            "DomainConcept": {
                "axiom": {
                    "disjointWith": [
                        "ValuePartition"
                    ]
                },
                "description": "DomainConcept is a class that is explicitly disjoint with ValuePartition, meaning no individual can simultaneously be a member of both DomainConcept and ValuePartition. This ensures a clear separation between entities considered DomainConcepts and those defined as ValuePartitions within the ontology.",
                "CQ": [
                    {
                        "axiom": "DomainConcept disjointWith ValuePartition",
                        "CQ": [
                            "How does the ontology differentiate between DomainConcept and ValuePartition?",
                            "Is there any instance that can belong to both DomainConcept and ValuePartition?",
                            "Which classes are specified as disjoint with ValuePartition?"
                        ]
                    }
                ]
            },
            "ValuePartition": {
                "axiom": {
                    "disjointWith": [
                        "DomainConcept"
                    ]
                },
                "description": "ValuePartition is a pattern used to represent a set of mutually exclusive and exhaustive subclasses that serve as the only permissible values for a particular property. It is disjoint with DomainConcept, ensuring that no individual can belong to both classes. The parent ValuePartition class is employed in property restrictions, and its subclasses collectively cover all possible values for the property—membership cannot extend beyond these predefined subclasses without modifying the ValuePartition. This structure enforces a fixed set of alternatives, supporting controlled vocabularies and value enumerations within the ontology.",
                "CQ": [
                    {
                        "axiom": "ValuePartition disjointWith DomainConcept",
                        "CQ": [
                            "How are ValuePartition and DomainConcept differentiated within the ontology?",
                            "Is there any entity that can simultaneously be a ValuePartition and a DomainConcept?",
                            "Which classes are specified as disjoint with DomainConcept?"
                        ]
                    }
                ]
            },
            "CheeseyPizza": {
                "axiom": {
                    "equivalentClass": [
                        "(Pizza and [hasTopping some CheeseTopping])"
                    ]
                },
                "description": "CheeseyPizza is formally defined as any Pizza that has at least one cheese topping, expressed by the equivalence axiom: CheeseyPizza ≡ Pizza and (hasTopping some CheeseTopping). This means that every instance of CheeseyPizza must be a pizza with one or more cheese toppings, aligning with the description: any pizza that has at least one cheese topping.",
                "CQ": [
                    {
                        "axiom": "CheeseyPizza equivalentClass (Pizza and [hasTopping some CheeseTopping])",
                        "CQ": [
                            "Is a CheeseyPizza necessarily a Pizza that has at least one CheeseTopping as a topping?",
                            "Is the set of CheeseyPizza identical to the intersection of all Pizzas and those having some CheeseTopping?",
                            "Can an individual be classified as CheeseyPizza only if it is both a Pizza and possesses at least one hasTopping relationship to CheeseTopping?"
                        ]
                    }
                ]
            },
            "Country": {
                "axiom": {
                    "equivalentClass": [
                        "({America, Italy, Germany, France, England} and DomainConcept)"
                    ]
                },
                "description": "Country is an enumerated class, defined as exactly the set containing America, England, France, Germany, and Italy. It is equivalent to the intersection of this set and DomainConcept, meaning each Country instance must be one of these individuals and also a DomainConcept. By axiom, no other individuals can be classified as Country; all specified countries are explicitly different from each other.",
                "CQ": [
                    {
                        "axiom": "Country equivalentClass ({America, Italy, Germany, France, England} and DomainConcept)",
                        "CQ": [
                            "Is Country defined as the intersection of the individuals America, Italy, Germany, France, England and the class DomainConcept?",
                            "Does every instance of Country correspond to one of America, Italy, Germany, France, or England and also to DomainConcept?",
                            "Are there any individuals that are America, Italy, Germany, France, or England and DomainConcept but not classified as Country?"
                        ]
                    }
                ]
            },
            "InterestingPizza": {
                "axiom": {
                    "equivalentClass": [
                        "([hasTopping min 3] and Pizza)"
                    ]
                },
                "description": "InterestingPizza is defined as a subclass of Pizza that has at least three toppings, as specified by a minimum cardinality restriction (hasTopping min 3). This class is equivalent to pizzas possessing at least three values for the hasTopping property, regardless of the type of topping. It is important to note that this restriction is not a qualified cardinality constraint (QCR); it does not require that the toppings belong to a specific class such as PizzaTopping. This formalization captures any pizza with three or more toppings without specifying their types.",
                "CQ": [
                    {
                        "axiom": "InterestingPizza equivalentClass ([hasTopping min 3] and Pizza)",
                        "CQ": [
                            "Does every InterestingPizza necessarily have at least three toppings and be a Pizza?",
                            "Can InterestingPizza be considered identical to the intersection of Pizzas with a minimum of three toppings?",
                            "Is having at least three toppings a necessary and sufficient condition for a Pizza to be an InterestingPizza?"
                        ]
                    }
                ]
            },
            "MeatyPizza": {
                "axiom": {
                    "equivalentClass": [
                        "([hasTopping some MeatTopping] and Pizza)"
                    ]
                },
                "description": "MeatyPizza is defined as any pizza (Pizza) that has at least one meat topping, formalized through an existential restriction stating that members of this class must bear at least one hasTopping relationship to an individual of class MeatTopping. This class is equivalent to the intersection of Pizza and those entities with some MeatTopping as a topping, ensuring all MeatyPizza instances feature at least one meat-based topping.",
                "CQ": [
                    {
                        "axiom": "MeatyPizza equivalentClass ([hasTopping some MeatTopping] and Pizza)",
                        "CQ": [
                            "Is MeatyPizza defined as the intersection of Pizza and entities having at least one meat topping?",
                            "Does every MeatyPizza necessarily include some topping categorized as MeatTopping?",
                            "Can MeatyPizza be fully characterized as a Pizza that has at least one MeatTopping?"
                        ]
                    }
                ]
            },
            "RealItalianPizza": {
                "axiom": {
                    "equivalentClass": [
                        "(Pizza and [hasCountryOfOrigin hasValue Italy])"
                    ],
                    "propertyRestrictions": [
                        "[hasBase only ThinAndCrispyBase]"
                    ]
                },
                "description": "RealItalianPizza is formally defined as any Pizza whose country of origin is Italy, ensuring strict geographical provenance. Additionally, all RealItalianPizzas are restricted to having only ThinAndCrispyBase as their base. This definition ensures that the class exclusively contains pizzas originating from Italy with thin and crispy bases, faithfully reflecting the intended concept that authentic Italian pizzas are characterized both by their origin and their base type.",
                "CQ": [
                    {
                        "axiom": "RealItalianPizza equivalentClass (Pizza and [hasCountryOfOrigin hasValue Italy])",
                        "CQ": [
                            "Is RealItalianPizza equivalent to the intersection of Pizza and those whose country of origin is Italy?",
                            "Does every RealItalianPizza necessarily have Italy as its country of origin?",
                            "Can RealItalianPizza be fully defined as a Pizza that is specifically from Italy?"
                        ]
                    },
                    {
                        "axiom": "RealItalianPizza propertyRestrictions [hasBase only ThinAndCrispyBase]",
                        "CQ": [
                            "Is RealItalianPizza required to have only ThinAndCrispyBase as its base?",
                            "Can a RealItalianPizza have any base type other than ThinAndCrispyBase?",
                            "Does the definition of RealItalianPizza exclude all bases except for ThinAndCrispyBase?"
                        ]
                    }
                ]
            },
            "SpicyPizza": {
                "axiom": {
                    "equivalentClass": [
                        "(Pizza and [hasTopping some SpicyTopping])"
                    ]
                },
                "description": "SpicyPizza is defined as any pizza (i.e., an instance of the class Pizza) that has at least one topping which is a SpicyTopping. This equivalence axiom ensures that all and only those pizzas with some spicy topping are classified under SpicyPizza. Thus, membership in the SpicyPizza class is determined precisely by the presence of at least one spicy topping.",
                "CQ": [
                    {
                        "axiom": "SpicyPizza equivalentClass (Pizza and [hasTopping some SpicyTopping])",
                        "CQ": [
                            "Is every SpicyPizza necessarily a Pizza that has at least one topping classified as a SpicyTopping?",
                            "Can SpicyPizza be precisely defined as the intersection of the class Pizza and those with some SpicyTopping?",
                            "Is SpicyPizza equivalent to pizzas that are distinguished by having at least one spicy topping?"
                        ]
                    }
                ]
            },
            "SpicyPizzaEquivalent": {
                "axiom": {
                    "equivalentClass": [
                        "(Pizza and [hasTopping some ([hasSpiciness some Hot] and PizzaTopping)])"
                    ]
                },
                "description": "SpicyPizzaEquivalent is defined as any Pizza that has at least one topping which is both a PizzaTopping and has a spiciness level of Hot. This equivalence axiom provides an alternative to approaches relying on a predefined SpicyTopping class, specifying instead that membership in SpicyPizzaEquivalent requires the existence of a topping meeting both conditions. This ensures precise classification of spicy pizzas based on their actual toppings' spiciness attributes.",
                "CQ": [
                    {
                        "axiom": "SpicyPizzaEquivalent equivalentClass (Pizza and [hasTopping some ([hasSpiciness some Hot] and PizzaTopping)])",
                        "CQ": [
                            "Is every SpicyPizzaEquivalent necessarily a Pizza with at least one topping that is both a PizzaTopping and possesses some degree of Hot spiciness?",
                            "Is SpicyPizzaEquivalent logically defined as the intersection of Pizza and those with a topping that is both a PizzaTopping and includes some Hot spiciness?",
                            "Can SpicyPizzaEquivalent be fully characterized as a Pizza that has a topping which is a PizzaTopping and has some Hot as its spiciness?"
                        ]
                    }
                ]
            },
            "SpicyTopping": {
                "axiom": {
                    "equivalentClass": [
                        "([hasSpiciness some Hot] and PizzaTopping)"
                    ]
                },
                "description": "SpicyTopping is defined as an equivalent class to pizza toppings that possess a spiciness level of Hot. This means every SpicyTopping is a PizzaTopping and must have at least one instance of hot spiciness. Formally, individuals in this class are restricted to those pizza toppings that are characterized by having a hot spiciness attribute.",
                "CQ": [
                    {
                        "axiom": "SpicyTopping equivalentClass ([hasSpiciness some Hot] and PizzaTopping)",
                        "CQ": [
                            "Is every SpicyTopping necessarily both a PizzaTopping and something that has spiciness characterized as Hot?",
                            "Can SpicyTopping be defined as the intersection of PizzaTopping and entities with the property hasSpiciness some Hot?",
                            "Is SpicyTopping equivalent to all PizzaTopping instances that have at least one Hot spiciness attribute?"
                        ]
                    }
                ]
            },
            "ThinAndCrispyPizza": {
                "axiom": {
                    "equivalentClass": [
                        "(Pizza and [hasBase only ThinAndCrispyBase])"
                    ]
                },
                "description": "ThinAndCrispyPizza is formally defined as a subclass of Pizza whose base is exclusively of type ThinAndCrispyBase. This means any individual classified as a ThinAndCrispyPizza must be a Pizza and can only have ThinAndCrispyBase as its base, with no other base types permitted. This equivalence axiom precisely characterizes ThinAndCrispyPizza by its unique crust style.",
                "CQ": [
                    {
                        "axiom": "ThinAndCrispyPizza equivalentClass (Pizza and [hasBase only ThinAndCrispyBase])",
                        "CQ": [
                            "Is every ThinAndCrispyPizza required to have only ThinAndCrispyBase as its base?",
                            "Is ThinAndCrispyPizza equivalent to pizzas that exclusively use ThinAndCrispyBase?",
                            "Can ThinAndCrispyPizza be fully defined as the intersection of Pizza and things with base restricted solely to ThinAndCrispyBase?"
                        ]
                    }
                ]
            },
            "VegetarianPizzaEquivalent1": {
                "axiom": {
                    "equivalentClass": [
                        "(Pizza and [hasTopping only VegetarianTopping])"
                    ]
                },
                "description": "VegetarianPizzaEquivalent1 is defined as any pizza (member of the Pizza class) whose toppings, if present, are exclusively vegetarian; that is, it only has toppings that are instances of VegetarianTopping, or it has no toppings at all. Formally, it is equivalent to the intersection of Pizza and those that satisfy the restriction 'hasTopping only VegetarianTopping'. According to the description, this class should be inferred to be equivalent to VegetarianPizzaEquiv2 but is not equivalent to the broader VegetarianPizza class, as the latter does not assume that PizzaTopping encompasses all possible toppings.",
                "CQ": [
                    {
                        "axiom": "VegetarianPizzaEquivalent1 equivalentClass (Pizza and [hasTopping only VegetarianTopping])",
                        "CQ": [
                            "Does VegetarianPizzaEquivalent1 include only those Pizzas where all toppings are VegetarianTopping?",
                            "Is VegetarianPizzaEquivalent1 equivalent to the intersection of Pizza and items whose toppings are restricted to VegetarianTopping?",
                            "Can VegetarianPizzaEquivalent1 be defined as a Pizza that necessarily has only VegetarianTopping as its topping?"
                        ]
                    }
                ]
            },
            "VegetarianPizzaEquivalent2": {
                "axiom": {
                    "equivalentClass": [
                        "(Pizza and [hasTopping only (SauceTopping or CheeseTopping or VegetableTopping or FruitTopping or NutTopping or HerbSpiceTopping)])"
                    ]
                },
                "description": "VegetarianPizzaEquivalent2 is defined as a class equivalent to pizzas that have only sauce, cheese, vegetable, fruit, nut, or herb & spice toppings—no other topping types are permitted. This definition provides an alternative to VegetarianPizzaEquiv1 by specifying allowed toppings directly, avoiding dependency on a pre-defined VegetarianTopping class. However, it is noted that this approach may be less maintainable and is not equivalent to the original VegetarianPizza class.",
                "CQ": [
                    {
                        "axiom": "VegetarianPizzaEquivalent2 equivalentClass (Pizza and [hasTopping only (SauceTopping or CheeseTopping or VegetableTopping or FruitTopping or NutTopping or HerbSpiceTopping)])",
                        "CQ": [
                            "Is VegetarianPizzaEquivalent2 defined as a Pizza that can only have toppings that are either SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping?",
                            "Can a VegetarianPizzaEquivalent2 ever have a topping outside the categories of SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping?",
                            "Is being a Pizza with toppings restricted exclusively to SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping sufficient for classification as a VegetarianPizzaEquivalent2?"
                        ]
                    }
                ]
            },
            "VegetarianTopping": {
                "axiom": {
                    "equivalentClass": [
                        "(PizzaTopping and (SauceTopping or CheeseTopping or VegetableTopping or FruitTopping or NutTopping or HerbSpiceTopping))"
                    ]
                },
                "description": "VegetarianTopping is formally defined as a pizza topping that must be one of the following: SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping. This equivalence axiom ensures that every VegetarianTopping is a subclass of PizzaTopping and cannot be any topping outside this specified set. In practice, this means only toppings within these categories are considered vegetarian according to the ontology.",
                "CQ": [
                    {
                        "axiom": "VegetarianTopping equivalentClass (PizzaTopping and (SauceTopping or CheeseTopping or VegetableTopping or FruitTopping or NutTopping or HerbSpiceTopping))",
                        "CQ": [
                            "Is every VegetarianTopping necessarily classified as a PizzaTopping and also as one of: SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping?",
                            "Is VegetarianTopping equivalent to the intersection of PizzaTopping with the union of SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, and HerbSpiceTopping?",
                            "Does VegetarianTopping include any toppings apart from SauceTopping, CheeseTopping, VegetableTopping, FruitTopping, NutTopping, or HerbSpiceTopping within the category of PizzaTopping?"
                        ]
                    }
                ]
            }
        },
        "properties": {
            "hasSpiciness": {
                "axiom": {
                    "characteristics": [
                        "Functional"
                    ],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "Spiciness"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"hasSpiciness\" is a functional property, meaning each subject can have at most one value for this property. Its range is restricted to the class \"Spiciness,\" but no explicit domain is specified. It is designed to denote the spiciness level of an entity, particularly in the context of a ValuePartition. There are no super-properties or inverse properties defined.",
                "CQ": [
                    {
                        "axiom": "hasSpiciness characteristics Functional",
                        "CQ": [
                            "Is hasSpiciness a functional property, meaning that each Pizza can be related to at most one Spiciness level through hasSpiciness?",
                            "Does the functional characteristic of hasSpiciness restrict any individual Pizza from having multiple values for hasSpiciness?",
                            "Can an instance be associated with more than one Spiciness value via hasSpiciness, or does functionality prohibit this?"
                        ]
                    },
                    {
                        "axiom": "hasSpiciness domain None",
                        "CQ": [
                            "What entities can be the domain of the property 'hasSpiciness'?",
                            "Is it correct that the property 'hasSpiciness' does not have a specified domain?",
                            "Are there classes that should be associated as the domain of 'hasSpiciness'?"
                        ]
                    },
                    {
                        "axiom": "hasSpiciness range Spiciness",
                        "CQ": [
                            "Does the property 'hasSpiciness' accept any value that is not classified as Spiciness as its range?",
                            "Are all possible values of 'hasSpiciness' instances of the class Spiciness?",
                            "Which types of entities can serve as the range for the 'hasSpiciness' property?"
                        ]
                    }
                ]
            },
            "isToppingOf": {
                "axiom": {
                    "characteristics": [
                        "Functional"
                    ],
                    "domain": [
                        "PizzaTopping"
                    ],
                    "range": [
                        "Pizza"
                    ],
                    "subPropertyOf": [
                        "isIngredientOf"
                    ],
                    "inverseOf": [
                        "hasTopping"
                    ]
                },
                "description": "The property \"isToppingOf\" is a functional object property, meaning each instance of \"PizzaTopping\" can be a topping of at most one \"Pizza\". Its domain is restricted to \"PizzaTopping\" and its range to \"Pizza\". \"isToppingOf\" is a sub-property of \"isIngredientOf\" and has \"hasTopping\" as its inverse. According to the description, each topping instance should only be associated with a single pizza.",
                "CQ": [
                    {
                        "axiom": "isToppingOf characteristics Functional",
                        "CQ": [
                            "Is isToppingOf a functional property, meaning that each Topping can be isToppingOf at most one Pizza?",
                            "Can an individual Topping be related to multiple Pizzas via the isToppingOf property simultaneously?",
                            "Does the ontology restrict isToppingOf so that a Topping cannot be a topping of more than one Pizza?"
                        ]
                    },
                    {
                        "axiom": "isToppingOf domain PizzaTopping",
                        "CQ": [
                            "Can any entity other than a PizzaTopping serve as the subject for the property 'isToppingOf'?",
                            "Are all subjects of the property 'isToppingOf' instances of PizzaTopping?",
                            "What entities can be the domain of the property 'isToppingOf'?"
                        ]
                    },
                    {
                        "axiom": "isToppingOf range Pizza",
                        "CQ": [
                            "Is every object of the property 'isToppingOf' necessarily a Pizza?",
                            "Can 'isToppingOf' have a range that includes entities other than Pizza?",
                            "What types of entities can 'isToppingOf' link to as its range?"
                        ]
                    },
                    {
                        "axiom": "isToppingOf subPropertyOf isIngredientOf",
                        "CQ": [
                            "Is every use of isToppingOf also an instance of isIngredientOf?",
                            "What are all the superproperties of isToppingOf?",
                            "Which subproperties are encompassed by isIngredientOf?"
                        ]
                    },
                    {
                        "axiom": "isToppingOf inverseOf hasTopping",
                        "CQ": [
                            "How are the properties ‘isToppingOf’ and ‘hasTopping’ related in terms of inverses within the ontology?",
                            "If an individual A isToppingOf B, does this entail that B hasTopping A in the ontology?",
                            "What property is defined as the inverse of ‘isToppingOf’?"
                        ]
                    }
                ]
            },
            "hasIngredient": {
                "axiom": {
                    "characteristics": [
                        "Transitive"
                    ],
                    "domain": [
                        "Food"
                    ],
                    "range": [
                        "Food"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": [
                        "isIngredientOf"
                    ]
                },
                "description": "The property \"hasIngredient\" is a transitive object property relating entities of type Food to other Food entities. Because of its transitivity, if Food A hasIngredient Food B and Food B hasIngredient Food C, then Food A also hasIngredient Food C. It has \"Food\" as both its domain and range, ensuring it only connects food items. The property is the inverse of \"isIngredientOf\" and carries no additional super-properties. Current comments note that due to transitivity, the ingredients of ingredients are considered ingredients of the whole.",
                "CQ": [
                    {
                        "axiom": "hasIngredient characteristics Transitive",
                        "CQ": [
                            "Does the property hasIngredient possess transitivity, so that if a food item hasIngredient another item, and that item hasIngredient a third, the food item also hasIngredient the third?",
                            "Is the relation hasIngredient transitive, allowing direct inference of ingredient relations across multiple intermediate ingredients?",
                            "Can hasIngredient be classified as a transitive object property within the ontology?"
                        ]
                    },
                    {
                        "axiom": "hasIngredient domain Food",
                        "CQ": [
                            "Can the property 'hasIngredient' be used with entities other than Food as its subject?",
                            "Are all instances of Food required to have a value for the property 'hasIngredient'?",
                            "What types of entities can serve as the domain for the property 'hasIngredient'?"
                        ]
                    },
                    {
                        "axiom": "hasIngredient range Food",
                        "CQ": [
                            "Can something that is not a Food be used as the object of the 'hasIngredient' property?",
                            "What types of entities can serve as the range for the 'hasIngredient' property?",
                            "Is every value associated with 'hasIngredient' necessarily a Food?"
                        ]
                    },
                    {
                        "axiom": "hasIngredient inverseOf isIngredientOf",
                        "CQ": [
                            "What is the inverse property of ‘hasIngredient’ in the ontology?",
                            "If entity X has ingredient Y, does this entail that Y is an ingredient of X?",
                            "How does the ontology define the connection between ‘hasIngredient’ and ‘isIngredientOf’?"
                        ]
                    }
                ]
            },
            "hasBase": {
                "axiom": {
                    "characteristics": [
                        "Functional",
                        "InverseFunctional"
                    ],
                    "domain": [
                        "Pizza"
                    ],
                    "range": [
                        "PizzaBase"
                    ],
                    "subPropertyOf": [
                        "hasIngredient"
                    ],
                    "inverseOf": [
                        "isBaseOf"
                    ]
                },
                "description": "The property \"hasBase\" is both functional and inverse functional, ensuring that each Pizza has exactly one PizzaBase and each PizzaBase is associated with exactly one Pizza. Its domain is Pizza, and its range is PizzaBase, indicating it links pizzas to their bases. \"hasBase\" is a sub-property of \"hasIngredient,\" specifying it as a specialized form of ingredient relationship. It has an inverse property \"isBaseOf,\" which links PizzaBase to Pizza.",
                "CQ": [
                    {
                        "axiom": "hasBase characteristics Functional",
                        "CQ": [
                            "Is hasBase a functional property so that any given individual can be related to at most one value via hasBase?",
                            "Does the functional nature of hasBase ensure that no individual has more than one associated hasBase value?",
                            "For the hasBase property, is it entailed that each subject may link to a single object only through this relation?"
                        ]
                    },
                    {
                        "axiom": "hasBase characteristics InverseFunctional",
                        "CQ": [
                            "Can each PizzaBase be linked to a maximum of one Pizza via the hasBase property?",
                            "Is the hasBase property inverse functional, ensuring that two different Pizzas cannot share the same PizzaBase?",
                            "Does the hasBase property prevent multiple Pizzas from being associated with the same PizzaBase?"
                        ]
                    },
                    {
                        "axiom": "hasBase domain Pizza",
                        "CQ": [
                            "Can entities other than Pizza serve as the subject of the 'hasBase' property?",
                            "Is it possible for 'hasBase' to be used with a subject that is not classified as a Pizza?",
                            "What classes are permitted as the domain for the 'hasBase' property?"
                        ]
                    },
                    {
                        "axiom": "hasBase range PizzaBase",
                        "CQ": [
                            "Are all objects that serve as the value for 'hasBase' required to be instances of PizzaBase?",
                            "Can the 'hasBase' property have a range that is not PizzaBase?",
                            "Which entity types are permitted to appear as the range of the 'hasBase' property?"
                        ]
                    },
                    {
                        "axiom": "hasBase subPropertyOf hasIngredient",
                        "CQ": [
                            "Is every usage of the hasBase property interpreted as an instance of hasIngredient?",
                            "Which properties are specified as subproperties under hasIngredient within the ontology?",
                            "Is hasIngredient defined as a superproperty to hasBase?"
                        ]
                    },
                    {
                        "axiom": "hasBase inverseOf isBaseOf",
                        "CQ": [
                            "How are the object properties ‘hasBase’ and ‘isBaseOf’ connected in terms of inverse relations within the ontology?",
                            "If entity A hasBase entity B, does the ontology entail that entity B isBaseOf entity A?",
                            "Which object property is defined as the inverse of ‘isBaseOf’ in the ontology?"
                        ]
                    }
                ]
            },
            "hasTopping": {
                "axiom": {
                    "characteristics": [
                        "InverseFunctional"
                    ],
                    "domain": [
                        "Pizza"
                    ],
                    "range": [
                        "PizzaTopping"
                    ],
                    "subPropertyOf": [
                        "hasIngredient"
                    ],
                    "inverseOf": [
                        "isToppingOf"
                    ]
                },
                "description": "The property \"hasTopping\" is an inverse functional object property, meaning each pizza topping can be associated with at most one pizza via this property. Its domain is restricted to Pizza, and its range is PizzaTopping. \"hasTopping\" is a sub-property of \"hasIngredient\" and has \"isToppingOf\" as its inverse property. Note that \"hasTopping\" is inverse functional because \"isToppingOf\" is functional.",
                "CQ": [
                    {
                        "axiom": "hasTopping characteristics InverseFunctional",
                        "CQ": [
                            "Is hasTopping an inverse functional property, indicating that each Topping is associated with at most one Pizza?",
                            "Can two distinct Pizzas share the same Topping through the hasTopping property?",
                            "Does the hasTopping property ensure a unique Pizza corresponds to each Topping?"
                        ]
                    },
                    {
                        "axiom": "hasTopping domain Pizza",
                        "CQ": [
                            "Is it possible for something other than a Pizza to have a 'hasTopping' property?",
                            "Are all instances of 'hasTopping' required to have a Pizza as their subject?",
                            "What types of entities can serve as the domain of the 'hasTopping' property?"
                        ]
                    },
                    {
                        "axiom": "hasTopping range PizzaTopping",
                        "CQ": [
                            "Can values of 'hasTopping' be entities other than PizzaTopping?",
                            "Is every entity used as a value for 'hasTopping' necessarily a PizzaTopping?",
                            "What types of entities may appear as the range for the 'hasTopping' property?"
                        ]
                    },
                    {
                        "axiom": "hasTopping subPropertyOf hasIngredient",
                        "CQ": [
                            "Which properties are classified as subproperties under hasIngredient?",
                            "Is hasTopping a direct or indirect subproperty of hasIngredient?",
                            "Does the hasTopping property always satisfy the constraints of hasIngredient?"
                        ]
                    },
                    {
                        "axiom": "hasTopping inverseOf isToppingOf",
                        "CQ": [
                            "How are the properties ‘hasTopping’ and ‘isToppingOf’ related in terms of logical inverses in the ontology?",
                            "If item A hasTopping item B, does the ontology entail that item B isToppingOf item A?",
                            "Which property functions as the inverse of ‘hasTopping’ in this ontology?"
                        ]
                    }
                ]
            },
            "isBaseOf": {
                "axiom": {
                    "characteristics": [
                        "Functional",
                        "InverseFunctional"
                    ],
                    "domain": [
                        "PizzaBase"
                    ],
                    "range": [
                        "Pizza"
                    ],
                    "subPropertyOf": [
                        "isIngredientOf"
                    ],
                    "inverseOf": [
                        "hasBase"
                    ]
                },
                "description": "The property \"isBaseOf\" is both functional and inverse functional, meaning each PizzaBase is the base of at most one Pizza, and each Pizza has at most one PizzaBase. Its domain is restricted to PizzaBase, and its range is Pizza. \"isBaseOf\" is a sub-property of \"isIngredientOf\" and has \"hasBase\" as its inverse property. This property is used to relate a PizzaBase to the Pizza for which it serves as the base.",
                "CQ": [
                    {
                        "axiom": "isBaseOf characteristics Functional",
                        "CQ": [
                            "Is isBaseOf defined as a functional property such that any given subject is associated with at most one object through isBaseOf?",
                            "Can an entity have more than one isBaseOf relationship, or does functionality constrain it to a single association per subject?",
                            "Does the functional characteristic of isBaseOf prohibit subjects from being linked to multiple objects via this property?"
                        ]
                    },
                    {
                        "axiom": "isBaseOf characteristics InverseFunctional",
                        "CQ": [
                            "Is isBaseOf an inverse functional property, meaning that each PizzaBase can be associated with at most one Pizza?",
                            "Can different Pizzas share the same PizzaBase via the isBaseOf property, or does inverse functionality prohibit this?",
                            "Does the isBaseOf property restrict any PizzaBase from being isBaseOf more than one Pizza?"
                        ]
                    },
                    {
                        "axiom": "isBaseOf domain PizzaBase",
                        "CQ": [
                            "Can entities other than PizzaBase appear as the subject of the property 'isBaseOf'?",
                            "Is it possible for a PizzaBase not to be involved in an 'isBaseOf' relationship?",
                            "What types of entities can serve as the domain of the property 'isBaseOf'?"
                        ]
                    },
                    {
                        "axiom": "isBaseOf range Pizza",
                        "CQ": [
                            "Can the property 'isBaseOf' relate to entities that are not Pizzas as its object?",
                            "What possible types can serve as the range for the property 'isBaseOf'?",
                            "Does the property 'isBaseOf' restrict its object exclusively to individuals of type Pizza?"
                        ]
                    },
                    {
                        "axiom": "isBaseOf subPropertyOf isIngredientOf",
                        "CQ": [
                            "Is isIngredientOf considered a superproperty of isBaseOf?",
                            "Which properties are listed as subproperties under isIngredientOf?",
                            "Does every relation expressed by isBaseOf necessarily entail a relation via isIngredientOf?"
                        ]
                    },
                    {
                        "axiom": "isBaseOf inverseOf hasBase",
                        "CQ": [
                            "Which property is formally specified as the inverse of ‘isBaseOf’ in the ontology?",
                            "If entity A isBaseOf entity B, does the ontology entail that B hasBase A?",
                            "How does the ontology define the logical connection between ‘isBaseOf’ and ‘hasBase’?"
                        ]
                    }
                ]
            },
            "hasCountryOfOrigin": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"hasCountryOfOrigin\" has no explicitly defined characteristics, domain, or range constraints. It is not specified as a sub-property of any other property, nor does it have an inverse property. Typically, \"hasCountryOfOrigin\" is intended to relate entities to their country of origin, but no further restrictions or definitions are enforced by the current axioms.",
                "CQ": [
                    {
                        "axiom": "hasCountryOfOrigin domain None",
                        "CQ": [
                            "What types of subjects are allowed for the property 'hasCountryOfOrigin'?",
                            "Is it correct that 'hasCountryOfOrigin' does not have a specified domain?",
                            "Can entities other than those currently modeled be linked using 'hasCountryOfOrigin' as the subject?"
                        ]
                    },
                    {
                        "axiom": "hasCountryOfOrigin range None",
                        "CQ": [
                            "What types of entities are permitted as the range for the property 'hasCountryOfOrigin'?",
                            "Is it correct that 'hasCountryOfOrigin' does not have a defined range?",
                            "Could the range of 'hasCountryOfOrigin' include more than one class, or is it completely unrestricted?"
                        ]
                    }
                ]
            },
            "isIngredientOf": {
                "axiom": {
                    "characteristics": [
                        "Transitive"
                    ],
                    "domain": [
                        "Food"
                    ],
                    "range": [
                        "Food"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": [
                        "hasIngredient"
                    ]
                },
                "description": "The property \"isIngredientOf\" is a transitive property relating instances of Food to other instances of Food, designating that one food is an ingredient of another. Its domain and range are both restricted to the class Food. \"isIngredientOf\" is the inverse of \"hasIngredient\" and should mirror all subproperties and attributes associated with \"hasIngredient,\" as noted in its current description. No super-properties are specified.",
                "CQ": [
                    {
                        "axiom": "isIngredientOf characteristics Transitive",
                        "CQ": [
                            "Is isIngredientOf a transitive property, such that if ingredient A is an ingredient of B and B is an ingredient of C, then A is an ingredient of C?",
                            "Does the transitive characteristic of isIngredientOf mean that ingredient membership propagates through multiple composition levels?",
                            "Can a chain of isIngredientOf relations establish a direct isIngredientOf relationship from the first ingredient to the final composite item?"
                        ]
                    },
                    {
                        "axiom": "isIngredientOf domain Food",
                        "CQ": [
                            "Can the property 'isIngredientOf' be used with entities that are not of type Food as its subject?",
                            "Is every subject using the 'isIngredientOf' property necessarily a Food item?",
                            "What types of entities can serve as the domain for the 'isIngredientOf' property?"
                        ]
                    },
                    {
                        "axiom": "isIngredientOf range Food",
                        "CQ": [
                            "Does the property 'isIngredientOf' ever relate to something that is not a Food?",
                            "What types of entities can be the range of 'isIngredientOf'?",
                            "Is every object in the 'isIngredientOf' relationship required to be a Food?"
                        ]
                    },
                    {
                        "axiom": "isIngredientOf inverseOf hasIngredient",
                        "CQ": [
                            "What is the inverse relationship defined between 'isIngredientOf' and 'hasIngredient' in the ontology?",
                            "If entity X is an ingredient of entity Y, does the ontology assert that Y has ingredient X?",
                            "Which property functions as the inverse for 'isIngredientOf' within this ontology?"
                        ]
                    }
                ]
            }
        }
    },
    "time": {
        "classes": {
            "time:DateTimeInterval": {
                "axiom": {
                    "subClassOf": [
                        "time:ProperInterval"
                    ]
                },
                "description": "time:DateTimeInterval is defined as a subclass of time:ProperInterval. This means every DateTimeInterval is a specific type of ProperInterval, representing a continuous interval of time with explicitly defined start and end date-time values. The class is intended for use where temporal intervals need to be precisely bounded using date and time information.",
                "CQ": [
                    {
                        "axiom": "time:DateTimeInterval subClassOf time:ProperInterval",
                        "CQ": [
                            "Is time:DateTimeInterval categorized under time:ProperInterval?",
                            "What kinds of intervals are classified as time:ProperInterval, considering time:DateTimeInterval?",
                            "Which broader interval types does time:DateTimeInterval fall into?"
                        ]
                    }
                ]
            },
            "time:Instant": {
                "axiom": {
                    "subClassOf": [
                        "time:TemporalEntity"
                    ],
                    "disjointWith": [
                        "time:ProperInterval"
                    ]
                },
                "description": "time:Instant is a subclass of time:TemporalEntity, representing a specific point in time without duration. It is explicitly disjoint with time:ProperInterval, meaning no individual can be both a time:Instant and a time:ProperInterval. This enforces a clear ontological distinction between an instantaneous temporal entity and a temporal interval with measurable duration.",
                "CQ": [
                    {
                        "axiom": "time:Instant subClassOf time:TemporalEntity",
                        "CQ": [
                            "Is time:TemporalEntity a broader class that encompasses time:Instant?",
                            "Which subclasses fall under time:TemporalEntity, and does this include time:Instant?",
                            "To which parent categories does time:Instant belong in the class hierarchy?"
                        ]
                    },
                    {
                        "axiom": "time:Instant disjointWith time:ProperInterval",
                        "CQ": [
                            "How does the ontology specify the mutual exclusivity between time:Instant and time:ProperInterval?",
                            "Is any entity allowed to be typed as both time:Instant and time:ProperInterval simultaneously?",
                            "Which classes are declared as disjoint with time:Instant within the ontology?"
                        ]
                    }
                ]
            },
            "time:Interval": {
                "axiom": {
                    "subClassOf": [
                        "time:TemporalEntity"
                    ]
                },
                "description": "time:Interval is defined as a subclass of time:TemporalEntity, signifying that it represents a specific type of temporal entity. Instances of time:Interval describe durations or spans of time, distinct from other temporal entities such as instants, emphasizing an interval’s extension across a portion of the temporal dimension.",
                "CQ": [
                    {
                        "axiom": "time:Interval subClassOf time:TemporalEntity",
                        "CQ": [
                            "Is every time:Interval encompassed within the broader class of time:TemporalEntity?",
                            "Which specific entities are classified under time:TemporalEntity, such as time:Interval?",
                            "To which higher-level temporal categories does time:Interval directly relate?"
                        ]
                    }
                ]
            },
            "time:January": {
                "axiom": {
                    "subClassOf": [
                        "time:DateTimeDescription"
                    ],
                    "propertyRestrictions": [
                        "[time:month hasValue --01]",
                        "[time:unitType hasValue time:unitMonth]"
                    ]
                },
                "description": "time:January is defined as a subclass of time:DateTimeDescription, representing the temporal concept of January within a calendar system. Members of this class are restricted such that the time:month property must have the value \"01\" (indicating January), and the time:unitType property must have the value time:unitMonth, ensuring that it refers specifically to a month unit. This formalization guarantees that any instance of time:January corresponds uniquely to the month of January.",
                "CQ": [
                    {
                        "axiom": "time:January subClassOf time:DateTimeDescription",
                        "CQ": [
                            "Is time:January included as a specific instance within the broader class of time:DateTimeDescription?",
                            "Which subclasses fall under time:DateTimeDescription, and does this include time:January?",
                            "To which higher-level time classification does time:January belong?"
                        ]
                    },
                    {
                        "axiom": "time:January propertyRestrictions [time:month hasValue --01]",
                        "CQ": [
                            "Is the value of the month property for January always restricted to \"01\"?",
                            "Can January have any value for the month property other than \"01\"?",
                            "Does January necessarily have the month property with the value \"01\"?"
                        ]
                    },
                    {
                        "axiom": "time:January propertyRestrictions [time:unitType hasValue time:unitMonth]",
                        "CQ": [
                            "Is January necessarily associated with the unit type Month?",
                            "Can January have any unit type other than Month according to its property restrictions?",
                            "Does the specification of January restrict its unit type property exclusively to Month?"
                        ]
                    }
                ]
            },
            "time:ProperInterval": {
                "axiom": {
                    "subClassOf": [
                        "time:Interval"
                    ]
                },
                "description": "time:ProperInterval is defined as a subclass of time:Interval. This means every instance of time:ProperInterval is also an instance of time:Interval, inheriting all its properties. Proper intervals represent temporal intervals with distinct start and end points (i.e., the start and end times are different), distinguishing them from instantaneous time points or degenerate intervals where start equals end.",
                "CQ": [
                    {
                        "axiom": "time:ProperInterval subClassOf time:Interval",
                        "CQ": [
                            "Is time:Interval a broader category encompassing time:ProperInterval?",
                            "What other subclasses exist under time:Interval besides time:ProperInterval?",
                            "To which upper-level classifications does time:ProperInterval belong?"
                        ]
                    }
                ]
            },
            "time:Year": {
                "axiom": {
                    "subClassOf": [
                        "time:DurationDescription"
                    ],
                    "propertyRestrictions": [
                        "[time:years exactly 1]",
                        "[time:months exactly 0]",
                        "[time:hours exactly 0]",
                        "[time:weeks exactly 0]",
                        "[time:seconds exactly 0]",
                        "[time:days exactly 0]",
                        "[time:minutes exactly 0]"
                    ]
                },
                "description": "time:Year is defined as a subclass of time:DurationDescription. It represents a duration that is exactly one year in length, characterized strictly by the presence of exactly 1 value for the time:years property, and exactly 0 values for all other duration components (months, weeks, days, hours, minutes, seconds). This ensures that any individual classified as time:Year denotes a precise and unambiguous period of one calendar year.",
                "CQ": [
                    {
                        "axiom": "time:Year subClassOf time:DurationDescription",
                        "CQ": [
                            "Is time:DurationDescription a more general category that includes time:Year?",
                            "What are the subclasses characterized under time:DurationDescription, such as time:Year?",
                            "Which broader classes does time:Year inherit properties from in the ontology?"
                        ]
                    },
                    {
                        "axiom": "time:Year propertyRestrictions [time:years exactly 1]",
                        "CQ": [
                            "Is each instance of time:Year required to have exactly one associated value for the time:years property?",
                            "Can a time:Year have more or fewer than one time:years value?",
                            "Does the ontology restrict time:Year to possess one and only one time:years property filler?"
                        ]
                    },
                    {
                        "axiom": "time:Year propertyRestrictions [time:months exactly 0]",
                        "CQ": [
                            "Is a time:Year instance defined such that it is related to exactly zero time:months entities?",
                            "Can any instance of time:Year have a value for the time:months property?",
                            "Would assigning any time:months property to a time:Year instance violate its class definition?"
                        ]
                    },
                    {
                        "axiom": "time:Year propertyRestrictions [time:hours exactly 0]",
                        "CQ": [
                            "Is a time:Year instance required to have exactly zero values for the time:hours property?",
                            "Can a Year possess any value other than zero for the property time:hours?",
                            "Is the property time:hours always absent or exactly equal to zero in a Year according to the ontology?"
                        ]
                    },
                    {
                        "axiom": "time:Year propertyRestrictions [time:weeks exactly 0]",
                        "CQ": [
                            "Is a Year in the ontology defined as having exactly zero weeks according to the time:weeks property?",
                            "Can any instance classified as time:Year possess a nonzero value for the time:weeks property?",
                            "Does the property restriction indicate that only time:Year entities with zero weeks are valid in the ontology?"
                        ]
                    },
                    {
                        "axiom": "time:Year propertyRestrictions [time:seconds exactly 0]",
                        "CQ": [
                            "Is it required that every instance of time:Year has exactly zero for the property time:seconds?",
                            "Can time:Year include any value for the property time:seconds other than zero?",
                            "Does the definition of time:Year ensure that time:seconds must always be zero for its instances?"
                        ]
                    },
                    {
                        "axiom": "time:Year propertyRestrictions [time:days exactly 0]",
                        "CQ": [
                            "Is an instance of time:Year characterized by having exactly zero values for the property time:days?",
                            "Can any occurrence of time:Year possess any number of time:days other than zero?",
                            "Does the property time:days necessarily have a cardinality of zero for every time:Year?"
                        ]
                    },
                    {
                        "axiom": "time:Year propertyRestrictions [time:minutes exactly 0]",
                        "CQ": [
                            "Is it required that an instance of time:Year must have exactly zero values for the property time:minutes?",
                            "Can a time:Year ever include any value for time:minutes other than zero?",
                            "Does the definition of time:Year restrict the property time:minutes to precisely zero and exclude any other value?"
                        ]
                    }
                ]
            },
            "time:DayOfWeek": {
                "axiom": {
                    "equivalentClass": [
                        "{time:Wednesday, time:Friday, time:Saturday, time:Tuesday, time:Monday, time:Sunday, time:Thursday}"
                    ]
                },
                "description": "time:DayOfWeek is defined as a class equivalent to the set containing time:Monday, time:Tuesday, time:Wednesday, time:Thursday, time:Friday, time:Saturday, and time:Sunday. This means that any individual of time:DayOfWeek must be exactly one of these seven days, formally capturing the conventional enumeration of days in a week.",
                "CQ": [
                    {
                        "axiom": "time:DayOfWeek equivalentClass {time:Wednesday, time:Friday, time:Saturday, time:Tuesday, time:Monday, time:Sunday, time:Thursday}",
                        "CQ": [
                            "Is DayOfWeek identical to the set containing Wednesday, Friday, Saturday, Tuesday, Monday, Sunday, and Thursday?",
                            "Are there any classes included in DayOfWeek apart from the specified days: Wednesday, Friday, Saturday, Tuesday, Monday, Sunday, and Thursday?",
                            "Is each member of the set {Wednesday, Friday, Saturday, Tuesday, Monday, Sunday, Thursday} necessarily an instance of DayOfWeek?"
                        ]
                    }
                ]
            },
            "time:TemporalEntity": {
                "axiom": {
                    "equivalentClass": [
                        "(time:Instant or time:Interval)"
                    ]
                },
                "description": "time:TemporalEntity is defined as a class equivalent to either time:Instant or time:Interval. This means any instance of time:TemporalEntity must be either an instant (representing a single point in time) or an interval (representing a duration between two points in time). This equivalence captures the generality of temporal entities, encompassing both points and periods within a temporal framework.",
                "CQ": [
                    {
                        "axiom": "time:TemporalEntity equivalentClass (time:Instant or time:Interval)",
                        "CQ": [
                            "Is time:TemporalEntity defined as the union of time:Instant and time:Interval?",
                            "Are all instances of time:TemporalEntity necessarily either a time:Instant or a time:Interval?",
                            "Does time:TemporalEntity include any instance that is not a time:Instant or a time:Interval?"
                        ]
                    }
                ]
            },
            "time:TemporalUnit": {
                "axiom": {
                    "equivalentClass": [
                        "{time:unitMonth, time:unitMinute, time:unitDay, time:unitHour, time:unitYear, time:unitSecond, time:unitWeek}"
                    ]
                },
                "description": "time:TemporalUnit is a class that is defined as being equivalent to the set containing time:unitMonth, time:unitMinute, time:unitDay, time:unitHour, time:unitYear, time:unitSecond, and time:unitWeek. This means that any individual that is an instance of any of these specific temporal units (such as month, minute, day, hour, year, second, or week) is also an instance of time:TemporalUnit, and vice versa. The class thus serves as a grouping for the major standard units used to measure time.",
                "CQ": [
                    {
                        "axiom": "time:TemporalUnit equivalentClass {time:unitMonth, time:unitMinute, time:unitDay, time:unitHour, time:unitYear, time:unitSecond, time:unitWeek}",
                        "CQ": [
                            "Is every time:TemporalUnit necessarily one of time:unitMonth, time:unitMinute, time:unitDay, time:unitHour, time:unitYear, time:unitSecond, or time:unitWeek?",
                            "Is time:TemporalUnit logically equivalent to the union of time:unitMonth, time:unitMinute, time:unitDay, time:unitHour, time:unitYear, time:unitSecond, and time:unitWeek?",
                            "Does time:TemporalUnit exclude any temporal concept other than the specified units (month, minute, day, hour, year, second, week)?"
                        ]
                    }
                ]
            },
            "time:DateTimeDescription": {
                "axiom": {
                    "propertyRestrictions": [
                        "[time:week max 1]",
                        "[time:dayOfWeek max 1]",
                        "[time:second max 1]",
                        "[time:minute max 1]",
                        "[time:day max 1]",
                        "[time:month max 1]",
                        "[time:timeZone max 1]",
                        "[time:hour max 1]",
                        "[time:unitType exactly 1]",
                        "[time:year max 1]",
                        "[time:dayOfYear max 1]"
                    ]
                },
                "description": "time:DateTimeDescription represents a structured temporal entity that encapsulates the components of a date and time. Each property—such as week, dayOfWeek, second, minute, day, month, timeZone, hour, year, and dayOfYear—can have at most one value. The property time:unitType is mandatory and must have exactly one value for each instance. This ensures that every instance of time:DateTimeDescription uniquely specifies its temporal components with precisely constrained values.",
                "CQ": [
                    {
                        "axiom": "time:DateTimeDescription propertyRestrictions [time:week max 1]",
                        "CQ": [
                            "Is it possible for a DateTimeDescription to be associated with more than one week value?",
                            "Does a DateTimeDescription necessarily have at most one 'week' property specified?",
                            "Can a DateTimeDescription instance have zero or one, but not multiple, occurrences of the 'week' property?"
                        ]
                    },
                    {
                        "axiom": "time:DateTimeDescription propertyRestrictions [time:dayOfWeek max 1]",
                        "CQ": [
                            "Is a DateTimeDescription permitted to have at most one dayOfWeek property value?",
                            "Can a DateTimeDescription be associated with multiple dayOfWeek values through the dayOfWeek property?",
                            "Does the definition of DateTimeDescription restrict the number of dayOfWeek assignments to one or fewer for each instance?"
                        ]
                    },
                    {
                        "axiom": "time:DateTimeDescription propertyRestrictions [time:second max 1]",
                        "CQ": [
                            "Is there a restriction that a time:DateTimeDescription can have at most one value for the property time:second?",
                            "Does a time:DateTimeDescription ever include more than one time:second property?",
                            "Is it possible for a time:DateTimeDescription to refer to multiple seconds values simultaneously?"
                        ]
                    },
                    {
                        "axiom": "time:DateTimeDescription propertyRestrictions [time:minute max 1]",
                        "CQ": [
                            "Is there a restriction on time:DateTimeDescription such that it can have at most one value for the property time:minute?",
                            "Can a time:DateTimeDescription instance ever be associated with more than one minute value through the time:minute property?",
                            "Does the ontology require that each time:DateTimeDescription assigns no more than a single minute via time:minute?"
                        ]
                    },
                    {
                        "axiom": "time:DateTimeDescription propertyRestrictions [time:day max 1]",
                        "CQ": [
                            "Is it required that each time:DateTimeDescription instance has at most one value for the property time:day?",
                            "Can a time:DateTimeDescription have multiple values assigned to the time:day property, or is it limited to one?",
                            "Does the ontology constrain time:DateTimeDescription to have a single value for time:day in any given instance?"
                        ]
                    },
                    {
                        "axiom": "time:DateTimeDescription propertyRestrictions [time:month max 1]",
                        "CQ": [
                            "Is a DateTimeDescription permitted to have more than one value for the month property?",
                            "Must every DateTimeDescription be associated with at most one month?",
                            "Does the ontology restrict DateTimeDescription instances from having multiple month property values?"
                        ]
                    },
                    {
                        "axiom": "time:DateTimeDescription propertyRestrictions [time:timeZone max 1]",
                        "CQ": [
                            "Is it required that each DateTimeDescription is associated with at most one timeZone?",
                            "Can a DateTimeDescription have more than one timeZone specified through the timeZone property?",
                            "Does the ontology restrict the timeZone property of DateTimeDescription instances to a single value?"
                        ]
                    },
                    {
                        "axiom": "time:DateTimeDescription propertyRestrictions [time:hour max 1]",
                        "CQ": [
                            "Does a DateTimeDescription have at most one value for the property 'hour'?",
                            "Can a DateTimeDescription be associated with multiple 'hour' values simultaneously?",
                            "Is it possible for the 'hour' property in DateTimeDescription to refer to more than one value?"
                        ]
                    },
                    {
                        "axiom": "time:DateTimeDescription propertyRestrictions [time:unitType exactly 1]",
                        "CQ": [
                            "Is every DateTimeDescription required to have exactly one unitType associated?",
                            "Can a DateTimeDescription have more than one unitType property?",
                            "Is it valid for a DateTimeDescription to lack a unitType assignment?"
                        ]
                    },
                    {
                        "axiom": "time:DateTimeDescription propertyRestrictions [time:year max 1]",
                        "CQ": [
                            "Is the number of 'year' properties that a DateTimeDescription can have limited to at most one value?",
                            "Can a DateTimeDescription be associated with more than one 'year' property?",
                            "Does the ontology restrict DateTimeDescription individuals to a single 'year', with no duplicates allowed?"
                        ]
                    },
                    {
                        "axiom": "time:DateTimeDescription propertyRestrictions [time:dayOfYear max 1]",
                        "CQ": [
                            "Is an instance of time:DateTimeDescription allowed to have at most one value for the property time:dayOfYear?",
                            "Can time:DateTimeDescription be associated with multiple time:dayOfYear values, or is it limited to a single value?",
                            "Does the ontology restrict time:DateTimeDescription so that it cannot have more than one time:dayOfYear assigned?"
                        ]
                    }
                ]
            },
            "time:DurationDescription": {
                "axiom": {
                    "propertyRestrictions": [
                        "[time:hours max 1]",
                        "[time:months max 1]",
                        "[time:seconds max 1]",
                        "[time:weeks max 1]",
                        "[time:days max 1]",
                        "[time:years max 1]",
                        "[time:minutes max 1]"
                    ]
                },
                "description": "time:DurationDescription is a class characterized by property restrictions on its temporal components: each of the properties time:hours, time:minutes, time:seconds, time:days, time:weeks, time:months, and time:years may have at most one value associated with any instance of this class. This ensures that a duration description contains at most a single specified value for each temporal unit, allowing precise representation of time durations without ambiguity or redundancy across these components.",
                "CQ": [
                    {
                        "axiom": "time:DurationDescription propertyRestrictions [time:hours max 1]",
                        "CQ": [
                            "Is a time:DurationDescription instance allowed to have more than one value for the time:hours property?",
                            "Does the restriction on time:hours ensure that at most one value can be assigned to time:DurationDescription?",
                            "Can a time:DurationDescription have multiple distinct hour values according to the specified property restriction?"
                        ]
                    },
                    {
                        "axiom": "time:DurationDescription propertyRestrictions [time:months max 1]",
                        "CQ": [
                            "Is it required that a DurationDescription has at most one value for the 'months' property?",
                            "Can a DurationDescription be associated with more than one 'months' property value?",
                            "Does the ontology restrict DurationDescription entities to a single 'months' property assignment?"
                        ]
                    },
                    {
                        "axiom": "time:DurationDescription propertyRestrictions [time:seconds max 1]",
                        "CQ": [
                            "Is it required that a DurationDescription has at most one value for the 'seconds' property?",
                            "Can a DurationDescription be associated with more than one 'seconds' value simultaneously?",
                            "Does the 'seconds' property in DurationDescription allow multiple distinct values?"
                        ]
                    },
                    {
                        "axiom": "time:DurationDescription propertyRestrictions [time:weeks max 1]",
                        "CQ": [
                            "Is time:DurationDescription limited to having at most one value for the property time:weeks?",
                            "Can an instance of time:DurationDescription be associated with more than one value through the property time:weeks?",
                            "Does time:DurationDescription ever describe durations with multiple time:weeks values assigned?"
                        ]
                    },
                    {
                        "axiom": "time:DurationDescription propertyRestrictions [time:days max 1]",
                        "CQ": [
                            "Is it possible for a DurationDescription to have more than one value for the 'days' property?",
                            "Does the definition of DurationDescription ensure that the 'days' property is restricted to at most one value?",
                            "Can a DurationDescription instance provide multiple different 'days' values simultaneously?"
                        ]
                    },
                    {
                        "axiom": "time:DurationDescription propertyRestrictions [time:years max 1]",
                        "CQ": [
                            "Is a DurationDescription limited to having at most one value for the 'years' property?",
                            "Can a DurationDescription specify more than one value for the 'years' attribute?",
                            "Does the ontology enforce a restriction that a DurationDescription may not describe multiple 'years' values?"
                        ]
                    },
                    {
                        "axiom": "time:DurationDescription propertyRestrictions [time:minutes max 1]",
                        "CQ": [
                            "Can a DurationDescription have more than one value for the minutes property?",
                            "Is it allowed for a DurationDescription to specify multiple different minutes values?",
                            "Does the DurationDescription class restrict the time:minutes property to at most a single value?"
                        ]
                    }
                ]
            }
        },
        "properties": {
            "time:weeks": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:DurationDescription"
                    ],
                    "range": [
                        "xsd:decimal"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:weeks\" has no defined characteristics or super-properties. Its domain is restricted to instances of \"time:DurationDescription\", and its range is specified as a decimal value (xsd:decimal). This property is used to indicate the number of weeks associated with a given duration description. No inverse property is specified.",
                "CQ": [
                    {
                        "axiom": "time:weeks domain time:DurationDescription",
                        "CQ": [
                            "Can the property 'time:weeks' be associated with entities other than 'time:DurationDescription' as its subject?",
                            "Is there any 'time:DurationDescription' that does not use the property 'time:weeks'?",
                            "What types of entities may serve as the domain for the property 'time:weeks'?"
                        ]
                    },
                    {
                        "axiom": "time:weeks range xsd:decimal",
                        "CQ": [
                            "Can the property 'time:weeks' take as its value anything other than an xsd:decimal?",
                            "Is every object associated with the property 'time:weeks' necessarily an xsd:decimal?",
                            "What types of values are permitted as the range for the property 'time:weeks'?"
                        ]
                    }
                ]
            },
            "time:minutes": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:DurationDescription"
                    ],
                    "range": [
                        "xsd:decimal"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:minutes\" has no explicitly declared characteristics and does not inherit from any super-property. Its domain is restricted to instances of \"time:DurationDescription,\" and its range is specified as \"xsd:decimal.\" This property is used to associate a duration description with a numeric value representing minutes. No inverse property is defined.",
                "CQ": [
                    {
                        "axiom": "time:minutes domain time:DurationDescription",
                        "CQ": [
                            "Is there any entity other than time:DurationDescription that can be the subject of time:minutes?",
                            "What can be the domain of the property time:minutes?",
                            "Does the property time:minutes have a domain different from time:DurationDescription?"
                        ]
                    },
                    {
                        "axiom": "time:minutes range xsd:decimal",
                        "CQ": [
                            "Can values for 'time:minutes' only be of type xsd:decimal?",
                            "Is every range value for 'time:minutes' constrained exclusively to xsd:decimal?",
                            "What possible datatypes can serve as the range for the property 'time:minutes'?"
                        ]
                    }
                ]
            },
            "time:seconds": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:DurationDescription"
                    ],
                    "range": [
                        "xsd:decimal"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:seconds\" has no declared characteristics or super-properties. Its domain is \"time:DurationDescription\", indicating it applies to duration descriptions, and its range is \"xsd:decimal\", specifying that its values are decimal numbers representing seconds. No inverse property is defined.",
                "CQ": [
                    {
                        "axiom": "time:seconds domain time:DurationDescription",
                        "CQ": [
                            "Can the property 'time:seconds' have a subject other than a time:DurationDescription?",
                            "Is there any time:DurationDescription that cannot be associated with 'time:seconds'?",
                            "What types of entities can be the domain for the property 'time:seconds'?"
                        ]
                    },
                    {
                        "axiom": "time:seconds range xsd:decimal",
                        "CQ": [
                            "Does the property 'seconds' ever have a range different from xsd:decimal?",
                            "Is every value assigned to the property 'seconds' necessarily of type xsd:decimal?",
                            "What types of values can be associated as the range for the property 'seconds'?"
                        ]
                    }
                ]
            },
            "time:xsdDateTime": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:DateTimeInterval"
                    ],
                    "range": [
                        "xsd:dateTime"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:xsdDateTime\" has no explicitly defined characteristics or super-properties. Its domain is restricted to instances of \"time:DateTimeInterval,\" and its range is limited to values of type \"xsd:dateTime.\" This property is used to associate a DateTimeInterval with a specific XML Schema dateTime value. No inverse property is specified.",
                "CQ": [
                    {
                        "axiom": "time:xsdDateTime domain time:DateTimeInterval",
                        "CQ": [
                            "Can the property 'time:xsdDateTime' be applied to any subject that is not a time:DateTimeInterval?",
                            "Are all subjects associated with 'time:xsdDateTime' necessarily instances of time:DateTimeInterval?",
                            "What types of entities can appear as the domain of the property 'time:xsdDateTime'?"
                        ]
                    },
                    {
                        "axiom": "time:xsdDateTime range xsd:dateTime",
                        "CQ": [
                            "Is every value assigned via the property 'time:xsdDateTime' necessarily of type xsd:dateTime?",
                            "Can 'time:xsdDateTime' have a range different from xsd:dateTime?",
                            "What data types are permissible as the range for the property 'time:xsdDateTime'?"
                        ]
                    }
                ]
            },
            "time:intervalOverlappedBy": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": [
                        "time:intervalOverlaps"
                    ]
                },
                "description": "The property \"time:intervalOverlappedBy\" has no explicitly defined domain, range, characteristics, or super-properties. It is specified as the inverse of \"time:intervalOverlaps\", indicating that if one interval is overlapped by another, the second interval overlaps the first. No further restrictions or features are defined for this property.",
                "CQ": [
                    {
                        "axiom": "time:intervalOverlappedBy domain None",
                        "CQ": [
                            "What kinds of entities can be the subject of the property 'intervalOverlappedBy'?",
                            "Is it correct that 'intervalOverlappedBy' has no specified domain?",
                            "Could the domain of 'intervalOverlappedBy' include any class other than those currently specified?"
                        ]
                    },
                    {
                        "axiom": "time:intervalOverlappedBy range None",
                        "CQ": [
                            "Does the property 'intervalOverlappedBy' have a defined range, or is it correct that it has none?",
                            "What entities can appear as the object of the 'intervalOverlappedBy' property?",
                            "Is it allowed for 'intervalOverlappedBy' to be used without specifying a range?"
                        ]
                    },
                    {
                        "axiom": "time:intervalOverlappedBy inverseOf time:intervalOverlaps",
                        "CQ": [
                            "What is the inverse property of ‘intervalOverlappedBy’ in the ontology?",
                            "If interval A is overlapped by interval B, does it follow that interval B overlaps interval A according to the defined properties?",
                            "How are the properties ‘intervalOverlappedBy’ and ‘intervalOverlaps’ connected in terms of inverse relationships?"
                        ]
                    }
                ]
            },
            "time:unitType": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:DateTimeDescription"
                    ],
                    "range": [
                        "time:TemporalUnit"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:unitType\" relates an instance of time:DateTimeDescription to a value of type time:TemporalUnit. It has no explicitly defined characteristics, super-properties, or inverse properties. Its domain is restricted to time:DateTimeDescription, and its range is limited to time:TemporalUnit, indicating that it specifies the unit of temporal measurement (such as second, minute, hour, etc.) for a given date-time description.",
                "CQ": [
                    {
                        "axiom": "time:unitType domain time:DateTimeDescription",
                        "CQ": [
                            "Can the property 'unitType' be used with subjects other than 'DateTimeDescription'?",
                            "Must all objects of the 'unitType' property refer to a specific type or class?",
                            "What are the possible domains for the property 'unitType'?"
                        ]
                    },
                    {
                        "axiom": "time:unitType range time:TemporalUnit",
                        "CQ": [
                            "Can the property 'unitType' be used with any value other than instances of 'TemporalUnit'?",
                            "Is every object of the 'unitType' property required to be a 'TemporalUnit'?",
                            "What classes can appear as the range for the 'unitType' property?"
                        ]
                    }
                ]
            },
            "time:intervalAfter": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": [
                        "time:intervalBefore"
                    ]
                },
                "description": "The property \"time:intervalAfter\" has no explicitly defined characteristics, domain, or range restrictions. It does not have any super-properties. Its inverse property is \"time:intervalBefore,\" indicating that if one interval is after another, the second is before the first. This property is used to relate temporal intervals where one occurs after the other.",
                "CQ": [
                    {
                        "axiom": "time:intervalAfter domain None",
                        "CQ": [
                            "What kinds of entities can be the subject of the property 'time:intervalAfter'?",
                            "Is it correct that the property 'time:intervalAfter' does not have a defined domain?",
                            "Can 'time:intervalAfter' have domains other than the currently unspecified one?"
                        ]
                    },
                    {
                        "axiom": "time:intervalAfter range None",
                        "CQ": [
                            "Is it correct that the property 'time:intervalAfter' does not have a specified range?",
                            "What types of entities, if any, are allowed to be the object of 'time:intervalAfter'?",
                            "Could the range of 'time:intervalAfter' be anything other than what is currently specified?"
                        ]
                    },
                    {
                        "axiom": "time:intervalAfter inverseOf time:intervalBefore",
                        "CQ": [
                            "What is the ontological relationship established between 'intervalAfter' and 'intervalBefore'?",
                            "If interval A occurs after interval B, must interval B occur before interval A?",
                            "Which property is defined as the inverse of 'intervalAfter' in the ontology?"
                        ]
                    }
                ]
            },
            "time:month": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:DateTimeDescription"
                    ],
                    "range": [
                        "xsd:gMonth"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:month\" links instances of time:DateTimeDescription to a value of type xsd:gMonth, representing a calendar month. It has no explicitly defined characteristics, super-properties, or inverse properties. The domain restriction ensures usage with DateTimeDescription, while the range specifies that the value is a valid month in XML Schema Datatype (gMonth) format.",
                "CQ": [
                    {
                        "axiom": "time:month domain time:DateTimeDescription",
                        "CQ": [
                            "Is there any entity other than time:DateTimeDescription that can be the subject of the property time:month?",
                            "Are all objects used with the property time:month required to represent months?",
                            "What types of entities can act as the domain for the property time:month?"
                        ]
                    },
                    {
                        "axiom": "time:month range xsd:gMonth",
                        "CQ": [
                            "Does the property 'time:month' have any range other than xsd:gMonth?",
                            "Is it possible for a value associated with 'time:month' to not be an xsd:gMonth?",
                            "What types of values are permitted as the range for the property 'time:month'?"
                        ]
                    }
                ]
            },
            "time:timeZone": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:DateTimeDescription"
                    ],
                    "range": [
                        "tzont:TimeZone"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:timeZone\" links an instance of time:DateTimeDescription to an instance of tzont:TimeZone. It has no explicitly defined characteristics, super-properties, or inverse properties. This property is used to specify the time zone associated with a particular date-time description.",
                "CQ": [
                    {
                        "axiom": "time:timeZone domain time:DateTimeDescription",
                        "CQ": [
                            "Can the property 'time:timeZone' be used with subjects other than 'time:DateTimeDescription'?",
                            "Are all entities associated via the 'time:timeZone' property instances of 'time:DateTimeDescription'?",
                            "Which classes or types are specified as the domain for the property 'time:timeZone'?"
                        ]
                    },
                    {
                        "axiom": "time:timeZone range tzont:TimeZone",
                        "CQ": [
                            "Is every value assigned using the property 'time:timeZone' required to be a tzont:TimeZone?",
                            "Can the property 'time:timeZone' reference any class other than tzont:TimeZone as its range?",
                            "What entities are permitted to serve as the range for the property 'time:timeZone'?"
                        ]
                    }
                ]
            },
            "time:hour": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:DateTimeDescription"
                    ],
                    "range": [
                        "xsd:nonNegativeInteger"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:hour\" has a domain of \"time:DateTimeDescription\" and a range of \"xsd:nonNegativeInteger\", indicating it is used to specify the hour component within a date-time description as a non-negative integer value. No property characteristics, super-properties, or inverse properties are defined.",
                "CQ": [
                    {
                        "axiom": "time:hour domain time:DateTimeDescription",
                        "CQ": [
                            "Can the property 'time:hour' be used with subjects other than time:DateTimeDescription?",
                            "What entities are permitted as the domain for the property 'time:hour'?",
                            "Is there any instance of time:DateTimeDescription that cannot be associated with the property 'time:hour'?"
                        ]
                    },
                    {
                        "axiom": "time:hour range xsd:nonNegativeInteger",
                        "CQ": [
                            "Is every value of the property 'time:hour' required to be a non-negative integer?",
                            "Can 'time:hour' have a range other than xsd:nonNegativeInteger?",
                            "What kinds of values are permitted as the range for the property 'time:hour'?"
                        ]
                    }
                ]
            },
            "time:hasEnd": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:TemporalEntity"
                    ],
                    "range": [
                        "time:Instant"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:hasEnd\" links a temporal entity (\"time:TemporalEntity\") to a time instant (\"time:Instant\") indicating its endpoint. It has no defined property characteristics, super-properties, or inverse properties. This property is used to specify when a temporal entity concludes.",
                "CQ": [
                    {
                        "axiom": "time:hasEnd domain time:TemporalEntity",
                        "CQ": [
                            "Can the property 'time:hasEnd' be used with a subject that is not a time:TemporalEntity?",
                            "Are all entities appearing as the subject of 'time:hasEnd' necessarily instances of time:TemporalEntity?",
                            "What types of entities are permitted as the domain of the 'time:hasEnd' property?"
                        ]
                    },
                    {
                        "axiom": "time:hasEnd range time:Instant",
                        "CQ": [
                            "Is it necessary for every value associated with the property 'time:hasEnd' to be a time:Instant?",
                            "Can entities other than time:Instant appear as the range of the property 'time:hasEnd'?",
                            "What types of entities are permitted as the range for 'time:hasEnd'?"
                        ]
                    }
                ]
            },
            "time:intervalOverlaps": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:ProperInterval"
                    ],
                    "range": [
                        "time:ProperInterval"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:intervalOverlaps\" relates two individuals, both of which must be instances of time:ProperInterval. It has no explicitly defined characteristics, no super-properties, and no specified inverse property. This property is used to indicate that two proper time intervals overlap with each other in time.",
                "CQ": [
                    {
                        "axiom": "time:intervalOverlaps domain time:ProperInterval",
                        "CQ": [
                            "Can 'intervalOverlaps' be used with subjects other than 'ProperInterval'?",
                            "Are there any entities that cannot serve as the domain for the property 'intervalOverlaps'?",
                            "What possible types can be assigned as the domain for 'intervalOverlaps'?"
                        ]
                    },
                    {
                        "axiom": "time:intervalOverlaps range time:ProperInterval",
                        "CQ": [
                            "Can the property 'intervalOverlaps' relate to anything other than a ProperInterval as its object?",
                            "Is there any ProperInterval that cannot be used as the range for the property 'intervalOverlaps'?",
                            "What types of entities can appear as the range for the property 'intervalOverlaps'?"
                        ]
                    }
                ]
            },
            "time:intervalDuring": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:ProperInterval"
                    ],
                    "range": [
                        "time:ProperInterval"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:intervalDuring\" relates two instances of time:ProperInterval, indicating that one interval occurs during the other. It has no explicitly defined characteristics, super-properties, or specified inverse property. Both its domain and range are restricted to time:ProperInterval, signifying its use in expressing temporal containment between intervals.",
                "CQ": [
                    {
                        "axiom": "time:intervalDuring domain time:ProperInterval",
                        "CQ": [
                            "Can the property 'intervalDuring' be used with subjects other than ProperInterval?",
                            "What types of entities are permissible as the subject for the property 'intervalDuring'?",
                            "Are there any entities classified as ProperInterval that cannot be the subject of 'intervalDuring'?"
                        ]
                    },
                    {
                        "axiom": "time:intervalDuring range time:ProperInterval",
                        "CQ": [
                            "Is it possible for the property 'time:intervalDuring' to have a range other than 'time:ProperInterval'?",
                            "Are all objects associated with 'time:intervalDuring' instances of 'time:ProperInterval'?",
                            "What types of entities can serve as the range for the property 'time:intervalDuring'?"
                        ]
                    }
                ]
            },
            "time:intervalFinishedBy": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": [
                        "time:intervalFinishes"
                    ]
                },
                "description": "The property \"time:intervalFinishedBy\" has no explicitly defined characteristics, domain, or range restrictions, and is not declared as a sub-property of any other property. It is specified as the inverse of \"time:intervalFinishes,\" indicating a reciprocal relationship between temporal intervals where one interval is finished by another. No additional description is currently provided.",
                "CQ": [
                    {
                        "axiom": "time:intervalFinishedBy domain None",
                        "CQ": [
                            "What types of entities can act as the subject for the property 'intervalFinishedBy'?",
                            "Is it correct that the property 'intervalFinishedBy' does not have a specified domain?",
                            "Are there any entities that cannot be the domain of 'intervalFinishedBy'?"
                        ]
                    },
                    {
                        "axiom": "time:intervalFinishedBy range None",
                        "CQ": [
                            "Is it correct that the property 'time:intervalFinishedBy' does not have a defined range?",
                            "What types of entities, if any, can be the range of 'time:intervalFinishedBy'?",
                            "Can 'time:intervalFinishedBy' be used with any value as its object due to the absence of a specified range?"
                        ]
                    },
                    {
                        "axiom": "time:intervalFinishedBy inverseOf time:intervalFinishes",
                        "CQ": [
                            "What is the logical connection between 'intervalFinishedBy' and 'intervalFinishes' in the ontology?",
                            "If time interval A is related to interval B using 'intervalFinishedBy', does this entail that B is related to A via 'intervalFinishes'?",
                            "Which property is defined as the inverse of 'intervalFinishedBy' in the time ontology?"
                        ]
                    }
                ]
            },
            "time:intervalMetBy": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": [
                        "time:intervalMeets"
                    ]
                },
                "description": "The property \"time:intervalMetBy\" has no explicitly defined characteristics, domain, or range restrictions, and does not have any super-properties. It is specified as the inverse of \"time:intervalMeets,\" indicating a temporal relation where one interval is met by another. No additional description is provided.",
                "CQ": [
                    {
                        "axiom": "time:intervalMetBy domain None",
                        "CQ": [
                            "What entities can be the domain of the property 'time:intervalMetBy'?",
                            "Is it correct that 'time:intervalMetBy' has no specified domain?",
                            "Can 'time:intervalMetBy' relate to any subject regardless of type?"
                        ]
                    },
                    {
                        "axiom": "time:intervalMetBy range None",
                        "CQ": [
                            "Is there a range defined for the property 'time:intervalMetBy'?",
                            "What types of values can appear as the object of the property 'time:intervalMetBy'?",
                            "Is it correct that the property 'time:intervalMetBy' has no specified range?"
                        ]
                    },
                    {
                        "axiom": "time:intervalMetBy inverseOf time:intervalMeets",
                        "CQ": [
                            "What is the ontological connection between the properties ‘intervalMetBy’ and ‘intervalMeets’?",
                            "If an interval A is met by interval B, does this entail that B meets A according to the ontology?",
                            "Which property is defined as the inverse of ‘intervalMetBy’ in the ontology?"
                        ]
                    }
                ]
            },
            "time:intervalContains": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": [
                        "time:intervalDuring"
                    ]
                },
                "description": "The property \"time:intervalContains\" has no explicitly defined domain, range, or characteristics. It specifies an inverse property relationship with \"time:intervalDuring,\" indicating that if one time interval contains another, the latter occurs within the bounds of the former. No super-properties are defined.",
                "CQ": [
                    {
                        "axiom": "time:intervalContains domain None",
                        "CQ": [
                            "What entities can serve as the domain of the property 'intervalContains'?",
                            "Is it correct that the property 'intervalContains' does not have a specified domain?",
                            "Are there any explicit domain constraints for the property 'intervalContains'?"
                        ]
                    },
                    {
                        "axiom": "time:intervalContains range None",
                        "CQ": [
                            "What can be the range of the property 'time:intervalContains'?",
                            "Is it correct that 'time:intervalContains' has no specified range?",
                            "Can 'time:intervalContains' relate to any type of object as its range?"
                        ]
                    },
                    {
                        "axiom": "time:intervalContains inverseOf time:intervalDuring",
                        "CQ": [
                            "How does the ontology represent the connection between 'intervalContains' and 'intervalDuring' properties?",
                            "If a time interval A contains time interval B, does the ontology entail that B occurs during A?",
                            "Which property is identified as the inverse of 'intervalContains' in this ontology?"
                        ]
                    }
                ]
            },
            "time:inDateTime": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:Instant"
                    ],
                    "range": [
                        "time:DateTimeDescription"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:inDateTime\" links an instance of time:Instant to a corresponding time:DateTimeDescription. It has no declared characteristics such as being functional or transitive, and it does not inherit from any super-property or have an inverse property. The domain is restricted to time:Instant, and the range is time:DateTimeDescription, indicating its purpose is to specify the detailed date and time information for a given temporal instant.",
                "CQ": [
                    {
                        "axiom": "time:inDateTime domain time:Instant",
                        "CQ": [
                            "Can the property 'time:inDateTime' apply to any subject other than time:Instant?",
                            "Is it possible that a time:Instant does not have an associated value for the property 'time:inDateTime'?",
                            "What are the possible domains for the property 'time:inDateTime'?"
                        ]
                    },
                    {
                        "axiom": "time:inDateTime range time:DateTimeDescription",
                        "CQ": [
                            "Does the property 'time:inDateTime' accept any range other than 'time:DateTimeDescription'?",
                            "Is every value associated with 'time:inDateTime' required to be a 'time:DateTimeDescription'?",
                            "What entities can serve as the range for the property 'time:inDateTime'?"
                        ]
                    }
                ]
            },
            "time:dayOfYear": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:DateTimeDescription"
                    ],
                    "range": [
                        "xsd:nonNegativeInteger"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:dayOfYear\" links an instance of time:DateTimeDescription to a non-negative integer (xsd:nonNegativeInteger) representing the day number within the year. It has no explicitly defined characteristics, super-properties, or inverse properties. This property is used to specify which day of the year a particular date-time description refers to.",
                "CQ": [
                    {
                        "axiom": "time:dayOfYear domain time:DateTimeDescription",
                        "CQ": [
                            "Can the property 'dayOfYear' be used with subjects other than DateTimeDescription?",
                            "Is every instance of DateTimeDescription required to have a value for the 'dayOfYear' property?",
                            "What types of entities are permitted as the domain of the 'dayOfYear' property?"
                        ]
                    },
                    {
                        "axiom": "time:dayOfYear range xsd:nonNegativeInteger",
                        "CQ": [
                            "Can the property 'dayOfYear' have values that are not nonNegativeIntegers?",
                            "What types of values are permitted as the range for 'dayOfYear'?",
                            "Is every object associated with 'dayOfYear' required to be a nonNegativeInteger?"
                        ]
                    }
                ]
            },
            "time:hours": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:DurationDescription"
                    ],
                    "range": [
                        "xsd:decimal"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:hours\" has a domain of \"time:DurationDescription\" and a range of \"xsd:decimal\", indicating it relates a duration description to a decimal value representing hours. It has no explicitly defined characteristics, super-properties, or inverse properties.",
                "CQ": [
                    {
                        "axiom": "time:hours domain time:DurationDescription",
                        "CQ": [
                            "Can the property 'time:hours' have a subject other than a time:DurationDescription?",
                            "What types of entities are permitted as the subject of 'time:hours'?",
                            "Is it correct that only instances of time:DurationDescription can use the 'time:hours' property?"
                        ]
                    },
                    {
                        "axiom": "time:hours range xsd:decimal",
                        "CQ": [
                            "Can the property 'time:hours' have a range other than xsd:decimal?",
                            "Are all values assigned via 'time:hours' required to be decimals?",
                            "Which datatypes are permissible as the range for the property 'time:hours'?"
                        ]
                    }
                ]
            },
            "time:hasBeginning": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:TemporalEntity"
                    ],
                    "range": [
                        "time:Instant"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:hasBeginning\" links instances of time:TemporalEntity to a time:Instant that marks their starting point. It has no specified characteristics or super-properties, and it does not have an inverse property. The domain is time:TemporalEntity and the range is time:Instant, indicating its use for specifying the beginning instant of a temporal entity.",
                "CQ": [
                    {
                        "axiom": "time:hasBeginning domain time:TemporalEntity",
                        "CQ": [
                            "Can the property 'time:hasBeginning' be used with any subject other than a 'time:TemporalEntity'?",
                            "Is it necessary that every subject of 'time:hasBeginning' is a 'time:TemporalEntity'?",
                            "Which types of entities are permitted as the subject for the property 'time:hasBeginning'?"
                        ]
                    },
                    {
                        "axiom": "time:hasBeginning range time:Instant",
                        "CQ": [
                            "Can the property 'time:hasBeginning' have an object that is not a time:Instant?",
                            "Is every entity used as the range of 'time:hasBeginning' required to be a time:Instant?",
                            "What types of values are permitted as the object of the 'time:hasBeginning' property?"
                        ]
                    }
                ]
            },
            "time:hasDateTimeDescription": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:DateTimeInterval"
                    ],
                    "range": [
                        "time:DateTimeDescription"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:hasDateTimeDescription\" has no special characteristics and is not defined as a sub-property or inverse of any other property. Its domain is restricted to instances of time:DateTimeInterval, and its range is time:DateTimeDescription. This property relates a DateTimeInterval to a DateTimeDescription, indicating the specific date and time details associated with the interval.",
                "CQ": [
                    {
                        "axiom": "time:hasDateTimeDescription domain time:DateTimeInterval",
                        "CQ": [
                            "Can the property 'hasDateTimeDescription' be associated with any subject other than a DateTimeInterval?",
                            "Is it possible for an object linked via 'hasDateTimeDescription' not to conform to a DateTimeDescription?",
                            "What entities are permitted to serve as the domain for the 'hasDateTimeDescription' property?"
                        ]
                    },
                    {
                        "axiom": "time:hasDateTimeDescription range time:DateTimeDescription",
                        "CQ": [
                            "Is every value associated with the property 'time:hasDateTimeDescription' required to be a time:DateTimeDescription?",
                            "Are there any range types for 'time:hasDateTimeDescription' other than time:DateTimeDescription?",
                            "What types of entities can serve as the range for the property 'time:hasDateTimeDescription'?"
                        ]
                    }
                ]
            },
            "time:dayOfWeek": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:DateTimeDescription"
                    ],
                    "range": [
                        "time:DayOfWeek"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:dayOfWeek\" has no explicitly defined characteristics or super-properties. Its domain is \"time:DateTimeDescription,\" meaning it is used with instances describing date and time. Its range is \"time:DayOfWeek,\" indicating the value should be a day of the week. No inverse property is specified. This property associates a DateTime description with the specific day of the week it represents.",
                "CQ": [
                    {
                        "axiom": "time:dayOfWeek domain time:DateTimeDescription",
                        "CQ": [
                            "Is it possible for a property like 'dayOfWeek' to have a domain other than DateTimeDescription?",
                            "Must all instances associated with 'dayOfWeek' be types of DateTimeDescription?",
                            "Which kinds of entities are permitted as the domain for 'dayOfWeek'?"
                        ]
                    },
                    {
                        "axiom": "time:dayOfWeek range time:DayOfWeek",
                        "CQ": [
                            "Can the property 'time:dayOfWeek' have values that are not instances of 'time:DayOfWeek'?",
                            "Is it possible for any entity other than 'time:DayOfWeek' to serve as the range of 'time:dayOfWeek'?",
                            "What entities are permitted as the range for the property 'time:dayOfWeek'?"
                        ]
                    }
                ]
            },
            "time:second": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:DateTimeDescription"
                    ],
                    "range": [
                        "xsd:decimal"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:second\" has no specified characteristics, super-properties, or inverse properties. Its domain is restricted to instances of time:DateTimeDescription, and its range is xsd:decimal. This property is used to associate a DateTimeDescription with a decimal value representing seconds.",
                "CQ": [
                    {
                        "axiom": "time:second domain time:DateTimeDescription",
                        "CQ": [
                            "Can the property 'time:second' be used with any class other than 'time:DateTimeDescription' as its subject?",
                            "Which classes are permitted as subjects for the 'time:second' property?",
                            "Are all subjects of the 'time:second' property necessarily instances of 'time:DateTimeDescription'?"
                        ]
                    },
                    {
                        "axiom": "time:second range xsd:decimal",
                        "CQ": [
                            "Can the property 'time:second' refer to any value type other than xsd:decimal?",
                            "Is it necessary that all values of 'time:second' are of type xsd:decimal?",
                            "What types of entities are permitted as the range of the property 'time:second'?"
                        ]
                    }
                ]
            },
            "time:year": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:DateTimeDescription"
                    ],
                    "range": [
                        "xsd:gYear"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:year\" links instances of time:DateTimeDescription to values of type xsd:gYear, representing a specific year. It does not have additional property characteristics, super-properties, or an inverse property defined.",
                "CQ": [
                    {
                        "axiom": "time:year domain time:DateTimeDescription",
                        "CQ": [
                            "Is it possible for something other than a time:DateTimeDescription to have a value for time:year?",
                            "Can all subjects of the property time:year be categorized as time:DateTimeDescription?",
                            "Which classes are eligible to be the domain for the property time:year?"
                        ]
                    },
                    {
                        "axiom": "time:year range xsd:gYear",
                        "CQ": [
                            "Does the property 'time:year' accept values other than those of type xsd:gYear as its range?",
                            "Are all values associated with 'time:year' required to be instances of xsd:gYear?",
                            "What possible data types can be used as the range for the property 'time:year'?"
                        ]
                    }
                ]
            },
            "time:minute": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:DateTimeDescription"
                    ],
                    "range": [
                        "xsd:nonNegativeInteger"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:minute\" relates an individual of the class \"time:DateTimeDescription\" to a non-negative integer value representing the minute component of a date-time description. It has no explicitly defined characteristics, super-properties, or inverse properties. Its domain is restricted to \"time:DateTimeDescription\", and its range is restricted to \"xsd:nonNegativeInteger\".",
                "CQ": [
                    {
                        "axiom": "time:minute domain time:DateTimeDescription",
                        "CQ": [
                            "Can the property 'time:minute' be associated with any subject other than a time:DateTimeDescription?",
                            "Is it possible for something that is not a time:DateTimeDescription to have a 'time:minute' property?",
                            "What types of entities can serve as the domain for the property 'time:minute'?"
                        ]
                    },
                    {
                        "axiom": "time:minute range xsd:nonNegativeInteger",
                        "CQ": [
                            "Is there any value other than a nonNegativeInteger that can be used as the range of 'time:minute'?",
                            "Are all objects associated with the property 'time:minute' necessarily nonNegativeIntegers?",
                            "What types of values are permitted as the range for the property 'time:minute'?"
                        ]
                    }
                ]
            },
            "time:days": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:DurationDescription"
                    ],
                    "range": [
                        "xsd:decimal"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:days\" has no declared characteristics or super-properties. Its domain is restricted to instances of \"time:DurationDescription,\" and its range is specified as \"xsd:decimal.\" This property is used to indicate the number of days, represented as a decimal value, associated with a given duration description. No inverse property is defined.",
                "CQ": [
                    {
                        "axiom": "time:days domain time:DurationDescription",
                        "CQ": [
                            "Can the property 'time:days' be applied to any subject other than an instance of time:DurationDescription?",
                            "What entities are allowed as subjects when using the property 'time:days'?",
                            "Is it possible for something that is not a time:DurationDescription to have a 'time:days' value?"
                        ]
                    },
                    {
                        "axiom": "time:days range xsd:decimal",
                        "CQ": [
                            "Can the property 'time:days' point to values other than xsd:decimal?",
                            "Is every value assigned via 'time:days' required to be of type xsd:decimal?",
                            "What types of values are valid as the range for the property 'time:days'?"
                        ]
                    }
                ]
            },
            "time:hasDurationDescription": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:TemporalEntity"
                    ],
                    "range": [
                        "time:DurationDescription"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:hasDurationDescription\" links an instance of time:TemporalEntity to a corresponding time:DurationDescription. It has no defined characteristics, super-properties, or inverse properties. Its domain is restricted to time:TemporalEntity, and its range is limited to time:DurationDescription. This property is used to specify the duration description associated with a temporal entity.",
                "CQ": [
                    {
                        "axiom": "time:hasDurationDescription domain time:TemporalEntity",
                        "CQ": [
                            "Is the property 'time:hasDurationDescription' ever used with a subject that is not a time:TemporalEntity?",
                            "What entities may serve as the domain for 'time:hasDurationDescription'?",
                            "Can an individual with the type time:TemporalEntity always be described using the 'time:hasDurationDescription' property?"
                        ]
                    },
                    {
                        "axiom": "time:hasDurationDescription range time:DurationDescription",
                        "CQ": [
                            "Can the property 'time:hasDurationDescription' take as its value an entity other than 'time:DurationDescription'?",
                            "Is every object of the 'time:hasDurationDescription' property necessarily a 'time:DurationDescription'?",
                            "What entities are permitted as the range of 'time:hasDurationDescription'?"
                        ]
                    }
                ]
            },
            "time:intervalMeets": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:ProperInterval"
                    ],
                    "range": [
                        "time:ProperInterval"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:intervalMeets\" relates two individuals of type time:ProperInterval, indicating that one time interval immediately precedes another without overlapping. It has no defined characteristics, super-properties, or inverse property. Its domain and range are both restricted to time:ProperInterval.",
                "CQ": [
                    {
                        "axiom": "time:intervalMeets domain time:ProperInterval",
                        "CQ": [
                            "Can the property 'time:intervalMeets' relate any subject other than a time:ProperInterval?",
                            "Are all instances using 'time:intervalMeets' as a subject required to be of type time:ProperInterval?",
                            "Which classes are permitted as the domain for the 'time:intervalMeets' property?"
                        ]
                    },
                    {
                        "axiom": "time:intervalMeets range time:ProperInterval",
                        "CQ": [
                            "Can the property 'intervalMeets' be used with objects other than 'ProperInterval'?",
                            "Is every object linked by the property 'intervalMeets' obliged to be a 'ProperInterval'?",
                            "What types of entities are allowed as the range for the 'intervalMeets' property?"
                        ]
                    }
                ]
            },
            "time:intervalStarts": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:ProperInterval"
                    ],
                    "range": [
                        "time:ProperInterval"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:intervalStarts\" has no explicitly defined characteristics or super-properties. Its domain and range are both limited to \"time:ProperInterval\", indicating it relates two proper time intervals. This property is used to assert that one proper interval starts another proper interval. No inverse property is specified.",
                "CQ": [
                    {
                        "axiom": "time:intervalStarts domain time:ProperInterval",
                        "CQ": [
                            "Can the property 'intervalStarts' be used with subjects other than ProperInterval?",
                            "Is there any ProperInterval that cannot be associated with the property 'intervalStarts'?",
                            "What types of entities may serve as the domain for the 'intervalStarts' property?"
                        ]
                    },
                    {
                        "axiom": "time:intervalStarts range time:ProperInterval",
                        "CQ": [
                            "Can the property 'intervalStarts' have a value that is not a ProperInterval as its range?",
                            "Is every entity that serves as the range of 'intervalStarts' necessarily a ProperInterval?",
                            "What types of values are permitted as the range of the 'intervalStarts' property?"
                        ]
                    }
                ]
            },
            "time:week": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:DateTimeDescription"
                    ],
                    "range": [
                        "xsd:nonNegativeInteger"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:week\" relates an instance of \"time:DateTimeDescription\" to a non-negative integer value, representing the week component of a date-time description. It has no defined characteristics, super-properties, or inverse properties. The property ensures that the week is expressed as a non-negative integer, but otherwise imposes no additional restrictions.",
                "CQ": [
                    {
                        "axiom": "time:week domain time:DateTimeDescription",
                        "CQ": [
                            "Can the property 'time:week' be used with any class besides 'time:DateTimeDescription' as its subject?",
                            "Is it possible for an instance of 'time:DateTimeDescription' to lack a value for the property 'time:week'?",
                            "What class or classes are allowed to be the domain of the property 'time:week'?"
                        ]
                    },
                    {
                        "axiom": "time:week range xsd:nonNegativeInteger",
                        "CQ": [
                            "Can the property 'week' be associated with any object other than a nonNegativeInteger as its value?",
                            "Is it correct that the only possible range for 'week' is xsd:nonNegativeInteger, or can other datatypes be used?",
                            "What types of values are permissible as the range of the property 'week'?"
                        ]
                    }
                ]
            },
            "time:after": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": [
                        "time:before"
                    ]
                },
                "description": "The property \"time:after\" has no explicitly defined characteristics, domain, or range restrictions, and does not have any super-properties. It is specified as the inverse of the property \"time:before,\" indicating that if one entity is related to another via \"time:after,\" the second entity is related to the first via \"time:before.\" No additional description is provided.",
                "CQ": [
                    {
                        "axiom": "time:after domain None",
                        "CQ": [
                            "What can be the domain of the property 'time:after'?",
                            "Is it valid that the property 'time:after' does not have a specified domain?",
                            "Are there any constraints on the types of subjects for the property 'time:after'?"
                        ]
                    },
                    {
                        "axiom": "time:after range None",
                        "CQ": [
                            "Is it correct that the property 'time:after' does not specify any range?",
                            "What types of values can be the range for the property 'time:after'?",
                            "Can entities of any kind be used as the object for the 'time:after' property?"
                        ]
                    },
                    {
                        "axiom": "time:after inverseOf time:before",
                        "CQ": [
                            "What is the inverse property of 'time:after' in the ontology?",
                            "If entity A is related to entity B through 'time:after', does the ontology entail that B is related to A through 'time:before'?",
                            "How do the properties 'time:after' and 'time:before' correspond as logical inverses in the ontology?"
                        ]
                    }
                ]
            },
            "time:intervalBefore": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:ProperInterval"
                    ],
                    "range": [
                        "time:ProperInterval"
                    ],
                    "subPropertyOf": [
                        "time:before"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"time:intervalBefore\" links two individuals of type time:ProperInterval, indicating that one interval occurs entirely before another. It has no explicitly defined characteristics or inverse property. It is a subproperty of time:before, inheriting its temporal ordering semantics.",
                "CQ": [
                    {
                        "axiom": "time:intervalBefore domain time:ProperInterval",
                        "CQ": [
                            "Can the property 'time:intervalBefore' have a domain different from time:ProperInterval?",
                            "Is there any instance of time:ProperInterval that cannot be used as the subject of 'time:intervalBefore'?",
                            "What entities are permitted to serve as the domain of 'time:intervalBefore'?"
                        ]
                    },
                    {
                        "axiom": "time:intervalBefore range time:ProperInterval",
                        "CQ": [
                            "Is every value used with the property 'time:intervalBefore' required to be a time:ProperInterval?",
                            "Does the property 'time:intervalBefore' allow for a range other than time:ProperInterval?",
                            "What types of entities can be used as the range for the property 'time:intervalBefore'?"
                        ]
                    },
                    {
                        "axiom": "time:intervalBefore subPropertyOf time:before",
                        "CQ": [
                            "Which properties are defined as subproperties of time:before within the ontology?",
                            "Is every occurrence of the time:intervalBefore property also valid as an occurrence of time:before?",
                            "What is the hierarchical relationship between time:intervalBefore and time:before according to the ontology?"
                        ]
                    }
                ]
            },
            "time:inXSDDateTime": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:Instant"
                    ],
                    "range": [
                        "xsd:dateTime"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:inXSDDateTime\" relates instances of \"time:Instant\" to values of type \"xsd:dateTime\". It has no additional characteristics, super-properties, or inverse properties specified. This property is used to associate a temporal instant with its corresponding XML Schema dateTime representation.",
                "CQ": [
                    {
                        "axiom": "time:inXSDDateTime domain time:Instant",
                        "CQ": [
                            "Can 'time:inXSDDateTime' have a subject that is not a 'time:Instant'?",
                            "Are all instances related through 'time:inXSDDateTime' necessarily 'time:Instant'?",
                            "What are the possible domains for the property 'time:inXSDDateTime'?"
                        ]
                    },
                    {
                        "axiom": "time:inXSDDateTime range xsd:dateTime",
                        "CQ": [
                            "Is there any value for 'time:inXSDDateTime' that is not an xsd:dateTime?",
                            "What types of entities can be used as the range of 'time:inXSDDateTime'?",
                            "Must all resources referenced by 'time:inXSDDateTime' be instances of xsd:dateTime?"
                        ]
                    }
                ]
            },
            "time:before": {
                "axiom": {
                    "characteristics": [
                        "Transitive"
                    ],
                    "domain": [
                        "time:TemporalEntity"
                    ],
                    "range": [
                        "time:TemporalEntity"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:before\" is a transitive property used to relate two instances of time:TemporalEntity, indicating that one temporal entity occurs before another. It has both its domain and range restricted to time:TemporalEntity. No super-properties or inverse properties are specified.",
                "CQ": [
                    {
                        "axiom": "time:before characteristics Transitive",
                        "CQ": [
                            "Is the property time:before defined as a transitive property, where if event A occurs before event B and event B occurs before event C, then event A occurs before event C?",
                            "Does the transitive nature of time:before entail that the relation passes through intermediate events?",
                            "Can it be inferred that time:before connects two entities such that if the relation holds between the first and second, and second and third, it must also hold between the first and third?"
                        ]
                    },
                    {
                        "axiom": "time:before domain time:TemporalEntity",
                        "CQ": [
                            "Can the property 'time:before' be used with subjects that are not instances of 'time:TemporalEntity'?",
                            "Are there any 'time:TemporalEntity' instances that cannot participate as domains in the 'time:before' relationship?",
                            "What types of entities are permissible as the domain for the property 'time:before'?"
                        ]
                    },
                    {
                        "axiom": "time:before range time:TemporalEntity",
                        "CQ": [
                            "Can the property 'time:before' relate to entities other than time:TemporalEntity as its object?",
                            "What types of individuals can serve as the range for the property 'time:before'?",
                            "Is every object associated with 'time:before' necessarily a time:TemporalEntity?"
                        ]
                    }
                ]
            },
            "time:intervalStartedBy": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": [
                        "time:intervalStarts"
                    ]
                },
                "description": "The property \"time:intervalStartedBy\" has no explicitly defined characteristics, domain, or range restrictions, and is not a sub-property of any other property. It is specified as the inverse of \"time:intervalStarts,\" indicating that if an interval is started by another, then the latter starts the former. No additional constraints or relationships are provided.",
                "CQ": [
                    {
                        "axiom": "time:intervalStartedBy domain None",
                        "CQ": [
                            "What kinds of entities can be the subject of the property 'time:intervalStartedBy'?",
                            "Is it correct that the property 'time:intervalStartedBy' has no domain specified?",
                            "Can 'time:intervalStartedBy' be used with any class as its domain?"
                        ]
                    },
                    {
                        "axiom": "time:intervalStartedBy range None",
                        "CQ": [
                            "Is it correct that 'intervalStartedBy' does not specify a range?",
                            "Which types of entities can be the range of the property 'intervalStartedBy'?",
                            "Can 'intervalStartedBy' relate to any type of value as its object?"
                        ]
                    },
                    {
                        "axiom": "time:intervalStartedBy inverseOf time:intervalStarts",
                        "CQ": [
                            "What is the inverse relationship specified between the properties ‘intervalStartedBy’ and ‘intervalStarts’ in the ontology?",
                            "Does the assertion that interval A intervalStartedBy interval B entail that interval B intervalStarts interval A?",
                            "Which property functions as the inverse of ‘intervalStartedBy’ according to the ontology?"
                        ]
                    }
                ]
            },
            "time:inside": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:Interval"
                    ],
                    "range": [
                        "time:Instant"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:inside\" has a domain of time:Interval and a range of time:Instant, indicating it relates a time interval to an instant that occurs within it. There are no specified characteristics, super-properties, or inverse properties.",
                "CQ": [
                    {
                        "axiom": "time:inside domain time:Interval",
                        "CQ": [
                            "Can the property 'time:inside' have a subject that is not a time:Interval?",
                            "Is it possible for an entity that is not a time:Interval to be associated via 'time:inside'?",
                            "What are the possible domains for the 'time:inside' property?"
                        ]
                    },
                    {
                        "axiom": "time:inside range time:Instant",
                        "CQ": [
                            "Can the property 'inside' be used with values other than 'Instant'?",
                            "Is every value used with the property 'inside' required to be a 'time:Instant'?",
                            "What kinds of entities are allowed to appear as the range when using the 'inside' property?"
                        ]
                    }
                ]
            },
            "time:months": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:DurationDescription"
                    ],
                    "range": [
                        "xsd:decimal"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:months\" links an instance of time:DurationDescription to a decimal value representing the number of months. It has no specified characteristics, super-properties, or inverse properties. Its domain is restricted to time:DurationDescription, and its range is xsd:decimal.",
                "CQ": [
                    {
                        "axiom": "time:months domain time:DurationDescription",
                        "CQ": [
                            "Is the property 'months' applicable to entities other than DurationDescription?",
                            "Are all subjects of the property 'months' instances of DurationDescription?",
                            "What entities can be the domain of the 'months' property?"
                        ]
                    },
                    {
                        "axiom": "time:months range xsd:decimal",
                        "CQ": [
                            "Does the property 'time:months' have any range other than xsd:decimal?",
                            "Are all values used with the property 'time:months' required to be of type xsd:decimal?",
                            "What data types are permitted as values for the property 'time:months'?"
                        ]
                    }
                ]
            },
            "time:intervalFinishes": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:ProperInterval"
                    ],
                    "range": [
                        "time:ProperInterval"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:intervalFinishes\" links two instances of time:ProperInterval, indicating that the subject interval finishes at the endpoint of the object interval but does not necessarily start at the same time. It has no additional characteristics, super-properties, or inverse properties defined. Both its domain and range are restricted to time:ProperInterval.",
                "CQ": [
                    {
                        "axiom": "time:intervalFinishes domain time:ProperInterval",
                        "CQ": [
                            "Can the property 'intervalFinishes' be used with a subject that is not a ProperInterval?",
                            "Are all subjects of the 'intervalFinishes' property instances of ProperInterval?",
                            "What entities are permitted as the domain for the 'intervalFinishes' property?"
                        ]
                    },
                    {
                        "axiom": "time:intervalFinishes range time:ProperInterval",
                        "CQ": [
                            "Is every value assigned to 'intervalFinishes' necessarily a ProperInterval?",
                            "Can 'intervalFinishes' associate with any object that is not a ProperInterval as its value?",
                            "What entities are permitted as the range of the property 'intervalFinishes'?"
                        ]
                    }
                ]
            },
            "time:intervalEquals": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:ProperInterval"
                    ],
                    "range": [
                        "time:ProperInterval"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:intervalEquals\" links two individuals of type \"time:ProperInterval\" and asserts that they are equal in terms of their start and end points. It has no additional characteristics, super-properties, or inverse properties defined. Both its domain and range are restricted to \"time:ProperInterval\".",
                "CQ": [
                    {
                        "axiom": "time:intervalEquals domain time:ProperInterval",
                        "CQ": [
                            "Can the property 'intervalEquals' be used with subjects that are not instances of 'ProperInterval'?",
                            "Are all values associated with the property 'intervalEquals' required to be of a specific type or class?",
                            "What types of entities can serve as the domain for the property 'intervalEquals'?"
                        ]
                    },
                    {
                        "axiom": "time:intervalEquals range time:ProperInterval",
                        "CQ": [
                            "Can the property 'intervalEquals' have a value that is not of type 'ProperInterval'?",
                            "Is every instance associated with 'intervalEquals' necessarily a 'ProperInterval'?",
                            "Which types of entities can be the range of the property 'intervalEquals'?"
                        ]
                    }
                ]
            },
            "time:day": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:DateTimeDescription"
                    ],
                    "range": [
                        "xsd:gDay"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:day\" relates an instance of time:DateTimeDescription to a value of type xsd:gDay, representing the day component of a date. It has no specified characteristics, super-properties, or inverse properties.",
                "CQ": [
                    {
                        "axiom": "time:day domain time:DateTimeDescription",
                        "CQ": [
                            "Can the property 'day' be used with subjects other than 'DateTimeDescription'?",
                            "Is every entity that uses the property 'day' necessarily a 'DateTimeDescription'?",
                            "What types of entities are permitted as the domain of the property 'day'?"
                        ]
                    },
                    {
                        "axiom": "time:day range xsd:gDay",
                        "CQ": [
                            "Is every value assigned to the property 'time:day' necessarily of type xsd:gDay?",
                            "Can 'time:day' ever be associated with an object outside the range xsd:gDay?",
                            "What types of values are permitted as the range of the property 'time:day'?"
                        ]
                    }
                ]
            },
            "time:years": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "time:DurationDescription"
                    ],
                    "range": [
                        "xsd:decimal"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:years\" relates instances of \"time:DurationDescription\" to a decimal value representing a duration in years. It does not have explicitly defined characteristics, super-properties, or inverse properties. Its range is restricted to decimal values (xsd:decimal).",
                "CQ": [
                    {
                        "axiom": "time:years domain time:DurationDescription",
                        "CQ": [
                            "Can 'time:years' be used with entities that are not instances of 'time:DurationDescription'?",
                            "Is 'time:DurationDescription' the only possible domain for the property 'time:years'?",
                            "What types of objects are allowed as the subject when using the property 'time:years'?"
                        ]
                    },
                    {
                        "axiom": "time:years range xsd:decimal",
                        "CQ": [
                            "Does the property 'time:years' ever refer to a value that is not of type xsd:decimal?",
                            "Are there datatypes other than xsd:decimal that can appear as the range of 'time:years'?",
                            "Is it necessary for every 'time:years' value to be an xsd:decimal?"
                        ]
                    }
                ]
            }
        }
    },
    "stuff": {
        "classes": {
            "AbstractRegion": {
                "axiom": {
                    "subClassOf": [
                        "Region"
                    ]
                },
                "description": "AbstractRegion is defined as a subclass of Region. This indicates that every instance of AbstractRegion is also an instance of Region, inheriting all its characteristics. The class formalizes a conceptual or non-physical specialization of Region, but no additional constraints or distinctions are provided beyond its subsumption in the hierarchy.",
                "CQ": [
                    {
                        "axiom": "AbstractRegion subClassOf Region",
                        "CQ": [
                            "Is AbstractRegion encompassed within the wider class of Region?",
                            "Which subclasses fall under the class Region, including AbstractRegion?",
                            "To what parent class does AbstractRegion pertain?"
                        ]
                    }
                ]
            },
            "PhysicalRegion": {
                "axiom": {
                    "subClassOf": [
                        "Region"
                    ]
                },
                "description": "PhysicalRegion is defined as a subclass of Region, indicating that every PhysicalRegion is, by definition, a type of Region. This formalization distinguishes PhysicalRegion as a specific conceptual or spatial area within the broader class of Region, with characteristics or properties that pertain to physical or tangible attributes.",
                "CQ": [
                    {
                        "axiom": "PhysicalRegion subClassOf Region",
                        "CQ": [
                            "Is PhysicalRegion classified as a specific type of Region?",
                            "Which kinds of regions include PhysicalRegion as a specialized form?",
                            "What are the immediate superclasses of PhysicalRegion within the ontology?"
                        ]
                    }
                ]
            },
            "om-1:Quantity": {
                "axiom": {
                    "subClassOf": [
                        "Region"
                    ]
                },
                "description": "om-1:Quantity is defined as a subclass of Region. This means every om-1:Quantity is categorized within the broader class of Region, inheriting its general characteristics. No additional restrictions or differentiations are provided, so om-1:Quantity serves to represent a more specific concept or type of Region within the ontology.",
                "CQ": [
                    {
                        "axiom": "om-1:Quantity subClassOf Region",
                        "CQ": [
                            "Does om-1:Quantity fall under the general category of Region?",
                            "Which subclasses are defined under Region, such as om-1:Quantity?",
                            "What higher-level concepts is om-1:Quantity classified as a member of?"
                        ]
                    }
                ]
            },
            "AmountOfStuff": {
                "axiom": {
                    "subClassOf": [
                        "PhysicalEndurant"
                    ]
                },
                "description": "AmountOfStuff is defined as a subclass of PhysicalEndurant, representing entities that persist through time while maintaining their identity as physical particulars. According to the current description, it aligns with DOLCE's notion of \"amount of matter\" and applies exclusively to specific, individual entities (particulars) rather than universals or collections. This class captures the concept of a definite quantity of physical substance.",
                "CQ": [
                    {
                        "axiom": "AmountOfStuff subClassOf PhysicalEndurant",
                        "CQ": [
                            "Is AmountOfStuff classified under the broader category of PhysicalEndurant?",
                            "Which specific concepts are included as subclasses of PhysicalEndurant, such as AmountOfStuff?",
                            "What are the higher-level categories to which AmountOfStuff is assigned?"
                        ]
                    }
                ]
            },
            "Container": {
                "axiom": {
                    "subClassOf": [
                        "PhysicalEndurant"
                    ],
                    "propertyRestrictions": [
                        "[inverseOf containedIn only (AmountOfStuff or PhysicalObject)]"
                    ]
                },
                "description": "Container is defined as a subclass of PhysicalEndurant. It is characterized by the restriction that it may only be the inverse of containedIn with respect to AmountOfStuff or PhysicalObject; that is, only an AmountOfStuff or a PhysicalObject can be contained in a Container. The class is intended for use when an amount of matter is not self-contained, emphasizing the role of the Container in physically enclosing or holding such entities.",
                "CQ": [
                    {
                        "axiom": "Container subClassOf PhysicalEndurant",
                        "CQ": [
                            "Is Container categorized under the broader type of PhysicalEndurant?",
                            "Which entities are specified as subtypes of PhysicalEndurant, including Container?",
                            "To what higher-level classes does Container belong within the ontology?"
                        ]
                    },
                    {
                        "axiom": "Container propertyRestrictions [inverseOf containedIn only (AmountOfStuff or PhysicalObject)]",
                        "CQ": [
                            "Is every entity that contains a Container required to be either an AmountOfStuff or a PhysicalObject?",
                            "Can a Container be contained in something other than an AmountOfStuff or a PhysicalObject?",
                            "Does the property 'containedIn' for a Container necessarily exclude all classes except AmountOfStuff and PhysicalObject?"
                        ]
                    }
                ]
            },
            "PhysicalObject": {
                "axiom": {
                    "subClassOf": [
                        "PhysicalEndurant"
                    ],
                    "disjointWith": [
                        "Stuff"
                    ]
                },
                "description": "PhysicalObject is defined as a subclass of PhysicalEndurant, indicating that it inherits all characteristics of entities that persist through time while maintaining their identity. It is explicitly disjoint with Stuff, which means no individual can simultaneously be both a PhysicalObject and Stuff. This class represents discrete, countable entities as opposed to unstructured or undifferentiated substances.",
                "CQ": [
                    {
                        "axiom": "PhysicalObject subClassOf PhysicalEndurant",
                        "CQ": [
                            "Are all PhysicalObjects instances of the broader class PhysicalEndurant?",
                            "Which subclasses are encompassed by PhysicalEndurant, such as PhysicalObject?",
                            "Under which higher-level categories is PhysicalObject classified within the ontology?"
                        ]
                    },
                    {
                        "axiom": "PhysicalObject disjointWith Stuff",
                        "CQ": [
                            "How does the ontology characterize the distinction between PhysicalObject and Stuff?",
                            "Is there any entity that can simultaneously be classified as both PhysicalObject and Stuff?",
                            "Which classes are specified as mutually exclusive with Stuff within the ontology?"
                        ]
                    }
                ]
            },
            "Stuff": {
                "axiom": {
                    "subClassOf": [
                        "PhysicalEndurant"
                    ],
                    "propertyRestrictions": [
                        "[hasState only StuffState]",
                        "[hasState max 3 StuffState]"
                    ]
                },
                "description": "Stuff is defined as a subclass of PhysicalEndurant and is synonymous with \"Amount of Matter.\" Members of this class are restricted to having only states that are instances of StuffState, with a maximum of three such states per individual. This formalization captures the notion of matter existing in a limited number of distinct possible states.",
                "CQ": [
                    {
                        "axiom": "Stuff subClassOf PhysicalEndurant",
                        "CQ": [
                            "Is Stuff classified under the category of PhysicalEndurant?",
                            "What are the subclasses encompassed by PhysicalEndurant, including Stuff?",
                            "To which higher-level classes does Stuff belong?"
                        ]
                    },
                    {
                        "axiom": "Stuff propertyRestrictions [hasState only StuffState]",
                        "CQ": [
                            "Is every state associated with Stuff necessarily classified as a StuffState?",
                            "Can Stuff exist in any state other than those categorized as StuffState?",
                            "Does Stuff restrict all of its hasState relations to only refer to entities of type StuffState?"
                        ]
                    },
                    {
                        "axiom": "Stuff propertyRestrictions [hasState max 3 StuffState]",
                        "CQ": [
                            "Is Stuff permitted to have no more than three hasState relationships with StuffState individuals?",
                            "Does the ontology restrict any Stuff instance such that it cannot be associated with more than three StuffState values via hasState?",
                            "Are there circumstances under which Stuff might exceed three hasState links to StuffState, or is this strictly limited?"
                        ]
                    }
                ]
            },
            "AssociationalColloid": {
                "axiom": {
                    "subClassOf": [
                        "Colloid"
                    ]
                },
                "description": "AssociationalColloid is defined as a subclass of Colloid. This class includes colloidal systems characterized by the association of amphiphilic molecules, such as hydrophobic/hydrophilic interactions. Typical examples are micellar colloids (e.g., soap solutions), where molecules form aggregates known as micelles. Properties specific to this class can include aggregation numbers—typically a range—reflecting the number of molecules per micelle, often determined by the critical micelle concentration.",
                "CQ": [
                    {
                        "axiom": "AssociationalColloid subClassOf Colloid",
                        "CQ": [
                            "Does AssociationalColloid fall under the broader category of Colloid?",
                            "Which types of Colloid include AssociationalColloid as a more specific instance?",
                            "What are the parent categories for AssociationalColloid in the ontology?"
                        ]
                    }
                ]
            },
            "DispersionColloid": {
                "axiom": {
                    "subClassOf": [
                        "Colloid"
                    ]
                },
                "description": "DispersionColloid is defined as a subclass of Colloid and represents the most common type among colloids, distinguishing it from other types within the Colloid category.",
                "CQ": [
                    {
                        "axiom": "DispersionColloid subClassOf Colloid",
                        "CQ": [
                            "Is DispersionColloid classified as a specific form of Colloid?",
                            "Which subclasses are encompassed by the concept of Colloid?",
                            "What broader classes does DispersionColloid belong to?"
                        ]
                    }
                ]
            },
            "MolecularColloid": {
                "axiom": {
                    "subClassOf": [
                        "Colloid"
                    ]
                },
                "description": "MolecularColloid is defined as a subclass of Colloid, representing colloidal systems in which the constituent molecules are sufficiently large to exhibit the characteristic behaviors of particles with intermediate sizes, typical of other types of colloids. Examples include latex and other materials with large polymers, such as starchy substances. This classification emphasizes the particle size and molecular structure as distinguishing factors within the broader colloid category.",
                "CQ": [
                    {
                        "axiom": "MolecularColloid subClassOf Colloid",
                        "CQ": [
                            "Is MolecularColloid categorized under the broader class of Colloid?",
                            "Which specific subtypes of Colloid encompass MolecularColloid?",
                            "To what overarching categories does MolecularColloid pertain within the ontology?"
                        ]
                    }
                ]
            },
            "Atom": {
                "axiom": {
                    "subClassOf": [
                        "PhysicalObject"
                    ]
                },
                "description": "Atom is defined as a subclass of PhysicalObject, indicating that every atom is considered a physical entity within the ontology. This classification places atoms within the broader category of tangible objects, establishing their role as fundamental physical units that compose matter.",
                "CQ": [
                    {
                        "axiom": "Atom subClassOf PhysicalObject",
                        "CQ": [
                            "Does Atom fall under the category of PhysicalObject?",
                            "Which entities are more specific than PhysicalObject, such as Atom?",
                            "What broader classes does Atom belong to within the ontology?"
                        ]
                    }
                ]
            },
            "Ion": {
                "axiom": {
                    "subClassOf": [
                        "PhysicalObject"
                    ]
                },
                "description": "Ion is defined as a subclass of PhysicalObject, meaning it represents a kind of physical entity. No further property restrictions, disjointness, or specific characteristics are asserted in the axioms, so the class encompasses any physical object identified as an ion—typically, an atom or molecule with a net electric charge due to the loss or gain of electrons.",
                "CQ": [
                    {
                        "axiom": "Ion subClassOf PhysicalObject",
                        "CQ": [
                            "Is an Ion classified as a type of PhysicalObject?",
                            "Which entities are specified as subclasses under PhysicalObject, such as Ion?",
                            "What overarching categories encompass Ion as a subordinate type?"
                        ]
                    }
                ]
            },
            "Molecule": {
                "axiom": {
                    "subClassOf": [
                        "PhysicalObject"
                    ],
                    "propertyRestrictions": [
                        "[hasPart some Atom]"
                    ]
                },
                "description": "Molecule is defined as a subclass of PhysicalObject, with the restriction that every instance must have at least one part that is an Atom. In this ontology, molecule is modeled as a class representing types of chemically bonded structures rather than specific individual molecules. Molecules are characterized by being composed of two or more atoms held together by chemical bonds, although the axiom specifies only the presence of at least one atom as a part to maintain simplicity and logical properties such as transitivity. This modeling choice supports reasoning about molecular types while staying within the constraints of first-order logic.",
                "CQ": [
                    {
                        "axiom": "Molecule subClassOf PhysicalObject",
                        "CQ": [
                            "Does Molecule fall under the broader classification of PhysicalObject?",
                            "Which entities are classified as more specific forms of PhysicalObject, such as Molecule?",
                            "In which overarching categories can Molecule be placed within the ontology?"
                        ]
                    },
                    {
                        "axiom": "Molecule propertyRestrictions [hasPart some Atom]",
                        "CQ": [
                            "Is every molecule composed of at least one atom as a part?",
                            "Must a molecule necessarily possess the 'hasPart' relationship with an atom?",
                            "Can a molecule exist without having any atom as one of its parts?"
                        ]
                    }
                ]
            },
            "MultiMoleculeParticle": {
                "axiom": {
                    "subClassOf": [
                        "PhysicalObject"
                    ]
                },
                "description": "MultiMoleculeParticle is defined as a subclass of PhysicalObject, referring to a particle composed of multiple molecules, such as those found in suspensions or colloidal droplets (distinct from sub-atomic particles). This class is intended for cases where individual entities are aggregates of molecules, and, as noted in its annotation, is considered a pragmatic solution within the ontology structure rather than a rigorous chemical classification.",
                "CQ": [
                    {
                        "axiom": "MultiMoleculeParticle subClassOf PhysicalObject",
                        "CQ": [
                            "Does MultiMoleculeParticle fall under the broader class of PhysicalObject?",
                            "Which entities are categorized as types of PhysicalObject, specifically including MultiMoleculeParticle?",
                            "What are the more abstract categories to which MultiMoleculeParticle is assigned?"
                        ]
                    }
                ]
            },
            "Bulk": {
                "axiom": {
                    "subClassOf": [
                        "Stuff",
                        "(([hasGranuleType some (Molecule or MultiMoleculeParticle)] or [hasPartStuff some Stuff]) and ([hasGranuleType only (Molecule or MultiMoleculeParticle)] or [hasPartStuff only Stuff]))",
                        "(MixedStuff or StructuredPureStuff)"
                    ]
                },
                "description": "Bulk is a subclass of Stuff, further constrained to entities whose granule type is either Molecule or MultiMoleculeParticle, or which consist only of or contain as parts other Stuff. Bulk is equivalent to either MixedStuff or StructuredPureStuff, and cannot be UnstructuredPureStuff. In practical contexts, particularly in the food industry, Bulk refers to goods such as soy beans, coffee, nuts, pet food, tea, whole grains, and sugar—items typically handled and measured in aggregate amounts rather than as individual units. The class accommodates various granularities (e.g., bags of nuts or packets of cookies are counted in units of the contained item type) and encompasses different material compositions, such as StructuredPureStuff (like sugar), HomogenousMixedStuff (such as stabilized peanut butter), and HeterogenousMixedStuff (e.g., pet food), highlighting the concept’s versatility in bulk goods handling and classification.",
                "CQ": [
                    {
                        "axiom": "Bulk subClassOf Stuff",
                        "CQ": [
                            "Is Bulk classified as a kind of Stuff?",
                            "What are the more specific entities encompassed by Stuff, including Bulk?",
                            "Which broader categories include Bulk among their subclasses?"
                        ]
                    },
                    {
                        "axiom": "Bulk subClassOf (([hasGranuleType some (Molecule or MultiMoleculeParticle)] or [hasPartStuff some Stuff]) and ([hasGranuleType only (Molecule or MultiMoleculeParticle)] or [hasPartStuff only Stuff]))",
                        "CQ": [
                            "What properties distinguish Bulk in terms of hasGranuleType and hasPartStuff from its parent classes?",
                            "Which entities are classified as Bulk based on their granule types or part stuff composition?",
                            "How is the superclass of Bulk defined with respect to Molecule, MultiMoleculeParticle, and Stuff?"
                        ]
                    },
                    {
                        "axiom": "Bulk subClassOf (MixedStuff or StructuredPureStuff)",
                        "CQ": [
                            "Is Bulk classified under either MixedStuff or StructuredPureStuff categories?",
                            "Which concepts are more specific than the union of MixedStuff and StructuredPureStuff, such as Bulk?",
                            "Into which overarching groups does Bulk fit within the ontology: MixedStuff, StructuredPureStuff, or both?"
                        ]
                    }
                ]
            },
            "MixedStuff": {
                "axiom": {
                    "subClassOf": [
                        "Stuff",
                        "(Stuff and [hasPartStuff min 2 Stuff])"
                    ],
                    "disjointWith": [
                        "PureStuff"
                    ]
                },
                "description": "MixedStuff is defined as a subclass of Stuff, with the additional restriction that any instance must have at least two component parts, each of which is itself an instance of Stuff (expressed as having at least two 'hasPartStuff' relations to Stuff). MixedStuff is explicitly disjoint with PureStuff, ensuring no overlap between mixtures and pure substances.\n\nConceptually, MixedStuff captures the essence of mixtures as materials composed of variable proportions of distinct, observable components that can be physically separated. The classification is based on the nature and roles of the components, explicitly excluding cases such as different phases of the same substance (e.g., ice in water), which remain PureStuff. Colloids are considered MixedStuff only when composed of different kinds of Stuff, maintaining the requirement for distinct observable constituents.",
                "CQ": [
                    {
                        "axiom": "MixedStuff subClassOf Stuff",
                        "CQ": [
                            "Is MixedStuff one of the more specific types classified under Stuff?",
                            "Which categories does MixedStuff conceptually fall under, according to its hierarchical classification?",
                            "What distinct subtypes are encompassed by the broader class Stuff, such as MixedStuff?"
                        ]
                    },
                    {
                        "axiom": "MixedStuff subClassOf (Stuff and [hasPartStuff min 2 Stuff])",
                        "CQ": [
                            "Is every MixedStuff an instance that has at least two Stuff components?",
                            "What are the necessary conditions for something to be identified as MixedStuff in relation to Stuff and hasPartStuff?",
                            "Which subclasses of Stuff require a minimum of two hasPartStuff relationships to other Stuff?"
                        ]
                    },
                    {
                        "axiom": "MixedStuff disjointWith PureStuff",
                        "CQ": [
                            "How does the ontology define the distinction between MixedStuff and PureStuff?",
                            "Is there any instance that can belong to both MixedStuff and PureStuff?",
                            "Which classes are logically incompatible with PureStuff according to the ontology?"
                        ]
                    }
                ]
            },
            "PureStuff": {
                "axiom": {
                    "subClassOf": [
                        "Stuff"
                    ],
                    "equivalentClass": [
                        "(Stuff and [hasGranuleType exactly 1 (Atom or Molecule or MultiMoleculeParticle)] and [hasPartStuff exactly 1 (PureBulk or StructuredPureStuff or UnstructuredPureStuff)] and [hasStuffDistribution exactly 1 EvenDistribution])"
                    ]
                },
                "description": "PureStuff is defined as a subclass of Stuff and is equivalent to entities that have exactly one granule type (either an Atom, Molecule, or MultiMoleculeParticle), exactly one part stuff (which must be either PureBulk, StructuredPureStuff, or UnstructuredPureStuff), and exactly one stuff distribution (which must be an EvenDistribution). In the literature, PureStuff has also been referred to as 'Unstructured stuff' and 'discrete stuff', and is characterized by being composed of a single kind of molecule or atomic constituent—for example, water composed only of H₂O molecules or pure manganese made up solely of manganese atoms. This is an idealized category, as real-world materials are only pure relative to detection limits.",
                "CQ": [
                    {
                        "axiom": "PureStuff subClassOf Stuff",
                        "CQ": [
                            "Is Stuff a more general category that includes PureStuff?",
                            "Which entities are categorized as more specific instances under Stuff, such as PureStuff?",
                            "To what broader groupings does PureStuff logically belong?"
                        ]
                    },
                    {
                        "axiom": "PureStuff equivalentClass (Stuff and [hasGranuleType exactly 1 (Atom or Molecule or MultiMoleculeParticle)] and [hasPartStuff exactly 1 (PureBulk or StructuredPureStuff or UnstructuredPureStuff)] and [hasStuffDistribution exactly 1 EvenDistribution])",
                        "CQ": [
                            "Is PureStuff equivalent to the intersection of Stuff, entities with exactly one granule type being Atom, Molecule, or MultiMoleculeParticle, exactly one part being PureBulk, StructuredPureStuff, or UnstructuredPureStuff, and exactly one even distribution of matter?",
                            "Does every PureStuff instance necessarily have one and only one granule type from Atom, Molecule, or MultiMoleculeParticle, one and only one component from PureBulk, StructuredPureStuff, or UnstructuredPureStuff, and exactly one even stuff distribution?",
                            "Can PureStuff be completely characterized as Stuff with a single granule type chosen from Atom, Molecule, or MultiMoleculeParticle, a single part chosen from PureBulk, StructuredPureStuff, or UnstructuredPureStuff, and one even distribution?"
                        ]
                    }
                ]
            },
            "Colloid": {
                "axiom": {
                    "subClassOf": [
                        "HomogeneousMixture"
                    ],
                    "equivalentClass": [
                        "(HomogeneousMixture and [hasPartStuff exactly 1 (Stuff and [hasState some StuffState] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some StuffState] and [inverseOf srInheresIn some DispersedPhase])] and [hasNrOfPhase some DatatypeRestriction(xsd:int minInclusive 2)])"
                    ]
                },
                "description": "Colloid is defined as a subclass of HomogeneousMixture, characterized as a homogeneous mixture consisting of exactly one portion of 'dispersed phase' (stuff with a particular state inhering in the dispersed phase) microscopically and evenly dispersed throughout exactly one portion of 'continuous medium' (stuff with its own state inhering in the continuous phase). Colloids are distinguished from solutions by having more than one phase—while solutions have a single phase, colloids feature distinct continuous and dispersed phases. This composition is captured formally via equivalency axioms referencing specific part-whole and state relationships. Typical examples include milk, mayonnaise, agar, and fog. Colloids exhibit the Tyndall effect, making a light beam visible as it scatters off colloidal particles. Relationships between the dispersed and continuous substances are handled in the respective phase classes and are not inherent to the substances themselves.",
                "CQ": [
                    {
                        "axiom": "Colloid subClassOf HomogeneousMixture",
                        "CQ": [
                            "Is a Colloid classified under the broader group of HomogeneousMixture?",
                            "Which specific mixtures are included as subclasses of HomogeneousMixture, such as Colloid?",
                            "What are the parent categories that Colloid belongs to within the ontology?"
                        ]
                    },
                    {
                        "axiom": "Colloid equivalentClass (HomogeneousMixture and [hasPartStuff exactly 1 (Stuff and [hasState some StuffState] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some StuffState] and [inverseOf srInheresIn some DispersedPhase])] and [hasNrOfPhase some DatatypeRestriction(xsd:int minInclusive 2)])",
                        "CQ": [
                            "Is a Colloid equivalent to a homogeneous mixture that contains exactly one part of stuff in a continuous medium state and exactly one part of stuff in a dispersed phase state?",
                            "Does every Colloid necessarily have at least two phases according to the number of phases property?",
                            "Is a Colloid fully defined as the intersection of HomogeneousMixture and mixtures with specific parts characterized by their state and location in continuous medium and dispersed phase?"
                        ]
                    }
                ]
            },
            "Solution": {
                "axiom": {
                    "subClassOf": [
                        "HomogeneousMixture"
                    ],
                    "equivalentClass": [
                        "(HomogeneousMixture and [hasPartStuff some (Stuff and [inverseOf srInheresIn some Solute] and [hasGranuleType only (Atom or Ion or Molecule)])] and [hasPartStuff some (Stuff and [inverseOf srInheresIn some Solvent] and [hasGranuleType only (Atom or Ion or Molecule)])] and [hasNrOfPhase some DatatypeRestriction(xsd:int minInclusive 2)])"
                    ]
                },
                "description": "Solution is formally defined as a subclass of HomogeneousMixture, characterized by a uniform composition throughout. Equivalent class axioms specify that a Solution consists of at least two “stuffs”: one acting as a Solute and one as a Solvent, each of which is inhered by some HomogeneousMixture and has a granule type restricted to Atom, Ion, or Molecule. Furthermore, a Solution must have a number of phases exactly equal to one. The class captures chemical systems where the mixing occurs at the molecular level, resulting in homogeneity; this applies to solutions in all physical states (solid, liquid, or gas). The definition intentionally omits \"dilute solution\" due to the lack of a clear-cut quantitative threshold.",
                "CQ": [
                    {
                        "axiom": "Solution subClassOf HomogeneousMixture",
                        "CQ": [
                            "Does Solution fall under the general group of HomogeneousMixture?",
                            "Which specific classes are categorized as HomogeneousMixture, such as Solution?",
                            "To what broader mixture types does Solution belong within the ontology?"
                        ]
                    },
                    {
                        "axiom": "Solution equivalentClass (HomogeneousMixture and [hasPartStuff some (Stuff and [inverseOf srInheresIn some Solute] and [hasGranuleType only (Atom or Ion or Molecule)])] and [hasPartStuff some (Stuff and [inverseOf srInheresIn some Solvent] and [hasGranuleType only (Atom or Ion or Molecule)])] and [hasNrOfPhase some DatatypeRestriction(xsd:int minInclusive 2)])",
                        "CQ": [
                            "Is a Solution necessarily defined as a homogeneous mixture that includes at least one part composed of a Solute and another part composed of a Solvent, both being stuff with granule types restricted to atom, ion, or molecule and having at least two phases?",
                            "Does the definition of Solution require its parts to consist solely of stuff inhering in solute or solvent, each having only granule types atom, ion, or molecule?",
                            "Can Solution be characterized as the intersection of HomogeneousMixture and entities possessing both solute-stuff and solvent-stuff components—each constrained by granule type and a minimum number of phases?"
                        ]
                    }
                ]
            },
            "ContinuousMedium": {
                "axiom": {
                    "subClassOf": [
                        "StuffRole"
                    ],
                    "disjointWith": [
                        "DispersedPhase"
                    ],
                    "propertyRestrictions": [
                        "[colloidFormingRelation some DispersedPhase]"
                    ]
                },
                "description": "ContinuousMedium is defined as a subclass of StuffRole and is also known as dispersion medium. It is explicitly disjoint with DispersedPhase, ensuring that no individual can simultaneously belong to both classes. Members of ContinuousMedium are characterized by having a colloidFormingRelation to at least one DispersedPhase, reflecting their essential role in colloidal systems as the medium in which dispersed phases are distributed.",
                "CQ": [
                    {
                        "axiom": "ContinuousMedium subClassOf StuffRole",
                        "CQ": [
                            "Is ContinuousMedium classified under the broader grouping of StuffRole?",
                            "Which entities are defined as more specific subclasses of StuffRole, such as ContinuousMedium?",
                            "To which higher-order categories is ContinuousMedium formally assigned?"
                        ]
                    },
                    {
                        "axiom": "ContinuousMedium disjointWith DispersedPhase",
                        "CQ": [
                            "What logical separation is defined between ContinuousMedium and DispersedPhase within the ontology?",
                            "Can an entity simultaneously be classified as both ContinuousMedium and DispersedPhase?",
                            "Which classes are explicitly stated as mutually exclusive with DispersedPhase?"
                        ]
                    },
                    {
                        "axiom": "ContinuousMedium propertyRestrictions [colloidFormingRelation some DispersedPhase]",
                        "CQ": [
                            "Is it required that a ContinuousMedium participates in at least one colloidFormingRelation with a DispersedPhase?",
                            "Must every instance of ContinuousMedium have a colloidFormingRelation to some DispersedPhase entity?",
                            "Does the definition of ContinuousMedium necessitate a relationship via colloidFormingRelation with a DispersedPhase?"
                        ]
                    }
                ]
            },
            "DispersedPhase": {
                "axiom": {
                    "subClassOf": [
                        "StuffRole"
                    ]
                },
                "description": "DispersedPhase is defined as a subclass of StuffRole. It refers to the role played by a substance within the context of a colloidal system, specifically as the phase that is distributed throughout another phase (the ContinuousMedium). The relationship (colloidFormingRelation) exists between the DispersedPhase and the ContinuousMedium themselves, rather than their respective bearers (stuffs), emphasizing that simply combining the substance bearers does not suffice to form a colloid. Proper mixing is required to achieve a homogeneous colloidal mixture; the ability of a substance to serve as either dispersed phase or continuous medium depends on the specific system being formed.",
                "CQ": [
                    {
                        "axiom": "DispersedPhase subClassOf StuffRole",
                        "CQ": [
                            "Is DispersedPhase classified under the broader category of StuffRole?",
                            "Which roles are encompassed within StuffRole, including DispersedPhase?",
                            "What higher-level categories does DispersedPhase belong to?"
                        ]
                    }
                ]
            },
            "Solute": {
                "axiom": {
                    "subClassOf": [
                        "StuffRole"
                    ],
                    "disjointWith": [
                        "Solvent"
                    ],
                    "propertyRestrictions": [
                        "[inverseOf solutionFormingRelation some Solvent]"
                    ]
                },
                "description": "Solute is defined as a subclass of StuffRole and is explicitly disjoint from Solvent, ensuring that no entity can simultaneously be both a Solute and a Solvent. Formally, every Solute is related through the inverse of solutionFormingRelation to some Solvent, indicating its essential role in solution formation. Conceptually, a Solute is a substance that is dissolved in another substance (the Solvent).",
                "CQ": [
                    {
                        "axiom": "Solute subClassOf StuffRole",
                        "CQ": [
                            "Is Solute categorized as a type of StuffRole?",
                            "Which entities are classified as subtypes under StuffRole, such as Solute?",
                            "What broader role-based classes encompass Solute as an instance?"
                        ]
                    },
                    {
                        "axiom": "Solute disjointWith Solvent",
                        "CQ": [
                            "What is the formal distinction between Solute and Solvent in the ontology?",
                            "Is there any entity that can belong to both the Solute and Solvent classes?",
                            "Which entities or classes are explicitly specified as disjoint with Solute?"
                        ]
                    },
                    {
                        "axiom": "Solute propertyRestrictions [inverseOf solutionFormingRelation some Solvent]",
                        "CQ": [
                            "Is every Solute necessarily involved in at least one solutionFormingRelation with a Solvent?",
                            "Must a Solute participate in the inverse of solutionFormingRelation with some entity that is a Solvent?",
                            "Does being a Solute require the existence of a related Solvent via the solutionFormingRelation property?"
                        ]
                    }
                ]
            },
            "Solvent": {
                "axiom": {
                    "subClassOf": [
                        "StuffRole"
                    ]
                },
                "description": "Solvent is defined as a subclass of StuffRole. It represents a substance in which another substance, known as the solute, is dissolved. Solvents are essential participants in solution-forming relations, acting as the medium that enables solutes to dissolve and sometimes facilitating various chemical reactions during the dissolution process. This formalization emphasizes the role-based nature of solvents within chemical systems.",
                "CQ": [
                    {
                        "axiom": "Solvent subClassOf StuffRole",
                        "CQ": [
                            "Is Solvent classified under the broader category of StuffRole?",
                            "Which roles are encompassed by StuffRole, including Solvent?",
                            "What are the more general roles associated with Solvent?"
                        ]
                    }
                ]
            },
            "Distribution": {
                "axiom": {
                    "subClassOf": [
                        "Quality"
                    ],
                    "propertyRestrictions": [
                        "[hasQuale some (EvenDistribution or UnevenDistribution)]"
                    ]
                },
                "description": "Distribution is defined as a subclass of Quality and is characterized by a property restriction specifying that it must have at least one quale that is either an EvenDistribution or an UnevenDistribution. This means that any instance of Distribution necessarily possesses a quality that can be further identified as representing either an even or uneven distribution pattern.",
                "CQ": [
                    {
                        "axiom": "Distribution subClassOf Quality",
                        "CQ": [
                            "Is Distribution classified under the broader group of Quality?",
                            "What specific kinds of Quality include Distribution as a subclass?",
                            "Which overarching categories encompass Distribution?"
                        ]
                    },
                    {
                        "axiom": "Distribution propertyRestrictions [hasQuale some (EvenDistribution or UnevenDistribution)]",
                        "CQ": [
                            "Does a Distribution necessarily require the presence of a quale that is either an EvenDistribution or an UnevenDistribution?",
                            "Can a Distribution possess a quale that is not classified as EvenDistribution or UnevenDistribution?",
                            "Is every quale associated with a Distribution restricted to the types EvenDistribution or UnevenDistribution?"
                        ]
                    }
                ]
            },
            "Drop": {
                "axiom": {
                    "subClassOf": [
                        "Piece"
                    ]
                },
                "description": "Drop is defined as a subclass of Piece, representing a specific type of piece, such as a drop of blood. This class serves as an example to illustrate a distinct, often small and discrete, portion or quantity of a substance.",
                "CQ": [
                    {
                        "axiom": "Drop subClassOf Piece",
                        "CQ": [
                            "Is Drop categorized under the broader class of Piece?",
                            "Which subclasses fall under the category of Piece, with Drop included?",
                            "What broader classes include Drop within their hierarchy?"
                        ]
                    }
                ]
            },
            "Lump": {
                "axiom": {
                    "subClassOf": [
                        "Piece"
                    ]
                },
                "description": "Lump is defined as a subclass of Piece, representing a specific type of piece. The class is exemplified by instances such as a \"lump of clay,\" illustrating that a lump is considered a particular form or configuration of a piece. This class serves as an example of how the concept of \"piece\" can be specialized.",
                "CQ": [
                    {
                        "axiom": "Lump subClassOf Piece",
                        "CQ": [
                            "Is Lump classified as a type of Piece?",
                            "Which entities are specified as subtypes under Piece, such as Lump?",
                            "What broader classes encompass Lump within the ontology?"
                        ]
                    }
                ]
            },
            "Slice": {
                "axiom": {
                    "subClassOf": [
                        "Piece"
                    ]
                },
                "description": "Slice is defined as a subclass of Piece, representing a specific type of piece. As indicated in the example, a Slice could refer to a slice of bread, illustrating that this class captures instances where something is cut or divided into thin, flat portions.",
                "CQ": [
                    {
                        "axiom": "Slice subClassOf Piece",
                        "CQ": [
                            "Is Slice categorized under the broader class of Piece?",
                            "Which subtypes fall under the category of Piece, including Slice?",
                            "What overarching types does Slice inherit from within the hierarchy?"
                        ]
                    }
                ]
            },
            "Emulsion": {
                "axiom": {
                    "subClassOf": [
                        "DispersionColloid"
                    ],
                    "equivalentClass": [
                        "(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some DispersedPhase])])"
                    ]
                },
                "description": "Emulsion is defined as a subclass of DispersionColloid and is equivalent to a DispersionColloid with exactly one liquid in the continuous medium and exactly one liquid in the dispersed phase. The class axiom enforces that an emulsion must have two distinct parts: a liquid continuous medium and a liquid dispersed phase. Examples include milk, mayonnaise, and hand cream, where both the continuous and dispersed phases are liquids. This classification captures the key characteristic of emulsions as colloidal mixtures of two immiscible liquids.",
                "CQ": [
                    {
                        "axiom": "Emulsion subClassOf DispersionColloid",
                        "CQ": [
                            "Is Emulsion classified under the broader category of DispersionColloid?",
                            "Which more specific types are contained within DispersionColloid, including Emulsion?",
                            "What higher-level categories does Emulsion belong to within the context of colloids?"
                        ]
                    },
                    {
                        "axiom": "Emulsion equivalentClass (DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some DispersedPhase])])",
                        "CQ": [
                            "Does an Emulsion necessarily consist of exactly one part that is a liquid state Stuff inhering in the ContinuousMedium and exactly one part that is a liquid state Stuff inhering in the DispersedPhase?",
                            "Is Emulsion logically equivalent to the intersection of DispersionColloid and those having exactly one liquid Stuff in the ContinuousMedium and exactly one liquid Stuff in the DispersedPhase?",
                            "Can Emulsion be fully defined as a DispersionColloid with two and only two parts: each a liquid Stuff, where one part inheres in the ContinuousMedium and the other in the DispersedPhase?"
                        ]
                    }
                ]
            },
            "Foam": {
                "axiom": {
                    "subClassOf": [
                        "DispersionColloid"
                    ],
                    "equivalentClass": [
                        "(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Gas] and [inverseOf srInheresIn some DispersedPhase])] and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some ContinuousMedium])])"
                    ]
                },
                "description": "Foam is defined as a subclass of DispersionColloid and is equivalent to a DispersionColloid composed of exactly one dispersed phase (gas) and exactly one continuous medium (liquid). Formally, a foam must have as part exactly one \"stuff\" that is a gas phase (dispersed) and one \"stuff\" that is a liquid phase (continuous medium). Examples include whipped cream and shaving cream. In summary, a foam is a type of colloidal system in which gas bubbles are dispersed in a continuous liquid medium.",
                "CQ": [
                    {
                        "axiom": "Foam subClassOf DispersionColloid",
                        "CQ": [
                            "Is Foam classified under the DispersionColloid category?",
                            "Which types are more specific forms of DispersionColloid, such as Foam?",
                            "What broader classes encompass Foam in the hierarchy?"
                        ]
                    },
                    {
                        "axiom": "Foam equivalentClass (DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Gas] and [inverseOf srInheresIn some DispersedPhase])] and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some ContinuousMedium])])",
                        "CQ": [
                            "Does a Foam necessarily consist of exactly one part that is a Stuff with a gaseous state inhering in a DispersedPhase and exactly one part that is a Stuff with a liquid state inhering in a ContinuousMedium?",
                            "Is Foam defined as the intersection of DispersionColloid and systems comprising precisely one gaseous phase as the dispersed part and one liquid phase as the continuous medium?",
                            "Are all instances of Foam required to have both a single gas-phase dispersed component and a single liquid-phase continuous component as part stuffs?"
                        ]
                    }
                ]
            },
            "Gel": {
                "axiom": {
                    "subClassOf": [
                        "DispersionColloid"
                    ],
                    "equivalentClass": [
                        "(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some DispersedPhase])] and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some ContinuousMedium])])"
                    ]
                },
                "description": "Gel is a subclass of DispersionColloid and is defined as a colloidal system consisting of exactly one solid continuous medium and exactly one liquid dispersed phase. This means that in a gel, the solid component forms a continuous network throughout the material, while the liquid is dispersed within it. Examples include agar, gelatin, and jelly. The class axioms ensure that any instance of Gel must have a solid state as the continuous medium and a liquid as the dispersed phase, formalizing its structural composition as described in the referenced sources.",
                "CQ": [
                    {
                        "axiom": "Gel subClassOf DispersionColloid",
                        "CQ": [
                            "Does Gel fall under the broader classification of DispersionColloid?",
                            "Which substances are classified as more specific instances of DispersionColloid, such as Gel?",
                            "What more general colloid categories does Gel conceptually fit into?"
                        ]
                    },
                    {
                        "axiom": "Gel equivalentClass (DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some DispersedPhase])] and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some ContinuousMedium])])",
                        "CQ": [
                            "Must every Gel contain exactly one part that is a Stuff in the liquid state inhering in a DispersedPhase, and exactly one part that is a Stuff in the solid state inhering in a ContinuousMedium?",
                            "Is Gel equivalent to the intersection of DispersionColloid and those entities composed of precisely one liquid Stuff in a DispersedPhase and one solid Stuff in a ContinuousMedium?",
                            "Does the definition of Gel permit any hasPartStuff relationships other than one liquid Stuff in a DispersedPhase and one solid Stuff in a ContinuousMedium?"
                        ]
                    }
                ]
            },
            "LiquidAerosol": {
                "axiom": {
                    "subClassOf": [
                        "DispersionColloid"
                    ],
                    "equivalentClass": [
                        "(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Gas] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some DispersedPhase])])"
                    ]
                },
                "description": "LiquidAerosol is a subclass of DispersionColloid, formally defined as a system where the continuous medium is a gas and the dispersed phase is a liquid. It is equivalent to a DispersionColloid that contains exactly one part of a gaseous substance inhering in the continuous medium and exactly one part of a liquid substance inhering in the dispersed phase. Examples include fog, mist, and hair sprays.",
                "CQ": [
                    {
                        "axiom": "LiquidAerosol subClassOf DispersionColloid",
                        "CQ": [
                            "Is DispersionColloid a broader classification that encompasses LiquidAerosol?",
                            "Which types of DispersionColloid specifically include LiquidAerosol as a subclass?",
                            "Under what higher-level categories is LiquidAerosol formally organized?"
                        ]
                    },
                    {
                        "axiom": "LiquidAerosol equivalentClass (DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Gas] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some DispersedPhase])])",
                        "CQ": [
                            "Is every LiquidAerosol necessarily composed of one part that is Stuff in a gaseous state inhering in a ContinuousMedium, and one part that is Stuff in a liquid state inhering in a DispersedPhase?",
                            "Is LiquidAerosol logically defined as an intersection of DispersionColloid with those entities having exactly one gaseous part in a ContinuousMedium and exactly one liquid part in a DispersedPhase?",
                            "Can a LiquidAerosol exist without meeting the precise conditions of having these two distinct parts each with the required state and inherence?"
                        ]
                    }
                ]
            },
            "Sol": {
                "axiom": {
                    "subClassOf": [
                        "DispersionColloid"
                    ],
                    "equivalentClass": [
                        "(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some DispersedPhase])])"
                    ]
                },
                "description": "Sol is defined as a subclass of DispersionColloid, precisely characterized as a colloidal system consisting of exactly one liquid continuous medium and exactly one solid dispersed phase. The class axiom specifies that the system contains:  \n- one part (Stuff) in a liquid state inhering in the continuous medium, and  \n- one part (Stuff) in a solid state inhering in the dispersed phase.  \nThis structure excludes the possibility of additional types of states or phases within the sol. Typical examples include pigmented ink and blood, where solid particles are dispersed uniformly within a liquid medium.",
                "CQ": [
                    {
                        "axiom": "Sol subClassOf DispersionColloid",
                        "CQ": [
                            "Does Sol fall under the category of DispersionColloid?",
                            "Which specific types are encompassed by DispersionColloid, such as Sol?",
                            "What parent classes are associated with Sol in this context?"
                        ]
                    },
                    {
                        "axiom": "Sol equivalentClass (DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some DispersedPhase])])",
                        "CQ": [
                            "Does every Sol necessarily include exactly one part that is Stuff with a liquid state inhering in a ContinuousMedium, and exactly one part that is Stuff with a solid state inhering in a DispersedPhase?",
                            "Is Sol equivalent to the intersection of DispersionColloid and those entities that have exactly one liquid-stated part in a continuous medium and exactly one solid-stated part in a dispersed phase?",
                            "Are all members of Sol precisely those DispersionColloid instances that possess one and only one liquid state part associated with a ContinuousMedium and one and only one solid state part associated with a DispersedPhase?"
                        ]
                    }
                ]
            },
            "SolidAerosol": {
                "axiom": {
                    "subClassOf": [
                        "DispersionColloid"
                    ],
                    "equivalentClass": [
                        "(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Gas] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some DispersedPhase])])"
                    ]
                },
                "description": "SolidAerosol is defined as a subclass of DispersionColloid, and is equivalent to a DispersionColloid that contains exactly one component of Stuff in the gas state, serving as the continuous medium, and exactly one component of Stuff in the solid state, serving as the dispersed phase. This class formalization describes systems where solid particles are dispersed throughout a gaseous medium. Typical examples include smoke, clouds with solid particulates, and other solid particulates suspended in gas.",
                "CQ": [
                    {
                        "axiom": "SolidAerosol subClassOf DispersionColloid",
                        "CQ": [
                            "Is SolidAerosol classified under the broader group of DispersionColloid?",
                            "Which types fall under DispersionColloid, specifically including SolidAerosol?",
                            "What parent classes does SolidAerosol belong to within the colloid hierarchy?"
                        ]
                    },
                    {
                        "axiom": "SolidAerosol equivalentClass (DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Gas] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some DispersedPhase])])",
                        "CQ": [
                            "Is SolidAerosol equivalent to entities that are DispersionColloid and contain exactly one part that is solid in a dispersed phase, and exactly one part that is gas in a continuous medium?",
                            "Does every SolidAerosol necessarily have precisely one Gas component distributed in a continuous medium and one Solid component distributed in a dispersed phase?",
                            "Is the class SolidAerosol fully captured by the intersection of DispersionColloid and those entities with exactly one solid part in a dispersed phase and exactly one gas part in a continuous medium?"
                        ]
                    }
                ]
            },
            "SolidFoam": {
                "axiom": {
                    "subClassOf": [
                        "DispersionColloid"
                    ],
                    "equivalentClass": [
                        "(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Gas] and [inverseOf srInheresIn some DispersedPhase])] and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some ContinuousMedium])])"
                    ]
                },
                "description": "SolidFoam is a subclass of DispersionColloid, characterized by having a solid as the continuous medium and a gas as the dispersed phase. Formally, each instance of SolidFoam consists of exactly one part that is a solid (constituting the continuous medium), and exactly one part that is a gas (constituting the dispersed phase). Examples include aerogel and styrofoam. This structure ensures that SolidFoam represents colloidal systems where gas is dispersed throughout a solid matrix.",
                "CQ": [
                    {
                        "axiom": "SolidFoam subClassOf DispersionColloid",
                        "CQ": [
                            "Is SolidFoam categorized as a more specific instance under DispersionColloid?",
                            "Which subclasses are encompassed by DispersionColloid, specifically including SolidFoam?",
                            "To which upper-level categories does SolidFoam conceptually correspond within colloidal classifications?"
                        ]
                    },
                    {
                        "axiom": "SolidFoam equivalentClass (DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Gas] and [inverseOf srInheresIn some DispersedPhase])] and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some ContinuousMedium])])",
                        "CQ": [
                            "Does every SolidFoam necessarily have exactly one part consisting of gas-state stuff inhering in a dispersed phase and exactly one part consisting of solid-state stuff inhering in a continuous medium?",
                            "Is SolidFoam equivalent to the intersection of DispersionColloid and those entities with one gaseous dispersed phase part and one solid continuous medium part?",
                            "Can SolidFoam be fully defined as a DispersionColloid with precisely one gas-state dispersed phase part and one solid-state continuous medium part?"
                        ]
                    }
                ]
            },
            "SolidSol": {
                "axiom": {
                    "subClassOf": [
                        "DispersionColloid"
                    ],
                    "equivalentClass": [
                        "(DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some DispersedPhase])])"
                    ]
                },
                "description": "SolidSol is defined as a subclass of DispersionColloid and is equivalent to a DispersionColloid that contains exactly one portion of solid-state stuff as the continuous medium and exactly one portion of solid-state stuff as the dispersed phase. In other words, both the dispersed phase and the continuous medium are solids. SolidSol colloids are exemplified by materials like cranberry glass, where solid particles are dispersed within a solid medium.",
                "CQ": [
                    {
                        "axiom": "SolidSol subClassOf DispersionColloid",
                        "CQ": [
                            "Does SolidSol fall within the classification of DispersionColloid?",
                            "Which types are classified as subcategories under DispersionColloid, such as SolidSol?",
                            "To what broader classes does SolidSol pertain within the ontology's structure?"
                        ]
                    },
                    {
                        "axiom": "SolidSol equivalentClass (DispersionColloid and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff exactly 1 (Stuff and [hasState some Solid] and [inverseOf srInheresIn some DispersedPhase])])",
                        "CQ": [
                            "Does every SolidSol necessarily have exactly one part consisting of Stuff in a solid state inhering in a ContinuousMedium and exactly one part consisting of Stuff in a solid state inhering in a DispersedPhase?",
                            "Is SolidSol equivalent to the intersection of DispersionColloid and those with exactly one solid Stuff part in the continuous medium and exactly one solid Stuff part in the dispersed phase?",
                            "Can a SolidSol be fully defined as a DispersionColloid with two solid-state Stuff components, each uniquely inhering in either the continuous medium or the dispersed phase?"
                        ]
                    }
                ]
            },
            "EvenDistribution": {
                "axiom": {
                    "subClassOf": [
                        "AbstractRegion"
                    ]
                },
                "description": "EvenDistribution is defined as a subclass of AbstractRegion. This indicates that every instance of EvenDistribution is a type of abstract region, but with additional implied properties that distinguish it from other abstract regions. No further property restrictions, equivalence, or disjointness axioms are specified. The class likely represents distributions characterized by some notion of \"evenness\" or uniformity, although the specifics are not constrained by the given axiom.",
                "CQ": [
                    {
                        "axiom": "EvenDistribution subClassOf AbstractRegion",
                        "CQ": [
                            "Is EvenDistribution classified as a type within AbstractRegion?",
                            "Which entities are direct specializations of AbstractRegion, such as EvenDistribution?",
                            "What broader classes does EvenDistribution hierarchically fall under?"
                        ]
                    }
                ]
            },
            "NumberOfPhases": {
                "axiom": {
                    "subClassOf": [
                        "AbstractRegion"
                    ],
                    "propertyRestrictions": [
                        "[hasDataValue some xsd:nonNegativeInteger]"
                    ]
                },
                "description": "NumberOfPhases is defined as a subclass of AbstractRegion, where each instance must have at least one associated data value of type xsd:nonNegativeInteger (i.e., a non-negative integer). This class provides an alternative way of modeling the number of phases, as opposed to direct datatype usage. The formalization requires that every NumberOfPhases individual be characterized by a non-negative integer value indicating the number of phases.",
                "CQ": [
                    {
                        "axiom": "NumberOfPhases subClassOf AbstractRegion",
                        "CQ": [
                            "Is NumberOfPhases categorized under the broader class of AbstractRegion?",
                            "Which entities are subclasses of AbstractRegion, such as NumberOfPhases?",
                            "What general classes does NumberOfPhases fall under within the ontology?"
                        ]
                    },
                    {
                        "axiom": "NumberOfPhases propertyRestrictions [hasDataValue some xsd:nonNegativeInteger]",
                        "CQ": [
                            "Must every instance of NumberOfPhases possess a hasDataValue property with a non-negative integer value?",
                            "Is it required that NumberOfPhases is associated with at least one hasDataValue that is a non-negative integer?",
                            "Does the class NumberOfPhases necessarily include only those entities that have a hasDataValue of some non-negative integer type?"
                        ]
                    }
                ]
            },
            "UnevenDistribution": {
                "axiom": {
                    "subClassOf": [
                        "AbstractRegion"
                    ]
                },
                "description": "UnevenDistribution is defined as a subclass of AbstractRegion. This indicates that every instance of UnevenDistribution is a specific kind of AbstractRegion, likely representing regions or segments where distribution is not uniform. No additional constraints or properties are specified, so this class primarily serves to differentiate non-uniform or irregular distributions within the broader category of abstract regions.",
                "CQ": [
                    {
                        "axiom": "UnevenDistribution subClassOf AbstractRegion",
                        "CQ": [
                            "Is UnevenDistribution classified under the broader group of AbstractRegion?",
                            "What kinds of specialized regions are encompassed by AbstractRegion, specifically including UnevenDistribution?",
                            "To which higher-level categories does UnevenDistribution pertain within the ontology?"
                        ]
                    }
                ]
            },
            "Gas": {
                "axiom": {
                    "subClassOf": [
                        "StuffState"
                    ]
                },
                "description": "Gas is defined as a subclass of StuffState. This classification indicates that Gas represents a particular state or condition in which a substance (stuff) can exist. Any individual classified as Gas inherits the general properties of StuffState, marking it as a type of physical state distinct from other possible states (such as solid or liquid).",
                "CQ": [
                    {
                        "axiom": "Gas subClassOf StuffState",
                        "CQ": [
                            "Is Gas classified as a specific type within the broader StuffState category?",
                            "What entities are categorized more specifically than StuffState, including Gas?",
                            "Which higher-level classes encompass Gas?"
                        ]
                    }
                ]
            },
            "Liquid": {
                "axiom": {
                    "subClassOf": [
                        "StuffState"
                    ]
                },
                "description": "liquid is defined as a subclass of StuffState, representing a specific physical state of matter. All instances of liquid must also be instances of StuffState, situating liquids within the broader classification of material states such as solid or gas. No additional property restrictions or disjointness axioms are specified for this class.",
                "CQ": [
                    {
                        "axiom": "Liquid subClassOf StuffState",
                        "CQ": [
                            "Is Liquid classified under the broader category of StuffState?",
                            "What other specific states are encompassed by StuffState besides Liquid?",
                            "Which general categories in the ontology include Liquid as a member?"
                        ]
                    }
                ]
            },
            "Solid": {
                "axiom": {
                    "subClassOf": [
                        "StuffState"
                    ]
                },
                "description": "Solid is defined as a subclass of StuffState, representing a particular state of matter. This class encompasses all entities that exist in the solid state, distinguishing them from other possible states such as liquid or gas. All instances of Solid inherit the characteristics of StuffState.",
                "CQ": [
                    {
                        "axiom": "Solid subClassOf StuffState",
                        "CQ": [
                            "Does Solid fall under the broader grouping of StuffState?",
                            "Which specific states of stuff are categorized as subtypes of StuffState, such as Solid?",
                            "What are the general states that Solid is classified within?"
                        ]
                    }
                ]
            },
            "HeterogeneousMixture": {
                "axiom": {
                    "subClassOf": [
                        "MixedStuff"
                    ],
                    "disjointWith": [
                        "HomogeneousMixture"
                    ],
                    "propertyRestrictions": [
                        "[hasGranuleType min 2 (Molecule or MultiMoleculeParticle)]",
                        "[hasPartStuff min 2 (MixedStuff or PureStuff)]",
                        "[hasStuffDistribution exactly 1 UnevenDistribution]"
                    ]
                },
                "description": "HeterogeneousMixture is a subclass of MixedStuff, formally disjoint from HomogeneousMixture, meaning no mixture can be both heterogeneous and homogeneous simultaneously. Members of this class are defined by having at least two different granule types (each being a Molecule or MultiMoleculeParticle) and consisting of a minimum of two distinct parts, each being either MixedStuff or PureStuff. Additionally, every HeterogeneousMixture exhibits exactly one instance of UnevenDistribution, ensuring that its components are not distributed uniformly. As described, a HeterogeneousMixture is a combination of different substances, often with visibly different particle sizes, which do not react chemically and can be separated by physical means (such as filtration). Unlike a homogeneous mixture, any portion of a heterogeneous mixture may differ in composition from the whole, unless special care is taken in selecting the portion.",
                "CQ": [
                    {
                        "axiom": "HeterogeneousMixture subClassOf MixedStuff",
                        "CQ": [
                            "Does HeterogeneousMixture fall under the broader classification of MixedStuff?",
                            "What are all the subclasses categorized within MixedStuff, including HeterogeneousMixture?",
                            "Which higher-level types does HeterogeneousMixture belong to in the ontology?"
                        ]
                    },
                    {
                        "axiom": "HeterogeneousMixture disjointWith HomogeneousMixture",
                        "CQ": [
                            "How are HeterogeneousMixture and HomogeneousMixture differentiated within the ontology?",
                            "Is any mixture classified as both HeterogeneousMixture and HomogeneousMixture simultaneously?",
                            "Which mixture types are specified as disjoint with HomogeneousMixture?"
                        ]
                    },
                    {
                        "axiom": "HeterogeneousMixture propertyRestrictions [hasGranuleType min 2 (Molecule or MultiMoleculeParticle)]",
                        "CQ": [
                            "Does a HeterogeneousMixture always contain at least two types of granule that are classified as either Molecule or MultiMoleculeParticle?",
                            "Is it possible for a HeterogeneousMixture to have fewer than two Molecule or MultiMoleculeParticle granule types?",
                            "Are HeterogeneousMixtures defined by the presence of a minimum of two granule types, limited to the categories of Molecule and MultiMoleculeParticle?"
                        ]
                    },
                    {
                        "axiom": "HeterogeneousMixture propertyRestrictions [hasPartStuff min 2 (MixedStuff or PureStuff)]",
                        "CQ": [
                            "Is it required for a HeterogeneousMixture to contain at least two components classified as either MixedStuff or PureStuff?",
                            "Can a HeterogeneousMixture exist if it has fewer than two parts that are either MixedStuff or PureStuff?",
                            "Does every instance of HeterogeneousMixture necessarily consist of multiple parts, each falling under MixedStuff or PureStuff?"
                        ]
                    },
                    {
                        "axiom": "HeterogeneousMixture propertyRestrictions [hasStuffDistribution exactly 1 UnevenDistribution]",
                        "CQ": [
                            "Must every HeterogeneousMixture have exactly one distribution of its constituents classified as UnevenDistribution?",
                            "Is it possible for a HeterogeneousMixture to have more than one or less than one hasStuffDistribution relationship to UnevenDistribution?",
                            "Does the definition of HeterogeneousMixture ensure it cannot have hasStuffDistribution to any type other than a single UnevenDistribution?"
                        ]
                    }
                ]
            },
            "HomogeneousMixture": {
                "axiom": {
                    "subClassOf": [
                        "MixedStuff"
                    ],
                    "propertyRestrictions": [
                        "[hasGranuleType only (Atom or Ion or Molecule)]",
                        "[hasStuffDistribution exactly 1 EvenDistribution]"
                    ]
                },
                "description": "HomogeneousMixture is a subclass of MixedStuff, defined by two main characteristics: (1) it contains only atoms, ions, or molecules as its granule types, and (2) it requires exactly one EvenDistribution of its constituent substances, ensuring macroscopic sameness throughout. This means that the mixed substances are uniformly distributed in all parts of the matter. Unlike some stricter definitions that limit homogeneous mixtures to solutions, this class inclusively encompasses mixtures with uniform distribution (including some colloids), with further refinement distinguished in its subclasses.",
                "CQ": [
                    {
                        "axiom": "HomogeneousMixture subClassOf MixedStuff",
                        "CQ": [
                            "Is HomogeneousMixture categorized under the broader class of MixedStuff?",
                            "Which specific types fall under MixedStuff, including HomogeneousMixture?",
                            "What are the direct parent classes of HomogeneousMixture?"
                        ]
                    },
                    {
                        "axiom": "HomogeneousMixture propertyRestrictions [hasGranuleType only (Atom or Ion or Molecule)]",
                        "CQ": [
                            "Are all granule types present in a HomogeneousMixture necessarily restricted to atoms, ions, or molecules?",
                            "Can a HomogeneousMixture have any granule type other than atom, ion, or molecule via the 'hasGranuleType' property?",
                            "Does having a granule type outside of atom, ion, or molecule prevent a mixture from being classified as a HomogeneousMixture?"
                        ]
                    },
                    {
                        "axiom": "HomogeneousMixture propertyRestrictions [hasStuffDistribution exactly 1 EvenDistribution]",
                        "CQ": [
                            "Must every HomogeneousMixture have exactly one hasStuffDistribution property value that is an EvenDistribution?",
                            "Is it required that a HomogeneousMixture cannot have more than one or fewer than one hasStuffDistribution, and that the distribution must be EvenDistribution?",
                            "Does any instance of HomogeneousMixture necessarily possess a single hasStuffDistribution of type EvenDistribution?"
                        ]
                    }
                ]
            },
            "LeastPortion": {
                "axiom": {
                    "subClassOf": [
                        "Portion",
                        "not [hasPortion some Portion]"
                    ]
                },
                "description": "LeastPortion is defined as a subclass of Portion that does not contain any further Portion as a part (i.e., it cannot be subdivided into smaller portions). It represents the smallest possible portion that still exhibits all macroscopic properties characteristic of its kind, analogous to the concept of an atom in mereology, but specifically applied to \"stuffs\" or material substances. This ensures that individuals of LeastPortion are indivisible relative to the kind of material or substance under consideration.",
                "CQ": [
                    {
                        "axiom": "LeastPortion subClassOf Portion",
                        "CQ": [
                            "Does LeastPortion fall under the general classification of Portion?",
                            "Which specific types are included as subdivisions of Portion, such as LeastPortion?",
                            "What broader classes encompass LeastPortion in their hierarchy?"
                        ]
                    },
                    {
                        "axiom": "LeastPortion subClassOf not [hasPortion some Portion]",
                        "CQ": [
                            "Which entities are classified as LeastPortion under the restriction of not having any associated Portion via hasPortion?",
                            "Does being a member of LeastPortion imply the absence of any hasPortion relationship to Portion?",
                            "What classes are included in the category of entities that do not possess any Portion through the hasPortion property, such as LeastPortion?"
                        ]
                    }
                ]
            },
            "Piece": {
                "axiom": {
                    "subClassOf": [
                        "Portion"
                    ],
                    "propertyRestrictions": [
                        "[isSelfContainedScatteredPortionOf some AmountOfStuff]"
                    ]
                },
                "description": "Piece is defined as a subclass of Portion, characterized by the axiom that it is a self-contained, scattered portion of some AmountOfStuff. According to its description, \"Piece\" represents discrete, self-contained amounts—such as slices or lumps—that are distinct from the whole but still derive from it. This class formalization ensures that any instance of Piece must be both a Portion and a self-contained segment of an AmountOfStuff, supporting modeling of individual fragments or divisions of a larger substance.",
                "CQ": [
                    {
                        "axiom": "Piece subClassOf Portion",
                        "CQ": [
                            "Is every Piece an example of a Portion?",
                            "Which types fall under the broader class of Portion, such as Piece?",
                            "What are the more general categories that include Piece?"
                        ]
                    },
                    {
                        "axiom": "Piece propertyRestrictions [isSelfContainedScatteredPortionOf some AmountOfStuff]",
                        "CQ": [
                            "Is every Piece necessarily a self-contained scattered portion of some AmountOfStuff?",
                            "Can a Piece exist without being a self-contained scattered portion of an AmountOfStuff?",
                            "Are there any instances where a Piece is not associated through isSelfContainedScatteredPortionOf with an AmountOfStuff?"
                        ]
                    }
                ]
            },
            "MicellarColloid": {
                "axiom": {
                    "subClassOf": [
                        "AssociationalColloid"
                    ]
                },
                "description": "MicellarColloid is defined as a subclass of AssociationalColloid. Although the formal axioms do not distinguish it further from AssociationalColloid, the usage of the term \"MicellarColloid\" reflects domain-specific terminology differences between food physics and colloid chemistry. Therefore, individuals of this class share all characteristics of AssociationalColloid, with differentiation rooted primarily in contextual nomenclature rather than ontological structure.",
                "CQ": [
                    {
                        "axiom": "MicellarColloid subClassOf AssociationalColloid",
                        "CQ": [
                            "Is MicellarColloid classified under the broader group of AssociationalColloid?",
                            "Which classes are specialized instances of AssociationalColloid, including MicellarColloid?",
                            "What higher-level classes does MicellarColloid fall under within the ontology?"
                        ]
                    }
                ]
            },
            "Paste": {
                "axiom": {
                    "subClassOf": [
                        "Suspension"
                    ]
                },
                "description": "Paste is defined as a subclass of Suspension. It is characterized as a type of suspension with a reduced proportion of dispersion medium, in which the dispersed phase exhibits connectivity (i.e., the particles are linked or form a continuous structure). This differentiates pastes from other suspensions, where the dispersed phase may be unconnected and more freely suspended in the medium.",
                "CQ": [
                    {
                        "axiom": "Paste subClassOf Suspension",
                        "CQ": [
                            "Does Paste fall under the more general category of Suspension?",
                            "Which subclasses are encompassed by Suspension, specifically including Paste?",
                            "What broader classifications is Paste associated with in the ontology?"
                        ]
                    }
                ]
            },
            "PhysicalEndurant": {
                "axiom": {
                    "subClassOf": [
                        "Endurant"
                    ],
                    "disjointWith": [
                        "Role"
                    ],
                    "equivalentClass": [
                        "om-1:Phenomenon"
                    ]
                },
                "description": "PhysicalEndurant is a subclass of Endurant, representing entities that persist through time while maintaining their identity. It is explicitly disjoint with Role, meaning no instance can simultaneously be a PhysicalEndurant and a Role. Additionally, PhysicalEndurant is equivalent to om-1:Phenomenon, indicating that these two classes share the exact same set of individuals. This class is used to capture enduring phenomena in ontological modeling, distinct from roles that entities might play.",
                "CQ": [
                    {
                        "axiom": "PhysicalEndurant subClassOf Endurant",
                        "CQ": [
                            "Does PhysicalEndurant fall under the broader classification of Endurant?",
                            "Which subclasses are recognized within Endurant, with PhysicalEndurant as an example?",
                            "What higher-level categories is PhysicalEndurant associated with?"
                        ]
                    },
                    {
                        "axiom": "PhysicalEndurant disjointWith Role",
                        "CQ": [
                            "What ontological separation is established between PhysicalEndurant and Role?",
                            "Is any entity allowed to be classified as both PhysicalEndurant and Role simultaneously?",
                            "Which classes are defined as mutually exclusive with Role in the ontology?"
                        ]
                    },
                    {
                        "axiom": "PhysicalEndurant equivalentClass om-1:Phenomenon",
                        "CQ": [
                            "Is PhysicalEndurant identical to om-1:Phenomenon according to the ontology?",
                            "Can every instance of PhysicalEndurant be classified as an om-1:Phenomenon and vice versa?",
                            "Is the class PhysicalEndurant completely defined by and restricted to being om-1:Phenomenon?"
                        ]
                    }
                ]
            },
            "Role": {
                "axiom": {
                    "subClassOf": [
                        "Endurant"
                    ]
                },
                "description": "Role is defined as a subclass of Endurant, indicating that any individual classified as a Role is also necessarily an Endurant. This positions Role as an entity that persists through time while possibly undergoing changes. No further restrictions or disjointness conditions are specified for this class.",
                "CQ": [
                    {
                        "axiom": "Role subClassOf Endurant",
                        "CQ": [
                            "Is Role a specialized type of Endurant?",
                            "Which entities are classified under Endurant, including Role?",
                            "What broader classes encompass Role within the ontology?"
                        ]
                    }
                ]
            },
            "Portion": {
                "axiom": {
                    "subClassOf": [
                        "AmountOfStuff"
                    ],
                    "propertyRestrictions": [
                        "[portionOf some AmountOfStuff]"
                    ]
                },
                "description": "Portion is defined as a subclass of AmountOfStuff, representing a specific part or segment derived from a larger whole. Every Portion is characterized by the property restriction that it must be a portion of some AmountOfStuff, ensuring a relational dependency with another instance of AmountOfStuff. This formalization encapsulates the idea that a Portion cannot exist independently, but always as a part related to a greater quantity or whole.",
                "CQ": [
                    {
                        "axiom": "Portion subClassOf AmountOfStuff",
                        "CQ": [
                            "Does Portion fall under the general classification of AmountOfStuff?",
                            "Which concepts are more specific than AmountOfStuff, such as Portion?",
                            "What broader categories encompass Portion within the ontology?"
                        ]
                    },
                    {
                        "axiom": "Portion propertyRestrictions [portionOf some AmountOfStuff]",
                        "CQ": [
                            "Is every Portion necessarily a portion of some AmountOfStuff?",
                            "Is it required for a Portion to be linked via 'portionOf' to at least one AmountOfStuff instance?",
                            "Can a Portion exist without being associated with an AmountOfStuff through the 'portionOf' property?"
                        ]
                    }
                ]
            },
            "PureBulk": {
                "axiom": {
                    "subClassOf": [
                        "PureStuff"
                    ],
                    "equivalentClass": [
                        "(PureStuff and [hasGranuleType only MultiMoleculeParticle] and [hasGranuleType exactly 1 MultiMoleculeParticle])"
                    ]
                },
                "description": "PureBulk is a subclass of PureStuff, defined as equivalent to those entities that consist of PureStuff whose granule type is exclusively and exactly one type of MultiMoleculeParticle. This means all granules within a PureBulk are restricted to a single specified kind of multi-molecular particle, differentiating it from StructuredPureStuff and UnstructuredPureStuff where basis types may vary. Typical examples include a silo of soy beans, a packet of tea biscuits, or a bag of cashew nuts, where each bulk contains only one type of multi-molecular particulate basis.",
                "CQ": [
                    {
                        "axiom": "PureBulk subClassOf PureStuff",
                        "CQ": [
                            "Is PureBulk classified as a type of PureStuff?",
                            "Which entities are subclasses of PureStuff, such as PureBulk?",
                            "What are the broader classes that encompass PureBulk?"
                        ]
                    },
                    {
                        "axiom": "PureBulk equivalentClass (PureStuff and [hasGranuleType only MultiMoleculeParticle] and [hasGranuleType exactly 1 MultiMoleculeParticle])",
                        "CQ": [
                            "Is PureBulk equivalent to the class of PureStuff that has exactly one granule type, and that granule type is only MultiMoleculeParticle?",
                            "Does every instance of PureBulk necessarily have only one granule type, which must be a MultiMoleculeParticle, and must also be PureStuff?",
                            "Are all PureBulk entities strictly those PureStuff individuals with hasGranuleType limited to exactly one occurrence of MultiMoleculeParticle?"
                        ]
                    }
                ]
            },
            "StructuredPureStuff": {
                "axiom": {
                    "subClassOf": [
                        "PureStuff"
                    ],
                    "disjointWith": [
                        "UnstructuredPureStuff"
                    ],
                    "equivalentClass": [
                        "(PureStuff and [hasGranuleType only Molecule] and [hasGranuleType exactly 1 Molecule])"
                    ]
                },
                "description": "StructuredPureStuff is defined as a subclass of PureStuff and is disjoint with UnstructuredPureStuff, ensuring that no individual can be both StructuredPureStuff and UnstructuredPureStuff. Formally, StructuredPureStuff is equivalent to PureStuff that has granules exclusively of exactly one type of molecule. This class covers matter composed of a single molecular type (allowing for minor conformational variations or rare impurities), such as water (H₂O), table sugar, silica (SiO₂), or vitamin A. The synonym \"Compound\" applies here, reflecting the requirement that instances consist of precisely one molecular species, rather than just a single molecule.",
                "CQ": [
                    {
                        "axiom": "StructuredPureStuff subClassOf PureStuff",
                        "CQ": [
                            "Is StructuredPureStuff classified as a type of PureStuff?",
                            "Which categories include StructuredPureStuff as a more specific member in relation to PureStuff?",
                            "What broader classes encompass StructuredPureStuff, particularly regarding its relation to PureStuff?"
                        ]
                    },
                    {
                        "axiom": "StructuredPureStuff disjointWith UnstructuredPureStuff",
                        "CQ": [
                            "How does the ontology define the connection between StructuredPureStuff and UnstructuredPureStuff?",
                            "Is there any instance classified under both StructuredPureStuff and UnstructuredPureStuff?",
                            "Which classes are stated as mutually exclusive with UnstructuredPureStuff?"
                        ]
                    },
                    {
                        "axiom": "StructuredPureStuff equivalentClass (PureStuff and [hasGranuleType only Molecule] and [hasGranuleType exactly 1 Molecule])",
                        "CQ": [
                            "Is StructuredPureStuff equivalent to those PureStuff entities that have exactly one granule type, which must be a Molecule?",
                            "Must every instance of StructuredPureStuff have only one granule type, and must that granule type be a Molecule?",
                            "Is StructuredPureStuff defined as the intersection of PureStuff and entities restricted to exactly one granule type, which is solely a Molecule?"
                        ]
                    }
                ]
            },
            "UnstructuredPureStuff": {
                "axiom": {
                    "subClassOf": [
                        "PureStuff"
                    ],
                    "equivalentClass": [
                        "(PureStuff and [hasGranuleType only Atom] and [hasGranuleType exactly 1 Atom])"
                    ]
                },
                "description": "UnstructuredPureStuff is a subclass of PureStuff, formally defined as material that contains exactly one type of atom as its granular component (i.e., it satisfies the restriction [hasGranuleType only Atom] and [hasGranuleType exactly 1 Atom]). This means all constituent atoms are of the same atomic type, corresponding to the ontological equivalent of a chemical element (e.g., a quantity of helium or gold). This class is synonymous with the notion of an \"Element\" and disregards the presence of undetectable impurities. The definition intends that the \"one atom\" restriction refers to a single atomic type, not a single individual atom.",
                "CQ": [
                    {
                        "axiom": "UnstructuredPureStuff subClassOf PureStuff",
                        "CQ": [
                            "Is UnstructuredPureStuff included as a specific type within PureStuff?",
                            "Which subclasses fall under the category of PureStuff, such as UnstructuredPureStuff?",
                            "To what higher-level groups does UnstructuredPureStuff pertain?"
                        ]
                    },
                    {
                        "axiom": "UnstructuredPureStuff equivalentClass (PureStuff and [hasGranuleType only Atom] and [hasGranuleType exactly 1 Atom])",
                        "CQ": [
                            "Is UnstructuredPureStuff logically equivalent to the intersection of PureStuff and those with exactly one granule type, which must be Atom?",
                            "Does every instance of UnstructuredPureStuff have only one granule type, and that granule type is Atom?",
                            "Is UnstructuredPureStuff fully defined as a subclass of PureStuff that can have no granule types other than a single Atom?"
                        ]
                    }
                ]
            },
            "Region": {
                "axiom": {
                    "subClassOf": [
                        "Abstract"
                    ]
                },
                "description": "Region is defined as a subclass of Abstract, indicating that it represents an abstract concept rather than a physical entity. This classification implies that instances of Region are used to denote conceptual or non-physical areas, rather than tangible, material locations.",
                "CQ": [
                    {
                        "axiom": "Region subClassOf Abstract",
                        "CQ": [
                            "Is Region a specific type classified under Abstract?",
                            "What broader categories encompass Region as a subclass?",
                            "Which entities are defined as subclasses within Abstract, including Region?"
                        ]
                    }
                ]
            },
            "om-1:Unit_of_measure": {
                "axiom": {
                    "subClassOf": [
                        "Abstract"
                    ]
                },
                "description": "om-1:Unit_of_measure is defined as a subclass of Abstract, indicating that it represents a conceptual or non-physical entity within the ontology. This class is intended to capture the abstract nature of measurement units used to quantify physical or abstract quantities, rather than representing tangible objects themselves.",
                "CQ": [
                    {
                        "axiom": "om-1:Unit_of_measure subClassOf Abstract",
                        "CQ": [
                            "Is Unit_of_measure categorized under the broader class of Abstract?",
                            "Which subclasses fall under the Abstract category, such as Unit_of_measure?",
                            "What higher-level classes does Unit_of_measure inherit from?"
                        ]
                    }
                ]
            },
            "SolidHeterogeneousMixture": {
                "axiom": {
                    "subClassOf": [
                        "HeterogeneousMixture"
                    ],
                    "equivalentClass": [
                        "(HeterogeneousMixture and [hasPartStuff min 2 (Stuff and [hasState some Solid])])"
                    ]
                },
                "description": "SolidHeterogeneousMixture is defined as a subclass of HeterogeneousMixture and is equivalent to a HeterogeneousMixture that contains at least two distinct parts, each of which is a substance (Stuff) present in the solid state. It represents mixtures where the component materials remain physically separate and are not homogenized; for example, wood, which consists of compartmentalized solid components such as cellulose, hemicellulose, lignin, and various extractives (plant hormones, waxes, terpenes, etc.). This class characterizes solid-phase systems where heterogeneity is maintained at the physical or structural level.",
                "CQ": [
                    {
                        "axiom": "SolidHeterogeneousMixture subClassOf HeterogeneousMixture",
                        "CQ": [
                            "Is SolidHeterogeneousMixture categorized under the broader class of HeterogeneousMixture?",
                            "Which mixture types are subclasses of HeterogeneousMixture, such as SolidHeterogeneousMixture?",
                            "What are the more general classes that encompass SolidHeterogeneousMixture?"
                        ]
                    },
                    {
                        "axiom": "SolidHeterogeneousMixture equivalentClass (HeterogeneousMixture and [hasPartStuff min 2 (Stuff and [hasState some Solid])])",
                        "CQ": [
                            "Is every SolidHeterogeneousMixture necessarily a HeterogeneousMixture that contains at least two parts composed of Stuff in the solid state?",
                            "Is the class SolidHeterogeneousMixture logically equivalent to the intersection of HeterogeneousMixture and mixtures having a minimum of two solid-state Stuff components?",
                            "Can SolidHeterogeneousMixture be defined as a HeterogeneousMixture with at least two constituent parts which are solid kinds of Stuff?"
                        ]
                    }
                ]
            },
            "Suspension": {
                "axiom": {
                    "subClassOf": [
                        "HeterogeneousMixture",
                        "([hasGranuleType some Molecule] and [hasGranuleType some MultiMoleculeParticle])"
                    ],
                    "equivalentClass": [
                        "(HeterogeneousMixture and [hasPartStuff some (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff some (Stuff and [hasState some Solid] and [inverseOf srInheresIn some DispersedPhase])])"
                    ]
                },
                "description": "Suspension is defined as a subclass of HeterogeneousMixture, further characterized by containing granules that are either Molecules or MultiMoleculeParticles. Formally, it is equivalent to those heterogeneous mixtures that contain both a liquid (which acts as the continuous medium) and solid particles (which form the dispersed phase) as their constituent parts. Suspensions are heterogeneous mixtures where larger solid particles (>1 micron) are dispersed in a liquid and tend to separate out naturally through processes such as sedimentation, creaming, flocculation, or coalescence unless stabilized or homogenized. Typical examples include tomato juice and mud.",
                "CQ": [
                    {
                        "axiom": "Suspension subClassOf HeterogeneousMixture",
                        "CQ": [
                            "Does Suspension fall within the broader group of HeterogeneousMixture?",
                            "Which mixtures are classified as subtypes of HeterogeneousMixture, such as Suspension?",
                            "What are the higher-level mixture categories that encompass Suspension?"
                        ]
                    },
                    {
                        "axiom": "Suspension subClassOf ([hasGranuleType some Molecule] and [hasGranuleType some MultiMoleculeParticle])",
                        "CQ": [
                            "Does Suspension necessarily possess both Molecule and MultiMoleculeParticle granule types?",
                            "What types of granule composition are required for something to be classified as a Suspension?",
                            "Which broader categories, defined by granule composition, include Suspension as a specific subcategory?"
                        ]
                    },
                    {
                        "axiom": "Suspension equivalentClass (HeterogeneousMixture and [hasPartStuff some (Stuff and [hasState some Liquid] and [inverseOf srInheresIn some ContinuousMedium])] and [hasPartStuff some (Stuff and [hasState some Solid] and [inverseOf srInheresIn some DispersedPhase])])",
                        "CQ": [
                            "Is every Suspension necessarily a HeterogeneousMixture containing at least one part that is solid and inheres in a DispersedPhase, and at least one part that is liquid and inheres in a ContinuousMedium?",
                            "Can Suspension be defined as the intersection of HeterogeneousMixture and mixtures that possess both a liquid phase in a continuous medium and a solid phase in a dispersed phase?",
                            "Is Suspension equivalent to those mixtures that have both liquid and solid components, with each respective component inhering in ContinuousMedium and DispersedPhase?"
                        ]
                    }
                ]
            },
            "State": {
                "axiom": {
                    "subClassOf": [
                        "Perdurant"
                    ]
                },
                "description": "State is defined as a subclass of Perdurant, indicating that it represents a temporally extended entity or occurrence. As a Perdurant, a State exists over a period of time, rather than as an instantaneous or static entity. No further restrictions or distinctions are specified in the current axioms.",
                "CQ": [
                    {
                        "axiom": "State subClassOf Perdurant",
                        "CQ": [
                            "Is State a specialized form of Perdurant?",
                            "Which concepts are classified as subtypes of Perdurant, including State?",
                            "To which general categories is State hierarchically related within the ontology?"
                        ]
                    }
                ]
            },
            "StuffRole": {
                "axiom": {
                    "subClassOf": [
                        "Role"
                    ],
                    "propertyRestrictions": [
                        "[srInheresIn some Stuff]"
                    ]
                },
                "description": "StuffRole is a subclass of Role, defined by the axiom that it inheres in some instance of Stuff. This class represents the specific role that a 'stuff' (material substance) assumes within a mixture, indicating its functional participation or relevance in the context of that mixture.",
                "CQ": [
                    {
                        "axiom": "StuffRole subClassOf Role",
                        "CQ": [
                            "Is StuffRole categorized as a more specific type within the broader concept of Role?",
                            "Which subtypes fall under the umbrella of Role, specifically including StuffRole?",
                            "What are the overarching classes to which StuffRole belongs?"
                        ]
                    },
                    {
                        "axiom": "StuffRole propertyRestrictions [srInheresIn some Stuff]",
                        "CQ": [
                            "Is every StuffRole necessarily associated with at least one Stuff through the srInheresIn property?",
                            "Must a StuffRole have the srInheresIn relation to some instance of Stuff?",
                            "Does the existence of a StuffRole imply that it inheres in one or more Stuff via srInheresIn?"
                        ]
                    }
                ]
            },
            "StuffState": {
                "axiom": {
                    "subClassOf": [
                        "State"
                    ]
                },
                "description": "StuffState is defined as a subclass of State. It represents the general state in which a substance (or \"stuff\") exists, such as solid, liquid, or gas. While it is relevant for describing the phase of a specific material (e.g., water as ice, liquid, or vapor), the class also accommodates cases like colloids, where the states of mixed components are important. The focus of StuffState is on the state as a property of a substance in general, rather than on the particular state of an individual stuff. This provides a foundation for distinguishing and reasoning about the states of matter across different contexts, including mixtures and colloidal systems.",
                "CQ": [
                    {
                        "axiom": "StuffState subClassOf State",
                        "CQ": [
                            "Is StuffState categorized under the broader class of State?",
                            "Which subclasses fall under State, including StuffState?",
                            "What higher-level classes encompass StuffState?"
                        ]
                    }
                ]
            },
            "Endurant": {
                "axiom": {
                    "disjointWith": [
                        "Perdurant"
                    ]
                },
                "description": "Endurant is formally specified as a class disjoint with Perdurant, which ensures that no individual entity can be simultaneously classified as both an Endurant and a Perdurant. This distinction typically reflects the ontological separation between entities that persist wholly through time (Endurants, such as physical objects) and those that occur in or unfold over time (Perdurants, such as events or processes).",
                "CQ": [
                    {
                        "axiom": "Endurant disjointWith Perdurant",
                        "CQ": [
                            "How does the ontology formally separate Endurant and Perdurant classes?",
                            "Is there any instance that can simultaneously be classified as both Endurant and Perdurant?",
                            "What other ontology classes are specified as disjoint with Perdurant?"
                        ]
                    }
                ]
            }
        },
        "properties": {
            "scatterPortion": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "hasProperPart"
                    ],
                    "inverseOf": [
                        "scatteredPortionOf"
                    ]
                },
                "description": "The property \"scatterPortion\" represents a relationship between an original whole and a portion that was once a contiguous part of that whole but has become spatially or contextually separated over time. This property is a subproperty of \"hasProperPart\" and has \"scatteredPortionOf\" as its inverse. It has no explicitly defined domain or range restrictions. Typical examples include a slice of bread cut from a loaf or wine poured into a glass from a bottle. The property is useful for modeling portions that have been separated, with potential for further specialization according to whether the portion is associated with a container or not.",
                "CQ": [
                    {
                        "axiom": "scatterPortion domain None",
                        "CQ": [
                            "What entities can serve as the domain for the property 'scatterPortion'?",
                            "Is it correct that 'scatterPortion' does not specify any domain?",
                            "Can 'scatterPortion' relate to subjects other than those currently defined by the ontology?"
                        ]
                    },
                    {
                        "axiom": "scatterPortion range None",
                        "CQ": [
                            "Is it correct that the property 'scatterPortion' does not have a specified range?",
                            "What entities can be the range of the property 'scatterPortion'?",
                            "Can 'scatterPortion' be associated with objects of any type as its value?"
                        ]
                    },
                    {
                        "axiom": "scatterPortion subPropertyOf hasProperPart",
                        "CQ": [
                            "Is every use of the scatterPortion property implicitly covered by hasProperPart?",
                            "Which properties are classified as subproperties of hasProperPart in the ontology?",
                            "Does hasProperPart act as a superproperty for scatterPortion?"
                        ]
                    },
                    {
                        "axiom": "scatterPortion inverseOf scatteredPortionOf",
                        "CQ": [
                            "What is the ontological connection between the properties ‘scatterPortion’ and ‘scatteredPortionOf’?",
                            "If entity A scatterPortion B, does ontology entail that B scatteredPortionOf A?",
                            "Which property is defined as the inverse of ‘scatterPortion’ in the ontology?"
                        ]
                    }
                ]
            },
            "hasState": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "PhysicalEndurant"
                    ],
                    "range": [
                        "State"
                    ],
                    "subPropertyOf": [
                        "owl:topObjectProperty"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"hasState\" is an object property with no specifically defined characteristics and no inverse property. Its domain is restricted to \"PhysicalEndurant\" entities, and its range is limited to instances of \"State\". It is a sub-property of \"owl:topObjectProperty\", indicating general applicability among object properties. This property is used to relate physical endurants to their corresponding states.",
                "CQ": [
                    {
                        "axiom": "hasState domain PhysicalEndurant",
                        "CQ": [
                            "Can the property 'hasState' be associated with entities that are not PhysicalEndurants?",
                            "Are all entities with which 'hasState' is used necessarily of type PhysicalEndurant?",
                            "Which types of individuals can serve as the subject for the 'hasState' property?"
                        ]
                    },
                    {
                        "axiom": "hasState range State",
                        "CQ": [
                            "Can the property 'hasState' have a range other than State?",
                            "Is every object associated via 'hasState' necessarily a State?",
                            "What types of entities can appear as the value of the property 'hasState'?"
                        ]
                    },
                    {
                        "axiom": "hasState subPropertyOf owl:topObjectProperty",
                        "CQ": [
                            "Is hasState considered a subtype of owl:topObjectProperty?",
                            "What superproperties are associated with hasState in the property hierarchy?",
                            "Does hasState directly fall under the domain of owl:topObjectProperty?"
                        ]
                    }
                ]
            },
            "inheresIn": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "Role"
                    ],
                    "range": [
                        "PhysicalEndurant"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"inheresIn\" has no specified characteristics or super-properties. Its domain is restricted to the class \"Role,\" and its range is restricted to \"PhysicalEndurant.\" This indicates that \"inheresIn\" relates a Role to a PhysicalEndurant entity. No inverse property is defined.",
                "CQ": [
                    {
                        "axiom": "inheresIn domain Role",
                        "CQ": [
                            "Can the property 'inheresIn' be asserted for subjects that are not instances of Role?",
                            "Is there any instance of Role that cannot be the domain of the 'inheresIn' property?",
                            "What types of entities are permitted as the domain for the 'inheresIn' relationship?"
                        ]
                    },
                    {
                        "axiom": "inheresIn range PhysicalEndurant",
                        "CQ": [
                            "Can the property 'inheresIn' relate to anything other than a PhysicalEndurant as its object?",
                            "What types of entities are valid as the range for the property 'inheresIn'?",
                            "Is it possible for a value of 'inheresIn' to not be a PhysicalEndurant?"
                        ]
                    }
                ]
            },
            "stuffFormingRelation": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "(ContinuousMedium or DispersedPhase or Solute or Solvent)"
                    ],
                    "range": [
                        "(ContinuousMedium or DispersedPhase or Solute or Solvent)"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"stuffFormingRelation\" relates individuals that are either ContinuousMedium, DispersedPhase, Solute, or Solvent. It has no explicit property characteristics, super-properties, or inverses. This property is used to represent relationships that characterize the formation or interactions among substances within a mixture, such as surface tension effects, molecular interactions (e.g., hydrogen bonding), or compositional ratios (e.g., the proportional amounts required to form a mixture like lemonade). Both the domain and range are restricted to the aforementioned substance types.",
                "CQ": [
                    {
                        "axiom": "stuffFormingRelation domain (ContinuousMedium or DispersedPhase or Solute or Solvent)",
                        "CQ": [
                            "Can the property 'stuffFormingRelation' have subjects other than ContinuousMedium, DispersedPhase, Solute, or Solvent?",
                            "Are there any entities that cannot serve as a subject for the 'stuffFormingRelation' property?",
                            "What types of things can be the domain for the property 'stuffFormingRelation'?"
                        ]
                    },
                    {
                        "axiom": "stuffFormingRelation range (ContinuousMedium or DispersedPhase or Solute or Solvent)",
                        "CQ": [
                            "Is it possible for 'stuffFormingRelation' to relate to an entity that is not a ContinuousMedium, DispersedPhase, Solute, or Solvent?",
                            "Are all possible ranges for 'stuffFormingRelation' restricted to ContinuousMedium, DispersedPhase, Solute, or Solvent?",
                            "Which types of entities can serve as the range for the property 'stuffFormingRelation'?"
                        ]
                    }
                ]
            },
            "hasSelfContainedScatteredPortion": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "scatterPortion"
                    ],
                    "inverseOf": [
                        "isSelfContainedScatteredPortionOf"
                    ]
                },
                "description": "The property \"hasSelfContainedScatteredPortion\" relates to entities such as lumps, puddles, slices, or other discrete pieces. It has no explicitly defined domain or range restrictions and no defined characteristics. It is a sub-property of \"scatterPortion\" and has \"isSelfContainedScatteredPortionOf\" as its inverse property.",
                "CQ": [
                    {
                        "axiom": "hasSelfContainedScatteredPortion domain None",
                        "CQ": [
                            "What entities can act as the domain for the property 'hasSelfContainedScatteredPortion'?",
                            "Is it correct that 'hasSelfContainedScatteredPortion' does not have a specified domain?",
                            "Can 'hasSelfContainedScatteredPortion' relate subjects of any type, or are there restrictions?"
                        ]
                    },
                    {
                        "axiom": "hasSelfContainedScatteredPortion range None",
                        "CQ": [
                            "What can be the range of the property 'hasSelfContainedScatteredPortion'?",
                            "Is it correct that 'hasSelfContainedScatteredPortion' does not have a defined range?",
                            "Can 'hasSelfContainedScatteredPortion' relate to any type of object due to its unspecified range?"
                        ]
                    },
                    {
                        "axiom": "hasSelfContainedScatteredPortion subPropertyOf scatterPortion",
                        "CQ": [
                            "Is hasSelfContainedScatteredPortion considered a subproperty of scatterPortion?",
                            "Which properties are identified as subproperties of scatterPortion?",
                            "What are the direct superproperties of hasSelfContainedScatteredPortion within the ontology?"
                        ]
                    },
                    {
                        "axiom": "hasSelfContainedScatteredPortion inverseOf isSelfContainedScatteredPortionOf",
                        "CQ": [
                            "What is the connection between 'hasSelfContainedScatteredPortion' and 'isSelfContainedScatteredPortionOf' as defined in the ontology?",
                            "If entity A has a self-contained scattered portion B, does it follow that B is a self-contained scattered portion of A, according to the ontology?",
                            "Which property acts as the inverse of 'hasSelfContainedScatteredPortion'?"
                        ]
                    }
                ]
            },
            "portionOf": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "(AmountOfStuff or Stuff)"
                    ],
                    "range": [
                        "(AmountOfStuff or Stuff)"
                    ],
                    "subPropertyOf": [
                        "properPartOf"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"portionOf\" relates an entity of type AmountOfStuff or Stuff to another entity of the same type, representing a portion or part of the same kind of matter (e.g., a slice of cake to the cake, a glass of wine to the bottle of wine). The domain and range are both restricted to AmountOfStuff or Stuff. It is a sub-property of \"properPartOf\" and has no specified characteristics or inverse property. This property is intended for use with mass nouns or non-countable substances.",
                "CQ": [
                    {
                        "axiom": "portionOf domain (AmountOfStuff or Stuff)",
                        "CQ": [
                            "Does the property 'portionOf' have a domain different from 'AmountOfStuff' or 'Stuff'?",
                            "Are there any entities that can be the subject of 'portionOf' aside from 'AmountOfStuff' or 'Stuff'?",
                            "What types of entities are permitted as subjects of the 'portionOf' property?"
                        ]
                    },
                    {
                        "axiom": "portionOf range (AmountOfStuff or Stuff)",
                        "CQ": [
                            "Is every value used with the property 'portionOf' required to be either an AmountOfStuff or Stuff?",
                            "Can 'portionOf' have a range that is not AmountOfStuff or Stuff?",
                            "What entities are permitted as the range of the property 'portionOf'?"
                        ]
                    },
                    {
                        "axiom": "portionOf subPropertyOf properPartOf",
                        "CQ": [
                            "Is portionOf considered a subproperty of properPartOf?",
                            "What superproperties are associated with the portionOf property?",
                            "Which subproperties are defined under the properPartOf property?"
                        ]
                    }
                ]
            },
            "properContainedIn": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "properPartOf"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"properContainedIn\" has no explicitly defined characteristics, domain, or range restrictions. It is a sub-property of \"properPartOf,\" indicating that any relation expressed by \"properContainedIn\" also qualifies as a proper part relation. No inverse property is specified.",
                "CQ": [
                    {
                        "axiom": "properContainedIn domain None",
                        "CQ": [
                            "Is it correct that the property 'properContainedIn' does not specify a domain?",
                            "What possible domains could be assigned to the property 'properContainedIn'?",
                            "Can entities of any type be valid subjects for the property 'properContainedIn'?"
                        ]
                    },
                    {
                        "axiom": "properContainedIn range None",
                        "CQ": [
                            "Can the property 'properContainedIn' have any range, or is it intentionally left without a specific range?",
                            "What types of entities could validly appear as the object of the 'properContainedIn' property?",
                            "Is it correct that 'properContainedIn' is defined without any range restriction?"
                        ]
                    },
                    {
                        "axiom": "properContainedIn subPropertyOf properPartOf",
                        "CQ": [
                            "Is properPartOf a superproperty of properContainedIn?",
                            "What are the subproperties encompassed by properPartOf?",
                            "Which properties serve as superproperties for properContainedIn?"
                        ]
                    }
                ]
            },
            "hasPartStuff": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "hasProperPart"
                    ],
                    "inverseOf": [
                        "stuffPartOf"
                    ]
                },
                "description": "The property \"hasPartStuff\" lacks explicit domain and range constraints, and does not possess any special property characteristics. It is specified as a subproperty of \"hasProperPart\" and is the inverse of \"stuffPartOf\". Notably, its use implies that the related entities are distinct kinds of \"stuffs\", as the current description highlights a requirement for distinction between the entities involved.",
                "CQ": [
                    {
                        "axiom": "hasPartStuff domain None",
                        "CQ": [
                            "Is it correct that the property 'hasPartStuff' does not have a specified domain?",
                            "What types of entities can act as subjects for the property 'hasPartStuff'?",
                            "Can 'hasPartStuff' be used with any class as its subject, given the lack of a defined domain?"
                        ]
                    },
                    {
                        "axiom": "hasPartStuff range None",
                        "CQ": [
                            "What can be the range of the property 'hasPartStuff'?",
                            "Is it correct that 'hasPartStuff' does not have a defined range?",
                            "Can entities of any type serve as the object of the 'hasPartStuff' property?"
                        ]
                    },
                    {
                        "axiom": "hasPartStuff subPropertyOf hasProperPart",
                        "CQ": [
                            "Is every usage of the hasPartStuff property also valid as an instance of hasProperPart?",
                            "Does the ontology consider hasProperPart to be a superproperty of hasPartStuff?",
                            "Which subproperties are classified under hasProperPart within the ontology?"
                        ]
                    },
                    {
                        "axiom": "hasPartStuff inverseOf stuffPartOf",
                        "CQ": [
                            "What is the inverse relationship established between ‘hasPartStuff’ and ‘stuffPartOf’ in the ontology?",
                            "If entity A has a part-stuff B via ‘hasPartStuff’, does that indicate that B is related to A through ‘stuffPartOf’?",
                            "Which object property is declared as the inverse of ‘hasPartStuff’ in this ontology?"
                        ]
                    }
                ]
            },
            "hasNrOfPhase": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "Stuff"
                    ],
                    "range": [
                        "xsd:integer"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"hasNrOfPhase\" links instances of the class \"Stuff\" to integer values representing a quantity. It has no defined characteristics, super-properties, or inverse properties. The property is used to specify the number of phases associated with a \"Stuff\" instance, with the value constrained to be an integer (xsd:integer).",
                "CQ": [
                    {
                        "axiom": "hasNrOfPhase domain Stuff",
                        "CQ": [
                            "Can the property 'hasNrOfPhase' be used with any subject other than 'Stuff'?",
                            "Is it possible for an entity that is not classified as 'Stuff' to have a value for 'hasNrOfPhase'?",
                            "What types of entities are permitted as the domain of the property 'hasNrOfPhase'?"
                        ]
                    },
                    {
                        "axiom": "hasNrOfPhase range xsd:integer",
                        "CQ": [
                            "Does the property 'hasNrOfPhase' accept a range other than xsd:integer?",
                            "Is every value assigned via 'hasNrOfPhase' required to be an xsd:integer?",
                            "What types of values can be used as the range for the property 'hasNrOfPhase'?"
                        ]
                    }
                ]
            },
            "hasContainedScatteredPortion": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "scatterPortion"
                    ],
                    "inverseOf": [
                        "isContainedScatteredPortionOf"
                    ]
                },
                "description": "The property \"hasContainedScatteredPortion\" is used to relate a container to scattered portions necessarily contained within it (e.g., water in a glass). It has no explicit domain or range restrictions and does not declare any specific property characteristics. It is a sub-property of \"scatterPortion\" and has \"isContainedScatteredPortionOf\" as its inverse property.",
                "CQ": [
                    {
                        "axiom": "hasContainedScatteredPortion domain None",
                        "CQ": [
                            "What can be the domain of the property 'hasContainedScatteredPortion'?",
                            "Is it correct that 'hasContainedScatteredPortion' does not have a specified domain?",
                            "Can entities other than those explicitly defined be subjects of 'hasContainedScatteredPortion'?"
                        ]
                    },
                    {
                        "axiom": "hasContainedScatteredPortion range None",
                        "CQ": [
                            "What can be the range of the property 'hasContainedScatteredPortion'?",
                            "Is it correct that 'hasContainedScatteredPortion' does not have a specified range?",
                            "Can any type of entity appear as the object of the property 'hasContainedScatteredPortion'?"
                        ]
                    },
                    {
                        "axiom": "hasContainedScatteredPortion subPropertyOf scatterPortion",
                        "CQ": [
                            "Is hasContainedScatteredPortion defined as a subproperty of scatterPortion?",
                            "Which properties are subproperties of scatterPortion within the ontology?",
                            "Does using hasContainedScatteredPortion ensure the relationship also satisfies the scatterPortion property?"
                        ]
                    },
                    {
                        "axiom": "hasContainedScatteredPortion inverseOf isContainedScatteredPortionOf",
                        "CQ": [
                            "In what way are the properties 'hasContainedScatteredPortion' and 'isContainedScatteredPortionOf' related in the ontology?",
                            "If an entity A hasContainedScatteredPortion B, does it follow that B isContainedScatteredPortionOf A?",
                            "Which property is modeled as the inverse of 'hasContainedScatteredPortion' in this ontology?"
                        ]
                    }
                ]
            },
            "isContainedScatteredPortionOf": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "(AmountOfStuff or Stuff)"
                    ],
                    "range": [
                        "(AmountOfStuff or Stuff)"
                    ],
                    "subPropertyOf": [
                        "scatteredPortionOf"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"isContainedScatteredPortionOf\" relates instances of AmountOfStuff or Stuff to other instances of the same types, indicating that the subject is a portion that originated from a larger whole and currently requires a container. As a subproperty of \"scatteredPortionOf,\" it specifically captures the context where a portion, such as 'wine in a wine glass,' was part of a bulk amount, now separated and needing containment. No explicit property characteristics, inverse, or additional hierarchical relations are defined.",
                "CQ": [
                    {
                        "axiom": "isContainedScatteredPortionOf domain (AmountOfStuff or Stuff)",
                        "CQ": [
                            "Can the property 'isContainedScatteredPortionOf' apply to subjects other than AmountOfStuff or Stuff?",
                            "What are the possible domain classes for the property 'isContainedScatteredPortionOf'?",
                            "Are all entities categorized as AmountOfStuff or Stuff valid subjects for the property 'isContainedScatteredPortionOf'?"
                        ]
                    },
                    {
                        "axiom": "isContainedScatteredPortionOf range (AmountOfStuff or Stuff)",
                        "CQ": [
                            "Does 'isContainedScatteredPortionOf' have a range other than AmountOfStuff or Stuff?",
                            "Can the property 'isContainedScatteredPortionOf' be used with values that are not instances of AmountOfStuff or Stuff?",
                            "What types of entities are permitted as the range for 'isContainedScatteredPortionOf'?"
                        ]
                    },
                    {
                        "axiom": "isContainedScatteredPortionOf subPropertyOf scatteredPortionOf",
                        "CQ": [
                            "Is isContainedScatteredPortionOf categorized as a subproperty of scatteredPortionOf?",
                            "Which subproperties are included under scatteredPortionOf in the ontology?",
                            "What are the direct superproperties of isContainedScatteredPortionOf?"
                        ]
                    }
                ]
            },
            "srInheresIn": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "StuffRole"
                    ],
                    "range": [
                        "Stuff"
                    ],
                    "subPropertyOf": [
                        "inheresIn"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"srInheresIn\" has no explicitly defined characteristics. Its domain is restricted to entities of type \"StuffRole\" and its range is \"Stuff,\" indicating it relates a \"StuffRole\" to a \"Stuff.\" It is a sub-property of \"inheresIn,\" inheriting its general semantics but providing more specific usage. No inverse property is defined.",
                "CQ": [
                    {
                        "axiom": "srInheresIn domain StuffRole",
                        "CQ": [
                            "Is there any entity other than StuffRole that can be the domain of the property srInheresIn?",
                            "What can be the domain of the property srInheresIn?",
                            "Is every subject of the property srInheresIn necessarily a StuffRole?"
                        ]
                    },
                    {
                        "axiom": "srInheresIn range Stuff",
                        "CQ": [
                            "Is anything other than Stuff allowed as the range of the property 'srInheresIn'?",
                            "Can 'srInheresIn' relate to values that are not instances of Stuff?",
                            "What types of entities can serve as the range for the property 'srInheresIn'?"
                        ]
                    },
                    {
                        "axiom": "srInheresIn subPropertyOf inheresIn",
                        "CQ": [
                            "Is every use of the srInheresIn property also captured by the inheresIn property?",
                            "Which properties are subproperties of inheresIn within the ontology?",
                            "Does inheresIn represent a broader relationship than srInheresIn?"
                        ]
                    }
                ]
            },
            "partOf": {
                "axiom": {
                    "characteristics": [
                        "Transitive"
                    ],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"partOf\" is defined as a transitive property, indicating that if entity A is part of B, and B is part of C, then A is part of C. No specific domain or range restrictions are imposed. It has no super-properties or explicitly defined inverse property.",
                "CQ": [
                    {
                        "axiom": "partOf characteristics Transitive",
                        "CQ": [
                            "Is partOf a transitive property, such that if an entity is part of a second entity, and the second is part of a third, the first entity is part of the third?",
                            "Can the partOf property infer that if object A is part of object B, and object B is part of object C, then object A is part of object C?",
                            "Does the ontology require partOf to satisfy the transitive characteristic over related entities?"
                        ]
                    },
                    {
                        "axiom": "partOf domain None",
                        "CQ": [
                            "What kinds of entities can appear as the subject of the property 'partOf'?",
                            "Is it correct that the property 'partOf' does not have a specified domain?",
                            "Can 'partOf' be used with any class as its subject or are there restrictions?"
                        ]
                    },
                    {
                        "axiom": "partOf range None",
                        "CQ": [
                            "What can be the range of the property 'partOf'?",
                            "Is it correct that 'partOf' has no specified range?",
                            "Can 'partOf' relate to objects of any type as its target?"
                        ]
                    }
                ]
            },
            "solutionFormingRelation": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "Solvent"
                    ],
                    "range": [
                        "Solute"
                    ],
                    "subPropertyOf": [
                        "stuffFormingRelation"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"solutionFormingRelation\" relates a Solvent (domain) to a Solute (range) and is a sub-property of \"stuffFormingRelation.\" It has no additional property characteristics or specified inverse. This property is used to represent the chemical dissolution process, where one substance (the solute) is dissolved by another (the solvent).",
                "CQ": [
                    {
                        "axiom": "solutionFormingRelation domain Solvent",
                        "CQ": [
                            "Can the property 'solutionFormingRelation' have a subject that is not a Solvent?",
                            "What entities are permitted as the domain for the property 'solutionFormingRelation'?",
                            "Is it possible for entities other than Solvent to participate as the subject in the 'solutionFormingRelation' property?"
                        ]
                    },
                    {
                        "axiom": "solutionFormingRelation range Solute",
                        "CQ": [
                            "Does the property 'solutionFormingRelation' relate to anything other than a Solute as its object?",
                            "Is every entity used as the object in 'solutionFormingRelation' required to be a Solute?",
                            "What kinds of entities can appear as the range of the 'solutionFormingRelation' property?"
                        ]
                    },
                    {
                        "axiom": "solutionFormingRelation subPropertyOf stuffFormingRelation",
                        "CQ": [
                            "Is solutionFormingRelation considered a specific type of stuffFormingRelation within the ontology?",
                            "Which properties are subproperties of stuffFormingRelation, and does solutionFormingRelation appear among them?",
                            "What superproperties are associated with solutionFormingRelation?"
                        ]
                    }
                ]
            },
            "contiguousPortion": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "hasProperPart"
                    ],
                    "inverseOf": [
                        "isContiguousPortionOf"
                    ]
                },
                "description": "The property \"contiguousPortion\" is defined as a sub-property of \"hasProperPart\" with no explicitly specified domain or range restrictions. It has no declared characteristics. The property has an inverse, \"isContiguousPortionOf,\" indicating a bidirectional relationship. This property is intended to relate an entity to one of its proper parts that is contiguous.",
                "CQ": [
                    {
                        "axiom": "contiguousPortion domain None",
                        "CQ": [
                            "What types of entities could serve as the domain for the property 'contiguousPortion'?",
                            "Is it correct that the property 'contiguousPortion' is defined without any domain?",
                            "Can 'contiguousPortion' relate to any subject, or should its domain be restricted?"
                        ]
                    },
                    {
                        "axiom": "contiguousPortion range None",
                        "CQ": [
                            "Can 'contiguousPortion' be used with any type of value as its object?",
                            "Is it correct that the property 'contiguousPortion' does not specify a range?",
                            "What types of entities are permissible as the range for 'contiguousPortion'?"
                        ]
                    },
                    {
                        "axiom": "contiguousPortion subPropertyOf hasProperPart",
                        "CQ": [
                            "Is contiguousPortion always used as a specific type of hasProperPart property?",
                            "Which properties are classified as subproperties under hasProperPart, including contiguousPortion?",
                            "Does every use of contiguousPortion indicate the existence of a proper part as defined by hasProperPart?"
                        ]
                    },
                    {
                        "axiom": "contiguousPortion inverseOf isContiguousPortionOf",
                        "CQ": [
                            "How are the object properties ‘contiguousPortion’ and ‘isContiguousPortionOf’ interconnected in the ontology?",
                            "If entity A is linked to entity B via ‘contiguousPortion’, does that entail that B is related to A through ‘isContiguousPortionOf’?",
                            "What object property is defined as the inverse of ‘contiguousPortion’?"
                        ]
                    }
                ]
            },
            "colloidFormingRelation": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "ContinuousMedium"
                    ],
                    "range": [
                        "DispersedPhase"
                    ],
                    "subPropertyOf": [
                        "stuffFormingRelation"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"colloidFormingRelation\" relates instances of ContinuousMedium to instances of DispersedPhase, representing the association found in colloids. It is a sub-property of \"stuffFormingRelation\" and has no specified characteristics or inverse property. According to its description, this property addresses phenomena unique to colloids, such as surface tension, and does not necessarily imply a chemical reaction, distinguishing it from solution-related relations.",
                "CQ": [
                    {
                        "axiom": "colloidFormingRelation domain ContinuousMedium",
                        "CQ": [
                            "Is it possible for the property 'colloidFormingRelation' to have a subject that is not a ContinuousMedium?",
                            "What types of entities can appear as the domain for the property 'colloidFormingRelation'?",
                            "Are all subjects of 'colloidFormingRelation' instances of ContinuousMedium?"
                        ]
                    },
                    {
                        "axiom": "colloidFormingRelation range DispersedPhase",
                        "CQ": [
                            "Is every value assigned to 'colloidFormingRelation' necessarily a DispersedPhase?",
                            "Can entities other than DispersedPhase be associated as the range of 'colloidFormingRelation'?",
                            "What possible types of entities can serve as the range for the property 'colloidFormingRelation'?"
                        ]
                    },
                    {
                        "axiom": "colloidFormingRelation subPropertyOf stuffFormingRelation",
                        "CQ": [
                            "Is colloidFormingRelation considered a specific kind of stuffFormingRelation within the ontology?",
                            "What properties are subproperties of stuffFormingRelation?",
                            "Which superproperties does colloidFormingRelation have?"
                        ]
                    }
                ]
            },
            "properPartOf": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "partOf"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"properPartOf\" represents the usual proper parthood relation in mereology, indicating that one entity is a proper part of another. It has no explicitly defined characteristics, domain, or range. It is specified as a subproperty of \"partOf\" and does not have an inverse property.",
                "CQ": [
                    {
                        "axiom": "properPartOf domain None",
                        "CQ": [
                            "What can be the domain of the property 'properPartOf'?",
                            "Is it correct that the property 'properPartOf' does not have a specified domain?",
                            "Can any type of entity appear as the subject when using 'properPartOf'?"
                        ]
                    },
                    {
                        "axiom": "properPartOf range None",
                        "CQ": [
                            "What can be the range of the property 'properPartOf'?",
                            "Is it correct that 'properPartOf' has no specified range?",
                            "Can any type of entity be the range value for 'properPartOf'?"
                        ]
                    },
                    {
                        "axiom": "properPartOf subPropertyOf partOf",
                        "CQ": [
                            "Is properPartOf classified as a subproperty of partOf within the ontology?",
                            "Which properties are identified as subproperties under partOf?",
                            "Does the use of properPartOf property entail the use of partOf property for the same subject and object?"
                        ]
                    }
                ]
            },
            "instantiation": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "AmountOfStuff"
                    ],
                    "range": [
                        "Stuff"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"instantiation\" is an object property with domain \"AmountOfStuff\" and range \"Stuff\", indicating that it relates particular amounts of matter to their corresponding type of stuff. This property is intentionally typed for exclusive use in scenarios where first- and second-order entities coexist in the ontology's TBox. For example, it connects a specific amount, such as \"1kg of gold\", to the general stuff \"Gold.\" It has no explicitly defined characteristics, super-properties, or inverse properties.",
                "CQ": [
                    {
                        "axiom": "instantiation domain AmountOfStuff",
                        "CQ": [
                            "Is the domain of the property 'instantiation' restricted solely to 'AmountOfStuff'?",
                            "Are there any entities of type 'AmountOfStuff' that cannot be associated with the 'instantiation' property?",
                            "What are the possible domains for the property 'instantiation'?"
                        ]
                    },
                    {
                        "axiom": "instantiation range Stuff",
                        "CQ": [
                            "Is it possible for the property 'instantiation' to have a range other than Stuff?",
                            "Are all values assigned to the property 'instantiation' necessarily of type Stuff?",
                            "What entities can appear as the range for the property 'instantiation'?"
                        ]
                    }
                ]
            },
            "hasStuffDistribution": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"hasStuffDistribution\" has no specified domain, range, characteristics, super-properties, or inverse properties. Based on its axioms, it is a generic property that can relate any type of entities without restriction. No additional description is currently provided.",
                "CQ": [
                    {
                        "axiom": "hasStuffDistribution domain None",
                        "CQ": [
                            "What kinds of entities can act as the subject when using the property 'hasStuffDistribution'?",
                            "Is it correct that 'hasStuffDistribution' has no specified domain?",
                            "Can the property 'hasStuffDistribution' be applied to anything, or should its domain be restricted?"
                        ]
                    },
                    {
                        "axiom": "hasStuffDistribution range None",
                        "CQ": [
                            "Is it possible for the property 'hasStuffDistribution' to exist without a defined range?",
                            "What entities can serve as the range of the property 'hasStuffDistribution'?",
                            "Should the property 'hasStuffDistribution' be expected to have a specified range?"
                        ]
                    }
                ]
            },
            "scatteredStuffPartOf": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "(AmountOfStuff or Stuff)"
                    ],
                    "range": [
                        "(AmountOfStuff or Stuff)"
                    ],
                    "subPropertyOf": [
                        "properPartOf"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"scatteredStuffPartOf\" is a subproperty of \"properPartOf\" and relates instances of \"AmountOfStuff\" or \"Stuff\" to other instances within the same classes. It is intended to connect quantities or types of matter—typically those denoted by mass nouns in natural language (e.g., gold, milk, mayonnaise)—with their constituent ingredients that are of a different type (e.g., alcohol in wine, oil in mayonnaise, sugar in cake). The property does not specify domain or range characteristics beyond these classes and has no defined inverse. It also suggests a temporal dimension, where the part was once a contiguous proper part of the whole, but is now scattered or integrated.",
                "CQ": [
                    {
                        "axiom": "scatteredStuffPartOf domain (AmountOfStuff or Stuff)",
                        "CQ": [
                            "Does the property 'scatteredStuffPartOf' apply to subjects other than AmountOfStuff or Stuff?",
                            "What classes are permitted as the domain for the property 'scatteredStuffPartOf'?",
                            "Is it possible for an instance that is not an AmountOfStuff or Stuff to use the 'scatteredStuffPartOf' property as its subject?"
                        ]
                    },
                    {
                        "axiom": "scatteredStuffPartOf range (AmountOfStuff or Stuff)",
                        "CQ": [
                            "Does 'scatteredStuffPartOf' have a range beyond 'AmountOfStuff' or 'Stuff'?",
                            "Is every object associated with the property 'scatteredStuffPartOf' necessarily an instance of 'AmountOfStuff' or 'Stuff'?",
                            "Which types of entities can serve as the range for the property 'scatteredStuffPartOf'?"
                        ]
                    },
                    {
                        "axiom": "scatteredStuffPartOf subPropertyOf properPartOf",
                        "CQ": [
                            "Is every instance of scatteredStuffPartOf also recognized as an instance of properPartOf?",
                            "Which subproperties does properPartOf encompass within the ontology?",
                            "What are the direct superproperties for scatteredStuffPartOf?"
                        ]
                    }
                ]
            },
            "scatteredPortionOf": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "(AmountOfStuff or Stuff)"
                    ],
                    "range": [
                        "(AmountOfStuff or Stuff)"
                    ],
                    "subPropertyOf": [
                        "properPartOf"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"scatteredPortionOf\" has a domain and range restricted to either AmountOfStuff or Stuff. It is defined as a subproperty of \"properPartOf\" and has no explicitly specified characteristics or inverse. This property is intended to represent a specific kind of portion relationship but is not made a subproperty of \"portionOf\" to avoid reasoning cycles and undecidability in Description Logics. The distinction between this property and related properties is primarily temporal, which is not expressible in OWL; therefore, \"scatteredPortionOf\" and \"portionOf\" are modeled as sibling properties to enable practical property chaining in reasoning.",
                "CQ": [
                    {
                        "axiom": "scatteredPortionOf domain (AmountOfStuff or Stuff)",
                        "CQ": [
                            "Can the property 'scatteredPortionOf' have a subject that is not an AmountOfStuff or Stuff?",
                            "Is there any AmountOfStuff or Stuff that is not associated with 'scatteredPortionOf'?",
                            "What are the possible classes that can serve as the domain for the property 'scatteredPortionOf'?"
                        ]
                    },
                    {
                        "axiom": "scatteredPortionOf range (AmountOfStuff or Stuff)",
                        "CQ": [
                            "Is every value assigned via 'scatteredPortionOf' restricted to being an AmountOfStuff or Stuff?",
                            "What types of entities can be the object of the 'scatteredPortionOf' property?",
                            "Are there any entities other than AmountOfStuff or Stuff that can be in the range of 'scatteredPortionOf'?"
                        ]
                    },
                    {
                        "axiom": "scatteredPortionOf subPropertyOf properPartOf",
                        "CQ": [
                            "Is every scatteredPortionOf relationship necessarily a type of properPartOf relationship?",
                            "Which properties are classified as subproperties under properPartOf in the ontology?",
                            "What superproperties does scatteredPortionOf have within the property hierarchy?"
                        ]
                    }
                ]
            },
            "hasGranuleType": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "Stuff"
                    ],
                    "range": [
                        "PhysicalObject"
                    ],
                    "subPropertyOf": [
                        "owl:topObjectProperty"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"hasGranuleType\" relates entities of type Stuff (domain) to PhysicalObject (range), and is a sub-property of owl:topObjectProperty. It has no specified characteristics or inverse property. This property is used to indicate the type of physical object serving as the basic unit, or \"granule,\" in the analysis of a given Stuff. The granule type reflects the level of granularity chosen for understanding the composition of the Stuff (e.g., molecules in water), and acknowledges that different analytical contexts may establish different granule types (such as atomic, molecular, or multi-molecular levels). Terms like \"has grain\" or \"has granular part\" are also used for this relation.",
                "CQ": [
                    {
                        "axiom": "hasGranuleType domain Stuff",
                        "CQ": [
                            "Is the subject of 'hasGranuleType' always required to be a Stuff?",
                            "Are there any entities besides Stuff that can be associated with the 'hasGranuleType' property as its domain?",
                            "What classes can serve as the domain for the property 'hasGranuleType'?"
                        ]
                    },
                    {
                        "axiom": "hasGranuleType range PhysicalObject",
                        "CQ": [
                            "Can the property 'hasGranuleType' have any range other than PhysicalObject?",
                            "Is every entity that appears as the object of 'hasGranuleType' necessarily a PhysicalObject?",
                            "What entities can be used as the range for the property 'hasGranuleType'?"
                        ]
                    },
                    {
                        "axiom": "hasGranuleType subPropertyOf owl:topObjectProperty",
                        "CQ": [
                            "Is hasGranuleType considered a subproperty of owl:topObjectProperty?",
                            "Which superproperties does hasGranuleType inherit in the ontology?",
                            "Can every usage of hasGranuleType be interpreted as an instance of owl:topObjectProperty?"
                        ]
                    }
                ]
            },
            "hasQuality": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "(Endurant or Perdurant)"
                    ],
                    "range": [
                        "Quality"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"hasQuality\" has no explicitly defined characteristics or super-properties. Its domain includes entities classified as Endurant or Perdurant, and its range is restricted to instances of Quality. This property is used to relate an Endurant or Perdurant to a Quality. No inverse property is specified.",
                "CQ": [
                    {
                        "axiom": "hasQuality domain (Endurant or Perdurant)",
                        "CQ": [
                            "Can 'hasQuality' be used with subjects other than Endurant or Perdurant?",
                            "Are all instances associated with 'hasQuality' required to be either Endurant or Perdurant as the subject?",
                            "What entities are permitted to serve as the domain for the property 'hasQuality'?"
                        ]
                    },
                    {
                        "axiom": "hasQuality range Quality",
                        "CQ": [
                            "Does the property 'hasQuality' only accept individuals of type 'Quality' as its range?",
                            "Are there any entities that must not be used as the value for 'hasQuality'?",
                            "What types of individuals may appear as the range of the 'hasQuality' property?"
                        ]
                    }
                ]
            },
            "isSelfContainedScatteredPortionOf": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "(AmountOfStuff or Stuff)"
                    ],
                    "range": [
                        "(AmountOfStuff or Stuff)"
                    ],
                    "subPropertyOf": [
                        "scatteredPortionOf"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"isSelfContainedScatteredPortionOf\" relates an entity classified as \"AmountOfStuff\" or \"Stuff\" to another entity of the same types, indicating that the former is a self-standing, scattered portion of the latter (such as a lump, drop, or slice). It is a sub-property of \"scatteredPortionOf\" and does not specify any particular characteristics or inverse properties. This property is typically used to denote portions that were once part of a larger whole but now exist as distinct, stand-alone pieces.",
                "CQ": [
                    {
                        "axiom": "isSelfContainedScatteredPortionOf domain (AmountOfStuff or Stuff)",
                        "CQ": [
                            "Is it possible for 'isSelfContainedScatteredPortionOf' to have a domain other than AmountOfStuff or Stuff?",
                            "Can entities outside of AmountOfStuff or Stuff be involved as the subject of the property 'isSelfContainedScatteredPortionOf'?",
                            "What kinds of entities are permitted as the domain for 'isSelfContainedScatteredPortionOf'?"
                        ]
                    },
                    {
                        "axiom": "isSelfContainedScatteredPortionOf range (AmountOfStuff or Stuff)",
                        "CQ": [
                            "Can the property 'isSelfContainedScatteredPortionOf' relate entities to anything other than 'AmountOfStuff' or 'Stuff'?",
                            "Is every value associated with the property 'isSelfContainedScatteredPortionOf' restricted to instances of 'AmountOfStuff' or 'Stuff'?",
                            "What kinds of entities are permitted as the range for the property 'isSelfContainedScatteredPortionOf'?"
                        ]
                    },
                    {
                        "axiom": "isSelfContainedScatteredPortionOf subPropertyOf scatteredPortionOf",
                        "CQ": [
                            "Is isSelfContainedScatteredPortionOf a subproperty of scatteredPortionOf?",
                            "Which subproperties are encompassed by scatteredPortionOf?",
                            "What are the direct superproperties of isSelfContainedScatteredPortionOf?"
                        ]
                    }
                ]
            },
            "hasDataValue": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "Abstract"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"hasDataValue\" relates instances of the class \"Abstract\" to data values. Although its intended conceptual range is any data type, no range is currently specified due to technical limitations in expressing unrestricted datatypes. The property has no explicitly defined characteristics, super-properties, or inverse properties.",
                "CQ": [
                    {
                        "axiom": "hasDataValue domain Abstract",
                        "CQ": [
                            "Is there any class other than Abstract that can be the subject of the 'hasDataValue' property?",
                            "Can 'hasDataValue' be used with any entity that is not an instance of Abstract?",
                            "What classes are permitted as the domain of the 'hasDataValue' property?"
                        ]
                    },
                    {
                        "axiom": "hasDataValue range None",
                        "CQ": [
                            "Is it correct that the property 'hasDataValue' does not have a specified range?",
                            "What can be the range of the property 'hasDataValue'?",
                            "Are any data types or classes explicitly associated with the range of 'hasDataValue'?"
                        ]
                    }
                ]
            },
            "stuffPartOf": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "(AmountOfStuff or Stuff)"
                    ],
                    "range": [
                        "(AmountOfStuff or Stuff)"
                    ],
                    "subPropertyOf": [
                        "properPartOf"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"stuffPartOf\" relates entities classified as AmountOfStuff or Stuff to other entities of the same categories, indicating a part-whole relationship specifically among mass nouns or substances that are not typically countable. It is a subproperty of \"properPartOf,\" emphasizing that the 'part' is a distinct type of stuff or ingredient within another. No additional property characteristics or inverse are specified. Examples include alcohol as a stuff-part of wine, oil in mayonnaise, or sugar in cake.",
                "CQ": [
                    {
                        "axiom": "stuffPartOf domain (AmountOfStuff or Stuff)",
                        "CQ": [
                            "Is there any subject using 'stuffPartOf' that is not an AmountOfStuff or Stuff?",
                            "Can entities outside AmountOfStuff or Stuff have the 'stuffPartOf' property?",
                            "What classes can serve as the domain for the property 'stuffPartOf'?"
                        ]
                    },
                    {
                        "axiom": "stuffPartOf range (AmountOfStuff or Stuff)",
                        "CQ": [
                            "Can the property 'stuffPartOf' refer to objects other than AmountOfStuff or Stuff as its value?",
                            "Is every value associated with the property 'stuffPartOf' required to be of type AmountOfStuff or Stuff?",
                            "What types of resources are permitted as the range of the 'stuffPartOf' property?"
                        ]
                    },
                    {
                        "axiom": "stuffPartOf subPropertyOf properPartOf",
                        "CQ": [
                            "Is stuffPartOf always interpreted as a type of properPartOf within the ontology?",
                            "Which properties are direct subproperties of properPartOf?",
                            "What superproperties are associated with stuffPartOf?"
                        ]
                    }
                ]
            },
            "hasPortion": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "hasProperPart"
                    ],
                    "inverseOf": [
                        "portionOf"
                    ]
                },
                "description": "The property \"hasPortion\" is a sub-property of \"hasProperPart\" and has \"portionOf\" as its inverse. While there are no explicit domain or range restrictions or defined characteristics, \"hasPortion\" is intended to relate an entity to a part that consists of the same substance or kind as the whole. Practically, it represents portions or divisions of a material entity at a given instant; for example, different amounts of wine divided from a whole. The property is useful in representing naive chemistry, although continuous changes at the molecular level may challenge the strict philosophical notion of 'portion.'",
                "CQ": [
                    {
                        "axiom": "hasPortion domain None",
                        "CQ": [
                            "What types of entities can appear as the subject when using the 'hasPortion' property?",
                            "Is it correct that the property 'hasPortion' does not have a specified domain?",
                            "Can 'hasPortion' relate to any class as its subject, or should its usage be restricted?"
                        ]
                    },
                    {
                        "axiom": "hasPortion range None",
                        "CQ": [
                            "What types of values can be the range of 'hasPortion'?",
                            "Is it accurate that the property 'hasPortion' does not have a specified range?",
                            "Could 'hasPortion' have a range restriction, or is it applicable to any type of entity?"
                        ]
                    },
                    {
                        "axiom": "hasPortion subPropertyOf hasProperPart",
                        "CQ": [
                            "Is hasPortion categorized as a subproperty under hasProperPart?",
                            "What are the superproperties associated with hasPortion in the ontology?",
                            "Which properties are defined as subproperties within the scope of hasProperPart?"
                        ]
                    },
                    {
                        "axiom": "hasPortion inverseOf portionOf",
                        "CQ": [
                            "What is the logical connection between ‘hasPortion’ and ‘portionOf’ in the ontology?",
                            "If entity X hasPortion Y, does this infer that Y portionOf X?",
                            "Which property is defined as the inverse of ‘hasPortion’?"
                        ]
                    }
                ]
            },
            "hasPart": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": [
                        "partOf"
                    ]
                },
                "description": "The property \"hasPart\" does not have explicitly defined characteristics, domain, or range restrictions in its current axiom. It is specified as the inverse of the property \"partOf\" and has no super-properties. According to the existing description, \"hasPart\" may overlap with related notions like \"hasComponent\" and \"composedOf,\" with subtleties in the essentiality or accidental nature of parts in different contexts. Domain and range constraints, where relevant, are managed in the inverse property \"partOf.\" This property is intended for modeling part-whole relationships.",
                "CQ": [
                    {
                        "axiom": "hasPart domain None",
                        "CQ": [
                            "Can the property 'hasPart' be used with any subject, given that its domain is undefined?",
                            "What kinds of entities are permitted as subjects for the 'hasPart' property?",
                            "Is it accurate that the property 'hasPart' does not specify any domain?"
                        ]
                    },
                    {
                        "axiom": "hasPart range None",
                        "CQ": [
                            "What can be the range of the property 'hasPart'?",
                            "Is it correct that the property 'hasPart' does not have a specified range?",
                            "Can any type of value appear as the object of 'hasPart'?"
                        ]
                    },
                    {
                        "axiom": "hasPart inverseOf partOf",
                        "CQ": [
                            "How are the object properties ‘hasPart’ and ‘partOf’ connected as inverse properties within the ontology?",
                            "If entity A ‘hasPart’ entity B, does the ontology state that B is ‘partOf’ A?",
                            "Which property in the ontology is defined as the inverse of ‘hasPart’?"
                        ]
                    }
                ]
            },
            "containedIn": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "partOf"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"containedIn\" has no explicitly defined characteristics, domain, or range restrictions. It is specified as a sub-property of \"partOf,\" indicating that it expresses a specialized containment relationship within the broader context of part-whole relations. No inverse property is defined.",
                "CQ": [
                    {
                        "axiom": "containedIn domain None",
                        "CQ": [
                            "Is it accurate that the property 'containedIn' does not have an explicitly defined domain?",
                            "What types of entities can be subjects of the 'containedIn' property?",
                            "Can entities of any class use the property 'containedIn' as their subject?"
                        ]
                    },
                    {
                        "axiom": "containedIn range None",
                        "CQ": [
                            "Is it appropriate that the property 'containedIn' has no specified range?",
                            "What entities can serve as the range for the property 'containedIn'?",
                            "Can 'containedIn' relate a subject to any type of object without restriction on the object's class?"
                        ]
                    },
                    {
                        "axiom": "containedIn subPropertyOf partOf",
                        "CQ": [
                            "Is containedIn defined as a more specific property under partOf?",
                            "Which properties are recognized as subproperties of partOf?",
                            "What are the superproperties assigned to containedIn in the ontology?"
                        ]
                    }
                ]
            },
            "isContiguousPortionOf": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "(AmountOfStuff or Stuff)"
                    ],
                    "range": [
                        "(AmountOfStuff or Stuff)"
                    ],
                    "subPropertyOf": [
                        "properPartOf"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"isContiguousPortionOf\" relates an instance of AmountOfStuff or Stuff to another of the same types, indicating that the subject is a contiguous portion of the object. It is defined as a sub-property of \"properPartOf\" and has no specified inverse or additional property characteristics. Although originally intended as a super-property of \"portionOf\", it is classified as a sibling to avoid logical cycles and maintain decidability within OWL reasoning. This distinction primarily addresses semantic differences involving temporality not representable in OWL.",
                "CQ": [
                    {
                        "axiom": "isContiguousPortionOf domain (AmountOfStuff or Stuff)",
                        "CQ": [
                            "Is the domain of the property 'isContiguousPortionOf' limited to AmountOfStuff or Stuff, or can it include other classes?",
                            "Are there any instances of AmountOfStuff or Stuff that cannot be subjects of 'isContiguousPortionOf'?",
                            "What entity types are eligible to serve as the domain for the property 'isContiguousPortionOf'?"
                        ]
                    },
                    {
                        "axiom": "isContiguousPortionOf range (AmountOfStuff or Stuff)",
                        "CQ": [
                            "Is every value associated with 'isContiguousPortionOf' necessarily of type 'AmountOfStuff' or 'Stuff'?",
                            "Can entities other than 'AmountOfStuff' or 'Stuff' serve as the object for the property 'isContiguousPortionOf'?",
                            "What types are permitted as the range of the 'isContiguousPortionOf' property?"
                        ]
                    },
                    {
                        "axiom": "isContiguousPortionOf subPropertyOf properPartOf",
                        "CQ": [
                            "Which property is the direct superproperty of isContiguousPortionOf?",
                            "Does the use of isContiguousPortionOf always entail the use of properPartOf?",
                            "What properties are classified as subproperties under properPartOf?"
                        ]
                    }
                ]
            },
            "hasScatterStuffPart": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "hasProperPart"
                    ],
                    "inverseOf": [
                        "scatteredStuffPartOf"
                    ]
                },
                "description": "The property \"hasScatterStuffPart\" is defined as a sub-property of \"hasProperPart\" and has \"scatteredStuffPartOf\" as its inverse property. There are no explicitly specified characteristics, domain, or range restrictions for this property. It is intended to associate an entity with a scattered or distributed part of itself, aligning it with the mereological concept of proper parts but specifically for parts that are scattered.",
                "CQ": [
                    {
                        "axiom": "hasScatterStuffPart domain None",
                        "CQ": [
                            "What can be the domain of the property 'hasScatterStuffPart'?",
                            "Is it accurate that 'hasScatterStuffPart' has no domain specified?",
                            "Can any entity be the subject when using the property 'hasScatterStuffPart'?"
                        ]
                    },
                    {
                        "axiom": "hasScatterStuffPart range None",
                        "CQ": [
                            "Does the property 'hasScatterStuffPart' have any specified range?",
                            "Is it correct that 'hasScatterStuffPart' does not restrict the type of object it can be associated with?",
                            "What kinds of entities can appear as the object in statements using 'hasScatterStuffPart'?"
                        ]
                    },
                    {
                        "axiom": "hasScatterStuffPart subPropertyOf hasProperPart",
                        "CQ": [
                            "Is every use of the hasScatterStuffPart property also a use of hasProperPart?",
                            "Which properties are defined as subproperties of hasProperPart, specifically including hasScatterStuffPart?",
                            "Does hasProperPart act as a superproperty to hasScatterStuffPart within the ontology?"
                        ]
                    },
                    {
                        "axiom": "hasScatterStuffPart inverseOf scatteredStuffPartOf",
                        "CQ": [
                            "How are the properties ‘hasScatterStuffPart’ and ‘scatteredStuffPartOf’ connected in the ontology?",
                            "If an entity X hasScatterStuffPart Y, does it follow that Y scatteredStuffPartOf X?",
                            "Which property is considered the inverse of ‘hasScatterStuffPart’?"
                        ]
                    }
                ]
            },
            "hasProperPart": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "hasPart"
                    ],
                    "inverseOf": [
                        "properPartOf"
                    ]
                },
                "description": "The property \"hasProperPart\" has no explicitly defined characteristics, domain, or range restrictions. It is a sub-property of \"hasPart,\" indicating a hierarchical relationship. The inverse property is \"properPartOf,\" which relates an entity to its proper whole. This property is used to specify that one entity is a proper (non-identical) part of another.",
                "CQ": [
                    {
                        "axiom": "hasProperPart domain None",
                        "CQ": [
                            "What can be the domain of the property 'hasProperPart'?",
                            "Is it correct that the property 'hasProperPart' has no specified domain?",
                            "Are there any restrictions on the types of subjects that can use the 'hasProperPart' property?"
                        ]
                    },
                    {
                        "axiom": "hasProperPart range None",
                        "CQ": [
                            "What entities are permitted as the range for the property 'hasProperPart'?",
                            "Is it correct that the property 'hasProperPart' does not specify a range?",
                            "Can any type of value appear as the range of 'hasProperPart' or should it be restricted?"
                        ]
                    },
                    {
                        "axiom": "hasProperPart subPropertyOf hasPart",
                        "CQ": [
                            "Is every use of the hasProperPart property also an instance of hasPart?",
                            "What properties are considered subproperties of hasPart?",
                            "Which superproperties does hasProperPart possess in the ontology?"
                        ]
                    },
                    {
                        "axiom": "hasProperPart inverseOf properPartOf",
                        "CQ": [
                            "What is the formal connection between the properties 'hasProperPart' and 'properPartOf' as defined in the ontology?",
                            "If an entity A has a proper part B, does the ontology entail that B is a proper part of A?",
                            "Which property is explicitly stated as the inverse of 'hasProperPart' in the ontology?"
                        ]
                    }
                ]
            },
            "hasQuale": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "Quality"
                    ],
                    "range": [
                        "Abstract"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"hasQuale\" has no explicitly defined characteristics or super-properties. Its domain is restricted to instances of \"Quality\" and its range to instances of \"Abstract.\" This property is intended to link a quality to its associated abstract value or quale. No inverse property is specified.",
                "CQ": [
                    {
                        "axiom": "hasQuale domain Quality",
                        "CQ": [
                            "Can entities other than Quality appear as the subject of the property 'hasQuale'?",
                            "What types of individuals can serve as the domain for the property 'hasQuale'?",
                            "Is 'hasQuale' ever used where the subject is not a member of Quality?"
                        ]
                    },
                    {
                        "axiom": "hasQuale range Abstract",
                        "CQ": [
                            "Is there any class other than Abstract that can be the range of the property 'hasQuale'?",
                            "Is every value linked with 'hasQuale' necessarily an instance of Abstract?",
                            "What kinds of entities can serve as the value for the property 'hasQuale'?"
                        ]
                    }
                ]
            }
        }
    },
    "home": {
        "classes": {
            "ADLProblem": {
                "axiom": {
                    "subClassOf": [
                        "Problem"
                    ]
                },
                "description": "ADLProblem is defined as a subclass of Problem. This means every instance of ADLProblem is also an instance of Problem, establishing a hierarchical relationship where ADLProblem specifies a more specialized type of problem related to activities of daily living (ADL). No further property restrictions or disjointness axioms are specified.",
                "CQ": [
                    {
                        "axiom": "ADLProblem subClassOf Problem",
                        "CQ": [
                            "Is ADLProblem a specialized form within the overarching class of Problem?",
                            "Which types of Problem include ADLProblem as a more specific instance?",
                            "What broader categories encompass ADLProblem?"
                        ]
                    }
                ]
            },
            "ExerciseProblem": {
                "axiom": {
                    "subClassOf": [
                        "Problem"
                    ]
                },
                "description": "ExerciseProblem is defined as a subclass of Problem. This means that every ExerciseProblem is considered a type of Problem, inheriting all characteristics of the Problem class. No additional distinguishing axioms or property restrictions are specified for ExerciseProblem in the current definition.",
                "CQ": [
                    {
                        "axiom": "ExerciseProblem subClassOf Problem",
                        "CQ": [
                            "Does ExerciseProblem fall under the wider category of Problem?",
                            "What are the specialized types of Problem, such as ExerciseProblem?",
                            "Which broader classifications encompass ExerciseProblem?"
                        ]
                    }
                ]
            },
            "MoodProblem": {
                "axiom": {
                    "subClassOf": [
                        "Problem"
                    ]
                },
                "description": "MoodProblem is defined as a subclass of Problem, indicating that any instance of MoodProblem is also an instance of Problem. This classification establishes MoodProblem as a specific type of problem, but does not currently provide further distinguishing characteristics beyond its placement in the hierarchy.",
                "CQ": [
                    {
                        "axiom": "MoodProblem subClassOf Problem",
                        "CQ": [
                            "Does MoodProblem fall under the general category of Problem?",
                            "Which specific types are encompassed within the broader class Problem, such as MoodProblem?",
                            "What are the hierarchically broader classes that include MoodProblem?"
                        ]
                    }
                ]
            },
            "SleepProblem": {
                "axiom": {
                    "subClassOf": [
                        "Problem"
                    ]
                },
                "description": "SleepProblem is defined as a subclass of Problem, representing a specific category of problems related to sleep. Any individual classified as a SleepProblem is, by definition, also a Problem, inheriting all general properties and restrictions of the Problem class but specializing them to issues involving sleep.",
                "CQ": [
                    {
                        "axiom": "SleepProblem subClassOf Problem",
                        "CQ": [
                            "Is SleepProblem categorized under Problem types?",
                            "Which subcategories exist within the Problem class, such as SleepProblem?",
                            "What broader categories encompass SleepProblem?"
                        ]
                    }
                ]
            },
            "SocialProblem": {
                "axiom": {
                    "subClassOf": [
                        "Problem"
                    ]
                },
                "description": "SocialProblem is defined as a subclass of Problem. This means every social problem is recognized as a problem, but with distinguishing features or contexts that are social in nature. The axiom places SocialProblem within the hierarchy of problems, ensuring that social problems inherit all general characteristics of problems while being specifically identified for their relevance to societal issues.",
                "CQ": [
                    {
                        "axiom": "SocialProblem subClassOf Problem",
                        "CQ": [
                            "Is every SocialProblem categorized under the broader class of Problem?",
                            "Which specific types are subsumed by Problem, including SocialProblem?",
                            "To which overarching categories does SocialProblem belong within the ontology?"
                        ]
                    }
                ]
            },
            "ADLSummary": {
                "axiom": {
                    "subClassOf": [
                        "DaySummary"
                    ]
                },
                "description": "ADLSummary is a subclass of DaySummary. This means that every instance of ADLSummary is also an instance of DaySummary and inherits its properties and constraints. No additional axioms or distinguishing features are specified beyond its hierarchical relationship.",
                "CQ": [
                    {
                        "axiom": "ADLSummary subClassOf DaySummary",
                        "CQ": [
                            "Is ADLSummary classified under the broader group of DaySummary types?",
                            "Which specific summaries are encompassed within DaySummary, such as ADLSummary?",
                            "What higher-level categories include ADLSummary?"
                        ]
                    }
                ]
            },
            "ExerciseSummary": {
                "axiom": {
                    "subClassOf": [
                        "DaySummary"
                    ],
                    "propertyRestrictions": [
                        "[exerciseStartTime only time:Instant]",
                        "[distanceTravelled only xsd:double]",
                        "[strideLength exactly 1 xsd:double]",
                        "[exerciseDuration only time:DurationDescription]",
                        "[walkSpeed exactly 1 xsd:double]",
                        "[exerciseDuration exactly 1 time:DurationDescription]",
                        "[heartRate only xsd:double]",
                        "[heartRate exactly 1 xsd:double]",
                        "[walkSpeed only xsd:double]",
                        "[exerciseIntensity exactly 1]",
                        "[exerciseStartTime exactly 1 time:Instant]",
                        "[strideLength only xsd:double]",
                        "[distanceTravelled exactly 1 xsd:double]",
                        "[accelerometerCountsPerMinute exactly 1 xsd:int]",
                        "[exerciseIntensity only rdfs:Literal]",
                        "[accelerometerCountsPerMinute only xsd:int]"
                    ]
                },
                "description": "ExerciseSummary is a subclass of DaySummary that encapsulates the summary of exercise activities recorded for a specific day. Members of this class must have exactly one value each for exerciseStartTime (of type time:Instant), distanceTravelled (xsd:double), strideLength (xsd:double), exerciseDuration (time:DurationDescription), walkSpeed (xsd:double), heartRate (xsd:double), exerciseIntensity (rdfs:Literal), and accelerometerCountsPerMinute (xsd:int). Each of these properties is also restricted to values of the specified type, ensuring strict data consistency for representing exercise-session summaries.",
                "CQ": [
                    {
                        "axiom": "ExerciseSummary subClassOf DaySummary",
                        "CQ": [
                            "Is ExerciseSummary categorized as a more specific type under DaySummary?",
                            "Which summaries are classified as specializations of DaySummary, such as ExerciseSummary?",
                            "What broader summary categories does ExerciseSummary fall within?"
                        ]
                    },
                    {
                        "axiom": "ExerciseSummary propertyRestrictions [exerciseStartTime only time:Instant]",
                        "CQ": [
                            "Is every value of 'exerciseStartTime' for an ExerciseSummary instance required to be of type time:Instant?",
                            "Can an ExerciseSummary have an 'exerciseStartTime' that is not an instance of time:Instant?",
                            "Does ExerciseSummary restrict the 'exerciseStartTime' property exclusively to values of type time:Instant?"
                        ]
                    },
                    {
                        "axiom": "ExerciseSummary propertyRestrictions [distanceTravelled only xsd:double]",
                        "CQ": [
                            "Is the value of 'distanceTravelled' for any ExerciseSummary always a datatype of xsd:double?",
                            "Can an ExerciseSummary have the 'distanceTravelled' property represented by a datatype other than xsd:double?",
                            "Does the ExerciseSummary restrict 'distanceTravelled' values exclusively to those conforming to xsd:double?"
                        ]
                    },
                    {
                        "axiom": "ExerciseSummary propertyRestrictions [strideLength exactly 1 xsd:double]",
                        "CQ": [
                            "Is each ExerciseSummary instance required to have exactly one value for the strideLength property?",
                            "Can an ExerciseSummary be associated with more than one strideLength value?",
                            "Does every ExerciseSummary exclude the possibility of having zero or multiple strideLength values?"
                        ]
                    },
                    {
                        "axiom": "ExerciseSummary propertyRestrictions [exerciseDuration only time:DurationDescription]",
                        "CQ": [
                            "Is every value of the exerciseDuration property for an ExerciseSummary instance required to be a DurationDescription as defined in the time ontology?",
                            "Can ExerciseSummary ever have an exerciseDuration that does not correspond to a time:DurationDescription?",
                            "Are all exerciseDuration descriptions used in ExerciseSummary instances restricted exclusively to time:DurationDescription types?"
                        ]
                    },
                    {
                        "axiom": "ExerciseSummary propertyRestrictions [walkSpeed exactly 1 xsd:double]",
                        "CQ": [
                            "Is it necessary for an ExerciseSummary to have exactly one walk speed value defined as a double?",
                            "Does an ExerciseSummary include multiple or only one value for the walkSpeed property?",
                            "Can an ExerciseSummary exist if it lacks a walkSpeed value or contains more than one?"
                        ]
                    },
                    {
                        "axiom": "ExerciseSummary propertyRestrictions [exerciseDuration exactly 1 time:DurationDescription]",
                        "CQ": [
                            "Is every instance of ExerciseSummary required to have exactly one value for the property exerciseDuration of type DurationDescription?",
                            "Can an ExerciseSummary have more than one or fewer than one exerciseDuration specified?",
                            "Does ExerciseSummary allow any value for exerciseDuration other than exactly one DurationDescription?"
                        ]
                    },
                    {
                        "axiom": "ExerciseSummary propertyRestrictions [heartRate only xsd:double]",
                        "CQ": [
                            "Is it required that the heartRate property of an ExerciseSummary only contain values of type xsd:double?",
                            "Can the heartRate property in ExerciseSummary ever be associated with a value that is not an xsd:double?",
                            "Are all values for heartRate in ExerciseSummary instances necessarily limited to the xsd:double datatype?"
                        ]
                    },
                    {
                        "axiom": "ExerciseSummary propertyRestrictions [heartRate exactly 1 xsd:double]",
                        "CQ": [
                            "Must every ExerciseSummary include exactly one heartRate value represented as a double?",
                            "Is it permitted for an ExerciseSummary to have more than one heartRate property?",
                            "Can an ExerciseSummary exist without having a heartRate value defined?"
                        ]
                    },
                    {
                        "axiom": "ExerciseSummary propertyRestrictions [walkSpeed only xsd:double]",
                        "CQ": [
                            "Is the value assigned to walkSpeed in ExerciseSummary always restricted to datatype xsd:double?",
                            "Can ExerciseSummary have walkSpeed properties with any datatype other than xsd:double?",
                            "Must every walkSpeed property for ExerciseSummary be typed exclusively as xsd:double?"
                        ]
                    },
                    {
                        "axiom": "ExerciseSummary propertyRestrictions [exerciseIntensity exactly 1]",
                        "CQ": [
                            "Is every ExerciseSummary instance required to possess exactly one value for the property exerciseIntensity?",
                            "Can an ExerciseSummary have more or less than one exerciseIntensity assigned?",
                            "Does ExerciseSummary restrict exerciseIntensity to a single, unique value per summary?"
                        ]
                    },
                    {
                        "axiom": "ExerciseSummary propertyRestrictions [exerciseStartTime exactly 1 time:Instant]",
                        "CQ": [
                            "Does every ExerciseSummary necessarily have exactly one value for the property exerciseStartTime of type time:Instant?",
                            "Can an ExerciseSummary instance possess more than one exerciseStartTime, or none at all?",
                            "Is it required that each ExerciseSummary be associated with one and only one exerciseStartTime that is a time:Instant?"
                        ]
                    },
                    {
                        "axiom": "ExerciseSummary propertyRestrictions [strideLength only xsd:double]",
                        "CQ": [
                            "Is strideLength in ExerciseSummary always required to have values of type xsd:double?",
                            "Can any property other than xsd:double be used for strideLength within ExerciseSummary?",
                            "Does ExerciseSummary ensure that strideLength values are exclusively of the datatype xsd:double?"
                        ]
                    },
                    {
                        "axiom": "ExerciseSummary propertyRestrictions [distanceTravelled exactly 1 xsd:double]",
                        "CQ": [
                            "Is every instance of ExerciseSummary associated with exactly one value for distanceTravelled?",
                            "Can ExerciseSummary have multiple or no values for the distanceTravelled property?",
                            "Does ExerciseSummary require a single and unique distanceTravelled measurement?"
                        ]
                    },
                    {
                        "axiom": "ExerciseSummary propertyRestrictions [accelerometerCountsPerMinute exactly 1 xsd:int]",
                        "CQ": [
                            "Must every ExerciseSummary instance include exactly one value for accelerometerCountsPerMinute?",
                            "Is it allowed for an ExerciseSummary to have either no value or more than one value for accelerometerCountsPerMinute?",
                            "Does the property accelerometerCountsPerMinute uniquely identify a single integer value for each ExerciseSummary?"
                        ]
                    },
                    {
                        "axiom": "ExerciseSummary propertyRestrictions [exerciseIntensity only rdfs:Literal]",
                        "CQ": [
                            "Is the value assigned to the 'exerciseIntensity' property for an ExerciseSummary always of type rdfs:Literal?",
                            "Are only rdfs:Literal values permitted for the 'exerciseIntensity' property in instances of ExerciseSummary?",
                            "Can ExerciseSummary have 'exerciseIntensity' values that are not rdfs:Literal?"
                        ]
                    },
                    {
                        "axiom": "ExerciseSummary propertyRestrictions [accelerometerCountsPerMinute only xsd:int]",
                        "CQ": [
                            "Are all values for the property 'accelerometerCountsPerMinute' in ExerciseSummary instances restricted exclusively to integers?",
                            "Can ExerciseSummary have any 'accelerometerCountsPerMinute' property values that are not integers?",
                            "Is it necessary that every 'accelerometerCountsPerMinute' associated with ExerciseSummary be of the integer data type?"
                        ]
                    }
                ]
            },
            "MoodSummary": {
                "axiom": {
                    "subClassOf": [
                        "DaySummary"
                    ],
                    "propertyRestrictions": [
                        "[stressLevel exactly 1]",
                        "[physicalHygiene some owl:Thing]",
                        "[numberOfSocialInteractions exactly 1 xsd:int]",
                        "[numberOfSocialInteractions only xsd:int]",
                        "[stressLevel only rdfs:Literal]",
                        "[involvementInDiscussion some owl:Thing]"
                    ]
                },
                "description": "MoodSummary is defined as a subclass of DaySummary, representing a summarized account of mood-related attributes for a specific day. Each instance of MoodSummary must have exactly one value for stressLevel, which is restricted to literals. It must also record exactly one numeric (integer) value for numberOfSocialInteractions, with the property only admitting integer values. Furthermore, an individual MoodSummary must be associated with at least one instance of physicalHygiene and involvementInDiscussion. These axioms ensure precise recording of stress, social activity, personal hygiene, and participatory engagement in daily mood summaries.",
                "CQ": [
                    {
                        "axiom": "MoodSummary subClassOf DaySummary",
                        "CQ": [
                            "Is MoodSummary classified as a specialized form of DaySummary?",
                            "Which subcategories of DaySummary incorporate MoodSummary?",
                            "What broader categories encompass MoodSummary within the ontology?"
                        ]
                    },
                    {
                        "axiom": "MoodSummary propertyRestrictions [stressLevel exactly 1]",
                        "CQ": [
                            "Is it required that each MoodSummary instance is associated with exactly one stressLevel?",
                            "Can a MoodSummary have more or fewer than one value for the property stressLevel?",
                            "Does the ontology restrict MoodSummary to have a single, unique stressLevel per instance?"
                        ]
                    },
                    {
                        "axiom": "MoodSummary propertyRestrictions [physicalHygiene some owl:Thing]",
                        "CQ": [
                            "Is it required that every MoodSummary is associated with at least one value for physicalHygiene?",
                            "Can a MoodSummary exist without specifying any physicalHygiene?",
                            "Does the MoodSummary class necessarily entail that there must be some physicalHygiene described for its instances?"
                        ]
                    },
                    {
                        "axiom": "MoodSummary propertyRestrictions [numberOfSocialInteractions exactly 1 xsd:int]",
                        "CQ": [
                            "Is a MoodSummary required to have exactly one numberOfSocialInteractions property value?",
                            "Can a MoodSummary ever be associated with more or fewer than one value for numberOfSocialInteractions?",
                            "Does the ontology restrict MoodSummary instances to link to precisely one integer via numberOfSocialInteractions?"
                        ]
                    },
                    {
                        "axiom": "MoodSummary propertyRestrictions [numberOfSocialInteractions only xsd:int]",
                        "CQ": [
                            "Does MoodSummary allow only integer values for the property numberOfSocialInteractions?",
                            "Is it required that every numberOfSocialInteractions value associated with MoodSummary must be an integer?",
                            "Can MoodSummary have numberOfSocialInteractions in any datatype other than integer?"
                        ]
                    },
                    {
                        "axiom": "MoodSummary propertyRestrictions [stressLevel only rdfs:Literal]",
                        "CQ": [
                            "Are all values of the 'stressLevel' property for MoodSummary instances required to be literals?",
                            "Can a MoodSummary have a 'stressLevel' property pointing to anything other than an rdfs:Literal?",
                            "Is it true that MoodSummary restricts the range of 'stressLevel' exclusively to rdfs:Literal values?"
                        ]
                    },
                    {
                        "axiom": "MoodSummary propertyRestrictions [involvementInDiscussion some owl:Thing]",
                        "CQ": [
                            "Is it required for every MoodSummary to have at least one involvementInDiscussion relationship with some entity?",
                            "Can a MoodSummary exist without being linked to any involvementInDiscussion?",
                            "Does MoodSummary necessarily involve participation in at least one discussion with any kind of entity?"
                        ]
                    }
                ]
            },
            "SleepSummary": {
                "axiom": {
                    "subClassOf": [
                        "DaySummary"
                    ],
                    "propertyRestrictions": [
                        "[totalDurationOfNaps exactly 1 xsd:int]",
                        "[sleepBedTime exactly 1 xsd:dateTime]",
                        "[duration only xsd:int]",
                        "[sleepEfficiency exactly 1 xsd:double]",
                        "[sleepMovementIndex only xsd:double]",
                        "[duration exactly 1 xsd:int]",
                        "[sleepMovementIndex exactly 1 xsd:double]",
                        "[numberOfNaps only xsd:int]",
                        "[totalDurationOfNaps only xsd:int]",
                        "[numberOfNaps exactly 1 xsd:int]",
                        "[numberOfArousals only xsd:int]",
                        "[numberOfAwakenings exactly 1 xsd:int]",
                        "[wakeUpTime only xsd:dateTime]",
                        "[numberOfBedExits only xsd:int]",
                        "[lightLevel only xsd:string]",
                        "[sleepTime exactly 1 xsd:dateTime]",
                        "[sleepBedTime only xsd:dateTime]",
                        "[numberOfAwakenings only xsd:int]",
                        "[lightLevel exactly 1 xsd:string]",
                        "[numberOfBedExits exactly 1 xsd:int]",
                        "[sleepLatency exactly 1 xsd:int]",
                        "[sleepEfficiency only xsd:double]",
                        "[sleepLatency only xsd:int]",
                        "[numberOfArousals exactly 1 xsd:int]",
                        "[sleepTime only xsd:dateTime]",
                        "[wakeUpTime exactly 1 xsd:dateTime]"
                    ]
                },
                "description": "SleepSummary is defined as a subclass of DaySummary that captures a comprehensive summary of an individual's sleep for a given day. Each SleepSummary instance is characterized by exactly one value for sleepBedTime, sleepTime, wakeUpTime (all xsd:dateTime), duration, totalDurationOfNaps, numberOfNaps, numberOfArousals, numberOfAwakenings, numberOfBedExits, sleepLatency (all xsd:int), sleepEfficiency and sleepMovementIndex (all xsd:double), and lightLevel (xsd:string). These properties ensure that each SleepSummary provides detailed and quantitative metrics for sleep episodes, including timings, efficiency, nap statistics, nocturnal movements, arousals, awakenings, light levels, and related quantitative indicators, supporting precise day-by-day rest analysis.",
                "CQ": [
                    {
                        "axiom": "SleepSummary subClassOf DaySummary",
                        "CQ": [
                            "Does SleepSummary represent a more specific form of DaySummary?",
                            "Which summaries are subtypes of DaySummary, such as SleepSummary?",
                            "What broader summary types include SleepSummary as a specialized subclass?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [totalDurationOfNaps exactly 1 xsd:int]",
                        "CQ": [
                            "Does every SleepSummary instance record exactly one value for the total duration of naps?",
                            "Is it permissible for a SleepSummary to have multiple or zero entries for the totalDurationOfNaps property?",
                            "Is the totalDurationOfNaps property for each SleepSummary restricted to holding a single integer value?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [sleepBedTime exactly 1 xsd:dateTime]",
                        "CQ": [
                            "Is every instance of SleepSummary required to have exactly one value for the sleepBedTime property?",
                            "Can a SleepSummary have more than one or fewer than one sleepBedTime specified?",
                            "Is the sleepBedTime attribute of SleepSummary restricted to a single xsd:dateTime value for each record?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [duration only xsd:int]",
                        "CQ": [
                            "Does every SleepSummary only have the duration property with values of type xsd:int?",
                            "Is it required that all duration properties associated with a SleepSummary are integers?",
                            "Can a SleepSummary have a duration property whose value is not an integer?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [sleepEfficiency exactly 1 xsd:double]",
                        "CQ": [
                            "Is every instance of SleepSummary required to have exactly one value for the property sleepEfficiency of type double?",
                            "Can a SleepSummary have more than one or no values assigned to the sleepEfficiency property?",
                            "Is it possible for the sleepEfficiency property of SleepSummary to be of a datatype other than double?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [sleepMovementIndex only xsd:double]",
                        "CQ": [
                            "Does SleepSummary restrict the property 'sleepMovementIndex' to only have values of type xsd:double?",
                            "Is it required that all instances of 'sleepMovementIndex' associated with SleepSummary must be xsd:double values?",
                            "Can SleepSummary have any 'sleepMovementIndex' values that are not xsd:double?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [duration exactly 1 xsd:int]",
                        "CQ": [
                            "Is each SleepSummary instance required to have exactly one duration value specified as an integer?",
                            "Can a SleepSummary entity possess more than one or less than one duration property assigned?",
                            "Does the ontology restrict SleepSummary to associate with only a single integer value for duration?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [sleepMovementIndex exactly 1 xsd:double]",
                        "CQ": [
                            "Is it required that each SleepSummary has exactly one value for the property sleepMovementIndex of type xsd:double?",
                            "Can a SleepSummary be valid if it is associated with more than one sleepMovementIndex value?",
                            "Does the SleepSummary class ensure that the property sleepMovementIndex occurs exactly once and only as a double datatype?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [numberOfNaps only xsd:int]",
                        "CQ": [
                            "Does a SleepSummary record only allow the property 'numberOfNaps' to have values of type xsd:int?",
                            "Is it required that every value for 'numberOfNaps' in SleepSummary be an integer?",
                            "Can 'numberOfNaps' in a SleepSummary ever have a value that is not an xsd:int?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [totalDurationOfNaps only xsd:int]",
                        "CQ": [
                            "Are values for totalDurationOfNaps in SleepSummary restricted exclusively to integers?",
                            "Can SleepSummary record totalDurationOfNaps using any datatype besides xsd:int?",
                            "Is it possible for totalDurationOfNaps in SleepSummary to be anything other than an integer value?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [numberOfNaps exactly 1 xsd:int]",
                        "CQ": [
                            "Is it required that a SleepSummary instance always records exactly one value for the property numberOfNaps?",
                            "Can a SleepSummary ever have more or fewer than one numberOfNaps specified?",
                            "Does the property numberOfNaps in SleepSummary strictly permit only a single integer value?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [numberOfArousals only xsd:int]",
                        "CQ": [
                            "Are the values assigned to 'numberOfArousals' for SleepSummary instances limited exclusively to integer types?",
                            "Can a SleepSummary have a 'numberOfArousals' value that is not an integer?",
                            "Does every 'numberOfArousals' property recorded in SleepSummary comply with the xsd:int datatype?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [numberOfAwakenings exactly 1 xsd:int]",
                        "CQ": [
                            "Is it required that each SleepSummary records exactly one value for numberOfAwakenings?",
                            "Can a SleepSummary exist with more or fewer than one numberOfAwakenings value?",
                            "Does the SleepSummary permit multiple values for the numberOfAwakenings property, or is it restricted to just one?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [wakeUpTime only xsd:dateTime]",
                        "CQ": [
                            "Is wakeUpTime for any SleepSummary instance necessarily restricted to values of type xsd:dateTime?",
                            "Can a SleepSummary object have the wakeUpTime property referring exclusively to xsd:dateTime values?",
                            "Does every wakeUpTime associated with SleepSummary require it to be of type xsd:dateTime and no other datatype?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [numberOfBedExits only xsd:int]",
                        "CQ": [
                            "Is it necessary that the 'numberOfBedExits' property for 'SleepSummary' instances must exclusively be integer values?",
                            "Can a 'SleepSummary' have the 'numberOfBedExits' property assigned any datatype other than integer?",
                            "Does the ontology restrict the 'numberOfBedExits' associated with a 'SleepSummary' solely to integers?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [lightLevel only xsd:string]",
                        "CQ": [
                            "Is it required that the 'lightLevel' property of a SleepSummary be filled exclusively with values of type xsd:string?",
                            "Can the 'lightLevel' attribute in a SleepSummary ever take a non-string value?",
                            "Does SleepSummary restrict 'lightLevel' entries to only accept xsd:string data types, excluding all others?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [sleepTime exactly 1 xsd:dateTime]",
                        "CQ": [
                            "Does a SleepSummary always record exactly one value for sleepTime?",
                            "Is it possible for a SleepSummary to be associated with more than one sleepTime?",
                            "Can a valid SleepSummary exist without specifying a sleepTime?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [sleepBedTime only xsd:dateTime]",
                        "CQ": [
                            "Is the sleepBedTime property for a SleepSummary necessarily restricted to values of type xsd:dateTime only?",
                            "Can a SleepSummary have any sleepBedTime value that is not an xsd:dateTime?",
                            "Does the ontology definition of SleepSummary prevent using non-xsd:dateTime values for the sleepBedTime property?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [numberOfAwakenings only xsd:int]",
                        "CQ": [
                            "Is it required that the property 'numberOfAwakenings' in a SleepSummary refers exclusively to values of type xsd:int?",
                            "Can a SleepSummary have the 'numberOfAwakenings' property with any datatype other than xsd:int?",
                            "Does SleepSummary necessarily exclude any value for 'numberOfAwakenings' that is not an integer?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [lightLevel exactly 1 xsd:string]",
                        "CQ": [
                            "Must every SleepSummary instance have exactly one value for the 'lightLevel' property?",
                            "Is it possible for a SleepSummary to have more than one 'lightLevel' specified?",
                            "Does the ontology enforce that each SleepSummary is associated with a single string-typed 'lightLevel' value?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [numberOfBedExits exactly 1 xsd:int]",
                        "CQ": [
                            "Is it required that a SleepSummary must have exactly one value for the property numberOfBedExits?",
                            "Can a SleepSummary record more or fewer than one numberOfBedExits, or must it always be exactly one?",
                            "Does every instance of SleepSummary necessarily include a single numberOfBedExits value?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [sleepLatency exactly 1 xsd:int]",
                        "CQ": [
                            "Is a SleepSummary required to have exactly one value for the property sleepLatency of type integer?",
                            "Can a SleepSummary reference more than one sleepLatency value within its definition?",
                            "Does the SleepSummary class allow for omission or multiple assignments of the sleepLatency property?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [sleepEfficiency only xsd:double]",
                        "CQ": [
                            "Is the sleepEfficiency property for SleepSummary instances restricted exclusively to values of type xsd:double?",
                            "Can a SleepSummary have the sleepEfficiency property with any datatype other than xsd:double?",
                            "Are all possible values for sleepEfficiency in a SleepSummary necessarily defined as xsd:double?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [sleepLatency only xsd:int]",
                        "CQ": [
                            "Is the sleepLatency property for SleepSummary restricted exclusively to integer values?",
                            "Can SleepSummary have the sleepLatency property with any datatype other than xsd:int?",
                            "Does every instance of SleepSummary possess only integer values for its sleepLatency attribute?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [numberOfArousals exactly 1 xsd:int]",
                        "CQ": [
                            "Is it mandatory for a SleepSummary to record exactly one value for the number of arousals?",
                            "Can a SleepSummary have more or less than one indication for the number of arousals?",
                            "Does SleepSummary allow multiple or zero values for the number of arousals property?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [sleepTime only xsd:dateTime]",
                        "CQ": [
                            "Are all values for the 'sleepTime' property of SleepSummary instances restricted exclusively to the datatype xsd:dateTime?",
                            "Is it necessary that each SleepSummary has sleepTime expressed only with values of type xsd:dateTime?",
                            "Does the ontology prevent SleepSummary from having a sleepTime value that is not of the xsd:dateTime datatype?"
                        ]
                    },
                    {
                        "axiom": "SleepSummary propertyRestrictions [wakeUpTime exactly 1 xsd:dateTime]",
                        "CQ": [
                            "Is every SleepSummary associated with exactly one wakeUpTime value?",
                            "Can a SleepSummary have more than one or no wakeUpTime assigned?",
                            "Does the property restriction require that each SleepSummary instance records only one wakeUpTime of type xsd:dateTime?"
                        ]
                    }
                ]
            },
            "SocialSummary": {
                "axiom": {
                    "subClassOf": [
                        "DaySummary"
                    ],
                    "propertyRestrictions": [
                        "[numberOfSocialInteractions only xsd:int]",
                        "[numberOfFaceToFaceConversations only xsd:int]",
                        "[numberOfPhoneConversations exactly 1 xsd:int]",
                        "[numberOfCommunicativeAttempts exactly 1 xsd:int]",
                        "[numberOfCommunicativeAttempts only xsd:int]",
                        "[numberOfSocialInteractions exactly 1 xsd:int]",
                        "[numberOfPhoneConversations only xsd:int]",
                        "[numberOfFaceToFaceConversations exactly 1 xsd:int]"
                    ]
                },
                "description": "SocialSummary is defined as a subclass of DaySummary, representing a daily aggregation of social interaction metrics. Members of this class are characterized by the presence of specific numeric properties: each individual must have exactly one value (of type xsd:int) specified for the number of social interactions, face-to-face conversations, phone conversations, and communicative attempts. Additionally, these properties are restricted to accept only integer values. This formalization ensures that every SocialSummary instance provides an unambiguous, integer-based summary of key social activities occurring within a single day.",
                "CQ": [
                    {
                        "axiom": "SocialSummary subClassOf DaySummary",
                        "CQ": [
                            "Does SocialSummary fall within the category defined by DaySummary?",
                            "Which summary types are classified under DaySummary, such as SocialSummary?",
                            "What are the more general categories that encompass SocialSummary?"
                        ]
                    },
                    {
                        "axiom": "SocialSummary propertyRestrictions [numberOfSocialInteractions only xsd:int]",
                        "CQ": [
                            "Must every SocialSummary instance specify its numberOfSocialInteractions value exclusively as an integer?",
                            "Is it possible for SocialSummary to have a value for numberOfSocialInteractions that is not of type xsd:int?",
                            "Are all values assigned to numberOfSocialInteractions in SocialSummary required to be integers?"
                        ]
                    },
                    {
                        "axiom": "SocialSummary propertyRestrictions [numberOfFaceToFaceConversations only xsd:int]",
                        "CQ": [
                            "Is every value of 'numberOfFaceToFaceConversations' for a SocialSummary necessarily of type xsd:int?",
                            "Can a SocialSummary have 'numberOfFaceToFaceConversations' assigned only as an integer data type?",
                            "Does the 'numberOfFaceToFaceConversations' property in SocialSummary exclude any datatype other than xsd:int?"
                        ]
                    },
                    {
                        "axiom": "SocialSummary propertyRestrictions [numberOfPhoneConversations exactly 1 xsd:int]",
                        "CQ": [
                            "Is a SocialSummary required to have exactly one value for the property numberOfPhoneConversations?",
                            "Can a SocialSummary include more or fewer than one phone conversation according to its numberOfPhoneConversations property?",
                            "Does the SocialSummary constrain the numberOfPhoneConversations property exclusively to one instance?"
                        ]
                    },
                    {
                        "axiom": "SocialSummary propertyRestrictions [numberOfCommunicativeAttempts exactly 1 xsd:int]",
                        "CQ": [
                            "Is a SocialSummary always restricted to exactly one value for the numberOfCommunicativeAttempts property?",
                            "Does the SocialSummary class permit more or fewer than one numberOfCommunicativeAttempts instance?",
                            "Can a SocialSummary ever be associated with multiple or zero instances of numberOfCommunicativeAttempts?"
                        ]
                    },
                    {
                        "axiom": "SocialSummary propertyRestrictions [numberOfCommunicativeAttempts only xsd:int]",
                        "CQ": [
                            "Is SocialSummary limited to having only numberOfCommunicativeAttempts as a property with values of type xsd:int?",
                            "Must every value of numberOfCommunicativeAttempts in SocialSummary be of type xsd:int?",
                            "Can SocialSummary have the property numberOfCommunicativeAttempts with any value type other than xsd:int?"
                        ]
                    },
                    {
                        "axiom": "SocialSummary propertyRestrictions [numberOfSocialInteractions exactly 1 xsd:int]",
                        "CQ": [
                            "Is it required that a SocialSummary must have exactly one value for the 'numberOfSocialInteractions' property?",
                            "Can a SocialSummary ever have more or fewer than one 'numberOfSocialInteractions' specified?",
                            "Does the SocialSummary class permit multiple or zero assignments of 'numberOfSocialInteractions', or is exactly one mandatory?"
                        ]
                    },
                    {
                        "axiom": "SocialSummary propertyRestrictions [numberOfPhoneConversations only xsd:int]",
                        "CQ": [
                            "Is every instance of SocialSummary required to have the numberOfPhoneConversations property assigned only values of type integer?",
                            "Can the property numberOfPhoneConversations for SocialSummary ever be a value other than an integer?",
                            "Does the SocialSummary class restrict numberOfPhoneConversations exclusively to integer values?"
                        ]
                    },
                    {
                        "axiom": "SocialSummary propertyRestrictions [numberOfFaceToFaceConversations exactly 1 xsd:int]",
                        "CQ": [
                            "Must every SocialSummary instance report exactly one face-to-face conversation?",
                            "Can a SocialSummary ever have more or fewer than one face-to-face conversation recorded?",
                            "Is it permitted for SocialSummary to reference multiple face-to-face conversations, or is it restricted to a single occurrence?"
                        ]
                    }
                ]
            },
            "EatingSummary": {
                "axiom": {
                    "subClassOf": [
                        "ADLSummary"
                    ],
                    "propertyRestrictions": [
                        "[eatingLocation only event:Place]",
                        "[eatingLocation exactly 1 event:Place]",
                        "[eatingDuration exactly 1 time:DurationDescription]",
                        "[eatingDuration only time:DurationDescription]"
                    ]
                },
                "description": "EatingSummary is defined as a subclass of ADLSummary, specializing in summarizing eating activities. Each EatingSummary must be associated with exactly one eatingLocation, which must be an instance of event:Place, and exactly one eatingDuration, which must be an instance of time:DurationDescription. This formalization ensures that every EatingSummary unambiguously specifies a single location and duration for the eating event.",
                "CQ": [
                    {
                        "axiom": "EatingSummary subClassOf ADLSummary",
                        "CQ": [
                            "Is EatingSummary classified as a more specific type within ADLSummary?",
                            "Which summaries fall under the category of ADLSummary, including EatingSummary?",
                            "To what higher-level summary categories does EatingSummary belong?"
                        ]
                    },
                    {
                        "axiom": "EatingSummary propertyRestrictions [eatingLocation only event:Place]",
                        "CQ": [
                            "Is an EatingSummary restricted to having eatingLocation only at places categorized as event:Place?",
                            "Can an EatingSummary reference any eatingLocation that is not an event:Place?",
                            "Must every eatingLocation described in an EatingSummary fall exclusively under event:Place?"
                        ]
                    },
                    {
                        "axiom": "EatingSummary propertyRestrictions [eatingLocation exactly 1 event:Place]",
                        "CQ": [
                            "Is it mandatory for every EatingSummary to reference exactly one eatingLocation of type event:Place?",
                            "Can an EatingSummary ever refer to more than one or fewer than one eatingLocation?",
                            "Does each EatingSummary necessarily associate with a single event:Place as its eating location?"
                        ]
                    },
                    {
                        "axiom": "EatingSummary propertyRestrictions [eatingDuration exactly 1 time:DurationDescription]",
                        "CQ": [
                            "Is it required that every EatingSummary specifies exactly one value for the property eatingDuration?",
                            "Can there be more than one eatingDuration associated with an instance of EatingSummary?",
                            "Does the EatingSummary class allow for missing or multiple eatingDuration descriptions, or must there be precisely one?"
                        ]
                    },
                    {
                        "axiom": "EatingSummary propertyRestrictions [eatingDuration only time:DurationDescription]",
                        "CQ": [
                            "Is every eatingDuration associated with an EatingSummary instance required to be of type time:DurationDescription?",
                            "Does EatingSummary restrict the eatingDuration property exclusively to values classified as time:DurationDescription?",
                            "Can an EatingSummary ever have an eatingDuration that is not a time:DurationDescription?"
                        ]
                    }
                ]
            },
            "ExcessiveNapProblem": {
                "axiom": {
                    "subClassOf": [
                        "NappingProblem"
                    ]
                },
                "description": "ExcessiveNapProblem is defined as a subclass of NappingProblem. It represents a specific type of napping issue characterized by an unusually high frequency or duration of naps, distinguishing it from other forms of napping problems.",
                "CQ": [
                    {
                        "axiom": "ExcessiveNapProblem subClassOf NappingProblem",
                        "CQ": [
                            "Is ExcessiveNapProblem classified under the broader group of NappingProblem?",
                            "Which specific types of NappingProblem encompass ExcessiveNapProblem?",
                            "What are the direct superclasses associated with ExcessiveNapProblem?"
                        ]
                    }
                ]
            },
            "FailureToPrepareMeal": {
                "axiom": {
                    "subClassOf": [
                        "MealProblem"
                    ]
                },
                "description": "FailureToPrepareMeal is defined as a subclass of MealProblem, representing a specific type of problem wherein a meal is not successfully prepared. All instances of FailureToPrepareMeal are, by definition, also considered instances of MealProblem, aligning this class within the broader context of meal-related issues.",
                "CQ": [
                    {
                        "axiom": "FailureToPrepareMeal subClassOf MealProblem",
                        "CQ": [
                            "Does FailureToPrepareMeal fall under the category of MealProblem?",
                            "What types of issues are included as subclasses of MealProblem?",
                            "Which broader classes encompass FailureToPrepareMeal?"
                        ]
                    }
                ]
            },
            "InappropriateMealDuration": {
                "axiom": {
                    "subClassOf": [
                        "MealProblem"
                    ]
                },
                "description": "InappropriateMealDuration is defined as a subclass of MealProblem. This class represents meal-related issues specifically concerning the duration of meals. Any instance of InappropriateMealDuration is inherently a type of MealProblem, indicating that problems related to the amount of time spent during meals fall under this category.",
                "CQ": [
                    {
                        "axiom": "InappropriateMealDuration subClassOf MealProblem",
                        "CQ": [
                            "Is InappropriateMealDuration classified under the broader category of MealProblem?",
                            "Which specific problems are encompassed by the general class MealProblem, including InappropriateMealDuration?",
                            "To which overarching problem categories does InappropriateMealDuration pertain?"
                        ]
                    }
                ]
            },
            "InappropriateMealLocation": {
                "axiom": {
                    "subClassOf": [
                        "MealProblem"
                    ]
                },
                "description": "InappropriateMealLocation is a subclass of MealProblem. This class represents issues or problems specifically related to unsuitable or improper locations for meals. Every instance of InappropriateMealLocation is also considered a type of MealProblem, highlighting its role in categorizing location-based meal issues.",
                "CQ": [
                    {
                        "axiom": "InappropriateMealLocation subClassOf MealProblem",
                        "CQ": [
                            "Is InappropriateMealLocation categorized under the broader class of MealProblem?",
                            "Which types are classified as more specific instances of MealProblem, including InappropriateMealLocation?",
                            "To which higher-level categories does InappropriateMealLocation belong?"
                        ]
                    }
                ]
            },
            "InterruptedMeal": {
                "axiom": {
                    "subClassOf": [
                        "MealProblem"
                    ]
                },
                "description": "InterruptedMeal is a subclass of MealProblem, indicating that it represents a specific type of issue arising during a meal. Members of this class are characterized as meal-related problems where the meal is disrupted or not completed as intended. This formalization ensures that any instance of InterruptedMeal also qualifies as a MealProblem, distinguishing it from other meal-related issues by its defining feature of interruption.",
                "CQ": [
                    {
                        "axiom": "InterruptedMeal subClassOf MealProblem",
                        "CQ": [
                            "Does InterruptedMeal belong to the broader classification of MealProblem?",
                            "Which problem types encompass InterruptedMeal as a more specific instance?",
                            "What categories represent the superclass of InterruptedMeal?"
                        ]
                    }
                ]
            },
            "MissedMeal": {
                "axiom": {
                    "subClassOf": [
                        "MealProblem"
                    ]
                },
                "description": "MissedMeal is defined as a subclass of MealProblem, meaning it represents a specific type of problem related to meals. Any instance of MissedMeal is, by definition, also an instance of MealProblem. This classification is used to denote situations where a meal is not consumed as expected.",
                "CQ": [
                    {
                        "axiom": "MissedMeal subClassOf MealProblem",
                        "CQ": [
                            "Is MissedMeal categorized as a kind of MealProblem?",
                            "Which problems are subclasses of MealProblem, specifically including MissedMeal?",
                            "What broader classifications does MissedMeal fall under within the ontology?"
                        ]
                    }
                ]
            },
            "FragmentedSleepProblem": {
                "axiom": {
                    "subClassOf": [
                        "InterruptedSleepProblem"
                    ]
                },
                "description": "FragmentedSleepProblem is a subclass of InterruptedSleepProblem, representing a specific type of sleep disturbance characterized by sleep fragmentation. This condition involves frequent interruptions or arousals during sleep, leading to broken or non-continuous sleep.",
                "CQ": [
                    {
                        "axiom": "FragmentedSleepProblem subClassOf InterruptedSleepProblem",
                        "CQ": [
                            "Is FragmentedSleepProblem categorized as a type of InterruptedSleepProblem?",
                            "Which specific sleep problems are classified under InterruptedSleepProblem, such as FragmentedSleepProblem?",
                            "What broader sleep problem categories encompass FragmentedSleepProblem?"
                        ]
                    }
                ]
            },
            "Nocturia": {
                "axiom": {
                    "subClassOf": [
                        "InterruptedSleepProblem"
                    ]
                },
                "description": "Nocturia is defined as a subclass of InterruptedSleepProblem. Individuals with nocturia typically experience interrupted sleep due to visiting the bathroom more than twice during the night. This classification formalizes nocturia as a specific type of sleep disturbance characterized by frequent nighttime urination.",
                "CQ": [
                    {
                        "axiom": "Nocturia subClassOf InterruptedSleepProblem",
                        "CQ": [
                            "Is Nocturia classified as a kind of InterruptedSleepProblem?",
                            "Which sleep problems are considered subtypes of InterruptedSleepProblem, such as Nocturia?",
                            "What broader problem categories include Nocturia among their subclasses?"
                        ]
                    }
                ]
            },
            "HighStressLevel": {
                "axiom": {
                    "subClassOf": [
                        "MoodProblem"
                    ]
                },
                "description": "HighStressLevel is defined as a subclass of MoodProblem, indicating that all individuals classified as HighStressLevel are also considered to have a mood-related problem. This formalization groups HighStressLevel within the broader category of mood issues for more precise reasoning and classification. No additional property restrictions or disjointness axioms are specified.",
                "CQ": [
                    {
                        "axiom": "HighStressLevel subClassOf MoodProblem",
                        "CQ": [
                            "Is HighStressLevel classified under the broader group of MoodProblem?",
                            "Which mood-related issues encompass HighStressLevel as a specific case?",
                            "What higher-level categories does HighStressLevel fall under within the context of mood problems?"
                        ]
                    }
                ]
            },
            "SelfReportedLowMood": {
                "axiom": {
                    "subClassOf": [
                        "MoodProblem"
                    ]
                },
                "description": "SelfReportedLowMood is defined as a subclass of MoodProblem, indicating that all individuals classified under SelfReportedLowMood are also considered types of MoodProblem. This formalization implies that SelfReportedLowMood represents a specific form or instance of mood problem, characterized by being self-reported rather than externally assessed.",
                "CQ": [
                    {
                        "axiom": "SelfReportedLowMood subClassOf MoodProblem",
                        "CQ": [
                            "Does SelfReportedLowMood fall under the broader classification of MoodProblem?",
                            "Which conditions are categorized as more specific forms of MoodProblem, such as SelfReportedLowMood?",
                            "To which overarching classes does SelfReportedLowMood pertain within the mood domain?"
                        ]
                    }
                ]
            },
            "InsufficientAccelerometerCounts": {
                "axiom": {
                    "subClassOf": [
                        "ExerciseProblem"
                    ]
                },
                "description": "InsufficientAccelerometerCounts is defined as a subclass of ExerciseProblem. This class represents a specific type of exercise problem where the measured accelerometer counts are lower than required or expected levels, indicating an issue with the quantity or quality of motion captured during exercise activities.",
                "CQ": [
                    {
                        "axiom": "InsufficientAccelerometerCounts subClassOf ExerciseProblem",
                        "CQ": [
                            "Is InsufficientAccelerometerCounts classified under the broader category of ExerciseProblem?",
                            "Which more specific problems are encompassed by ExerciseProblem, such as InsufficientAccelerometerCounts?",
                            "What higher-level categories include InsufficientAccelerometerCounts as a member?"
                        ]
                    }
                ]
            },
            "ShortStrideLength": {
                "axiom": {
                    "subClassOf": [
                        "ExerciseProblem"
                    ]
                },
                "description": "ShortStrideLength is defined as a subclass of ExerciseProblem. This indicates that it represents a specific type of issue encountered during exercise, categorized under general exercise problems. No further constraints or distinguishing characteristics are specified.",
                "CQ": [
                    {
                        "axiom": "ShortStrideLength subClassOf ExerciseProblem",
                        "CQ": [
                            "Is ShortStrideLength classified as a type of ExerciseProblem?",
                            "What specific types fall under the category of ExerciseProblem, including ShortStrideLength?",
                            "Which higher-level categories encompass ShortStrideLength as a member?"
                        ]
                    }
                ]
            },
            "SlowWalkSpeed": {
                "axiom": {
                    "subClassOf": [
                        "ExerciseProblem"
                    ]
                },
                "description": "SlowWalkSpeed is defined as a subclass of ExerciseProblem, indicating that it represents a specific type of problem or difficulty related to walking at a slow speed. Members of this class are considered instances where an individual's slow walking speed is identified as an exercise-related issue.",
                "CQ": [
                    {
                        "axiom": "SlowWalkSpeed subClassOf ExerciseProblem",
                        "CQ": [
                            "Is SlowWalkSpeed classified as a type of ExerciseProblem?",
                            "What specific subtypes fall under ExerciseProblem, such as SlowWalkSpeed?",
                            "Which higher-level classes include SlowWalkSpeed as a subordinate concept?"
                        ]
                    }
                ]
            },
            "InsufficientFaceToFaceInteraction": {
                "axiom": {
                    "subClassOf": [
                        "SocialProblem"
                    ]
                },
                "description": "InsufficientFaceToFaceInteraction is defined as a subclass of SocialProblem. This class represents social problems that arise specifically from a lack of direct, in-person interactions between individuals. Any instance of InsufficientFaceToFaceInteraction is, by definition, also an instance of SocialProblem, indicating its relevance within the broader context of social issues.",
                "CQ": [
                    {
                        "axiom": "InsufficientFaceToFaceInteraction subClassOf SocialProblem",
                        "CQ": [
                            "Is InsufficientFaceToFaceInteraction categorized as a specific type of SocialProblem?",
                            "What kinds of SocialProblem encompass InsufficientFaceToFaceInteraction as a subclass?",
                            "Which more general classifications include InsufficientFaceToFaceInteraction within their scope?"
                        ]
                    }
                ]
            },
            "InsufficientTelephoneInteraction": {
                "axiom": {
                    "subClassOf": [
                        "SocialProblem"
                    ]
                },
                "description": "InsufficientTelephoneInteraction is defined as a subclass of SocialProblem. This means that every instance of InsufficientTelephoneInteraction is also an instance of SocialProblem, situating it within the broader category of issues impacting social well-being. No further property restrictions or disjointness axioms are specified, so its definition relies solely on its classification as a type of social problem.",
                "CQ": [
                    {
                        "axiom": "InsufficientTelephoneInteraction subClassOf SocialProblem",
                        "CQ": [
                            "Is InsufficientTelephoneInteraction classified under the broader category of SocialProblem?",
                            "Which specific social problems include InsufficientTelephoneInteraction as a subtype?",
                            "What are the more general categories that encompass InsufficientTelephoneInteraction?"
                        ]
                    }
                ]
            },
            "InterruptedSleepProblem": {
                "axiom": {
                    "subClassOf": [
                        "SleepProblem"
                    ]
                },
                "description": "InterruptedSleepProblem is defined as a subclass of SleepProblem, indicating that every instance of InterruptedSleepProblem is also an instance of SleepProblem. This class characterizes sleep issues specifically involving interruptions or disturbances during sleep, distinguishing it from other types of sleep problems.",
                "CQ": [
                    {
                        "axiom": "InterruptedSleepProblem subClassOf SleepProblem",
                        "CQ": [
                            "Does InterruptedSleepProblem fall under the general classification of SleepProblem?",
                            "What types of SleepProblem are defined, and does this include InterruptedSleepProblem?",
                            "To which parent classes is InterruptedSleepProblem associated?"
                        ]
                    }
                ]
            },
            "NappingProblem": {
                "axiom": {
                    "subClassOf": [
                        "SleepProblem"
                    ]
                },
                "description": "NappingProblem is defined as a subclass of SleepProblem, indicating that any instance classified as a NappingProblem is also recognized as a SleepProblem. This class formalizes issues specifically related to napping, distinguishing it from other types of sleep problems.",
                "CQ": [
                    {
                        "axiom": "NappingProblem subClassOf SleepProblem",
                        "CQ": [
                            "Is NappingProblem categorized under the broader class of SleepProblem?",
                            "What are all the more specific problem types that fall under SleepProblem, including NappingProblem?",
                            "Which upper-level categories encompass NappingProblem?"
                        ]
                    }
                ]
            },
            "PeriodicLimbMovement": {
                "axiom": {
                    "subClassOf": [
                        "SleepProblem"
                    ]
                },
                "description": "PeriodicLimbMovement is defined as a subclass of SleepProblem, indicating that every instance of PeriodicLimbMovement is also considered a type of sleep problem. This class captures disturbances involving repetitive limb movements during sleep, aligning with the broader classification of sleep-related disorders.",
                "CQ": [
                    {
                        "axiom": "PeriodicLimbMovement subClassOf SleepProblem",
                        "CQ": [
                            "Is PeriodicLimbMovement classified under the broader category of SleepProblem?",
                            "Which specific types of SleepProblem include PeriodicLimbMovement?",
                            "What are the parent categories associated with PeriodicLimbMovement?"
                        ]
                    }
                ]
            },
            "SleepDurationProblem": {
                "axiom": {
                    "subClassOf": [
                        "SleepProblem"
                    ]
                },
                "description": "SleepDurationProblem is defined as a subclass of SleepProblem. Members of this class experience issues related specifically to sleep duration. According to the current description, this class is characterized by individuals whose sleep duration is less than 7 hours. This formalization ensures that all instances of SleepDurationProblem represent cases where insufficient sleep time is the primary issue.",
                "CQ": [
                    {
                        "axiom": "SleepDurationProblem subClassOf SleepProblem",
                        "CQ": [
                            "Is SleepDurationProblem categorized under the broader class of SleepProblem?",
                            "Which types of sleep issues are classified as more specific than SleepProblem, such as SleepDurationProblem?",
                            "To what higher-level groups does SleepDurationProblem belong within the ontology?"
                        ]
                    }
                ]
            },
            "SleepEfficiencyProblem": {
                "axiom": {
                    "subClassOf": [
                        "SleepProblem"
                    ]
                },
                "description": "SleepEfficiencyProblem is a subclass of SleepProblem, referring specifically to cases where an individual's sleep efficiency is less than 85%. This classification distinguishes SleepEfficiencyProblem from other sleep-related issues by focusing on reduced efficiency in sleep, as formally defined by the subclass axiom and supported by the given comment.",
                "CQ": [
                    {
                        "axiom": "SleepEfficiencyProblem subClassOf SleepProblem",
                        "CQ": [
                            "Does SleepEfficiencyProblem fall under the broader classification of SleepProblem?",
                            "Which subclasses are encompassed by SleepProblem, such as SleepEfficiencyProblem?",
                            "What higher-level categories are associated with SleepEfficiencyProblem?"
                        ]
                    }
                ]
            },
            "SleepLatencyProblem": {
                "axiom": {
                    "subClassOf": [
                        "SleepProblem"
                    ]
                },
                "description": "SleepLatencyProblem is a subclass of SleepProblem, representing a specific type of sleep issue. Members of this class are characterized by experiencing sleep latency (the time taken to fall asleep) exceeding 30 minutes. This definition situates SleepLatencyProblem within the broader category of sleep-related disorders, with a focus on delayed sleep onset.",
                "CQ": [
                    {
                        "axiom": "SleepLatencyProblem subClassOf SleepProblem",
                        "CQ": [
                            "Does SleepLatencyProblem fall under the broader classification of SleepProblem?",
                            "Which more specific problems are categorized within SleepProblem, such as SleepLatencyProblem?",
                            "What higher-level categories does SleepLatencyProblem pertain to in the ontology?"
                        ]
                    }
                ]
            },
            "MealProblem": {
                "axiom": {
                    "subClassOf": [
                        "ADLProblem"
                    ]
                },
                "description": "MealProblem is defined as a subclass of ADLProblem, indicating that it represents a specific kind of difficulty or issue related to Activities of Daily Living (ADL). Any instance of MealProblem is also an instance of ADLProblem, inheriting its characteristics and properties, but is used to specifically denote problems associated with meal-related activities.",
                "CQ": [
                    {
                        "axiom": "MealProblem subClassOf ADLProblem",
                        "CQ": [
                            "Does MealProblem fall under the overarching category of ADLProblem?",
                            "Which problem types are more specific instances of ADLProblem, such as MealProblem?",
                            "To which higher-level classifications is MealProblem associated within the context of ADLProblem?"
                        ]
                    }
                ]
            },
            "MoodQuestionnaire": {
                "axiom": {
                    "subClassOf": [
                        "Questionnaire"
                    ]
                },
                "description": "MoodQuestionnaire is defined as a subclass of Questionnaire. This class represents questionnaires designed specifically to assess or measure mood-related aspects of an individual. All MoodQuestionnaire instances inherit the general characteristics of Questionnaire, while focusing on evaluating emotional or affective states.",
                "CQ": [
                    {
                        "axiom": "MoodQuestionnaire subClassOf Questionnaire",
                        "CQ": [
                            "Is MoodQuestionnaire classified under the broader group of Questionnaire?",
                            "Which questionnaire types are more specific than Questionnaire, for example, MoodQuestionnaire?",
                            "What higher-level categories encompass MoodQuestionnaire?"
                        ]
                    }
                ]
            },
            "SleepQuestionnaire": {
                "axiom": {
                    "subClassOf": [
                        "Questionnaire"
                    ]
                },
                "description": "SleepQuestionnaire is defined as a subclass of Questionnaire. This means every SleepQuestionnaire is a type of Questionnaire, typically designed to assess or gather information related to sleep patterns, habits, or disorders. No additional restrictions or disjointness axioms are specified.",
                "CQ": [
                    {
                        "axiom": "SleepQuestionnaire subClassOf Questionnaire",
                        "CQ": [
                            "Is SleepQuestionnaire categorized under the broader class of Questionnaire?",
                            "Which types of Questionnaire include SleepQuestionnaire as a specific example?",
                            "What are the direct parent classes of SleepQuestionnaire in the ontology?"
                        ]
                    }
                ]
            },
            "event:LongNap": {
                "axiom": {
                    "propertyRestrictions": [
                        "[highlight hasValue true]"
                    ]
                },
                "description": "event:LongNap is a class characterized by the requirement that all its instances have the property ‘highlight’ set to true. This means every long nap event is marked as highlighted, distinguishing it from other types of events that may not have this property. There are no additional subclass, disjointness, or other property axioms specified.",
                "CQ": [
                    {
                        "axiom": "event:LongNap propertyRestrictions [highlight hasValue true]",
                        "CQ": [
                            "Does every LongNap event necessarily have the highlight property set to true?",
                            "Can a LongNap event exist without having the highlight property valued as true?",
                            "Is the highlight property of a LongNap event universally constrained to the value true?"
                        ]
                    }
                ]
            },
            "event:NapAfterLunch": {
                "axiom": {
                    "propertyRestrictions": [
                        "[highlight hasValue true]"
                    ]
                },
                "description": "event:NapAfterLunch is a class characterized by having the property highlight with a required value of true for all its instances. This means every instance of event:NapAfterLunch must be associated with the property highlight set to true, signifying its notable or emphasized status within a given context. No other description is currently provided, so the class is defined solely by this property restriction.",
                "CQ": [
                    {
                        "axiom": "event:NapAfterLunch propertyRestrictions [highlight hasValue true]",
                        "CQ": [
                            "Must every instance of NapAfterLunch have the property 'highlight' with the value true?",
                            "Is it required that NapAfterLunch events are always associated with a 'highlight' property set to true?",
                            "Can a NapAfterLunch event exist without possessing 'highlight' equal to true?"
                        ]
                    }
                ]
            },
            "event:NightKitchenVisit": {
                "axiom": {
                    "propertyRestrictions": [
                        "[highlight hasValue true]"
                    ]
                },
                "description": "event:NightKitchenVisit is a class characterized by the property restriction that any instance must have the attribute 'highlight' with a value of true. This means that all individuals classified under event:NightKitchenVisit are specifically marked or emphasized via the 'highlight' property. In the absence of additional superclasses or disjointness, this class is primarily defined by this property restriction.",
                "CQ": [
                    {
                        "axiom": "event:NightKitchenVisit propertyRestrictions [highlight hasValue true]",
                        "CQ": [
                            "Is it required for every NightKitchenVisit event to have the property ‘highlight’ set to true?",
                            "Are all instances of NightKitchenVisit characterized by the property ‘highlight’ having the value true?",
                            "Does the ontology restrict the ‘highlight’ property of NightKitchenVisit events so that only those with value true are permitted?"
                        ]
                    }
                ]
            },
            "event:NightLivingRoomVisit": {
                "axiom": {
                    "propertyRestrictions": [
                        "[highlight hasValue true]"
                    ]
                },
                "description": "event:NightLivingRoomVisit is a class characterized by the property restriction that every instance must have the property 'highlight' with the value 'true'. This formalization ensures that any individual classified as event:NightLivingRoomVisit is specifically marked as highlighted, indicating its special significance or prominence.",
                "CQ": [
                    {
                        "axiom": "event:NightLivingRoomVisit propertyRestrictions [highlight hasValue true]",
                        "CQ": [
                            "Must every NightLivingRoomVisit event have the highlight property set to true?",
                            "Is it possible for any NightLivingRoomVisit event to exist without the highlight property being true?",
                            "Are all NightLivingRoomVisit events required to entail highlight equals true as a property restriction?"
                        ]
                    }
                ]
            },
            "DaySummary": {
                "axiom": {
                    "propertyRestrictions": [
                        "[date exactly 1 xsd:dateTime]",
                        "[forPatient exactly 1 event:Patient]",
                        "[date some xsd:dateTime]",
                        "[forPatient some event:Patient]"
                    ]
                },
                "description": "DaySummary is a class characterized by the presence of exactly one associated date (of type xsd:dateTime) and exactly one related patient (of class event:Patient). Additionally, every instance must have at least one date and be linked to at least one patient. This ensures that each DaySummary uniquely corresponds to a specific date and patient, representing summaries that are strictly tied to individual patient-days.",
                "CQ": [
                    {
                        "axiom": "DaySummary propertyRestrictions [date exactly 1 xsd:dateTime]",
                        "CQ": [
                            "Must every DaySummary be associated with exactly one date value?",
                            "Is it valid for a DaySummary to have more than one date assigned?",
                            "Can a DaySummary exist without a specified date value?"
                        ]
                    },
                    {
                        "axiom": "DaySummary propertyRestrictions [forPatient exactly 1 event:Patient]",
                        "CQ": [
                            "Must every DaySummary reference exactly one Patient through the 'forPatient' property?",
                            "Can a DaySummary be associated with more than one Patient using the 'forPatient' relationship?",
                            "Is it possible for a DaySummary to lack an association to a Patient via the 'forPatient' property?"
                        ]
                    },
                    {
                        "axiom": "DaySummary propertyRestrictions [date some xsd:dateTime]",
                        "CQ": [
                            "Is it required that every DaySummary is associated with at least one date value?",
                            "Does a DaySummary necessarily reference a date using the 'date' property?",
                            "Can a DaySummary exist without having any 'date' property assigned to a dateTime value?"
                        ]
                    },
                    {
                        "axiom": "DaySummary propertyRestrictions [forPatient some event:Patient]",
                        "CQ": [
                            "Does every DaySummary necessarily reference at least one Patient via the forPatient property?",
                            "Is it required that any DaySummary instance be linked to a Patient through forPatient?",
                            "Can a DaySummary exist without being associated with a Patient by the forPatient relationship?"
                        ]
                    }
                ]
            },
            "Problem": {
                "axiom": {
                    "propertyRestrictions": [
                        "[possibleContributingFactor some event:Event]"
                    ]
                },
                "description": "Problem is a class characterized by the existence of at least one possible contributing factor, which must be an instance of event:Event. This means that any individual classified as a Problem is associated with one or more events identified as potential factors contributing to the occurrence of the problem.",
                "CQ": [
                    {
                        "axiom": "Problem propertyRestrictions [possibleContributingFactor some event:Event]",
                        "CQ": [
                            "Does a problem necessarily have at least one possible contributing factor that is an event?",
                            "Is it required for every instance of Problem to be associated with some event as a possible contributing factor?",
                            "Can a problem exist without having any event identified as a possible contributing factor?"
                        ]
                    }
                ]
            }
        },
        "properties": {
            "sleepTime": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"sleepTime\" has no specified characteristics, domain, or range restrictions. It does not have any super-properties or inverse properties defined. Based on its name, \"sleepTime\" likely represents the time or duration related to an entity's sleep, but further constraints or intended usage are not specified in the current axioms.",
                "CQ": [
                    {
                        "axiom": "sleepTime domain None",
                        "CQ": [
                            "Is it correct that the property 'sleepTime' does not have a specified domain?",
                            "Which types of entities can be associated as the subject when using the property 'sleepTime'?",
                            "Can the property 'sleepTime' be assigned to any class, or should its domain be defined?"
                        ]
                    },
                    {
                        "axiom": "sleepTime range None",
                        "CQ": [
                            "What can be the range of the property 'sleepTime'?",
                            "Is it correct that the property 'sleepTime' does not have a defined range?",
                            "Can sleepTime relate to any value type, or should its range be specified?"
                        ]
                    }
                ]
            },
            "lightLevel": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"lightLevel\" does not have explicitly defined characteristics, domain, range, super-properties, or inverse properties. No additional description or axiomatic restrictions are provided, suggesting its intended use is either unspecified or context-dependent within the ontology.",
                "CQ": [
                    {
                        "axiom": "lightLevel domain None",
                        "CQ": [
                            "Can the property 'lightLevel' take any subject, since its domain is undefined?",
                            "What types of entities, if any, are permitted as subjects for the property 'lightLevel'?",
                            "Is it correct that the 'lightLevel' property has no assigned domain?"
                        ]
                    },
                    {
                        "axiom": "lightLevel range None",
                        "CQ": [
                            "What types of values can serve as the range for the property 'lightLevel'?",
                            "Is it correct that the property 'lightLevel' has no specified range?",
                            "Can 'lightLevel' have a range constraint besides being unspecified?"
                        ]
                    }
                ]
            },
            "sleepBedTime": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"sleepBedTime\" has no defined characteristics, domain, range, super-properties, or inverse properties. Based on its name, it is likely intended to represent the time at which an individual goes to bed for sleep, but no formal constraints or descriptions are provided.",
                "CQ": [
                    {
                        "axiom": "sleepBedTime domain None",
                        "CQ": [
                            "Is it correct that the property 'sleepBedTime' does not have a specified domain?",
                            "What kinds of entities can be subjects of the 'sleepBedTime' property?",
                            "Can any entity be associated with the 'sleepBedTime' property regardless of its type?"
                        ]
                    },
                    {
                        "axiom": "sleepBedTime range None",
                        "CQ": [
                            "Is it correct that the property 'sleepBedTime' does not have a specified range?",
                            "What types of values can be the range of the property 'sleepBedTime'?",
                            "Can 'sleepBedTime' take a value that is not explicitly defined by any class in the ontology?"
                        ]
                    }
                ]
            },
            "eatingLocation": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "EatingSummary"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"eatingLocation\" has no explicitly defined characteristics, super-properties, or inverse properties. Its domain is restricted to instances of \"EatingSummary,\" while its range is unspecified. This property is used to associate an \"EatingSummary\" with a location where eating occurs.",
                "CQ": [
                    {
                        "axiom": "eatingLocation domain EatingSummary",
                        "CQ": [
                            "Is it possible for something other than an EatingSummary to have an eatingLocation?",
                            "Are there any instances of EatingSummary that do not have an eatingLocation?",
                            "What types of subjects are allowed to use the eatingLocation property?"
                        ]
                    },
                    {
                        "axiom": "eatingLocation range None",
                        "CQ": [
                            "What can be the range of the property 'eatingLocation'?",
                            "Is it correct that the property 'eatingLocation' has no specified range?",
                            "Can 'eatingLocation' be used with any type of value as its object?"
                        ]
                    }
                ]
            },
            "exerciseStartTime": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "time:hasBeginning"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"exerciseStartTime\" does not have explicitly defined characteristics, domain, or range restrictions. It is specified as a sub-property of \"time:hasBeginning,\" indicating that it denotes the starting time of an exercise event within the broader context of temporal beginnings. No inverse property is defined.",
                "CQ": [
                    {
                        "axiom": "exerciseStartTime domain None",
                        "CQ": [
                            "What are the possible domains for the property 'exerciseStartTime'?",
                            "Is it correct that 'exerciseStartTime' does not have a specified domain?",
                            "Can 'exerciseStartTime' be associated with subjects of any type?"
                        ]
                    },
                    {
                        "axiom": "exerciseStartTime range None",
                        "CQ": [
                            "Is there any type of value that should serve as the range for the property 'exerciseStartTime'?",
                            "What entities can appear as the object of the 'exerciseStartTime' property?",
                            "Is it correct that the property 'exerciseStartTime' has no specified range?"
                        ]
                    },
                    {
                        "axiom": "exerciseStartTime subPropertyOf time:hasBeginning",
                        "CQ": [
                            "Is exerciseStartTime considered a more specific form of time:hasBeginning?",
                            "Which properties are classified as subproperties of time:hasBeginning?",
                            "Does exerciseStartTime always entail the use of time:hasBeginning when describing an event?"
                        ]
                    }
                ]
            },
            "numberOfArousals": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"numberOfArousals\" has no explicitly defined characteristics, domain, or range restrictions, and is not specified as a sub-property or inverse of any other property. Based on its name, it is likely intended to represent the count or frequency of arousal events associated with an entity, but no formal constraints are provided.",
                "CQ": [
                    {
                        "axiom": "numberOfArousals domain None",
                        "CQ": [
                            "What can be the domain of the property 'numberOfArousals'?",
                            "Is it correct that the property 'numberOfArousals' does not have a defined domain?",
                            "Should 'numberOfArousals' be restricted to a specific class as its domain?"
                        ]
                    },
                    {
                        "axiom": "numberOfArousals range None",
                        "CQ": [
                            "What types of values can be used as the range for the property 'numberOfArousals'?",
                            "Is it correct that the property 'numberOfArousals' does not specify any range?",
                            "Are there any entities that should be designated as the range for the property 'numberOfArousals'?"
                        ]
                    }
                ]
            },
            "numberOfCommunicativeAttempts": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"numberOfCommunicativeAttempts\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. Based on its name, it likely represents a quantitative value indicating how many times an entity attempts communication. No further semantic restrictions are specified by the axioms.",
                "CQ": [
                    {
                        "axiom": "numberOfCommunicativeAttempts domain None",
                        "CQ": [
                            "Is it correct that the property 'numberOfCommunicativeAttempts' does not have a defined domain?",
                            "What entities can act as the domain for the property 'numberOfCommunicativeAttempts'?",
                            "Can 'numberOfCommunicativeAttempts' be associated with subjects of any type, given the absence of a specified domain?"
                        ]
                    },
                    {
                        "axiom": "numberOfCommunicativeAttempts range None",
                        "CQ": [
                            "What entities can be used as the value for the property 'numberOfCommunicativeAttempts'?",
                            "Is it correct that the property 'numberOfCommunicativeAttempts' does not have a defined range?",
                            "Can 'numberOfCommunicativeAttempts' be associated with any type of entity as its value?"
                        ]
                    }
                ]
            },
            "numberOfNaps": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"numberOfNaps\" has no explicitly defined characteristics, domain, or range constraints. It is not specified as a sub-property of any other property and does not have an inverse property. The intended use of this property may be to associate an entity with the number of naps it takes, but no formal restrictions are currently imposed.",
                "CQ": [
                    {
                        "axiom": "numberOfNaps domain None",
                        "CQ": [
                            "Is it correct that the property 'numberOfNaps' does not have a domain?",
                            "What types of entities, if any, can be the subject of 'numberOfNaps'?",
                            "Can 'numberOfNaps' be assigned to entities without specifying a particular class as its domain?"
                        ]
                    },
                    {
                        "axiom": "numberOfNaps range None",
                        "CQ": [
                            "What entities are permitted to be the value of the property 'numberOfNaps'?",
                            "Is it correct that the property 'numberOfNaps' does not restrict its range?",
                            "Are there any datatype or class constraints on the range of the property 'numberOfNaps'?"
                        ]
                    }
                ]
            },
            "exerciseDuration": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "time:hasBeginning"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"exerciseDuration\" does not specify explicit domain or range restrictions, nor any special characteristics. It is defined as a sub-property of \"time:hasBeginning,\" indicating that it inherits semantic meaning related to temporal beginnings. No inverse property is provided. This property is primarily intended to represent the temporal duration associated with an exercise activity.",
                "CQ": [
                    {
                        "axiom": "exerciseDuration domain None",
                        "CQ": [
                            "What can be the domain of the property 'exerciseDuration'?",
                            "Is it correct that the property 'exerciseDuration' does not have any specified domain?",
                            "Can 'exerciseDuration' be associated with any entity regardless of type?"
                        ]
                    },
                    {
                        "axiom": "exerciseDuration range None",
                        "CQ": [
                            "Can the property 'exerciseDuration' have a range other than unspecified?",
                            "What types of values can serve as the range for 'exerciseDuration'?",
                            "Is it appropriate for the property 'exerciseDuration' to lack a specified range?"
                        ]
                    },
                    {
                        "axiom": "exerciseDuration subPropertyOf time:hasBeginning",
                        "CQ": [
                            "Is every instance of the exerciseDuration property also an instance of time:hasBeginning?",
                            "Which properties are subproperties encompassed by time:hasBeginning in the ontology?",
                            "What superproperties does exerciseDuration have according to the property hierarchy?"
                        ]
                    }
                ]
            },
            "strideLength": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"strideLength\" has no explicitly defined characteristics, domain, or range restrictions, and is not specified as a sub-property or inverse of any other property. Its description and usage context should be clarified in the ontology, as no formal axioms currently constrain its application.",
                "CQ": [
                    {
                        "axiom": "strideLength domain None",
                        "CQ": [
                            "Is it correct that the 'strideLength' property does not have a defined domain?",
                            "What possible entities can serve as the domain for the 'strideLength' property?",
                            "Can 'strideLength' be used with subjects other than those in a specified class?"
                        ]
                    },
                    {
                        "axiom": "strideLength range None",
                        "CQ": [
                            "Can the property 'strideLength' have a range other than None?",
                            "What types of entities can be the range of the property 'strideLength'?",
                            "Is it valid for 'strideLength' to have no range defined?"
                        ]
                    }
                ]
            },
            "sleepEfficiency": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"sleepEfficiency\" has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. Its intended use is not further specified by axioms, indicating it may be used flexibly unless additional constraints are provided elsewhere in the ontology.",
                "CQ": [
                    {
                        "axiom": "sleepEfficiency domain None",
                        "CQ": [
                            "What can be the domain of the property 'sleepEfficiency'?",
                            "Is it correct that the property 'sleepEfficiency' does not have a specified domain?",
                            "Can 'sleepEfficiency' relate to entities other than those with a defined domain?"
                        ]
                    },
                    {
                        "axiom": "sleepEfficiency range None",
                        "CQ": [
                            "What types of values can be assigned as the range of the property 'sleepEfficiency'?",
                            "Is it correct that the property 'sleepEfficiency' does not have a specified range?",
                            "Can entities outside of any specified class be associated as the value of 'sleepEfficiency'?"
                        ]
                    }
                ]
            },
            "numberOfFaceToFaceConversations": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"numberOfFaceToFaceConversations\" has no explicitly defined characteristics, domain, or range restrictions, and is not specified as a subproperty or inverse of any other property. It is likely intended to represent the count of face-to-face conversations associated with an entity, but no further axiomatic constraints are provided.",
                "CQ": [
                    {
                        "axiom": "numberOfFaceToFaceConversations domain None",
                        "CQ": [
                            "Is 'numberOfFaceToFaceConversations' required to have a specific class as its domain?",
                            "What potential classes or entities can be the domain of 'numberOfFaceToFaceConversations'?",
                            "Is it correct that 'numberOfFaceToFaceConversations' does not have a defined domain?"
                        ]
                    },
                    {
                        "axiom": "numberOfFaceToFaceConversations range None",
                        "CQ": [
                            "What can be the range of the property 'numberOfFaceToFaceConversations'?",
                            "Is it correct that 'numberOfFaceToFaceConversations' has no specified range?",
                            "Can any type of entity be the range for 'numberOfFaceToFaceConversations'?"
                        ]
                    }
                ]
            },
            "endTime": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"endTime\" has no explicitly defined characteristics, domain, or range restrictions. It does not specify any super-properties or inverse properties. This suggests that \"endTime\" can be used flexibly to relate an entity to its corresponding end time, but the specific types of subjects and values are not constrained by the current axioms.",
                "CQ": [
                    {
                        "axiom": "endTime domain None",
                        "CQ": [
                            "Is it correct that the property 'endTime' does not have a defined domain?",
                            "What types of entities can use 'endTime' as a property?",
                            "Can any resource, regardless of class, have an 'endTime' value?"
                        ]
                    },
                    {
                        "axiom": "endTime range None",
                        "CQ": [
                            "Does the property 'endTime' have a defined range?",
                            "What types of values, if any, can be assigned as the range of 'endTime'?",
                            "Is it valid for the property 'endTime' to have no specified range?"
                        ]
                    }
                ]
            },
            "hasValue": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"hasValue\" has no specified domain, range, characteristics, or super-properties. It is not defined as an inverse of any other property. Based on the axiom, \"hasValue\" is a general-purpose property with unconstrained usage. Its intended meaning and constraints should be clarified within specific ontological contexts.",
                "CQ": [
                    {
                        "axiom": "hasValue domain None",
                        "CQ": [
                            "What kinds of entities can be the subject of the property 'hasValue'?",
                            "Is it correct that the property 'hasValue' does not have a defined domain?",
                            "Can 'hasValue' apply to entities of any type as its subject?"
                        ]
                    },
                    {
                        "axiom": "hasValue range None",
                        "CQ": [
                            "What entities can serve as the range for the property 'hasValue'?",
                            "Is it correct that the property 'hasValue' does not have a specified range?",
                            "Can 'hasValue' relate to any type of object as its value?"
                        ]
                    }
                ]
            },
            "date": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"date\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. This indicates that its intended usage and applicable types are not currently specified in the ontology.",
                "CQ": [
                    {
                        "axiom": "date domain None",
                        "CQ": [
                            "What types of entities can be the domain of the property 'date'?",
                            "Is it correct that the property 'date' does not have a specified domain?",
                            "Could the property 'date' be associated with subjects of any class?"
                        ]
                    },
                    {
                        "axiom": "date range None",
                        "CQ": [
                            "Is it correct that the property 'date range' does not have a specified domain?",
                            "What possible entities can act as the range for the property 'date range'?",
                            "Can 'date range' be assigned to any type of subject, or is there an implicit restriction on its domain?"
                        ]
                    }
                ]
            },
            "numberOfSocialInteractions": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"numberOfSocialInteractions\" has no explicitly defined characteristics, domain, or range constraints, and is not specified as a sub-property or inverse of any other property. This suggests it can be used flexibly to associate any subject and object, though its intended purpose is to represent the count or quantity of social interactions related to an entity.",
                "CQ": [
                    {
                        "axiom": "numberOfSocialInteractions domain None",
                        "CQ": [
                            "Is it possible for the property 'numberOfSocialInteractions' to have a domain?",
                            "What entities can act as the subject for the property 'numberOfSocialInteractions'?",
                            "Should the property 'numberOfSocialInteractions' be associated with any specific class as its domain?"
                        ]
                    },
                    {
                        "axiom": "numberOfSocialInteractions range None",
                        "CQ": [
                            "What kinds of values can appear as the range for the property 'numberOfSocialInteractions'?",
                            "Is it appropriate for the property 'numberOfSocialInteractions' to have no defined range?",
                            "Can the property 'numberOfSocialInteractions' be associated with any particular type of value as its range?"
                        ]
                    }
                ]
            },
            "sleepMovementIndex": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"sleepMovementIndex\" has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. Its use and meaning are unspecified in the ontology, as no descriptive information or axioms restrict or explain its application or value type.",
                "CQ": [
                    {
                        "axiom": "sleepMovementIndex domain None",
                        "CQ": [
                            "Can the property 'sleepMovementIndex' be associated with entities other than a specified domain?",
                            "What are the possible domains for the property 'sleepMovementIndex'?",
                            "Is it correct that 'sleepMovementIndex' does not have a defined domain?"
                        ]
                    },
                    {
                        "axiom": "sleepMovementIndex range None",
                        "CQ": [
                            "What can be the range of the property 'sleepMovementIndex'?",
                            "Is it valid for 'sleepMovementIndex' to not specify a range?",
                            "Are there entities that should be explicitly in the range of 'sleepMovementIndex'?"
                        ]
                    }
                ]
            },
            "walkSpeed": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"walkSpeed\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. Based on its name, it is likely intended to represent the walking speed of an entity, but no formal constraints or further description are provided.",
                "CQ": [
                    {
                        "axiom": "walkSpeed domain None",
                        "CQ": [
                            "Is it correct that the property 'walkSpeed' does not have a defined domain?",
                            "What kinds of entities can have a 'walkSpeed' property assigned to them?",
                            "Can 'walkSpeed' be applied to any type of subject, or should its domain be specified?"
                        ]
                    },
                    {
                        "axiom": "walkSpeed range None",
                        "CQ": [
                            "Is it correct that the property 'walkSpeed' does not specify a range?",
                            "What entities can serve as the range for the property 'walkSpeed'?",
                            "Can the 'walkSpeed' property take values of any type as its range?"
                        ]
                    }
                ]
            },
            "forPatient": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"forPatient\" has no explicitly defined domain, range, or characteristics. It does not specify any super-properties or inverse properties. Based on its name, it is intended to relate an entity or process to a patient, typically indicating that something is meant or designated for an individual receiving care.",
                "CQ": [
                    {
                        "axiom": "forPatient domain None",
                        "CQ": [
                            "What are the possible domain classes for the property 'forPatient'?",
                            "Is it correct that the property 'forPatient' does not specify any domain?",
                            "Can 'forPatient' be used with subjects other than a specific class?"
                        ]
                    },
                    {
                        "axiom": "forPatient range None",
                        "CQ": [
                            "Can the property 'forPatient' have any value as its range?",
                            "Is it accurate that 'forPatient' does not specify a range?",
                            "What entities may serve as the range of the property 'forPatient'?"
                        ]
                    }
                ]
            },
            "accelerometerCountsPerMinute": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"accelerometerCountsPerMinute\" has no specified domain, range, characteristics, super-properties, or inverse properties. It is designed to represent the number of counts detected by an accelerometer per minute but is not restricted to any particular subject or value type by current axioms.",
                "CQ": [
                    {
                        "axiom": "accelerometerCountsPerMinute domain None",
                        "CQ": [
                            "What types of entities can be subjects of the 'accelerometerCountsPerMinute' property?",
                            "Is the property 'accelerometerCountsPerMinute' restricted to any particular domain?",
                            "Is it accurate that 'accelerometerCountsPerMinute' has no assigned domain?"
                        ]
                    },
                    {
                        "axiom": "accelerometerCountsPerMinute range None",
                        "CQ": [
                            "Can accelerometerCountsPerMinute have a range other than None?",
                            "What types of values are permitted as the range of accelerometerCountsPerMinute?",
                            "Is it correct that the property accelerometerCountsPerMinute has no specified range?"
                        ]
                    }
                ]
            },
            "physicalHygiene": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"physicalHygiene\" has no explicitly defined characteristics, domain, or range restrictions, and is not specified as a sub-property or inverse of any other property. Its usage and scope are not further restricted by current axioms.",
                "CQ": [
                    {
                        "axiom": "physicalHygiene domain None",
                        "CQ": [
                            "What can be the domain of the property 'physicalHygiene'?",
                            "Is it correct that the property 'physicalHygiene' does not have a specified domain?",
                            "Can 'physicalHygiene' relate to entities of any type as its subject?"
                        ]
                    },
                    {
                        "axiom": "physicalHygiene range None",
                        "CQ": [
                            "What can be the range of the property 'physicalHygiene'?",
                            "Is it correct that 'physicalHygiene' is not restricted to any particular class as its range?",
                            "Can 'physicalHygiene' relate to instances of any class, or should its range be defined?"
                        ]
                    }
                ]
            },
            "possibleContributingFactor": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"possibleContributingFactor\" has no explicitly defined characteristics, domain, or range restrictions, and is not specified as a sub-property of any other property. No inverse property is defined. This property is intended to relate entities to possible factors that may contribute to a particular situation or event, but its usage is not restricted to specific classes or value types.",
                "CQ": [
                    {
                        "axiom": "possibleContributingFactor domain None",
                        "CQ": [
                            "What entities can serve as the domain for the property 'possibleContributingFactor'?",
                            "Is it correct that 'possibleContributingFactor' does not specify a domain?",
                            "Are there any domain restrictions for the usage of 'possibleContributingFactor'?"
                        ]
                    },
                    {
                        "axiom": "possibleContributingFactor range None",
                        "CQ": [
                            "Is it correct that the property 'possibleContributingFactor' does not have a specified range?",
                            "What types of entities can serve as the range for the property 'possibleContributingFactor'?",
                            "Are there any restrictions on what can be the range of 'possibleContributingFactor'?"
                        ]
                    }
                ]
            },
            "distanceTravelled": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"distanceTravelled\" has no specified characteristics, domain, or range restrictions. It is not defined as a sub-property of any other property and has no declared inverse property. Based on its name, it is likely intended to represent the distance an entity has moved or covered, but no formal constraints are currently specified.",
                "CQ": [
                    {
                        "axiom": "distanceTravelled domain None",
                        "CQ": [
                            "Is it correct that the property 'distanceTravelled' does not have a specified domain?",
                            "What kinds of entities can serve as the subject for the property 'distanceTravelled'?",
                            "Can 'distanceTravelled' be associated with any class, or should its domain be restricted to specific types?"
                        ]
                    },
                    {
                        "axiom": "distanceTravelled range None",
                        "CQ": [
                            "Is it correct that the property 'distanceTravelled' does not have a specified range?",
                            "What possible types of values can serve as the range for 'distanceTravelled'?",
                            "Can entities of any type appear as the object of the property 'distanceTravelled'?"
                        ]
                    }
                ]
            },
            "time:hasBeginning": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:hasBeginning\" has no explicitly defined characteristics, domain, or range constraints, nor does it specify any super-properties or inverse properties. Based on its name, it is likely intended to relate a temporal entity to its starting point or beginning, but no formal axioms restrict its usage.",
                "CQ": [
                    {
                        "axiom": "time:hasBeginning domain None",
                        "CQ": [
                            "Is it accurate that the property 'time:hasBeginning' has no specified domain?",
                            "What entities can serve as the domain for the property 'time:hasBeginning'?",
                            "Can the property 'time:hasBeginning' be associated with subjects of any type?"
                        ]
                    },
                    {
                        "axiom": "time:hasBeginning range None",
                        "CQ": [
                            "Is it correct that the property 'time:hasBeginning' has no specified range?",
                            "What entities can be used as the value (range) for 'time:hasBeginning'?",
                            "Can 'time:hasBeginning' have a range other than what is currently defined?"
                        ]
                    }
                ]
            },
            "eatingDuration": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "EatingSummary"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [
                        "time:hasDurationDescription"
                    ],
                    "inverseOf": []
                },
                "description": "The property \"eatingDuration\" has no explicitly defined characteristics or inverse property. Its domain is restricted to the class \"EatingSummary,\" indicating it describes aspects related to eating events. The property is a sub-property of \"time:hasDurationDescription,\" suggesting it inherits the semantics of specifying a duration. No explicit range is defined, leaving the range unspecific in this axiom.",
                "CQ": [
                    {
                        "axiom": "eatingDuration domain EatingSummary",
                        "CQ": [
                            "Is there any class other than EatingSummary that can be the domain of 'eatingDuration'?",
                            "Can the property 'eatingDuration' be asserted for any entity that is not an EatingSummary?",
                            "What are the possible classes that 'eatingDuration' can have as its subject?"
                        ]
                    },
                    {
                        "axiom": "eatingDuration range None",
                        "CQ": [
                            "What types of values can serve as the range of 'eatingDuration'?",
                            "Is it correct that the property 'eatingDuration' has no range specified?",
                            "Can 'eatingDuration' relate to values other than particular types, given its undefined range?"
                        ]
                    },
                    {
                        "axiom": "eatingDuration subPropertyOf time:hasDurationDescription",
                        "CQ": [
                            "Does using the eatingDuration property always imply the usage of time:hasDurationDescription?",
                            "Which subproperties fall under time:hasDurationDescription according to the ontology?",
                            "What superproperties are assigned to eatingDuration within the property hierarchy?"
                        ]
                    }
                ]
            },
            "highlight": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "event:Event"
                    ],
                    "range": [
                        "xsd:boolean"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"highlight\" has no specified characteristics, super-properties, or inverse properties. Its domain is restricted to instances of event:Event, and its range is xsd:boolean, indicating whether an event is highlighted (true) or not (false).",
                "CQ": [
                    {
                        "axiom": "highlight domain event:Event",
                        "CQ": [
                            "Is there any entity other than an Event that can be the subject of 'highlight'?",
                            "What types of individuals may appear as the domain of the 'highlight' property?",
                            "Must the subject of 'highlight' always be an Event?"
                        ]
                    },
                    {
                        "axiom": "highlight range xsd:boolean",
                        "CQ": [
                            "Can the property 'highlight' have a range other than xsd:boolean?",
                            "Is it possible for the property 'highlight' to be associated with values that are not of type xsd:boolean?",
                            "What datatypes are permitted as the range for the property 'highlight'?"
                        ]
                    }
                ]
            },
            "totalDurationOfNaps": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"totalDurationOfNaps\" currently has no explicitly defined domain, range, characteristics, super-properties, or inverse properties. Based on its name, it is intended to represent the total duration of naps associated with an entity. However, without further axioms, its precise usage within the ontology remains unspecified.",
                "CQ": [
                    {
                        "axiom": "totalDurationOfNaps domain None",
                        "CQ": [
                            "What entities can serve as the domain for the property 'totalDurationOfNaps'?",
                            "Is it correct that the property 'totalDurationOfNaps' has no domain defined?",
                            "Are there any classes that are explicitly linked as the domain of 'totalDurationOfNaps'?"
                        ]
                    },
                    {
                        "axiom": "totalDurationOfNaps range None",
                        "CQ": [
                            "Is it valid for the property 'totalDurationOfNaps' to have no specified range?",
                            "What entities can appear as the range of 'totalDurationOfNaps'?",
                            "Should 'totalDurationOfNaps' be restricted to values of a certain datatype or class as its range?"
                        ]
                    }
                ]
            },
            "sleepLatency": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"sleepLatency\" has no defined domain, range, or formal characteristics, and lacks specification of super-properties or an inverse property. Its formal usage and intended meaning must be inferred from its name, which typically refers to the duration or interval between attempting to sleep and the onset of sleep. No additional restrictions or relationships are provided in the current axioms.",
                "CQ": [
                    {
                        "axiom": "sleepLatency domain None",
                        "CQ": [
                            "Is it accurate that the property 'sleepLatency' does not have a defined domain?",
                            "What types of entities can be subjects of the property 'sleepLatency'?",
                            "Could there be a specific class that should serve as the domain for 'sleepLatency' rather than it being undefined?"
                        ]
                    },
                    {
                        "axiom": "sleepLatency range None",
                        "CQ": [
                            "What types of values can be assigned as the range for the property 'sleepLatency'?",
                            "Is it correct that the property 'sleepLatency' does not have a defined range?",
                            "Are there any constraints on the range of 'sleepLatency', or can it be associated with any type of value?"
                        ]
                    }
                ]
            },
            "numberOfPhoneConversations": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"numberOfPhoneConversations\" has no explicitly defined characteristics, domain, or range restrictions, and is not declared as a sub-property or inverse of any other property. Its intended use is to represent the number of telephone conversations associated with an entity, but its application is unconstrained in the current specification.",
                "CQ": [
                    {
                        "axiom": "numberOfPhoneConversations domain None",
                        "CQ": [
                            "Is it possible for 'numberOfPhoneConversations' to have a defined domain?",
                            "What types of entities can be subjects of the 'numberOfPhoneConversations' property?",
                            "Should 'numberOfPhoneConversations' be restricted to particular classes as its domain?"
                        ]
                    },
                    {
                        "axiom": "numberOfPhoneConversations range None",
                        "CQ": [
                            "Is it correct that the property 'numberOfPhoneConversations' does not have a specified range?",
                            "What types of values, if any, can be used as the range for the property 'numberOfPhoneConversations'?",
                            "Can the property 'numberOfPhoneConversations' be associated with entities of any type as its range?"
                        ]
                    }
                ]
            },
            "time:hasDurationDescription": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"time:hasDurationDescription\" has no specified domain, range, characteristics, super-properties, or inverse properties. It is used to associate entities with their duration descriptions, but no additional constraints or relationships are imposed by the current axioms.",
                "CQ": [
                    {
                        "axiom": "time:hasDurationDescription domain None",
                        "CQ": [
                            "What types of entities can be the subject of the property 'time:hasDurationDescription'?",
                            "Is it valid for the property 'time:hasDurationDescription' to have no specified domain?",
                            "Which classes, if any, are implicitly considered as the domain for 'time:hasDurationDescription'?"
                        ]
                    },
                    {
                        "axiom": "time:hasDurationDescription range None",
                        "CQ": [
                            "Is it accurate that the property 'time:hasDurationDescription' has no specified range?",
                            "What entities or data types can serve as the range for 'time:hasDurationDescription'?",
                            "Could 'time:hasDurationDescription' be used with values of any type, given it currently lacks a defined range?"
                        ]
                    }
                ]
            },
            "duration": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"duration\" has no explicitly defined domain, range, characteristics, super-properties, or inverse property. It is intended to represent the concept of duration, but no further constraints or relationships are specified by its current axioms.",
                "CQ": [
                    {
                        "axiom": "duration domain None",
                        "CQ": [
                            "What can be the domain of the property 'duration'?",
                            "Is it correct that 'duration' has no specified domain?",
                            "Are there entities that can act as the subject of 'duration', given its domain is undefined?"
                        ]
                    },
                    {
                        "axiom": "duration range None",
                        "CQ": [
                            "Is it accurate that the property 'duration' has no specified range?",
                            "What can be the range of the property 'duration'?",
                            "Can 'duration' refer to entities of any type as its range?"
                        ]
                    }
                ]
            },
            "numberOfBedExits": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"numberOfBedExits\" has no explicitly defined characteristics, domain, or range, and is not specified as a sub-property or inverse of any other property. Based on its name, it likely represents the quantity of times a bed exit occurs in a given context, but further specification of its scope and value type is not provided.",
                "CQ": [
                    {
                        "axiom": "numberOfBedExits domain None",
                        "CQ": [
                            "What can be the domain of the property 'numberOfBedExits'?",
                            "Is it correct that the property 'numberOfBedExits' does not have a defined domain?",
                            "Can 'numberOfBedExits' be associated with entities of any type, not restricted to a specific class?"
                        ]
                    },
                    {
                        "axiom": "numberOfBedExits range None",
                        "CQ": [
                            "What can be the range of the property 'numberOfBedExits'?",
                            "Is it correct that the property 'numberOfBedExits' has no range specified?",
                            "Are there any restrictions on what entities can appear as the value of 'numberOfBedExits'?"
                        ]
                    }
                ]
            },
            "involvementInDiscussion": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"involvementInDiscussion\" has no specified characteristics, domain, range, super-properties, or inverse properties. It is intended to relate two entities in the context of participation or involvement in a discussion, but its usage is unconstrained by ontological axioms.",
                "CQ": [
                    {
                        "axiom": "involvementInDiscussion domain None",
                        "CQ": [
                            "What types of entities can be the domain of the 'involvementInDiscussion' property?",
                            "Is it correct that the property 'involvementInDiscussion' has no specified domain?",
                            "Could 'involvementInDiscussion' have a domain other than those currently defined?"
                        ]
                    },
                    {
                        "axiom": "involvementInDiscussion range None",
                        "CQ": [
                            "Can involvementInDiscussion relate to entities other than those with a specified range?",
                            "Is it correct that the property involvementInDiscussion does not define any range?",
                            "What kinds of entities, if any, can be in the range of involvementInDiscussion?"
                        ]
                    }
                ]
            },
            "numberOfAwakenings": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"numberOfAwakenings\" has no defined domain, range, characteristics, super-properties, or inverse properties. It is intended to represent the number of times an awakening event occurs, but its usage is not currently constrained by axioms.",
                "CQ": [
                    {
                        "axiom": "numberOfAwakenings domain None",
                        "CQ": [
                            "Is it correct that the property 'numberOfAwakenings' does not have a defined domain?",
                            "What entities can serve as the domain for the property 'numberOfAwakenings'?",
                            "Can 'numberOfAwakenings' be associated with any type of subject regardless of its class?"
                        ]
                    },
                    {
                        "axiom": "numberOfAwakenings range None",
                        "CQ": [
                            "What are the possible ranges for the property 'numberOfAwakenings'?",
                            "Is it accurate that the property 'numberOfAwakenings' does not have a specified range?",
                            "Which types of values can appear as the object of 'numberOfAwakenings'?"
                        ]
                    }
                ]
            },
            "heartRate": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"heartRate\" has no specified domain, range, super-properties, or inverse properties, and lacks defined characteristics. Its intended use is to associate an entity with its heart rate, but no formal constraints on its usage are currently defined.",
                "CQ": [
                    {
                        "axiom": "heartRate domain None",
                        "CQ": [
                            "What entities can be the subject of the property 'heartRate'?",
                            "Is it correct that the property 'heartRate' does not have a defined domain?",
                            "Can 'heartRate' be used with any type of subject, or are there implicit constraints?"
                        ]
                    },
                    {
                        "axiom": "heartRate range None",
                        "CQ": [
                            "Is it correct that the property 'heartRate' does not specify any range?",
                            "What entities can be used as values for the property 'heartRate'?",
                            "Could there be a defined range for the property 'heartRate' in the ontology?"
                        ]
                    }
                ]
            },
            "stressLevel": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"stressLevel\" has no defined domain or range restrictions, and no specified characteristics, super-properties, or inverse properties. This indicates that \"stressLevel\" can relate any subject to any object, with its precise usage intended to be determined by context or further specification.",
                "CQ": [
                    {
                        "axiom": "stressLevel domain None",
                        "CQ": [
                            "What types of entities can be the subject of the property 'stressLevel'?",
                            "Is it correct that 'stressLevel' does not have a defined domain?",
                            "Can 'stressLevel' be associated with subjects other than a specific class?"
                        ]
                    },
                    {
                        "axiom": "stressLevel range None",
                        "CQ": [
                            "What types of values can be used as the range for the property 'stressLevel'?",
                            "Is it correct that the property 'stressLevel' does not have a specified range?",
                            "Could 'stressLevel' have a range other than what is currently defined?"
                        ]
                    }
                ]
            },
            "wakeUpTime": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"wakeUpTime\" has no explicitly defined characteristics, domain, range, super-properties, or inverse properties. Based on its name, it is likely intended to relate an entity to a time value indicating when waking up occurs, but no formal constraints or additional documentation are currently specified.",
                "CQ": [
                    {
                        "axiom": "wakeUpTime domain None",
                        "CQ": [
                            "What can be the domain of the property 'wakeUpTime'?",
                            "Is it correct that 'wakeUpTime' has no specified domain?",
                            "Can entities other than a specific class be subjects of the 'wakeUpTime' property?"
                        ]
                    },
                    {
                        "axiom": "wakeUpTime range None",
                        "CQ": [
                            "What types of values can be used as the range for the 'wakeUpTime' property?",
                            "Is it correct that the 'wakeUpTime' property does not have a defined range?",
                            "Can 'wakeUpTime' be associated with any data type or entity as its value?"
                        ]
                    }
                ]
            },
            "startTime": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"startTime\" has no specified domain or range restrictions and does not inherit from any super-property. It has no explicitly defined characteristics, nor is any inverse property specified. This property is intended to represent the beginning time of an event or process, though the exact usage context is unconstrained by current axioms.",
                "CQ": [
                    {
                        "axiom": "startTime domain None",
                        "CQ": [
                            "What types of entities can be the domain of the 'startTime' property?",
                            "Is it correct that 'startTime' does not specify any domain?",
                            "Can 'startTime' be assigned to any subject, regardless of type?"
                        ]
                    },
                    {
                        "axiom": "startTime range None",
                        "CQ": [
                            "Is it correct that the property 'startTime' does not have a defined range?",
                            "What kinds of entities can serve as the range for the property 'startTime'?",
                            "Can 'startTime' point to values other than those specified as its range?"
                        ]
                    }
                ]
            },
            "exerciseIntensity": {
                "axiom": {
                    "characteristics": [],
                    "domain": [
                        "None"
                    ],
                    "range": [
                        "None"
                    ],
                    "subPropertyOf": [],
                    "inverseOf": []
                },
                "description": "The property \"exerciseIntensity\" has no defined characteristics, domain, range, super-properties, or inverse properties. Based on its name, it is likely intended to relate an entity to a measure or classification of physical activity intensity, but no formal constraints or description are specified.",
                "CQ": [
                    {
                        "axiom": "exerciseIntensity domain None",
                        "CQ": [
                            "Is it correct that the property 'exerciseIntensity' does not specify any domain?",
                            "What types of entities can serve as the domain for the property 'exerciseIntensity'?",
                            "Can 'exerciseIntensity' be associated with subjects outside of any defined class?"
                        ]
                    },
                    {
                        "axiom": "exerciseIntensity range None",
                        "CQ": [
                            "What can be the range of the property 'exerciseIntensity'?",
                            "Is it correct that 'exerciseIntensity' does not specify a range for its values?",
                            "Are there entities that could be valid ranges for 'exerciseIntensity'?"
                        ]
                    }
                ]
            }
        }
    }
}